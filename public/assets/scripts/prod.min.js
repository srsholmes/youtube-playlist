(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";require("whatwg-fetch");var _components=require("./components");require("babelify/polyfill");var React=require("react"),injectTapEventPlugin=require("react-tap-event-plugin");injectTapEventPlugin(),window.React=React,React.render(React.createElement(_components.App,null),document.querySelector("div[app]"));


},{"./components":428,"babelify/polyfill":104,"react":404,"react-tap-event-plugin":231,"whatwg-fetch":425}],2:[function(require,module,exports){
module.exports={"default":require("core-js/library/fn/object/keys"),__esModule:!0};


},{"core-js/library/fn/object/keys":5}],3:[function(require,module,exports){
"use strict";exports["default"]=function(obj){return obj&&obj.__esModule?obj:{"default":obj}},exports.__esModule=!0;


},{}],4:[function(require,module,exports){
"use strict";exports["default"]=function(obj){return obj&&obj.__esModule?obj["default"]:obj},exports.__esModule=!0;


},{}],5:[function(require,module,exports){
require("../../modules/es6.object.statics-accept-primitives"),module.exports=require("../../modules/$").core.Object.keys;


},{"../../modules/$":9,"../../modules/es6.object.statics-accept-primitives":10}],6:[function(require,module,exports){
function ctx(fn,that){return function(){return fn.apply(that,arguments)}}function $def(type,name,source){var key,own,out,exp,isGlobal=type&$def.G,isProto=type&$def.P,target=isGlobal?global:type&$def.S?global[name]:(global[name]||{}).prototype,exports=isGlobal?core:core[name]||(core[name]={});isGlobal&&(source=name);for(key in source)own=!(type&$def.F)&&target&&key in target,own&&key in exports||(out=own?target[key]:source[key],isGlobal&&!isFunction(target[key])?exp=source[key]:type&$def.B&&own?exp=ctx(out,global):type&$def.W&&target[key]==out?!function(C){exp=function(param){return this instanceof C?new C(param):C(param)},exp.prototype=C.prototype}(out):exp=isProto&&isFunction(out)?ctx(Function.call,out):out,exports[key]=exp,isProto&&((exports.prototype||(exports.prototype={}))[key]=out))}var $=require("./$"),global=$.g,core=$.core,isFunction=$.isFunction;$def.F=1,$def.G=2,$def.S=4,$def.P=8,$def.B=16,$def.W=32,module.exports=$def;


},{"./$":9}],7:[function(require,module,exports){
module.exports=function($){return $.FW=!1,$.path=$.core,$};


},{}],8:[function(require,module,exports){
function getWindowNames(it){try{return getNames(it)}catch(e){return windowNames.slice()}}var $=require("./$"),toString={}.toString,getNames=$.getNames,windowNames="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];module.exports.get=function(it){return windowNames&&"[object Window]"==toString.call(it)?getWindowNames(it):getNames($.toObject(it))};


},{"./$":9}],9:[function(require,module,exports){
"use strict";function toInteger(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it)}function desc(bitmap,value){return{enumerable:!(1&bitmap),configurable:!(2&bitmap),writable:!(4&bitmap),value:value}}function simpleSet(object,key,value){return object[key]=value,object}function createDefiner(bitmap){return DESC?function(object,key,value){return $.setDesc(object,key,desc(bitmap,value))}:simpleSet}function isObject(it){return null!==it&&("object"==typeof it||"function"==typeof it)}function isFunction(it){return"function"==typeof it}function assertDefined(it){if(void 0==it)throw TypeError("Can't call method on  "+it);return it}var global="undefined"!=typeof self?self:Function("return this")(),core={},defineProperty=Object.defineProperty,hasOwnProperty={}.hasOwnProperty,ceil=Math.ceil,floor=Math.floor,max=Math.max,min=Math.min,DESC=!!function(){try{return 2==defineProperty({},"a",{get:function(){return 2}}).a}catch(e){}}(),hide=createDefiner(1),$=module.exports=require("./$.fw")({g:global,core:core,html:global.document&&document.documentElement,isObject:isObject,isFunction:isFunction,that:function(){return this},toInteger:toInteger,toLength:function(it){return it>0?min(toInteger(it),9007199254740991):0},toIndex:function(index,length){return index=toInteger(index),0>index?max(index+length,0):min(index,length)},has:function(it,key){return hasOwnProperty.call(it,key)},create:Object.create,getProto:Object.getPrototypeOf,DESC:DESC,desc:desc,getDesc:Object.getOwnPropertyDescriptor,setDesc:defineProperty,setDescs:Object.defineProperties,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:assertDefined,ES5Object:Object,toObject:function(it){return $.ES5Object(assertDefined(it))},hide:hide,def:createDefiner(0),set:global.Symbol?simpleSet:hide,each:[].forEach});"undefined"!=typeof __e&&(__e=core),"undefined"!=typeof __g&&(__g=global);


},{"./$.fw":7}],10:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def"),isObject=$.isObject,toObject=$.toObject;$.each.call("freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames".split(","),function(KEY,ID){var fn=($.core.Object||{})[KEY]||Object[KEY],forced=0,method={};method[KEY]=0==ID?function(it){return isObject(it)?fn(it):it}:1==ID?function(it){return isObject(it)?fn(it):it}:2==ID?function(it){return isObject(it)?fn(it):it}:3==ID?function(it){return isObject(it)?fn(it):!0}:4==ID?function(it){return isObject(it)?fn(it):!0}:5==ID?function(it){return isObject(it)?fn(it):!1}:6==ID?function(it,key){return fn(toObject(it),key)}:7==ID?function(it){return fn(Object($.assertDefined(it)))}:8==ID?function(it){return fn(toObject(it))}:require("./$.get-names").get;try{fn("z")}catch(e){forced=1}$def($def.S+$def.F*forced,"Object",method)});


},{"./$":9,"./$.def":6,"./$.get-names":8}],11:[function(require,module,exports){
(function (global){
"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var _toolsProtectJs2=require("./tools/protect.js"),_toolsProtectJs3=_interopRequireDefault(_toolsProtectJs2);if(require("core-js/shim"),require("regenerator/runtime"),_toolsProtectJs3["default"](module),global._babelPolyfill)throw new Error("only one instance of babel/polyfill is allowed");global._babelPolyfill=!0;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./tools/protect.js":12,"core-js/shim":101,"regenerator/runtime":102}],12:[function(require,module,exports){
(function (__dirname){
"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}exports.__esModule=!0;var _path=require("path"),_path2=_interopRequireDefault(_path),root=_path2["default"].resolve(__dirname,"../../../");exports["default"]=function(module){if(module.parent&&0!==module.parent.filename.indexOf(root))throw new Error("Don't hotlink internal Babel files.")},module.exports=exports["default"];


}).call(this,"/node_modules/babelify/node_modules/babel-core/lib/babel/tools")

},{"path":105}],13:[function(require,module,exports){
var $=require("./$");module.exports=function(IS_INCLUDES){return function($this,el,fromIndex){var value,O=$.toObject($this),length=$.toLength(O.length),index=$.toIndex(fromIndex,length);if(IS_INCLUDES&&el!=el){for(;length>index;)if(value=O[index++],value!=value)return!0}else for(;length>index;index++)if((IS_INCLUDES||index in O)&&O[index]===el)return IS_INCLUDES||index;return!IS_INCLUDES&&-1}};


},{"./$":34}],14:[function(require,module,exports){
var $=require("./$"),ctx=require("./$.ctx");module.exports=function(TYPE){var IS_MAP=1==TYPE,IS_FILTER=2==TYPE,IS_SOME=3==TYPE,IS_EVERY=4==TYPE,IS_FIND_INDEX=6==TYPE,NO_HOLES=5==TYPE||IS_FIND_INDEX;return function($this,callbackfn,that){for(var val,res,O=Object($.assertDefined($this)),self=$.ES5Object(O),f=ctx(callbackfn,that,3),length=$.toLength(self.length),index=0,result=IS_MAP?Array(length):IS_FILTER?[]:void 0;length>index;index++)if((NO_HOLES||index in self)&&(val=self[index],res=f(val,index,O),TYPE))if(IS_MAP)result[index]=res;else if(res)switch(TYPE){case 3:return!0;case 5:return val;case 6:return index;case 2:result.push(val)}else if(IS_EVERY)return!1;return IS_FIND_INDEX?-1:IS_SOME||IS_EVERY?IS_EVERY:result}};


},{"./$":34,"./$.ctx":22}],15:[function(require,module,exports){
function assert(condition,msg1,msg2){if(!condition)throw TypeError(msg2?msg1+msg2:msg1)}var $=require("./$");assert.def=$.assertDefined,assert.fn=function(it){if(!$.isFunction(it))throw TypeError(it+" is not a function!");return it},assert.obj=function(it){if(!$.isObject(it))throw TypeError(it+" is not an object!");return it},assert.inst=function(it,Constructor,name){if(!(it instanceof Constructor))throw TypeError(name+": use the 'new' operator!");return it},module.exports=assert;


},{"./$":34}],16:[function(require,module,exports){
var $=require("./$"),enumKeys=require("./$.enum-keys");module.exports=Object.assign||function(target,source){for(var T=Object($.assertDefined(target)),l=arguments.length,i=1;l>i;)for(var key,S=$.ES5Object(arguments[i++]),keys=enumKeys(S),length=keys.length,j=0;length>j;)T[key=keys[j++]]=S[key];return T};


},{"./$":34,"./$.enum-keys":25}],17:[function(require,module,exports){
function cof(it){return toString.call(it).slice(8,-1)}var $=require("./$"),TAG=require("./$.wks")("toStringTag"),toString={}.toString;cof.classof=function(it){var O,T;return void 0==it?void 0===it?"Undefined":"Null":"string"==typeof(T=(O=Object(it))[TAG])?T:cof(O)},cof.set=function(it,tag,stat){it&&!$.has(it=stat?it:it.prototype,TAG)&&$.hide(it,TAG,tag)},module.exports=cof;


},{"./$":34,"./$.wks":52}],18:[function(require,module,exports){
"use strict";function fastKey(it,create){if(!isObject(it))return"symbol"==typeof it?it:("string"==typeof it?"S":"P")+it;if(!$has(it,ID)){if(!isExtensible(it))return"F";if(!create)return"E";hide(it,ID,++id)}return"O"+it[ID]}function getEntry(that,key){var entry,index=fastKey(key);if("F"!==index)return that[O1][index];for(entry=that[FIRST];entry;entry=entry.n)if(entry.k==key)return entry}var $=require("./$"),ctx=require("./$.ctx"),safe=require("./$.uid").safe,assert=require("./$.assert"),forOf=require("./$.for-of"),step=require("./$.iter").step,$has=$.has,set=$.set,isObject=$.isObject,hide=$.hide,isExtensible=Object.isExtensible||isObject,ID=safe("id"),O1=safe("O1"),LAST=safe("last"),FIRST=safe("first"),ITER=safe("iter"),SIZE=$.DESC?safe("size"):"size",id=0;module.exports={getConstructor:function(wrapper,NAME,IS_MAP,ADDER){var C=wrapper(function(that,iterable){assert.inst(that,C,NAME),set(that,O1,$.create(null)),set(that,SIZE,0),set(that,LAST,void 0),set(that,FIRST,void 0),void 0!=iterable&&forOf(iterable,IS_MAP,that[ADDER],that)});return require("./$.mix")(C.prototype,{clear:function(){for(var that=this,data=that[O1],entry=that[FIRST];entry;entry=entry.n)entry.r=!0,entry.p&&(entry.p=entry.p.n=void 0),delete data[entry.i];that[FIRST]=that[LAST]=void 0,that[SIZE]=0},"delete":function(key){var that=this,entry=getEntry(that,key);if(entry){var next=entry.n,prev=entry.p;delete that[O1][entry.i],entry.r=!0,prev&&(prev.n=next),next&&(next.p=prev),that[FIRST]==entry&&(that[FIRST]=next),that[LAST]==entry&&(that[LAST]=prev),that[SIZE]--}return!!entry},forEach:function(callbackfn){for(var entry,f=ctx(callbackfn,arguments[1],3);entry=entry?entry.n:this[FIRST];)for(f(entry.v,entry.k,this);entry&&entry.r;)entry=entry.p},has:function(key){return!!getEntry(this,key)}}),$.DESC&&$.setDesc(C.prototype,"size",{get:function(){return assert.def(this[SIZE])}}),C},def:function(that,key,value){var prev,index,entry=getEntry(that,key);return entry?entry.v=value:(that[LAST]=entry={i:index=fastKey(key,!0),k:key,v:value,p:prev=that[LAST],n:void 0,r:!1},that[FIRST]||(that[FIRST]=entry),prev&&(prev.n=entry),that[SIZE]++,"F"!==index&&(that[O1][index]=entry)),that},getEntry:getEntry,setIter:function(C,NAME,IS_MAP){require("./$.iter-define")(C,NAME,function(iterated,kind){set(this,ITER,{o:iterated,k:kind})},function(){for(var iter=this[ITER],kind=iter.k,entry=iter.l;entry&&entry.r;)entry=entry.p;return iter.o&&(iter.l=entry=entry?entry.n:iter.o[FIRST])?"keys"==kind?step(0,entry.k):"values"==kind?step(0,entry.v):step(0,[entry.k,entry.v]):(iter.o=void 0,step(1))},IS_MAP?"entries":"values",!IS_MAP,!0)}};


},{"./$":34,"./$.assert":15,"./$.ctx":22,"./$.for-of":26,"./$.iter":33,"./$.iter-define":31,"./$.mix":36,"./$.uid":50}],19:[function(require,module,exports){
var $def=require("./$.def"),forOf=require("./$.for-of");module.exports=function(NAME){$def($def.P,NAME,{toJSON:function(){var arr=[];return forOf(this,!1,arr.push,arr),arr}})};


},{"./$.def":23,"./$.for-of":26}],20:[function(require,module,exports){
"use strict";function findFrozen(store,key){return find(store.array,function(it){return it[0]===key})}function leakStore(that){return that[LEAK]||hide(that,LEAK,{array:[],get:function(key){var entry=findFrozen(this,key);return entry?entry[1]:void 0},has:function(key){return!!findFrozen(this,key)},set:function(key,value){var entry=findFrozen(this,key);entry?entry[1]=value:this.array.push([key,value])},"delete":function(key){var index=findIndex(this.array,function(it){return it[0]===key});return~index&&this.array.splice(index,1),!!~index}})[LEAK]}var $=require("./$"),safe=require("./$.uid").safe,assert=require("./$.assert"),forOf=require("./$.for-of"),$has=$.has,isObject=$.isObject,hide=$.hide,isExtensible=Object.isExtensible||isObject,id=0,ID=safe("id"),WEAK=safe("weak"),LEAK=safe("leak"),method=require("./$.array-methods"),find=method(5),findIndex=method(6);module.exports={getConstructor:function(wrapper,NAME,IS_MAP,ADDER){var C=wrapper(function(that,iterable){$.set(assert.inst(that,C,NAME),ID,id++),void 0!=iterable&&forOf(iterable,IS_MAP,that[ADDER],that)});return require("./$.mix")(C.prototype,{"delete":function(key){return isObject(key)?isExtensible(key)?$has(key,WEAK)&&$has(key[WEAK],this[ID])&&delete key[WEAK][this[ID]]:leakStore(this)["delete"](key):!1},has:function(key){return isObject(key)?isExtensible(key)?$has(key,WEAK)&&$has(key[WEAK],this[ID]):leakStore(this).has(key):!1}}),C},def:function(that,key,value){return isExtensible(assert.obj(key))?($has(key,WEAK)||hide(key,WEAK,{}),key[WEAK][that[ID]]=value):leakStore(that).set(key,value),that},leakStore:leakStore,WEAK:WEAK,ID:ID};


},{"./$":34,"./$.array-methods":14,"./$.assert":15,"./$.for-of":26,"./$.mix":36,"./$.uid":50}],21:[function(require,module,exports){
"use strict";var $=require("./$"),$def=require("./$.def"),BUGGY=require("./$.iter").BUGGY,forOf=require("./$.for-of"),species=require("./$.species"),assertInstance=require("./$.assert").inst;module.exports=function(NAME,wrapper,methods,common,IS_MAP,IS_WEAK){function fixMethod(KEY){var fn=proto[KEY];require("./$.redef")(proto,KEY,"delete"==KEY?function(a){return fn.call(this,0===a?0:a)}:"has"==KEY?function(a){return fn.call(this,0===a?0:a)}:"get"==KEY?function(a){return fn.call(this,0===a?0:a)}:"add"==KEY?function(a){return fn.call(this,0===a?0:a),this}:function(a,b){return fn.call(this,0===a?0:a,b),this})}var Base=$.g[NAME],C=Base,ADDER=IS_MAP?"set":"add",proto=C&&C.prototype,O={};if($.isFunction(C)&&(IS_WEAK||!BUGGY&&proto.forEach&&proto.entries)){var buggyZero,inst=new C,chain=inst[ADDER](IS_WEAK?{}:-0,1);require("./$.iter-detect")(function(iter){new C(iter)})||(C=wrapper(function(target,iterable){assertInstance(target,C,NAME);var that=new Base;return void 0!=iterable&&forOf(iterable,IS_MAP,that[ADDER],that),that}),C.prototype=proto,proto.constructor=C),IS_WEAK||inst.forEach(function(val,key){buggyZero=1/key===-(1/0)}),buggyZero&&(fixMethod("delete"),fixMethod("has"),IS_MAP&&fixMethod("get")),(buggyZero||chain!==inst)&&fixMethod(ADDER)}else C=common.getConstructor(wrapper,NAME,IS_MAP,ADDER),require("./$.mix")(C.prototype,methods);return require("./$.cof").set(C,NAME),O[NAME]=C,$def($def.G+$def.W+$def.F*(C!=Base),O),species(C),species($.core[NAME]),IS_WEAK||common.setIter(C,NAME,IS_MAP),C};


},{"./$":34,"./$.assert":15,"./$.cof":17,"./$.def":23,"./$.for-of":26,"./$.iter":33,"./$.iter-detect":32,"./$.mix":36,"./$.redef":39,"./$.species":44}],22:[function(require,module,exports){
var assertFunction=require("./$.assert").fn;module.exports=function(fn,that,length){if(assertFunction(fn),~length&&void 0===that)return fn;switch(length){case 1:return function(a){return fn.call(that,a)};case 2:return function(a,b){return fn.call(that,a,b)};case 3:return function(a,b,c){return fn.call(that,a,b,c)}}return function(){return fn.apply(that,arguments)}};


},{"./$.assert":15}],23:[function(require,module,exports){
function ctx(fn,that){return function(){return fn.apply(that,arguments)}}function $def(type,name,source){var key,own,out,exp,isGlobal=type&$def.G,isProto=type&$def.P,target=isGlobal?global:type&$def.S?global[name]:(global[name]||{}).prototype,exports=isGlobal?core:core[name]||(core[name]={});isGlobal&&(source=name);for(key in source)own=!(type&$def.F)&&target&&key in target,out=(own?target:source)[key],exp=type&$def.B&&own?ctx(out,global):isProto&&isFunction(out)?ctx(Function.call,out):out,target&&!own&&$redef(target,key,out),exports[key]!=out&&$.hide(exports,key,exp),isProto&&((exports.prototype||(exports.prototype={}))[key]=out)}var $=require("./$"),global=$.g,core=$.core,isFunction=$.isFunction,$redef=require("./$.redef");global.core=core,$def.F=1,$def.G=2,$def.S=4,$def.P=8,$def.B=16,$def.W=32,module.exports=$def;


},{"./$":34,"./$.redef":39}],24:[function(require,module,exports){
var $=require("./$"),document=$.g.document,isObject=$.isObject,is=isObject(document)&&isObject(document.createElement);module.exports=function(it){return is?document.createElement(it):{}};


},{"./$":34}],25:[function(require,module,exports){
var $=require("./$");module.exports=function(it){var keys=$.getKeys(it),getDesc=$.getDesc,getSymbols=$.getSymbols;return getSymbols&&$.each.call(getSymbols(it),function(key){getDesc(it,key).enumerable&&keys.push(key)}),keys};


},{"./$":34}],26:[function(require,module,exports){
var ctx=require("./$.ctx"),get=require("./$.iter").get,call=require("./$.iter-call");module.exports=function(iterable,entries,fn,that){for(var step,iterator=get(iterable),f=ctx(fn,that,entries?2:1);!(step=iterator.next()).done;)if(call(iterator,f,step.value,entries)===!1)return call.close(iterator)};


},{"./$.ctx":22,"./$.iter":33,"./$.iter-call":30}],27:[function(require,module,exports){
module.exports=function($){return $.FW=!0,$.path=$.g,$};


},{}],28:[function(require,module,exports){
function getWindowNames(it){try{return getNames(it)}catch(e){return windowNames.slice()}}var $=require("./$"),toString={}.toString,getNames=$.getNames,windowNames="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];module.exports.get=function(it){return windowNames&&"[object Window]"==toString.call(it)?getWindowNames(it):getNames($.toObject(it))};


},{"./$":34}],29:[function(require,module,exports){
module.exports=function(fn,args,that){var un=void 0===that;switch(args.length){case 0:return un?fn():fn.call(that);case 1:return un?fn(args[0]):fn.call(that,args[0]);case 2:return un?fn(args[0],args[1]):fn.call(that,args[0],args[1]);case 3:return un?fn(args[0],args[1],args[2]):fn.call(that,args[0],args[1],args[2]);case 4:return un?fn(args[0],args[1],args[2],args[3]):fn.call(that,args[0],args[1],args[2],args[3]);case 5:return un?fn(args[0],args[1],args[2],args[3],args[4]):fn.call(that,args[0],args[1],args[2],args[3],args[4])}return fn.apply(that,args)};


},{}],30:[function(require,module,exports){
function close(iterator){var ret=iterator["return"];void 0!==ret&&assertObject(ret.call(iterator))}function call(iterator,fn,value,entries){try{return entries?fn(assertObject(value)[0],value[1]):fn(value)}catch(e){throw close(iterator),e}}var assertObject=require("./$.assert").obj;call.close=close,module.exports=call;


},{"./$.assert":15}],31:[function(require,module,exports){
var $def=require("./$.def"),$redef=require("./$.redef"),$=require("./$"),cof=require("./$.cof"),$iter=require("./$.iter"),SYMBOL_ITERATOR=require("./$.wks")("iterator"),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",Iterators=$iter.Iterators;module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCE){function createMethod(kind){function $$(that){return new Constructor(that,kind)}switch(kind){case KEYS:return function(){return $$(this)};case VALUES:return function(){return $$(this)}}return function(){return $$(this)}}$iter.create(Constructor,NAME,next);var methods,key,TAG=NAME+" Iterator",proto=Base.prototype,_native=proto[SYMBOL_ITERATOR]||proto[FF_ITERATOR]||DEFAULT&&proto[DEFAULT],_default=_native||createMethod(DEFAULT);if(_native){var IteratorPrototype=$.getProto(_default.call(new Base));cof.set(IteratorPrototype,TAG,!0),$.FW&&$.has(proto,FF_ITERATOR)&&$iter.set(IteratorPrototype,$.that)}if(($.FW||FORCE)&&$iter.set(proto,_default),Iterators[NAME]=_default,Iterators[TAG]=$.that,DEFAULT)if(methods={keys:IS_SET?_default:createMethod(KEYS),values:DEFAULT==VALUES?_default:createMethod(VALUES),entries:DEFAULT!=VALUES?_default:createMethod("entries")},FORCE)for(key in methods)key in proto||$redef(proto,key,methods[key]);else $def($def.P+$def.F*$iter.BUGGY,NAME,methods)};


},{"./$":34,"./$.cof":17,"./$.def":23,"./$.iter":33,"./$.redef":39,"./$.wks":52}],32:[function(require,module,exports){
var SYMBOL_ITERATOR=require("./$.wks")("iterator"),SAFE_CLOSING=!1;try{var riter=[7][SYMBOL_ITERATOR]();riter["return"]=function(){SAFE_CLOSING=!0},Array.from(riter,function(){throw 2})}catch(e){}module.exports=function(exec){if(!SAFE_CLOSING)return!1;var safe=!1;try{var arr=[7],iter=arr[SYMBOL_ITERATOR]();iter.next=function(){safe=!0},arr[SYMBOL_ITERATOR]=function(){return iter},exec(arr)}catch(e){}return safe};


},{"./$.wks":52}],33:[function(require,module,exports){
"use strict";function setIterator(O,value){$.hide(O,SYMBOL_ITERATOR,value),FF_ITERATOR in[]&&$.hide(O,FF_ITERATOR,value)}var $=require("./$"),cof=require("./$.cof"),classof=cof.classof,assert=require("./$.assert"),assertObject=assert.obj,SYMBOL_ITERATOR=require("./$.wks")("iterator"),FF_ITERATOR="@@iterator",Iterators=require("./$.shared")("iterators"),IteratorPrototype={};setIterator(IteratorPrototype,$.that),module.exports={BUGGY:"keys"in[]&&!("next"in[].keys()),Iterators:Iterators,step:function(done,value){return{value:value,done:!!done}},is:function(it){var O=Object(it),Symbol=$.g.Symbol;return(Symbol&&Symbol.iterator||FF_ITERATOR)in O||SYMBOL_ITERATOR in O||$.has(Iterators,classof(O))},get:function(it){var getIter,Symbol=$.g.Symbol;return void 0!=it&&(getIter=it[Symbol&&Symbol.iterator||FF_ITERATOR]||it[SYMBOL_ITERATOR]||Iterators[classof(it)]),assert($.isFunction(getIter),it," is not iterable!"),assertObject(getIter.call(it))},set:setIterator,create:function(Constructor,NAME,next,proto){Constructor.prototype=$.create(proto||IteratorPrototype,{next:$.desc(1,next)}),cof.set(Constructor,NAME+" Iterator")}};


},{"./$":34,"./$.assert":15,"./$.cof":17,"./$.shared":43,"./$.wks":52}],34:[function(require,module,exports){
"use strict";function toInteger(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it)}function desc(bitmap,value){return{enumerable:!(1&bitmap),configurable:!(2&bitmap),writable:!(4&bitmap),value:value}}function simpleSet(object,key,value){return object[key]=value,object}function createDefiner(bitmap){return DESC?function(object,key,value){return $.setDesc(object,key,desc(bitmap,value))}:simpleSet}function isObject(it){return null!==it&&("object"==typeof it||"function"==typeof it)}function isFunction(it){return"function"==typeof it}function assertDefined(it){if(void 0==it)throw TypeError("Can't call method on  "+it);return it}var global="undefined"!=typeof self?self:Function("return this")(),core={},defineProperty=Object.defineProperty,hasOwnProperty={}.hasOwnProperty,ceil=Math.ceil,floor=Math.floor,max=Math.max,min=Math.min,DESC=!!function(){try{return 2==defineProperty({},"a",{get:function(){return 2}}).a}catch(e){}}(),hide=createDefiner(1),$=module.exports=require("./$.fw")({g:global,core:core,html:global.document&&document.documentElement,isObject:isObject,isFunction:isFunction,that:function(){return this},toInteger:toInteger,toLength:function(it){return it>0?min(toInteger(it),9007199254740991):0},toIndex:function(index,length){return index=toInteger(index),0>index?max(index+length,0):min(index,length)},has:function(it,key){return hasOwnProperty.call(it,key)},create:Object.create,getProto:Object.getPrototypeOf,DESC:DESC,desc:desc,getDesc:Object.getOwnPropertyDescriptor,setDesc:defineProperty,setDescs:Object.defineProperties,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:assertDefined,ES5Object:Object,toObject:function(it){return $.ES5Object(assertDefined(it))},hide:hide,def:createDefiner(0),set:global.Symbol?simpleSet:hide,each:[].forEach});"undefined"!=typeof __e&&(__e=core),"undefined"!=typeof __g&&(__g=global);


},{"./$.fw":27}],35:[function(require,module,exports){
var $=require("./$");module.exports=function(object,el){for(var key,O=$.toObject(object),keys=$.getKeys(O),length=keys.length,index=0;length>index;)if(O[key=keys[index++]]===el)return key};


},{"./$":34}],36:[function(require,module,exports){
var $redef=require("./$.redef");module.exports=function(target,src){for(var key in src)$redef(target,key,src[key]);return target};


},{"./$.redef":39}],37:[function(require,module,exports){
var $=require("./$"),assertObject=require("./$.assert").obj;module.exports=function(it){assertObject(it);var keys=$.getNames(it),getSymbols=$.getSymbols;return getSymbols?keys.concat(getSymbols(it)):keys};


},{"./$":34,"./$.assert":15}],38:[function(require,module,exports){
"use strict";var $=require("./$"),invoke=require("./$.invoke"),assertFunction=require("./$.assert").fn;module.exports=function(){for(var fn=assertFunction(this),length=arguments.length,pargs=Array(length),i=0,_=$.path._,holder=!1;length>i;)(pargs[i]=arguments[i++])===_&&(holder=!0);return function(){var args,that=this,_length=arguments.length,j=0,k=0;if(!holder&&!_length)return invoke(fn,pargs,that);if(args=pargs.slice(),holder)for(;length>j;j++)args[j]===_&&(args[j]=arguments[k++]);for(;_length>k;)args.push(arguments[k++]);return invoke(fn,args,that)}};


},{"./$":34,"./$.assert":15,"./$.invoke":29}],39:[function(require,module,exports){
function $redef(O,key,val,safe){if($.isFunction(val)){var base=O[key];$.hide(val,SRC,base?String(base):tpl.replace(/hasOwnProperty/,String(key))),"name"in val||(val.name=key)}O===$.g?O[key]=val:(safe||delete O[key],$.hide(O,key,val))}var $=require("./$"),tpl=String({}.hasOwnProperty),SRC=require("./$.uid").safe("src"),_toString=Function.toString;$redef(Function.prototype,"toString",function(){return $.has(this,SRC)?this[SRC]:_toString.call(this)}),$.core.inspectSource=function(it){return _toString.call(it)},module.exports=$redef;


},{"./$":34,"./$.uid":50}],40:[function(require,module,exports){
"use strict";module.exports=function(regExp,replace,isStatic){var replacer=replace===Object(replace)?function(part){return replace[part]}:replace;return function(it){return String(isStatic?it:this).replace(regExp,replacer)}};


},{}],41:[function(require,module,exports){
module.exports=Object.is||function(x,y){return x===y?0!==x||1/x===1/y:x!=x&&y!=y};


},{}],42:[function(require,module,exports){
function check(O,proto){assert.obj(O),assert(null===proto||$.isObject(proto),proto,": can't set as prototype!")}var $=require("./$"),assert=require("./$.assert");module.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(buggy,set){try{set=require("./$.ctx")(Function.call,$.getDesc(Object.prototype,"__proto__").set,2),set({},[])}catch(e){buggy=!0}return function(O,proto){return check(O,proto),buggy?O.__proto__=proto:set(O,proto),O}}():void 0),check:check};


},{"./$":34,"./$.assert":15,"./$.ctx":22}],43:[function(require,module,exports){
var $=require("./$"),SHARED="__core-js_shared__",store=$.g[SHARED]||($.g[SHARED]={});module.exports=function(key){return store[key]||(store[key]={})};


},{"./$":34}],44:[function(require,module,exports){
var $=require("./$"),SPECIES=require("./$.wks")("species");module.exports=function(C){!$.DESC||SPECIES in C||$.setDesc(C,SPECIES,{configurable:!0,get:$.that})};


},{"./$":34,"./$.wks":52}],45:[function(require,module,exports){
var $=require("./$");module.exports=function(TO_STRING){return function(that,pos){var a,b,s=String($.assertDefined(that)),i=$.toInteger(pos),l=s.length;return 0>i||i>=l?TO_STRING?"":void 0:(a=s.charCodeAt(i),55296>a||a>56319||i+1===l||(b=s.charCodeAt(i+1))<56320||b>57343?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):(a-55296<<10)+(b-56320)+65536)}};


},{"./$":34}],46:[function(require,module,exports){
var $=require("./$"),repeat=require("./$.string-repeat");module.exports=function(that,minLength,fillChar,left){var S=String($.assertDefined(that));if(void 0===minLength)return S;var intMinLength=$.toInteger(minLength),fillLen=intMinLength-S.length;if(0>fillLen||fillLen===1/0)throw new RangeError("Cannot satisfy string length "+minLength+" for string: "+S);var sFillStr=void 0===fillChar?" ":String(fillChar),sFillVal=repeat.call(sFillStr,Math.ceil(fillLen/sFillStr.length));return sFillVal.length>fillLen&&(sFillVal=left?sFillVal.slice(sFillVal.length-fillLen):sFillVal.slice(0,fillLen)),left?sFillVal.concat(S):S.concat(sFillVal)};


},{"./$":34,"./$.string-repeat":47}],47:[function(require,module,exports){
"use strict";var $=require("./$");module.exports=function(count){var str=String($.assertDefined(this)),res="",n=$.toInteger(count);if(0>n||n==1/0)throw RangeError("Count can't be negative");for(;n>0;(n>>>=1)&&(str+=str))1&n&&(res+=str);return res};


},{"./$":34}],48:[function(require,module,exports){
"use strict";function run(){var id=+this;if($.has(queue,id)){var fn=queue[id];delete queue[id],fn()}}function listner(event){run.call(event.data)}var $=require("./$"),ctx=require("./$.ctx"),cof=require("./$.cof"),invoke=require("./$.invoke"),cel=require("./$.dom-create"),global=$.g,isFunction=$.isFunction,html=$.html,process=global.process,setTask=global.setImmediate,clearTask=global.clearImmediate,MessageChannel=global.MessageChannel,counter=0,queue={},ONREADYSTATECHANGE="onreadystatechange",defer,channel,port;isFunction(setTask)&&isFunction(clearTask)||(setTask=function(fn){for(var args=[],i=1;arguments.length>i;)args.push(arguments[i++]);return queue[++counter]=function(){invoke(isFunction(fn)?fn:Function(fn),args)},defer(counter),counter},clearTask=function(id){delete queue[id]},"process"==cof(process)?defer=function(id){process.nextTick(ctx(run,id,1))}:global.addEventListener&&isFunction(global.postMessage)&&!global.importScripts?(defer=function(id){global.postMessage(id,"*")},global.addEventListener("message",listner,!1)):isFunction(MessageChannel)?(channel=new MessageChannel,port=channel.port2,channel.port1.onmessage=listner,defer=ctx(port.postMessage,port,1)):defer=ONREADYSTATECHANGE in cel("script")?function(id){html.appendChild(cel("script"))[ONREADYSTATECHANGE]=function(){html.removeChild(this),run.call(id)}}:function(id){setTimeout(ctx(run,id,1),0)}),module.exports={set:setTask,clear:clearTask};


},{"./$":34,"./$.cof":17,"./$.ctx":22,"./$.dom-create":24,"./$.invoke":29}],49:[function(require,module,exports){
module.exports=function(exec){try{return exec(),!1}catch(e){return!0}};


},{}],50:[function(require,module,exports){
function uid(key){return"Symbol(".concat(void 0===key?"":key,")_",(++sid+Math.random()).toString(36))}var sid=0;uid.safe=require("./$").g.Symbol||uid,module.exports=uid;


},{"./$":34}],51:[function(require,module,exports){
var UNSCOPABLES=require("./$.wks")("unscopables");UNSCOPABLES in[]||require("./$").hide(Array.prototype,UNSCOPABLES,{}),module.exports=function(key){[][UNSCOPABLES][key]=!0};


},{"./$":34,"./$.wks":52}],52:[function(require,module,exports){
var global=require("./$").g,store=require("./$.shared")("wks");module.exports=function(name){return store[name]||(store[name]=global.Symbol&&global.Symbol[name]||require("./$.uid").safe("Symbol."+name))};


},{"./$":34,"./$.shared":43,"./$.uid":50}],53:[function(require,module,exports){
function createGetKeys(names,length){return function(object){var key,O=toObject(object),i=0,result=[];for(key in O)key!=IE_PROTO&&has(O,key)&&result.push(key);for(;length>i;)has(O,key=names[i++])&&(~$indexOf(result,key)||result.push(key));return result}}function Empty(){}function createArrayReduce(isRight){return function(callbackfn,memo){assert.fn(callbackfn);var O=toObject(this),length=toLength(O.length),index=isRight?length-1:0,i=isRight?-1:1;if(arguments.length<2)for(;;){if(index in O){memo=O[index],index+=i;break}index+=i,assert(isRight?index>=0:length>index,"Reduce of empty array with no initial value")}for(;isRight?index>=0:length>index;index+=i)index in O&&(memo=callbackfn(memo,O[index],index,this));return memo}}function lz(num){return num>9?num:"0"+num}var $=require("./$"),cel=require("./$.dom-create"),cof=require("./$.cof"),$def=require("./$.def"),invoke=require("./$.invoke"),arrayMethod=require("./$.array-methods"),IE_PROTO=require("./$.uid").safe("__proto__"),assert=require("./$.assert"),assertObject=assert.obj,ObjectProto=Object.prototype,html=$.html,A=[],_slice=A.slice,_join=A.join,classof=cof.classof,has=$.has,defineProperty=$.setDesc,getOwnDescriptor=$.getDesc,defineProperties=$.setDescs,isFunction=$.isFunction,isObject=$.isObject,toObject=$.toObject,toLength=$.toLength,toIndex=$.toIndex,IE8_DOM_DEFINE=!1,$indexOf=require("./$.array-includes")(!1),$forEach=arrayMethod(0),$map=arrayMethod(1),$filter=arrayMethod(2),$some=arrayMethod(3),$every=arrayMethod(4);if(!$.DESC){try{IE8_DOM_DEFINE=8==defineProperty(cel("div"),"x",{get:function(){return 8}}).x}catch(e){}$.setDesc=function(O,P,Attributes){if(IE8_DOM_DEFINE)try{return defineProperty(O,P,Attributes)}catch(e){}if("get"in Attributes||"set"in Attributes)throw TypeError("Accessors not supported!");return"value"in Attributes&&(assertObject(O)[P]=Attributes.value),O},$.getDesc=function(O,P){if(IE8_DOM_DEFINE)try{return getOwnDescriptor(O,P)}catch(e){}return has(O,P)?$.desc(!ObjectProto.propertyIsEnumerable.call(O,P),O[P]):void 0},$.setDescs=defineProperties=function(O,Properties){assertObject(O);for(var P,keys=$.getKeys(Properties),length=keys.length,i=0;length>i;)$.setDesc(O,P=keys[i++],Properties[P]);return O}}$def($def.S+$def.F*!$.DESC,"Object",{getOwnPropertyDescriptor:$.getDesc,defineProperty:$.setDesc,defineProperties:defineProperties});var keys1="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),keys2=keys1.concat("length","prototype"),keysLen1=keys1.length,createDict=function(){var iframeDocument,iframe=cel("iframe"),i=keysLen1,gt=">";for(iframe.style.display="none",html.appendChild(iframe),iframe.src="javascript:",iframeDocument=iframe.contentWindow.document,iframeDocument.open(),iframeDocument.write("<script>document.F=Object</script"+gt),iframeDocument.close(),createDict=iframeDocument.F;i--;)delete createDict.prototype[keys1[i]];return createDict()};$def($def.S,"Object",{getPrototypeOf:$.getProto=$.getProto||function(O){return O=Object(assert.def(O)),has(O,IE_PROTO)?O[IE_PROTO]:isFunction(O.constructor)&&O instanceof O.constructor?O.constructor.prototype:O instanceof Object?ObjectProto:null},getOwnPropertyNames:$.getNames=$.getNames||createGetKeys(keys2,keys2.length,!0),create:$.create=$.create||function(O,Properties){var result;return null!==O?(Empty.prototype=assertObject(O),result=new Empty,Empty.prototype=null,result[IE_PROTO]=O):result=createDict(),void 0===Properties?result:defineProperties(result,Properties)},keys:$.getKeys=$.getKeys||createGetKeys(keys1,keysLen1,!1),seal:function(it){return it},freeze:function(it){return it},preventExtensions:function(it){return it},isSealed:function(it){return!isObject(it)},isFrozen:function(it){return!isObject(it)},isExtensible:function(it){return isObject(it)}}),$def($def.P,"Function",{bind:function(that){function bound(){var args=partArgs.concat(_slice.call(arguments)),constr=this instanceof bound,ctx=constr?$.create(fn.prototype):that,result=invoke(fn,args,ctx);return constr?ctx:result}var fn=assert.fn(this),partArgs=_slice.call(arguments,1);return fn.prototype&&(bound.prototype=fn.prototype),bound}}),0 in Object("z")&&"z"=="z"[0]||($.ES5Object=function(it){return"String"==cof(it)?it.split(""):Object(it)});var buggySlice=!0;try{html&&_slice.call(html),buggySlice=!1}catch(e){}$def($def.P+$def.F*buggySlice,"Array",{slice:function(begin,end){var len=toLength(this.length),klass=cof(this);if(end=void 0===end?len:end,"Array"==klass)return _slice.call(this,begin,end);for(var start=toIndex(begin,len),upTo=toIndex(end,len),size=toLength(upTo-start),cloned=Array(size),i=0;size>i;i++)cloned[i]="String"==klass?this.charAt(start+i):this[start+i];return cloned}}),$def($def.P+$def.F*($.ES5Object!=Object),"Array",{join:function(){return _join.apply($.ES5Object(this),arguments)}}),$def($def.S,"Array",{isArray:function(arg){return"Array"==cof(arg)}}),$def($def.P,"Array",{forEach:$.each=$.each||function(callbackfn){return $forEach(this,callbackfn,arguments[1])},map:function(callbackfn){return $map(this,callbackfn,arguments[1])},filter:function(callbackfn){return $filter(this,callbackfn,arguments[1])},some:function(callbackfn){return $some(this,callbackfn,arguments[1])},every:function(callbackfn){return $every(this,callbackfn,arguments[1])},reduce:createArrayReduce(!1),reduceRight:createArrayReduce(!0),indexOf:function(el){return $indexOf(this,el,arguments[1])},lastIndexOf:function(el,fromIndex){var O=toObject(this),length=toLength(O.length),index=length-1;for(arguments.length>1&&(index=Math.min(index,$.toInteger(fromIndex))),0>index&&(index=toLength(length+index));index>=0;index--)if(index in O&&O[index]===el)return index;return-1}}),$def($def.P,"String",{trim:require("./$.replacer")(/^\s*([\s\S]*\S)?\s*$/,"$1")}),$def($def.S,"Date",{now:function(){return+new Date}});var date=new Date(-5e13-1),brokenDate=!(date.toISOString&&"0385-07-25T07:06:39.999Z"==date.toISOString()&&require("./$.throws")(function(){new Date(NaN).toISOString()}));$def($def.P+$def.F*brokenDate,"Date",{toISOString:function(){if(!isFinite(this))throw RangeError("Invalid time value");var d=this,y=d.getUTCFullYear(),m=d.getUTCMilliseconds(),s=0>y?"-":y>9999?"+":"";return s+("00000"+Math.abs(y)).slice(s?-6:-4)+"-"+lz(d.getUTCMonth()+1)+"-"+lz(d.getUTCDate())+"T"+lz(d.getUTCHours())+":"+lz(d.getUTCMinutes())+":"+lz(d.getUTCSeconds())+"."+(m>99?m:"0"+lz(m))+"Z"}}),"Object"==classof(function(){return arguments}())&&(cof.classof=function(it){var tag=classof(it);return"Object"==tag&&isFunction(it.callee)?"Arguments":tag});


},{"./$":34,"./$.array-includes":13,"./$.array-methods":14,"./$.assert":15,"./$.cof":17,"./$.def":23,"./$.dom-create":24,"./$.invoke":29,"./$.replacer":40,"./$.throws":49,"./$.uid":50}],54:[function(require,module,exports){
"use strict";var $=require("./$"),$def=require("./$.def"),toIndex=$.toIndex;$def($def.P,"Array",{copyWithin:function(target,start){var O=Object($.assertDefined(this)),len=$.toLength(O.length),to=toIndex(target,len),from=toIndex(start,len),end=arguments[2],fin=void 0===end?len:toIndex(end,len),count=Math.min(fin-from,len-to),inc=1;for(to>from&&from+count>to&&(inc=-1,from=from+count-1,to=to+count-1);count-->0;)from in O?O[to]=O[from]:delete O[to],to+=inc,from+=inc;return O}}),require("./$.unscope")("copyWithin");


},{"./$":34,"./$.def":23,"./$.unscope":51}],55:[function(require,module,exports){
"use strict";var $=require("./$"),$def=require("./$.def"),toIndex=$.toIndex;$def($def.P,"Array",{fill:function(value){for(var O=Object($.assertDefined(this)),length=$.toLength(O.length),index=toIndex(arguments[1],length),end=arguments[2],endPos=void 0===end?length:toIndex(end,length);endPos>index;)O[index++]=value;return O}}),require("./$.unscope")("fill");


},{"./$":34,"./$.def":23,"./$.unscope":51}],56:[function(require,module,exports){
"use strict";var KEY="findIndex",$def=require("./$.def"),forced=!0,$find=require("./$.array-methods")(6);KEY in[]&&Array(1)[KEY](function(){forced=!1}),$def($def.P+$def.F*forced,"Array",{findIndex:function(callbackfn){return $find(this,callbackfn,arguments[1])}}),require("./$.unscope")(KEY);


},{"./$.array-methods":14,"./$.def":23,"./$.unscope":51}],57:[function(require,module,exports){
"use strict";var KEY="find",$def=require("./$.def"),forced=!0,$find=require("./$.array-methods")(5);KEY in[]&&Array(1)[KEY](function(){forced=!1}),$def($def.P+$def.F*forced,"Array",{find:function(callbackfn){return $find(this,callbackfn,arguments[1])}}),require("./$.unscope")(KEY);


},{"./$.array-methods":14,"./$.def":23,"./$.unscope":51}],58:[function(require,module,exports){
var $=require("./$"),ctx=require("./$.ctx"),$def=require("./$.def"),$iter=require("./$.iter"),call=require("./$.iter-call");$def($def.S+$def.F*!require("./$.iter-detect")(function(iter){Array.from(iter)}),"Array",{from:function(arrayLike){var length,result,step,iterator,O=Object($.assertDefined(arrayLike)),mapfn=arguments[1],mapping=void 0!==mapfn,f=mapping?ctx(mapfn,arguments[2],2):void 0,index=0;if($iter.is(O))for(iterator=$iter.get(O),result=new("function"==typeof this?this:Array);!(step=iterator.next()).done;index++)result[index]=mapping?call(iterator,f,[step.value,index],!0):step.value;else for(result=new("function"==typeof this?this:Array)(length=$.toLength(O.length));length>index;index++)result[index]=mapping?f(O[index],index):O[index];return result.length=index,result}});


},{"./$":34,"./$.ctx":22,"./$.def":23,"./$.iter":33,"./$.iter-call":30,"./$.iter-detect":32}],59:[function(require,module,exports){
var $=require("./$"),setUnscope=require("./$.unscope"),ITER=require("./$.uid").safe("iter"),$iter=require("./$.iter"),step=$iter.step,Iterators=$iter.Iterators;require("./$.iter-define")(Array,"Array",function(iterated,kind){$.set(this,ITER,{o:$.toObject(iterated),i:0,k:kind})},function(){var iter=this[ITER],O=iter.o,kind=iter.k,index=iter.i++;return!O||index>=O.length?(iter.o=void 0,step(1)):"keys"==kind?step(0,index):"values"==kind?step(0,O[index]):step(0,[index,O[index]])},"values"),Iterators.Arguments=Iterators.Array,setUnscope("keys"),setUnscope("values"),setUnscope("entries");


},{"./$":34,"./$.iter":33,"./$.iter-define":31,"./$.uid":50,"./$.unscope":51}],60:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Array",{of:function(){for(var index=0,length=arguments.length,result=new("function"==typeof this?this:Array)(length);length>index;)result[index]=arguments[index++];return result.length=length,result}});


},{"./$.def":23}],61:[function(require,module,exports){
require("./$.species")(Array);


},{"./$.species":44}],62:[function(require,module,exports){
var $=require("./$"),HAS_INSTANCE=require("./$.wks")("hasInstance"),FunctionProto=Function.prototype;HAS_INSTANCE in FunctionProto||$.setDesc(FunctionProto,HAS_INSTANCE,{value:function(O){if(!$.isFunction(this)||!$.isObject(O))return!1;if(!$.isObject(this.prototype))return O instanceof this;for(;O=$.getProto(O);)if(this.prototype===O)return!0;return!1}});


},{"./$":34,"./$.wks":52}],63:[function(require,module,exports){
"use strict";var $=require("./$"),NAME="name",setDesc=$.setDesc,FunctionProto=Function.prototype;NAME in FunctionProto||$.FW&&$.DESC&&setDesc(FunctionProto,NAME,{configurable:!0,get:function(){var match=String(this).match(/^\s*function ([^ (]*)/),name=match?match[1]:"";return $.has(this,NAME)||setDesc(this,NAME,$.desc(5,name)),name},set:function(value){$.has(this,NAME)||setDesc(this,NAME,$.desc(0,value))}});


},{"./$":34}],64:[function(require,module,exports){
"use strict";var strong=require("./$.collection-strong");require("./$.collection")("Map",function(get){return function(){return get(this,arguments[0])}},{get:function(key){var entry=strong.getEntry(this,key);return entry&&entry.v},set:function(key,value){return strong.def(this,0===key?0:key,value)}},strong,!0);


},{"./$.collection":21,"./$.collection-strong":18}],65:[function(require,module,exports){
function roundTiesToEven(n){return n+1/EPSILON-1/EPSILON}function sign(x){return 0==(x=+x)||x!=x?x:0>x?-1:1}function asinh(x){return isFinite(x=+x)&&0!=x?0>x?-asinh(-x):log(x+sqrt(x*x+1)):x}function expm1(x){return 0==(x=+x)?x:x>-1e-6&&1e-6>x?x+x*x/2:exp(x)-1}var Infinity=1/0,$def=require("./$.def"),E=Math.E,pow=Math.pow,abs=Math.abs,exp=Math.exp,log=Math.log,sqrt=Math.sqrt,ceil=Math.ceil,floor=Math.floor,EPSILON=pow(2,-52),EPSILON32=pow(2,-23),MAX32=pow(2,127)*(2-EPSILON32),MIN32=pow(2,-126);$def($def.S,"Math",{acosh:function(x){return(x=+x)<1?NaN:isFinite(x)?log(x/E+sqrt(x+1)*sqrt(x-1)/E)+1:x},asinh:asinh,atanh:function(x){return 0==(x=+x)?x:log((1+x)/(1-x))/2},cbrt:function(x){return sign(x=+x)*pow(abs(x),1/3)},clz32:function(x){return(x>>>=0)?31-floor(log(x+.5)*Math.LOG2E):32},cosh:function(x){return(exp(x=+x)+exp(-x))/2},expm1:expm1,fround:function(x){var a,result,$abs=abs(x),$sign=sign(x);return MIN32>$abs?$sign*roundTiesToEven($abs/MIN32/EPSILON32)*MIN32*EPSILON32:(a=(1+EPSILON32/EPSILON)*$abs,result=a-(a-$abs),result>MAX32||result!=result?$sign*Infinity:$sign*result)},hypot:function(value1,value2){for(var arg,div,sum=0,i=0,len=arguments.length,larg=0;len>i;)arg=abs(arguments[i++]),arg>larg?(div=larg/arg,sum=sum*div*div+1,larg=arg):arg>0?(div=arg/larg,sum+=div*div):sum+=arg;return larg===Infinity?Infinity:larg*sqrt(sum)},imul:function(x,y){var UInt16=65535,xn=+x,yn=+y,xl=UInt16&xn,yl=UInt16&yn;return 0|xl*yl+((UInt16&xn>>>16)*yl+xl*(UInt16&yn>>>16)<<16>>>0)},log1p:function(x){return(x=+x)>-1e-8&&1e-8>x?x-x*x/2:log(1+x)},log10:function(x){return log(x)/Math.LN10},log2:function(x){return log(x)/Math.LN2},sign:sign,sinh:function(x){return abs(x=+x)<1?(expm1(x)-expm1(-x))/2:(exp(x-1)-exp(-x-1))*(E/2)},tanh:function(x){var a=expm1(x=+x),b=expm1(-x);return a==Infinity?1:b==Infinity?-1:(a-b)/(exp(x)+exp(-x))},trunc:function(it){return(it>0?floor:ceil)(it)}});


},{"./$.def":23}],66:[function(require,module,exports){
"use strict";function toPrimitive(it){var fn,val;if(isFunction(fn=it.valueOf)&&!isObject(val=fn.call(it)))return val;if(isFunction(fn=it.toString)&&!isObject(val=fn.call(it)))return val;throw TypeError("Can't convert object to number")}function toNumber(it){if(isObject(it)&&(it=toPrimitive(it)),"string"==typeof it&&it.length>2&&48==it.charCodeAt(0)){var binary=!1;switch(it.charCodeAt(1)){case 66:case 98:binary=!0;case 79:case 111:return parseInt(it.slice(2),binary?2:8)}}return+it}var $=require("./$"),isObject=$.isObject,isFunction=$.isFunction,NUMBER="Number",$Number=$.g[NUMBER],Base=$Number,proto=$Number.prototype;!$.FW||$Number("0o1")&&$Number("0b1")||($Number=function(it){return this instanceof $Number?new Base(toNumber(it)):toNumber(it)},$.each.call($.DESC?$.getNames(Base):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),function(key){$.has(Base,key)&&!$.has($Number,key)&&$.setDesc($Number,key,$.getDesc(Base,key))}),$Number.prototype=proto,proto.constructor=$Number,require("./$.redef")($.g,NUMBER,$Number));


},{"./$":34,"./$.redef":39}],67:[function(require,module,exports){
function isInteger(it){return!$.isObject(it)&&_isFinite(it)&&floor(it)===it}var $=require("./$"),$def=require("./$.def"),abs=Math.abs,floor=Math.floor,_isFinite=$.g.isFinite,MAX_SAFE_INTEGER=9007199254740991;$def($def.S,"Number",{EPSILON:Math.pow(2,-52),isFinite:function(it){return"number"==typeof it&&_isFinite(it)},isInteger:isInteger,isNaN:function(number){return number!=number},isSafeInteger:function(number){return isInteger(number)&&abs(number)<=MAX_SAFE_INTEGER},MAX_SAFE_INTEGER:MAX_SAFE_INTEGER,MIN_SAFE_INTEGER:-MAX_SAFE_INTEGER,parseFloat:parseFloat,parseInt:parseInt});


},{"./$":34,"./$.def":23}],68:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{assign:require("./$.assign")});


},{"./$.assign":16,"./$.def":23}],69:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{is:require("./$.same")});


},{"./$.def":23,"./$.same":41}],70:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{setPrototypeOf:require("./$.set-proto").set});


},{"./$.def":23,"./$.set-proto":42}],71:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def"),isObject=$.isObject,toObject=$.toObject;$.each.call("freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames".split(","),function(KEY,ID){var fn=($.core.Object||{})[KEY]||Object[KEY],forced=0,method={};method[KEY]=0==ID?function(it){return isObject(it)?fn(it):it}:1==ID?function(it){return isObject(it)?fn(it):it}:2==ID?function(it){return isObject(it)?fn(it):it}:3==ID?function(it){return isObject(it)?fn(it):!0}:4==ID?function(it){return isObject(it)?fn(it):!0}:5==ID?function(it){return isObject(it)?fn(it):!1}:6==ID?function(it,key){return fn(toObject(it),key)}:7==ID?function(it){return fn(Object($.assertDefined(it)))}:8==ID?function(it){return fn(toObject(it))}:require("./$.get-names").get;try{fn("z")}catch(e){forced=1}$def($def.S+$def.F*forced,"Object",method)});


},{"./$":34,"./$.def":23,"./$.get-names":28}],72:[function(require,module,exports){
"use strict";var cof=require("./$.cof"),tmp={};tmp[require("./$.wks")("toStringTag")]="z",require("./$").FW&&"z"!=cof(tmp)&&require("./$.redef")(Object.prototype,"toString",function(){return"[object "+cof.classof(this)+"]"},!0);


},{"./$":34,"./$.cof":17,"./$.redef":39,"./$.wks":52}],73:[function(require,module,exports){
"use strict";function testResolve(sub){var test=new P(function(){});return sub&&(test.constructor=Object),P.resolve(test)===test}function isPromise(it){return isObject(it)&&(useNative?"Promise"==cof.classof(it):RECORD in it)}function sameConstructor(a,b){return $.FW||a!==P||b!==Wrapper?same(a,b):!0}function getConstructor(C){var S=assertObject(C)[SPECIES];return void 0!=S?S:C}function isThenable(it){var then;return isObject(it)&&(then=it.then),isFunction(then)?then:!1}function notify(record){var chain=record.c;chain.length&&asap.call(global,function(){function run(react){var ret,then,cb=ok?react.ok:react.fail;try{cb?(ok||(record.h=!0),ret=cb===!0?value:cb(value),ret===react.P?react.rej(TypeError("Promise-chain cycle")):(then=isThenable(ret))?then.call(ret,react.res,react.rej):react.res(ret)):react.rej(value)}catch(err){react.rej(err)}}for(var value=record.v,ok=1==record.s,i=0;chain.length>i;)run(chain[i++]);chain.length=0})}function isUnhandled(promise){var react,record=promise[RECORD],chain=record.a||record.c,i=0;if(record.h)return!1;for(;chain.length>i;)if(react=chain[i++],react.fail||!isUnhandled(react.P))return!1;return!0}function $reject(value){var promise,record=this;record.d||(record.d=!0,record=record.r||record,record.v=value,record.s=2,record.a=record.c.slice(),setTimeout(function(){asap.call(global,function(){isUnhandled(promise=record.p)&&(isNode?process.emit("unhandledRejection",value,promise):global.console&&console.error&&console.error("Unhandled promise rejection",value)),record.a=void 0})},1),notify(record))}function $resolve(value){var then,record=this;if(!record.d){record.d=!0,record=record.r||record;try{(then=isThenable(value))?asap.call(global,function(){var wrapper={r:record,d:!1};try{then.call(value,ctx($resolve,wrapper,1),ctx($reject,wrapper,1))}catch(e){$reject.call(wrapper,e)}}):(record.v=value,record.s=1,notify(record))}catch(e){$reject.call({r:record,d:!1},e)}}}var $=require("./$"),ctx=require("./$.ctx"),cof=require("./$.cof"),$def=require("./$.def"),assert=require("./$.assert"),forOf=require("./$.for-of"),setProto=require("./$.set-proto").set,same=require("./$.same"),species=require("./$.species"),SPECIES=require("./$.wks")("species"),RECORD=require("./$.uid").safe("record"),PROMISE="Promise",global=$.g,process=global.process,isNode="process"==cof(process),asap=process&&process.nextTick||require("./$.task").set,P=global[PROMISE],isFunction=$.isFunction,isObject=$.isObject,assertFunction=assert.fn,assertObject=assert.obj,Wrapper,useNative=function(){function P2(x){var self=new P(x);return setProto(self,P2.prototype),self}var works=!1;try{if(works=isFunction(P)&&isFunction(P.resolve)&&testResolve(),setProto(P2,P),P2.prototype=$.create(P.prototype,{constructor:{value:P2}}),P2.resolve(5).then(function(){})instanceof P2||(works=!1),works&&$.DESC){var thenableThenGotten=!1;P.resolve($.setDesc({},"then",{get:function(){thenableThenGotten=!0}})),works=thenableThenGotten}}catch(e){works=!1}return works}();useNative||(P=function(executor){assertFunction(executor);var record={p:assert.inst(this,P,PROMISE),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1};$.hide(this,RECORD,record);try{executor(ctx($resolve,record,1),ctx($reject,record,1))}catch(err){$reject.call(record,err)}},require("./$.mix")(P.prototype,{then:function(onFulfilled,onRejected){var S=assertObject(assertObject(this).constructor)[SPECIES],react={ok:isFunction(onFulfilled)?onFulfilled:!0,fail:isFunction(onRejected)?onRejected:!1},promise=react.P=new(void 0!=S?S:P)(function(res,rej){react.res=assertFunction(res),react.rej=assertFunction(rej)}),record=this[RECORD];return record.c.push(react),record.a&&record.a.push(react),record.s&&notify(record),promise},"catch":function(onRejected){return this.then(void 0,onRejected)}})),$def($def.G+$def.W+$def.F*!useNative,{Promise:P}),cof.set(P,PROMISE),species(P),species(Wrapper=$.core[PROMISE]),$def($def.S+$def.F*!useNative,PROMISE,{reject:function(r){return new(getConstructor(this))(function(res,rej){rej(r)})}}),$def($def.S+$def.F*(!useNative||testResolve(!0)),PROMISE,{resolve:function(x){return isPromise(x)&&sameConstructor(x.constructor,this)?x:new this(function(res){res(x)})}}),$def($def.S+$def.F*!(useNative&&require("./$.iter-detect")(function(iter){P.all(iter)["catch"](function(){})})),PROMISE,{all:function(iterable){var C=getConstructor(this),values=[];return new C(function(res,rej){forOf(iterable,!1,values.push,values);var remaining=values.length,results=Array(remaining);remaining?$.each.call(values,function(promise,index){C.resolve(promise).then(function(value){results[index]=value,--remaining||res(results)},rej)}):res(results)})},race:function(iterable){var C=getConstructor(this);return new C(function(res,rej){forOf(iterable,!1,function(promise){C.resolve(promise).then(res,rej)})})}});


},{"./$":34,"./$.assert":15,"./$.cof":17,"./$.ctx":22,"./$.def":23,"./$.for-of":26,"./$.iter-detect":32,"./$.mix":36,"./$.same":41,"./$.set-proto":42,"./$.species":44,"./$.task":48,"./$.uid":50,"./$.wks":52}],74:[function(require,module,exports){
function Enumerate(iterated){$.set(this,ITER,{o:iterated,k:void 0,i:0})}var $=require("./$"),$def=require("./$.def"),setProto=require("./$.set-proto"),$iter=require("./$.iter"),ITERATOR=require("./$.wks")("iterator"),ITER=require("./$.uid").safe("iter"),step=$iter.step,assert=require("./$.assert"),isObject=$.isObject,getProto=$.getProto,$Reflect=$.g.Reflect,_apply=Function.apply,assertObject=assert.obj,_isExtensible=Object.isExtensible||isObject,_preventExtensions=Object.preventExtensions,buggyEnumerate=!($Reflect&&$Reflect.enumerate&&ITERATOR in $Reflect.enumerate({}));$iter.create(Enumerate,"Object",function(){var key,iter=this[ITER],keys=iter.k;if(void 0==keys){iter.k=keys=[];for(key in iter.o)keys.push(key)}do if(iter.i>=keys.length)return step(1);while(!((key=keys[iter.i++])in iter.o));return step(0,key)});var reflect={apply:function(target,thisArgument,argumentsList){return _apply.call(target,thisArgument,argumentsList)},construct:function(target,argumentsList){var proto=assert.fn(arguments.length<3?target:arguments[2]).prototype,instance=$.create(isObject(proto)?proto:Object.prototype),result=_apply.call(target,instance,argumentsList);return isObject(result)?result:instance},defineProperty:function(target,propertyKey,attributes){assertObject(target);try{return $.setDesc(target,propertyKey,attributes),!0}catch(e){return!1}},deleteProperty:function(target,propertyKey){var desc=$.getDesc(assertObject(target),propertyKey);return desc&&!desc.configurable?!1:delete target[propertyKey]},get:function get(target,propertyKey){var proto,receiver=arguments.length<3?target:arguments[2],desc=$.getDesc(assertObject(target),propertyKey);return desc?$.has(desc,"value")?desc.value:void 0===desc.get?void 0:desc.get.call(receiver):isObject(proto=getProto(target))?get(proto,propertyKey,receiver):void 0},getOwnPropertyDescriptor:function(target,propertyKey){return $.getDesc(assertObject(target),propertyKey)},getPrototypeOf:function(target){return getProto(assertObject(target))},has:function(target,propertyKey){return propertyKey in target},isExtensible:function(target){return _isExtensible(assertObject(target))},ownKeys:require("./$.own-keys"),preventExtensions:function(target){assertObject(target);try{return _preventExtensions&&_preventExtensions(target),!0}catch(e){return!1}},set:function set(target,propertyKey,V){var existingDescriptor,proto,receiver=arguments.length<4?target:arguments[3],ownDesc=$.getDesc(assertObject(target),propertyKey);if(!ownDesc){if(isObject(proto=getProto(target)))return set(proto,propertyKey,V,receiver);ownDesc=$.desc(0)}return $.has(ownDesc,"value")?ownDesc.writable!==!1&&isObject(receiver)?(existingDescriptor=$.getDesc(receiver,propertyKey)||$.desc(0),existingDescriptor.value=V,$.setDesc(receiver,propertyKey,existingDescriptor),!0):!1:void 0===ownDesc.set?!1:(ownDesc.set.call(receiver,V),!0)}};setProto&&(reflect.setPrototypeOf=function(target,proto){setProto.check(target,proto);try{return setProto.set(target,proto),!0}catch(e){return!1}}),$def($def.G,{Reflect:{}}),$def($def.S+$def.F*buggyEnumerate,"Reflect",{enumerate:function(target){return new Enumerate(assertObject(target))}}),$def($def.S,"Reflect",reflect);


},{"./$":34,"./$.assert":15,"./$.def":23,"./$.iter":33,"./$.own-keys":37,"./$.set-proto":42,"./$.uid":50,"./$.wks":52}],75:[function(require,module,exports){
var $=require("./$"),cof=require("./$.cof"),$RegExp=$.g.RegExp,Base=$RegExp,proto=$RegExp.prototype,re=/a/g,CORRECT_NEW=new $RegExp(re)!==re,ALLOWS_RE_WITH_FLAGS=function(){try{return"/a/i"==$RegExp(re,"i")}catch(e){}}();$.FW&&$.DESC&&(CORRECT_NEW&&ALLOWS_RE_WITH_FLAGS||($RegExp=function(pattern,flags){var patternIsRegExp="RegExp"==cof(pattern),flagsIsUndefined=void 0===flags;return this instanceof $RegExp||!patternIsRegExp||!flagsIsUndefined?CORRECT_NEW?new Base(patternIsRegExp&&!flagsIsUndefined?pattern.source:pattern,flags):new Base(patternIsRegExp?pattern.source:pattern,patternIsRegExp&&flagsIsUndefined?pattern.flags:flags):pattern},$.each.call($.getNames(Base),function(key){key in $RegExp||$.setDesc($RegExp,key,{configurable:!0,get:function(){return Base[key]},set:function(it){Base[key]=it}})}),proto.constructor=$RegExp,$RegExp.prototype=proto,require("./$.redef")($.g,"RegExp",$RegExp)),"g"!=/./g.flags&&$.setDesc(proto,"flags",{configurable:!0,get:require("./$.replacer")(/^.*\/(\w*)$/,"$1")})),require("./$.species")($RegExp);


},{"./$":34,"./$.cof":17,"./$.redef":39,"./$.replacer":40,"./$.species":44}],76:[function(require,module,exports){
"use strict";var strong=require("./$.collection-strong");require("./$.collection")("Set",function(get){return function(){return get(this,arguments[0])}},{add:function(value){return strong.def(this,value=0===value?0:value,value)}},strong);


},{"./$.collection":21,"./$.collection-strong":18}],77:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$at=require("./$.string-at")(!1);$def($def.P,"String",{codePointAt:function(pos){return $at(this,pos)}});


},{"./$.def":23,"./$.string-at":45}],78:[function(require,module,exports){
"use strict";var $=require("./$"),cof=require("./$.cof"),$def=require("./$.def"),toLength=$.toLength;$def($def.P+$def.F*!require("./$.throws")(function(){"q".endsWith(/./)}),"String",{endsWith:function(searchString){if("RegExp"==cof(searchString))throw TypeError();var that=String($.assertDefined(this)),endPosition=arguments[1],len=toLength(that.length),end=void 0===endPosition?len:Math.min(toLength(endPosition),len);return searchString+="",that.slice(end-searchString.length,end)===searchString}});


},{"./$":34,"./$.cof":17,"./$.def":23,"./$.throws":49}],79:[function(require,module,exports){
var $def=require("./$.def"),toIndex=require("./$").toIndex,fromCharCode=String.fromCharCode,$fromCodePoint=String.fromCodePoint;$def($def.S+$def.F*(!!$fromCodePoint&&1!=$fromCodePoint.length),"String",{fromCodePoint:function(x){for(var code,res=[],len=arguments.length,i=0;len>i;){if(code=+arguments[i++],toIndex(code,1114111)!==code)throw RangeError(code+" is not a valid code point");res.push(65536>code?fromCharCode(code):fromCharCode(((code-=65536)>>10)+55296,code%1024+56320))}return res.join("")}});


},{"./$":34,"./$.def":23}],80:[function(require,module,exports){
"use strict";var $=require("./$"),cof=require("./$.cof"),$def=require("./$.def");$def($def.P,"String",{includes:function(searchString){if("RegExp"==cof(searchString))throw TypeError();return!!~String($.assertDefined(this)).indexOf(searchString,arguments[1])}});


},{"./$":34,"./$.cof":17,"./$.def":23}],81:[function(require,module,exports){
var set=require("./$").set,$at=require("./$.string-at")(!0),ITER=require("./$.uid").safe("iter"),$iter=require("./$.iter"),step=$iter.step;require("./$.iter-define")(String,"String",function(iterated){set(this,ITER,{o:String(iterated),i:0})},function(){var point,iter=this[ITER],O=iter.o,index=iter.i;return index>=O.length?step(1):(point=$at(O,index),iter.i+=point.length,step(0,point))});


},{"./$":34,"./$.iter":33,"./$.iter-define":31,"./$.string-at":45,"./$.uid":50}],82:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def");$def($def.S,"String",{raw:function(callSite){for(var tpl=$.toObject(callSite.raw),len=$.toLength(tpl.length),sln=arguments.length,res=[],i=0;len>i;)res.push(String(tpl[i++])),sln>i&&res.push(String(arguments[i]));return res.join("")}});


},{"./$":34,"./$.def":23}],83:[function(require,module,exports){
var $def=require("./$.def");$def($def.P,"String",{repeat:require("./$.string-repeat")});


},{"./$.def":23,"./$.string-repeat":47}],84:[function(require,module,exports){
"use strict";var $=require("./$"),cof=require("./$.cof"),$def=require("./$.def");$def($def.P+$def.F*!require("./$.throws")(function(){"q".startsWith(/./)}),"String",{startsWith:function(searchString){if("RegExp"==cof(searchString))throw TypeError();var that=String($.assertDefined(this)),index=$.toLength(Math.min(arguments[1],that.length));return searchString+="",that.slice(index,index+searchString.length)===searchString}});


},{"./$":34,"./$.cof":17,"./$.def":23,"./$.throws":49}],85:[function(require,module,exports){
"use strict";function wrap(tag){var sym=AllSymbols[tag]=$.set($create($Symbol.prototype),TAG,tag);return DESC&&setter&&setSymbolDesc(ObjectProto,tag,{configurable:!0,set:function(value){has(this,HIDDEN)&&has(this[HIDDEN],tag)&&(this[HIDDEN][tag]=!1),setSymbolDesc(this,tag,desc(1,value))}}),sym}function defineProperty(it,key,D){return D&&has(AllSymbols,key)?(D.enumerable?(has(it,HIDDEN)&&it[HIDDEN][key]&&(it[HIDDEN][key]=!1),D=$create(D,{enumerable:desc(0,!1)})):(has(it,HIDDEN)||setDesc(it,HIDDEN,desc(1,{})),it[HIDDEN][key]=!0),setSymbolDesc(it,key,D)):setDesc(it,key,D)}function defineProperties(it,P){assertObject(it);for(var key,keys=enumKeys(P=toObject(P)),i=0,l=keys.length;l>i;)defineProperty(it,key=keys[i++],P[key]);return it}function create(it,P){return void 0===P?$create(it):defineProperties($create(it),P)}function propertyIsEnumerable(key){var E=_propertyIsEnumerable.call(this,key);return E||!has(this,key)||!has(AllSymbols,key)||has(this,HIDDEN)&&this[HIDDEN][key]?E:!0}function getOwnPropertyDescriptor(it,key){var D=getDesc(it=toObject(it),key);return!D||!has(AllSymbols,key)||has(it,HIDDEN)&&it[HIDDEN][key]||(D.enumerable=!0),D}function getOwnPropertyNames(it){for(var key,names=getNames(toObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])||key==HIDDEN||result.push(key);return result}function getOwnPropertySymbols(it){for(var key,names=getNames(toObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])&&result.push(AllSymbols[key]);return result}var $=require("./$"),setTag=require("./$.cof").set,uid=require("./$.uid"),shared=require("./$.shared"),$def=require("./$.def"),$redef=require("./$.redef"),keyOf=require("./$.keyof"),enumKeys=require("./$.enum-keys"),assertObject=require("./$.assert").obj,ObjectProto=Object.prototype,DESC=$.DESC,has=$.has,$create=$.create,getDesc=$.getDesc,setDesc=$.setDesc,desc=$.desc,$names=require("./$.get-names"),getNames=$names.get,toObject=$.toObject,$Symbol=$.g.Symbol,setter=!1,TAG=uid("tag"),HIDDEN=uid("hidden"),_propertyIsEnumerable={}.propertyIsEnumerable,SymbolRegistry=shared("symbol-registry"),AllSymbols=shared("symbols"),useNative=$.isFunction($Symbol),setSymbolDesc=DESC?function(){try{return $create(setDesc({},HIDDEN,{get:function(){return setDesc(this,HIDDEN,{value:!1})[HIDDEN]}}))[HIDDEN]||setDesc}catch(e){return function(it,key,D){var protoDesc=getDesc(ObjectProto,key);protoDesc&&delete ObjectProto[key],setDesc(it,key,D),protoDesc&&it!==ObjectProto&&setDesc(ObjectProto,key,protoDesc)}}}():setDesc;useNative||($Symbol=function(){if(this instanceof $Symbol)throw TypeError("Symbol is not a constructor");return wrap(uid(arguments[0]))},$redef($Symbol.prototype,"toString",function(){return this[TAG]}),$.create=create,$.setDesc=defineProperty,$.getDesc=getOwnPropertyDescriptor,$.setDescs=defineProperties,$.getNames=$names.get=getOwnPropertyNames,$.getSymbols=getOwnPropertySymbols,$.DESC&&$.FW&&$redef(ObjectProto,"propertyIsEnumerable",propertyIsEnumerable,!0));var symbolStatics={"for":function(key){return has(SymbolRegistry,key+="")?SymbolRegistry[key]:SymbolRegistry[key]=$Symbol(key)},keyFor:function(key){return keyOf(SymbolRegistry,key)},useSetter:function(){setter=!0},useSimple:function(){setter=!1}};$.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(it){var sym=require("./$.wks")(it);symbolStatics[it]=useNative?sym:wrap(sym)}),setter=!0,$def($def.G+$def.W,{Symbol:$Symbol}),$def($def.S,"Symbol",symbolStatics),$def($def.S+$def.F*!useNative,"Object",{create:create,defineProperty:defineProperty,defineProperties:defineProperties,getOwnPropertyDescriptor:getOwnPropertyDescriptor,getOwnPropertyNames:getOwnPropertyNames,getOwnPropertySymbols:getOwnPropertySymbols}),setTag($Symbol,"Symbol"),setTag(Math,"Math",!0),setTag($.g.JSON,"JSON",!0);


},{"./$":34,"./$.assert":15,"./$.cof":17,"./$.def":23,"./$.enum-keys":25,"./$.get-names":28,"./$.keyof":35,"./$.redef":39,"./$.shared":43,"./$.uid":50,"./$.wks":52}],86:[function(require,module,exports){
"use strict";var $=require("./$"),weak=require("./$.collection-weak"),leakStore=weak.leakStore,ID=weak.ID,WEAK=weak.WEAK,has=$.has,isObject=$.isObject,isExtensible=Object.isExtensible||isObject,tmp={},$WeakMap=require("./$.collection")("WeakMap",function(get){return function(){return get(this,arguments[0])}},{get:function(key){if(isObject(key)){if(!isExtensible(key))return leakStore(this).get(key);if(has(key,WEAK))return key[WEAK][this[ID]]}},set:function(key,value){return weak.def(this,key,value)}},weak,!0,!0);7!=(new $WeakMap).set((Object.freeze||Object)(tmp),7).get(tmp)&&$.each.call(["delete","has","get","set"],function(key){var proto=$WeakMap.prototype,method=proto[key];require("./$.redef")(proto,key,function(a,b){if(isObject(a)&&!isExtensible(a)){var result=leakStore(this)[key](a,b);return"set"==key?this:result}return method.call(this,a,b)})});


},{"./$":34,"./$.collection":21,"./$.collection-weak":20,"./$.redef":39}],87:[function(require,module,exports){
"use strict";var weak=require("./$.collection-weak");require("./$.collection")("WeakSet",function(get){return function(){return get(this,arguments[0])}},{add:function(value){return weak.def(this,value,!0)}},weak,!1,!0);


},{"./$.collection":21,"./$.collection-weak":20}],88:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$includes=require("./$.array-includes")(!0);$def($def.P,"Array",{includes:function(el){return $includes(this,el,arguments[1])}}),require("./$.unscope")("includes");


},{"./$.array-includes":13,"./$.def":23,"./$.unscope":51}],89:[function(require,module,exports){
require("./$.collection-to-json")("Map");


},{"./$.collection-to-json":19}],90:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def"),ownKeys=require("./$.own-keys");$def($def.S,"Object",{getOwnPropertyDescriptors:function(object){var O=$.toObject(object),result={};return $.each.call(ownKeys(O),function(key){$.setDesc(result,key,$.desc(0,$.getDesc(O,key)))}),result}});


},{"./$":34,"./$.def":23,"./$.own-keys":37}],91:[function(require,module,exports){
function createObjectToArray(isEntries){return function(object){var key,O=$.toObject(object),keys=$.getKeys(O),length=keys.length,i=0,result=Array(length);if(isEntries)for(;length>i;)result[i]=[key=keys[i++],O[key]];else for(;length>i;)result[i]=O[keys[i++]];return result}}var $=require("./$"),$def=require("./$.def");$def($def.S,"Object",{values:createObjectToArray(!1),entries:createObjectToArray(!0)});


},{"./$":34,"./$.def":23}],92:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"RegExp",{escape:require("./$.replacer")(/[\\^$*+?.()|[\]{}]/g,"\\$&",!0)});


},{"./$.def":23,"./$.replacer":40}],93:[function(require,module,exports){
require("./$.collection-to-json")("Set");


},{"./$.collection-to-json":19}],94:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$at=require("./$.string-at")(!0);$def($def.P,"String",{at:function(pos){return $at(this,pos)}});


},{"./$.def":23,"./$.string-at":45}],95:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$pad=require("./$.string-pad");$def($def.P,"String",{lpad:function(n){return $pad(this,n,arguments[1],!0)}});


},{"./$.def":23,"./$.string-pad":46}],96:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$pad=require("./$.string-pad");$def($def.P,"String",{rpad:function(n){return $pad(this,n,arguments[1],!1)}});


},{"./$.def":23,"./$.string-pad":46}],97:[function(require,module,exports){
function setStatics(keys,length){$.each.call(keys.split(","),function(key){void 0==length&&key in $Array?statics[key]=$Array[key]:key in[]&&(statics[key]=require("./$.ctx")(Function.call,[][key],length))})}var $=require("./$"),$def=require("./$.def"),$Array=$.core.Array||Array,statics={};setStatics("pop,reverse,shift,keys,values,entries",1),setStatics("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),setStatics("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill,turn"),$def($def.S,"Array",statics);


},{"./$":34,"./$.ctx":22,"./$.def":23}],98:[function(require,module,exports){
require("./es6.array.iterator");var $=require("./$"),Iterators=require("./$.iter").Iterators,ITERATOR=require("./$.wks")("iterator"),ArrayValues=Iterators.Array,NL=$.g.NodeList,HTC=$.g.HTMLCollection,NLProto=NL&&NL.prototype,HTCProto=HTC&&HTC.prototype;$.FW&&(!NL||ITERATOR in NLProto||$.hide(NLProto,ITERATOR,ArrayValues),!HTC||ITERATOR in HTCProto||$.hide(HTCProto,ITERATOR,ArrayValues)),Iterators.NodeList=Iterators.HTMLCollection=ArrayValues;


},{"./$":34,"./$.iter":33,"./$.wks":52,"./es6.array.iterator":59}],99:[function(require,module,exports){
var $def=require("./$.def"),$task=require("./$.task");$def($def.G+$def.B,{setImmediate:$task.set,clearImmediate:$task.clear});


},{"./$.def":23,"./$.task":48}],100:[function(require,module,exports){
function wrap(set){return MSIE?function(fn,time){return set(invoke(partial,[].slice.call(arguments,2),$.isFunction(fn)?fn:Function(fn)),time)}:set}var $=require("./$"),$def=require("./$.def"),invoke=require("./$.invoke"),partial=require("./$.partial"),navigator=$.g.navigator,MSIE=!!navigator&&/MSIE .\./.test(navigator.userAgent);$def($def.G+$def.B+$def.F*MSIE,{setTimeout:wrap($.g.setTimeout),setInterval:wrap($.g.setInterval)});


},{"./$":34,"./$.def":23,"./$.invoke":29,"./$.partial":38}],101:[function(require,module,exports){
require("./modules/es5"),require("./modules/es6.symbol"),require("./modules/es6.object.assign"),require("./modules/es6.object.is"),require("./modules/es6.object.set-prototype-of"),require("./modules/es6.object.to-string"),require("./modules/es6.object.statics-accept-primitives"),require("./modules/es6.function.name"),require("./modules/es6.function.has-instance"),require("./modules/es6.number.constructor"),require("./modules/es6.number.statics"),require("./modules/es6.math"),require("./modules/es6.string.from-code-point"),require("./modules/es6.string.raw"),require("./modules/es6.string.iterator"),require("./modules/es6.string.code-point-at"),require("./modules/es6.string.ends-with"),require("./modules/es6.string.includes"),require("./modules/es6.string.repeat"),require("./modules/es6.string.starts-with"),require("./modules/es6.array.from"),require("./modules/es6.array.of"),require("./modules/es6.array.iterator"),require("./modules/es6.array.species"),require("./modules/es6.array.copy-within"),require("./modules/es6.array.fill"),require("./modules/es6.array.find"),require("./modules/es6.array.find-index"),require("./modules/es6.regexp"),require("./modules/es6.promise"),require("./modules/es6.map"),require("./modules/es6.set"),require("./modules/es6.weak-map"),require("./modules/es6.weak-set"),require("./modules/es6.reflect"),require("./modules/es7.array.includes"),require("./modules/es7.string.at"),require("./modules/es7.string.lpad"),require("./modules/es7.string.rpad"),require("./modules/es7.regexp.escape"),require("./modules/es7.object.get-own-property-descriptors"),require("./modules/es7.object.to-array"),require("./modules/es7.map.to-json"),require("./modules/es7.set.to-json"),require("./modules/js.array.statics"),require("./modules/web.timers"),require("./modules/web.immediate"),require("./modules/web.dom.iterable"),module.exports=require("./modules/$").core;


},{"./modules/$":34,"./modules/es5":53,"./modules/es6.array.copy-within":54,"./modules/es6.array.fill":55,"./modules/es6.array.find":57,"./modules/es6.array.find-index":56,"./modules/es6.array.from":58,"./modules/es6.array.iterator":59,"./modules/es6.array.of":60,"./modules/es6.array.species":61,"./modules/es6.function.has-instance":62,"./modules/es6.function.name":63,"./modules/es6.map":64,"./modules/es6.math":65,"./modules/es6.number.constructor":66,"./modules/es6.number.statics":67,"./modules/es6.object.assign":68,"./modules/es6.object.is":69,"./modules/es6.object.set-prototype-of":70,"./modules/es6.object.statics-accept-primitives":71,"./modules/es6.object.to-string":72,"./modules/es6.promise":73,"./modules/es6.reflect":74,"./modules/es6.regexp":75,"./modules/es6.set":76,"./modules/es6.string.code-point-at":77,"./modules/es6.string.ends-with":78,"./modules/es6.string.from-code-point":79,"./modules/es6.string.includes":80,"./modules/es6.string.iterator":81,"./modules/es6.string.raw":82,"./modules/es6.string.repeat":83,"./modules/es6.string.starts-with":84,"./modules/es6.symbol":85,"./modules/es6.weak-map":86,"./modules/es6.weak-set":87,"./modules/es7.array.includes":88,"./modules/es7.map.to-json":89,"./modules/es7.object.get-own-property-descriptors":90,"./modules/es7.object.to-array":91,"./modules/es7.regexp.escape":92,"./modules/es7.set.to-json":93,"./modules/es7.string.at":94,"./modules/es7.string.lpad":95,"./modules/es7.string.rpad":96,"./modules/js.array.statics":97,"./modules/web.dom.iterable":98,"./modules/web.immediate":99,"./modules/web.timers":100}],102:[function(require,module,exports){
(function (process,global){
!function(global){"use strict";function wrap(innerFn,outerFn,self,tryLocsList){var generator=Object.create((outerFn||Generator).prototype);return generator._invoke=makeInvokeMethod(innerFn,self||null,new Context(tryLocsList||[])),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){prototype[method]=function(arg){return this._invoke(method,arg)}})}function AwaitArgument(arg){this.arg=arg}function AsyncIterator(generator){function invoke(method,arg){var result=generator[method](arg),value=result.value;return value instanceof AwaitArgument?Promise.resolve(value.arg).then(invokeNext,invokeThrow):Promise.resolve(value).then(function(unwrapped){return result.value=unwrapped,result},invokeThrow)}function enqueue(method,arg){var enqueueResult=previousPromise?previousPromise.then(function(){return invoke(method,arg)}):new Promise(function(resolve){resolve(invoke(method,arg))});return previousPromise=enqueueResult["catch"](invokeReturn),enqueueResult}"object"==typeof process&&process.domain&&(invoke=process.domain.bind(invoke));var previousPromise,invokeNext=invoke.bind(generator,"next"),invokeThrow=invoke.bind(generator,"throw"),invokeReturn=invoke.bind(generator,"return");this._invoke=enqueue}function makeInvokeMethod(innerFn,self,context){var state=GenStateSuspendedStart;return function(method,arg){if(state===GenStateExecuting)throw new Error("Generator is already running");if(state===GenStateCompleted)return doneResult();for(;;){var delegate=context.delegate;if(delegate){if("return"===method||"throw"===method&&delegate.iterator[method]===undefined){context.delegate=null;var returnMethod=delegate.iterator["return"];if(returnMethod){var record=tryCatch(returnMethod,delegate.iterator,arg);if("throw"===record.type){method="throw",arg=record.arg;continue}}if("return"===method)continue}var record=tryCatch(delegate.iterator[method],delegate.iterator,arg);if("throw"===record.type){context.delegate=null,method="throw",arg=record.arg;continue}method="next",arg=undefined;var info=record.arg;if(!info.done)return state=GenStateSuspendedYield,info;context[delegate.resultName]=info.value,context.next=delegate.nextLoc,context.delegate=null}if("next"===method)state===GenStateSuspendedYield?context.sent=arg:delete context.sent;else if("throw"===method){if(state===GenStateSuspendedStart)throw state=GenStateCompleted,arg;context.dispatchException(arg)&&(method="next",arg=undefined)}else"return"===method&&context.abrupt("return",arg);state=GenStateExecuting;var record=tryCatch(innerFn,self,context);if("normal"===record.type){state=context.done?GenStateCompleted:GenStateSuspendedYield;var info={value:record.arg,done:context.done};if(record.arg!==ContinueSentinel)return info;context.delegate&&"next"===method&&(arg=undefined)}else"throw"===record.type&&(state=GenStateCompleted,method="throw",arg=record.arg)}}}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset()}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:undefined,done:!0}}var undefined,hasOwn=Object.prototype.hasOwnProperty,iteratorSymbol="function"==typeof Symbol&&Symbol.iterator||"@@iterator",inModule="object"==typeof module,runtime=global.regeneratorRuntime;if(runtime)return void(inModule&&(module.exports=runtime));runtime=global.regeneratorRuntime=inModule?module.exports:{},runtime.wrap=wrap;var GenStateSuspendedStart="suspendedStart",GenStateSuspendedYield="suspendedYield",GenStateExecuting="executing",GenStateCompleted="completed",ContinueSentinel={},Gp=GeneratorFunctionPrototype.prototype=Generator.prototype;GeneratorFunction.prototype=Gp.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunction.displayName="GeneratorFunction",runtime.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return ctor?ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name):!1},runtime.mark=function(genFun){return genFun.__proto__=GeneratorFunctionPrototype,genFun.prototype=Object.create(Gp),genFun},runtime.awrap=function(arg){return new AwaitArgument(arg)},defineIteratorMethods(AsyncIterator.prototype),runtime.async=function(innerFn,outerFn,self,tryLocsList){var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList));return runtime.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next()})},defineIteratorMethods(Gp),Gp[iteratorSymbol]=function(){return this},Gp.toString=function(){return"[object Generator]"},runtime.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},runtime.values=values,Context.prototype={constructor:Context,reset:function(){this.prev=0,this.next=0,this.sent=undefined,this.done=!1,this.delegate=null,this.tryEntries.forEach(resetTryEntry);for(var tempName,tempIndex=0;hasOwn.call(this,tempName="t"+tempIndex)||20>tempIndex;++tempIndex)this[tempName]=null},stop:function(){this.done=!0;var rootEntry=this.tryEntries[0],rootRecord=rootEntry.completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function(exception){function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,!!caught}if(this.done)throw exception;for(var context=this,i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?this.next=finallyEntry.finallyLoc:this.complete(record),ContinueSentinel},complete:function(record,afterLoc){if("throw"===record.type)throw record.arg;"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=record.arg,this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc)},finish:function(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},"catch":function(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},ContinueSentinel}}}("object"==typeof global?global:"object"==typeof window?window:"object"==typeof self?self:this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":106}],103:[function(require,module,exports){
module.exports=require("./lib/babel/polyfill");


},{"./lib/babel/polyfill":11}],104:[function(require,module,exports){
module.exports=require("babel-core/polyfill");


},{"babel-core/polyfill":103}],105:[function(require,module,exports){
(function (process){
function normalizeArray(parts,allowAboveRoot){for(var up=0,i=parts.length-1;i>=0;i--){var last=parts[i];"."===last?parts.splice(i,1):".."===last?(parts.splice(i,1),up++):up&&(parts.splice(i,1),up--)}if(allowAboveRoot)for(;up--;up)parts.unshift("..");return parts}function filter(xs,f){if(xs.filter)return xs.filter(f);for(var res=[],i=0;i<xs.length;i++)f(xs[i],i,xs)&&res.push(xs[i]);return res}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(filename){return splitPathRe.exec(filename).slice(1)};exports.resolve=function(){for(var resolvedPath="",resolvedAbsolute=!1,i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();if("string"!=typeof path)throw new TypeError("Arguments to path.resolve must be strings");path&&(resolvedPath=path+"/"+resolvedPath,resolvedAbsolute="/"===path.charAt(0))}return resolvedPath=normalizeArray(filter(resolvedPath.split("/"),function(p){return!!p}),!resolvedAbsolute).join("/"),(resolvedAbsolute?"/":"")+resolvedPath||"."},exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash="/"===substr(path,-1);return path=normalizeArray(filter(path.split("/"),function(p){return!!p}),!isAbsolute).join("/"),path||isAbsolute||(path="."),path&&trailingSlash&&(path+="/"),(isAbsolute?"/":"")+path},exports.isAbsolute=function(path){return"/"===path.charAt(0)},exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if("string"!=typeof p)throw new TypeError("Arguments to path.join must be strings");return p}).join("/"))},exports.relative=function(from,to){function trim(arr){for(var start=0;start<arr.length&&""===arr[start];start++);for(var end=arr.length-1;end>=0&&""===arr[end];end--);return start>end?[]:arr.slice(start,end-start+1)}from=exports.resolve(from).substr(1),to=exports.resolve(to).substr(1);for(var fromParts=trim(from.split("/")),toParts=trim(to.split("/")),length=Math.min(fromParts.length,toParts.length),samePartsLength=length,i=0;length>i;i++)if(fromParts[i]!==toParts[i]){samePartsLength=i;break}for(var outputParts=[],i=samePartsLength;i<fromParts.length;i++)outputParts.push("..");return outputParts=outputParts.concat(toParts.slice(samePartsLength)),outputParts.join("/")},exports.sep="/",exports.delimiter=":",exports.dirname=function(path){var result=splitPath(path),root=result[0],dir=result[1];return root||dir?(dir&&(dir=dir.substr(0,dir.length-1)),root+dir):"."},exports.basename=function(path,ext){var f=splitPath(path)[2];return ext&&f.substr(-1*ext.length)===ext&&(f=f.substr(0,f.length-ext.length)),f},exports.extname=function(path){return splitPath(path)[3]};var substr="b"==="ab".substr(-1)?function(str,start,len){return str.substr(start,len)}:function(str,start,len){return 0>start&&(start=str.length+start),str.substr(start,len)};


}).call(this,require('_process'))

},{"_process":106}],106:[function(require,module,exports){
function drainQueue(){if(!draining){draining=!0;for(var currentQueue,len=queue.length;len;){currentQueue=queue,queue=[];for(var i=-1;++i<len;)currentQueue[i]();len=queue.length}draining=!1}}function noop(){}var process=module.exports={},queue=[],draining=!1;process.nextTick=function(fun){queue.push(fun),draining||setTimeout(drainQueue,0)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(name){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(dir){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};


},{}],107:[function(require,module,exports){
(function (process){
"use strict";var React=require("react"),StylePropable=require("./mixins/style-propable"),Typography=require("./styles/typography"),IconButton=require("./icon-button"),NavigationMenu=require("./svg-icons/navigation-menu"),Paper=require("./paper"),AppBar=React.createClass({displayName:"AppBar",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{onLeftIconButtonTouchTap:React.PropTypes.func,onRightIconButtonTouchTap:React.PropTypes.func,showMenuIconButton:React.PropTypes.bool,iconClassNameLeft:React.PropTypes.string,iconClassNameRight:React.PropTypes.string,iconElementLeft:React.PropTypes.element,iconElementRight:React.PropTypes.element,iconStyleRight:React.PropTypes.object,title:React.PropTypes.node,zDepth:React.PropTypes.number},getDefaultProps:function(){return{showMenuIconButton:!0,title:"",zDepth:1}},componentDidMount:function(){"production"!==process.env.NODE_ENV&&this.props.iconElementLeft&&this.props.iconClassNameLeft&&console.warn("Properties iconClassNameLeft and iconElementLeft cannot be simultaneously defined. Please use one or the other.")},getStyles:function(){var spacing=this.context.muiTheme.spacing,themeVariables=this.context.muiTheme.component.appBar,iconButtonSize=this.context.muiTheme.component.button.iconButtonSize,styles={root:{zIndex:5,width:"100%",display:"-webkit-box; display: flex",minHeight:themeVariables.height,backgroundColor:themeVariables.color,paddingLeft:spacing.desktopGutter,paddingRight:spacing.desktopGutter},title:{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",margin:0,paddingTop:0,letterSpacing:0,fontSize:24,fontWeight:Typography.fontWeightNormal,color:themeVariables.textColor,lineHeight:themeVariables.height+"px"},mainElement:{boxFlex:1,flex:"1"},iconButton:{style:{marginTop:(themeVariables.height-iconButtonSize)/2,marginRight:8,marginLeft:-16},iconStyle:{fill:themeVariables.textColor,color:themeVariables.textColor}}};return styles},render:function(){var titleElement,menuElementLeft,menuElementRight,styles=this.getStyles(),iconRightStyle=this.mergeAndPrefix(styles.iconButton.style,{marginRight:-16,marginLeft:"auto"},this.props.iconStyleRight),title=this.props.title;if(title&&(titleElement="string"==typeof title||title instanceof String?React.createElement("h1",{style:this.mergeAndPrefix(styles.title,styles.mainElement)},title):React.createElement("div",{style:this.mergeAndPrefix(styles.mainElement)},title)),this.props.showMenuIconButton){if(this.props.iconElementLeft)menuElementLeft=React.createElement("div",{style:styles.iconButton.style},this.props.iconElementLeft);else{var child=this.props.iconClassNameLeft?"":React.createElement(NavigationMenu,{style:this.mergeAndPrefix(styles.iconButton.iconStyle)});menuElementLeft=React.createElement(IconButton,{style:this.mergeAndPrefix(styles.iconButton.style),iconStyle:this.mergeAndPrefix(styles.iconButton.iconStyle),iconClassName:this.props.iconClassNameLeft,onTouchTap:this._onLeftIconButtonTouchTap},child)}this.props.iconElementRight?menuElementRight=React.createElement("div",{style:iconRightStyle},this.props.iconElementRight):this.props.iconClassNameRight&&(menuElementRight=React.createElement(IconButton,{style:iconRightStyle,iconStyle:this.mergeAndPrefix(styles.iconButton.iconStyle),iconClassName:this.props.iconClassNameRight,onTouchTap:this._onRightIconButtonTouchTap}))}return React.createElement(Paper,{rounded:!1,className:this.props.className,style:this.mergeAndPrefix(styles.root,this.props.style),zDepth:this.props.zDepth},menuElementLeft,titleElement,menuElementRight,this.props.children)},_onLeftIconButtonTouchTap:function(event){this.props.onLeftIconButtonTouchTap&&this.props.onLeftIconButtonTouchTap(event)},_onRightIconButtonTouchTap:function(event){this.props.onRightIconButtonTouchTap&&this.props.onRightIconButtonTouchTap(event)}});module.exports=AppBar;


}).call(this,require('_process'))

},{"./icon-button":139,"./mixins/style-propable":153,"./paper":157,"./styles/typography":175,"./svg-icons/navigation-menu":182,"_process":106,"react":404}],108:[function(require,module,exports){
"use strict";var React=require("react"),AppCanvas=React.createClass({displayName:"AppCanvas",contextTypes:{muiTheme:React.PropTypes.object},render:function(){var styles={height:"100%",backgroundColor:this.context.muiTheme.palette.canvasColor,WebkitFontSmoothing:"antialiased"},newChildren=React.Children.map(this.props.children,function(currentChild){if(currentChild)switch(currentChild.type.displayName){case"AppBar":return React.cloneElement(currentChild,{style:{position:"fixed"}});default:return currentChild}},this);return React.createElement("div",{style:styles},newChildren)}});module.exports=AppCanvas;


},{"react":404}],109:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),StylePropable=require("./mixins/style-propable"),Colors=require("./styles/colors"),Typography=require("./styles/typography"),SvgIcon=React.createClass({displayName:"SvgIcon",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{icon:React.PropTypes.element,backgroundColor:React.PropTypes.string,color:React.PropTypes.string,src:React.PropTypes.string},getDefaultProps:function(){return{backgroundColor:Colors.grey400,color:Colors.white}},render:function(){var _props=this.props,icon=_props.icon,backgroundColor=_props.backgroundColor,color=_props.color,src=_props.src,style=_props.style,other=_objectWithoutProperties(_props,["icon","backgroundColor","color","src","style"]),styles={root:{height:src?38:40,width:src?38:40,userSelect:"none",backgroundColor:backgroundColor,borderRadius:"50%",border:src?"solid 1px":"none",borderColor:this.context.muiTheme.palette.borderColor,display:"inline-block",textAlign:"center",lineHeight:"40px",fontSize:24,color:color},iconStyles:{margin:8}},mergedRootStyles=this.mergeAndPrefix(styles.root,style),mergedIconStyles=icon?this.mergeStyles(styles.iconStyles,icon.props.style):null,iconElement=icon?React.cloneElement(icon,{color:color,style:mergedIconStyles}):null;return src?React.createElement("img",_extends({},other,{src:src,style:mergedRootStyles})):React.createElement("div",_extends({},other,{style:mergedRootStyles}),iconElement,this.props.children)}});module.exports=SvgIcon;


},{"./mixins/style-propable":153,"./styles/colors":168,"./styles/typography":175,"react/addons":232}],110:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var React=require("react"),StylePropable=require("./mixins/style-propable"),AutoPrefix=require("./styles/auto-prefix"),BeforeAfterWrapper=React.createClass({displayName:"BeforeAfterWrapper",mixins:[StylePropable],propTypes:{beforeStyle:React.PropTypes.object,afterStyle:React.PropTypes.object,beforeElementType:React.PropTypes.string,afterElementType:React.PropTypes.string,elementType:React.PropTypes.string},getDefaultProps:function(){return{beforeElementType:"div",afterElementType:"div",elementType:"div"}},render:function(){var beforeElement,afterElement,_props=this.props,beforeStyle=_props.beforeStyle,afterStyle=_props.afterStyle,other=(_props.beforeElementType,_props.afterElementType,_props.elementType,_objectWithoutProperties(_props,["beforeStyle","afterStyle","beforeElementType","afterElementType","elementType"]));beforeStyle=AutoPrefix.all({boxSizing:"border-box"}),afterStyle=AutoPrefix.all({boxSizing:"border-box"}),this.props.beforeStyle&&(beforeElement=React.createElement(this.props.beforeElementType,{style:this.mergeAndPrefix(beforeStyle,this.props.beforeStyle),key:"::before"})),this.props.afterStyle&&(afterElement=React.createElement(this.props.afterElementType,{style:this.mergeAndPrefix(afterStyle,this.props.afterStyle),key:"::after"}));var children=[beforeElement,this.props.children,afterElement],props=other;return props.style=this.props.style,React.createElement(this.props.elementType,props,children)}});module.exports=BeforeAfterWrapper;


},{"./mixins/style-propable":153,"./styles/auto-prefix":167,"react":404}],111:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Styles=require("../styles"),CardActions=React.createClass({displayName:"CardActions",getStyles:function(){return{root:{padding:8}}},render:function(){var styles=this.getStyles(),children=React.Children.map(this.props.children,function(child){return React.cloneElement(child,{style:{marginRight:8}})});return React.createElement("div",_extends({},this.props,{style:styles.root}),children)}});module.exports=CardActions;


},{"../styles":169,"react":404}],112:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Styles=require("../styles"),Avatar=require("../avatar"),StylePropable=require("../mixins/style-propable"),CardHeader=React.createClass({displayName:"CardHeader",mixins:[StylePropable],propTypes:{title:React.PropTypes.string,titleColor:React.PropTypes.string,titleStyle:React.PropTypes.object,subtitle:React.PropTypes.string,subtitleColor:React.PropTypes.string,subtitleStyle:React.PropTypes.object,textStyle:React.PropTypes.object},getDefaultProps:function(){return{titleColor:Styles.Colors.darkBlack,subtitleColor:Styles.Colors.lightBlack}},getStyles:function(){return{root:{height:72,padding:16,fontWeight:Styles.Typography.fontWeightMedium,boxSizing:"border-box"},text:{display:"inline-block",verticalAlign:"top"},avatar:{marginRight:16},title:{color:this.props.titleColor,display:"block",fontSize:15},subtitle:{color:this.props.subtitleColor,display:"block",fontSize:14}}},render:function(){var styles=this.getStyles(),rootStyle=this.mergeAndPrefix(styles.root,this.props.style),textStyle=this.mergeAndPrefix(styles.text,this.props.textStyle),titleStyle=this.mergeAndPrefix(styles.title,this.props.titleStyle),subtitleStyle=this.mergeAndPrefix(styles.subtitle,this.props.subtitleStyle),avatar=this.props.avatar;if(React.isValidElement(this.props.avatar)){var avatarMergedStyle=this.mergeStyles(styles.avatar,avatar.props.style);avatar=React.cloneElement(avatar,{style:avatarMergedStyle})}else avatar=React.createElement(Avatar,{src:this.props.avatar,style:styles.avatar});return React.createElement("div",_extends({},this.props,{style:rootStyle}),avatar,React.createElement("div",{style:textStyle},React.createElement("span",{style:titleStyle},this.props.title),React.createElement("span",{style:subtitleStyle},this.props.subtitle)))}});module.exports=CardHeader;


},{"../avatar":109,"../mixins/style-propable":153,"../styles":169,"react":404}],113:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Styles=require("../styles"),StylePropable=require("../mixins/style-propable"),CardMedia=React.createClass({displayName:"CardMedia",mixins:[StylePropable],propTypes:{overlay:React.PropTypes.node,style:React.PropTypes.object,overlayStyle:React.PropTypes.object,overlayContainerStyle:React.PropTypes.object,overlayContentStyle:React.PropTypes.object,mediaStyle:React.PropTypes.object},getStyles:function(){return{root:{position:"relative"},overlayContainer:{position:"absolute",top:0,bottom:0,right:0,left:0},overlay:{height:"100%",position:"relative"},overlayContent:{position:"absolute",bottom:0,right:0,left:0,paddingTop:8,background:Styles.Colors.lightBlack}}},render:function(){var styles=this.getStyles(),rootStyle=this.mergeAndPrefix(styles.root,this.props.style),mediaStyle=this.mergeAndPrefix(styles.media,this.props.mediaStyle),overlayContainerStyle=this.mergeAndPrefix(styles.overlayContainer,this.props.overlayContainerStyle),overlayContentStyle=this.mergeAndPrefix(styles.overlayContent,this.props.overlayContentStyle),overlayStyle=this.mergeAndPrefix(styles.overlay,this.props.overlayStyle),children=React.Children.map(this.props.children,function(child){return React.cloneElement(child,{style:{verticalAlign:"top",maxWidth:"100%",minWidth:"100%"}})}),overlayChildren=React.Children.map(this.props.overlay,function(child){return"CardHeader"===child.type.displayName||"CardTitle"===child.type.displayName?React.cloneElement(child,{titleColor:Styles.Colors.darkWhite,subtitleColor:Styles.Colors.lightWhite}):"CardText"===child.type.displayName?React.cloneElement(child,{color:Styles.Colors.darkWhite}):child});return React.createElement("div",_extends({},this.props,{style:rootStyle}),React.createElement("div",{style:mediaStyle},children),this.props.overlay?React.createElement("div",{style:overlayContainerStyle},React.createElement("div",{style:overlayStyle},React.createElement("div",{style:overlayContentStyle},overlayChildren))):"")}});module.exports=CardMedia;


},{"../mixins/style-propable":153,"../styles":169,"react":404}],114:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Styles=require("../styles"),StylePropable=require("../mixins/style-propable"),CardText=React.createClass({displayName:"CardText",mixins:[StylePropable],propTypes:{color:React.PropTypes.string,style:React.PropTypes.object},getDefaultProps:function(){return{color:Styles.Colors.ck}},getStyles:function(){return{root:{padding:16,fontSize:"14px",color:this.props.color}}},render:function(){var styles=this.getStyles(),rootStyle=this.mergeAndPrefix(styles.root,this.props.style);return React.createElement("div",_extends({},this.props,{style:rootStyle}),this.props.children)}});module.exports=CardText;


},{"../mixins/style-propable":153,"../styles":169,"react":404}],115:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Styles=require("../styles"),StylePropable=require("../mixins/style-propable"),CardTitle=React.createClass({displayName:"CardTitle",mixins:[StylePropable],propTypes:{title:React.PropTypes.string,titleColor:React.PropTypes.string,titleStyle:React.PropTypes.object,subtitle:React.PropTypes.string,subtitleColor:React.PropTypes.string,subtitleStyle:React.PropTypes.object},getDefaultProps:function(){return{titleColor:Styles.Colors.darkBlack,subtitleColor:Styles.Colors.lightBlack}},getStyles:function(){return{root:{padding:16},title:{fontSize:24,color:this.props.titleColor,display:"block",lineHeight:"36px"},subtitle:{fontSize:14,color:this.props.subtitleColor,display:"block"}}},render:function(){var styles=this.getStyles(),rootStyle=this.mergeAndPrefix(styles.root,this.props.style),titleStyle=this.mergeAndPrefix(styles.title,this.props.titleStyle),subtitleStyle=this.mergeAndPrefix(styles.subtitle,this.props.subtitleStyle);return React.createElement("div",_extends({},this.props,{style:rootStyle}),React.createElement("span",{style:titleStyle},this.props.title),React.createElement("span",{style:subtitleStyle},this.props.subtitle))}});module.exports=CardTitle;


},{"../mixins/style-propable":153,"../styles":169,"react":404}],116:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Paper=require("../paper"),StylePropable=require("../mixins/style-propable"),Card=React.createClass({displayName:"Card",mixins:[StylePropable],propTypes:{style:React.PropTypes.object},render:function(){var lastElement=React.Children.count(this.props.children)>1?this.props.children[this.props.children.length-1]:this.props.children,addBottomPadding="CardText"===lastElement.type.displayName||"CardTitle"===lastElement.type.displayName,_props=this.props,style=_props.style,other=_objectWithoutProperties(_props,["style"]),mergedStyles=this.mergeAndPrefix({overflow:"hidden",zIndex:1},style);return React.createElement(Paper,_extends({},other,{style:mergedStyles}),React.createElement("div",{style:{paddingBottom:addBottomPadding?8:0}},this.props.children))}});module.exports=Card;


},{"../mixins/style-propable":153,"../paper":157,"react":404}],117:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),EnhancedSwitch=require("./enhanced-switch"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),CheckboxOutline=require("./svg-icons/toggle-check-box-outline-blank"),CheckboxChecked=require("./svg-icons/toggle-check-box-checked"),Checkbox=React.createClass({displayName:"Checkbox",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{iconStyle:React.PropTypes.object,labelStyle:React.PropTypes.object,onCheck:React.PropTypes.func,checkedIcon:React.PropTypes.element,unCheckedIcon:React.PropTypes.element},getInitialState:function(){return{switched:this.props.checked||this.props.defaultChecked||this.props.valueLink&&this.props.valueLink.value||!1}},getTheme:function(){return this.context.muiTheme.component.checkbox},getStyles:function(){var checkboxSize=24,styles={icon:{height:checkboxSize,width:checkboxSize},check:{position:"absolute",opacity:0,transform:"scale(0)",transitionOrigin:"50% 50%",transition:Transitions.easeOut("450ms","opacity","0ms")+", "+Transitions.easeOut("0ms","transform","450ms"),fill:this.getTheme().checkedColor},box:{position:"absolute",opacity:1,fill:this.getTheme().boxColor,transition:Transitions.easeOut("2s",null,"200ms")},checkWhenSwitched:{opacity:1,transform:"scale(1)",transition:Transitions.easeOut("0ms","opacity","0ms")+", "+Transitions.easeOut("800ms","transform","0ms")},boxWhenSwitched:{transition:Transitions.easeOut("100ms",null,"0ms"),fill:this.getTheme().checkedColor},checkWhenDisabled:{fill:this.getTheme().disabledColor},boxWhenDisabled:{fill:this.getTheme().disabledColor},label:{color:this.props.disabled?this.getTheme().labelDisabledColor:this.getTheme().labelColor}};return styles},render:function(){var _props=this.props,iconStyle=_props.iconStyle,checkedIcon=(_props.onCheck,_props.checkedIcon),unCheckedIcon=_props.unCheckedIcon,other=_objectWithoutProperties(_props,["iconStyle","onCheck","checkedIcon","unCheckedIcon"]),styles=this.getStyles(),boxStyles=this.mergeAndPrefix(styles.box,this.state.switched&&styles.boxWhenSwitched,iconStyle,this.props.disabled&&styles.boxWhenDisabled),checkStyles=this.mergeAndPrefix(styles.check,this.state.switched&&styles.checkWhenSwitched,iconStyle,this.props.disabled&&styles.checkWhenDisabled),checkedElement=checkedIcon?React.cloneElement(checkedIcon,{style:this.mergeAndPrefix(checkStyles,checkedIcon.props.style)}):React.createElement(CheckboxChecked,{style:checkStyles}),unCheckedElement=unCheckedIcon?React.cloneElement(unCheckedIcon,{style:this.mergeAndPrefix(boxStyles,unCheckedIcon.props.style)}):React.createElement(CheckboxOutline,{style:boxStyles}),checkboxElement=React.createElement("div",null,unCheckedElement,checkedElement),rippleColor=this.state.switched?checkStyles.fill:boxStyles.fill,mergedIconStyle=this.mergeAndPrefix(styles.icon,iconStyle),labelStyle=this.mergeAndPrefix(styles.label,this.props.labelStyle),enhancedSwitchProps={ref:"enhancedSwitch",inputType:"checkbox",switched:this.state.switched,switchElement:checkboxElement,rippleColor:rippleColor,iconStyle:mergedIconStyle,onSwitch:this._handleCheck,labelStyle:labelStyle,onParentShouldUpdate:this._handleStateChange,defaultSwitched:this.props.defaultChecked,labelPosition:this.props.labelPosition?this.props.labelPosition:"right"};return React.createElement(EnhancedSwitch,_extends({},other,enhancedSwitchProps))},isChecked:function(){return this.refs.enhancedSwitch.isSwitched()},setChecked:function(newCheckedValue){this.refs.enhancedSwitch.setSwitched(newCheckedValue)},_handleCheck:function(e,isInputChecked){this.props.onCheck&&this.props.onCheck(e,isInputChecked)},_handleStateChange:function(newSwitched){this.setState({switched:newSwitched})}});module.exports=Checkbox;


},{"./enhanced-switch":134,"./mixins/style-propable":153,"./styles/transitions":174,"./svg-icons/toggle-check-box-checked":183,"./svg-icons/toggle-check-box-outline-blank":184,"react":404}],118:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),CircularProgress=React.createClass({displayName:"CircularProgress",mixins:[StylePropable],propTypes:{mode:React.PropTypes.oneOf(["determinate","indeterminate"]),value:React.PropTypes.number,min:React.PropTypes.number,max:React.PropTypes.number,size:React.PropTypes.number},contextTypes:{muiTheme:React.PropTypes.object},_getRelativeValue:function(){var value=this.props.value,min=this.props.min,max=this.props.max,clampedValue=Math.min(Math.max(min,value),max),rangeValue=max-min,relValue=Math.round(clampedValue/rangeValue*1e4)/1e4;return 100*relValue},componentDidMount:function(){var wrapper=React.findDOMNode(this.refs.wrapper),path=React.findDOMNode(this.refs.path);this._scalePath(path),this._rotateWrapper(wrapper)},_scalePath:function(path,step){step=step||0,step%=3,setTimeout(this._scalePath.bind(this,path,step+1),step?750:250),this.isMounted()&&"indeterminate"==this.props.mode&&(0===step?(path.style.strokeDasharray="1, 200",path.style.strokeDashoffset=0,path.style.transitionDuration="0ms"):1==step?(path.style.strokeDasharray="89, 200",path.style.strokeDashoffset=-35,path.style.transitionDuration="750ms"):(path.style.strokeDasharray="89,200",path.style.strokeDashoffset=-124,path.style.transitionDuration="850ms"))},_rotateWrapper:function(wrapper){setTimeout(this._rotateWrapper.bind(this,wrapper),10050),this.isMounted()&&"indeterminate"==this.props.mode&&(wrapper.style.transform=null,wrapper.style.transform="rotate(0deg)",wrapper.style.transitionDuration="0ms",setTimeout(function(){wrapper.style.transform="rotate(1800deg)",wrapper.style.transitionDuration="10s"},50))},getDefaultProps:function(){return{mode:"indeterminate",value:0,min:0,max:100,size:1}},getTheme:function(){return this.context.muiTheme.palette},getStyles:function(zoom){zoom*=1.4;var size="50px",margin=Math.round((50*zoom-50)/2);0>margin&&(margin=0);var styles={root:{position:"relative",margin:margin+"px",display:"inline-block",width:size,height:size},wrapper:{width:size,height:size,margin:"5px",display:"inline-block",transition:Transitions.create("transform","20s",null,"linear")},svg:{height:size,position:"relative",transform:"scale("+zoom+")",width:size},path:{strokeDasharray:"89,200",strokeDashoffset:0,stroke:this.getTheme().primary1Color,strokeLinecap:"round",transition:Transitions.create("all","1.5s",null,"ease-in-out")}};if("determinate"==this.props.mode){var relVal=this._getRelativeValue();styles.path.transition=Transitions.create("all","0.3s",null,"linear"),styles.path.strokeDasharray=Math.round(1.25*relVal)+",200"}return styles},render:function(){var _props=this.props,style=_props.style,size=_props.size,other=_objectWithoutProperties(_props,["style","size"]),styles=this.getStyles(size||1);return React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root,style)}),React.createElement("div",{ref:"wrapper",style:this.mergeAndPrefix(styles.wrapper)},React.createElement("svg",{style:this.mergeAndPrefix(styles.svg)},React.createElement("circle",{ref:"path",style:this.mergeAndPrefix(styles.path),cx:"25",cy:"25",r:"20",fill:"none",strokeWidth:"2.5",strokeMiterlimit:"10"}))))}});module.exports=CircularProgress;


},{"./mixins/style-propable":153,"./styles/transitions":174,"react":404}],119:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),BeforeAfterWrapper=require("./before-after-wrapper"),ClearFix=React.createClass({displayName:"ClearFix",render:function(){var _props=this.props,other=(_props.style,_objectWithoutProperties(_props,["style"])),before=function(){return{content:"' '",display:"table"}},after=before();return after.clear="both",React.createElement(BeforeAfterWrapper,_extends({},other,{beforeStyle:before(),afterStyle:after,style:this.props.style}),this.props.children)}});module.exports=ClearFix;


},{"./before-after-wrapper":110,"react":404}],120:[function(require,module,exports){
"use strict";var React=require("react"),DateTime=require("../utils/date-time"),DayButton=require("./day-button"),ClearFix=require("../clearfix"),CalendarMonth=React.createClass({displayName:"CalendarMonth",propTypes:{displayDate:React.PropTypes.object.isRequired,onDayTouchTap:React.PropTypes.func,selectedDate:React.PropTypes.object.isRequired,minDate:React.PropTypes.object,maxDate:React.PropTypes.object,shouldDisableDate:React.PropTypes.func,autoOk:React.PropTypes.bool},render:function(){var styles={lineHeight:"32px",textAlign:"center",padding:"8px 14px 0 14px"};return React.createElement("div",{style:styles},this._getWeekElements())},isSelectedDateDisabled:function(){return this._selectedDateDisabled},_getWeekElements:function(){var weekArray=DateTime.getWeekArray(this.props.displayDate);return weekArray.map(function(week,i){return React.createElement(ClearFix,{key:i},this._getDayElements(week,i))},this)},_getDayElements:function(week,i){return week.map(function(day,j){var isSameDate=DateTime.isEqualDate(this.props.selectedDate,day),disabled=this._shouldDisableDate(day),selected=!disabled&&isSameDate;return isSameDate&&(disabled?this._selectedDateDisabled=!0:this._selectedDateDisabled=!1),React.createElement(DayButton,{key:"db"+i+j,date:day,onTouchTap:this._handleDayTouchTap,selected:selected,disabled:disabled})},this)},_handleDayTouchTap:function(e,date){this.props.onDayTouchTap&&this.props.onDayTouchTap(e,date)},_shouldDisableDate:function(day){if(null===day)return!1;var disabled=!DateTime.isBetweenDates(day,this.props.minDate,this.props.maxDate);return!disabled&&this.props.shouldDisableDate&&(disabled=this.props.shouldDisableDate(day)),disabled}});module.exports=CalendarMonth;


},{"../clearfix":119,"../utils/date-time":218,"./day-button":127,"react":404}],121:[function(require,module,exports){
"use strict";var React=require("react"),DateTime=require("../utils/date-time"),IconButton=require("../icon-button"),Toolbar=require("../toolbar/toolbar"),ToolbarGroup=require("../toolbar/toolbar-group"),DropDownMenu=require("../drop-down-menu"),NavigationChevronLeft=require("../svg-icons/navigation-chevron-left"),NavigationChevronLeftDouble=require("../svg-icons/navigation-chevron-left-double"),NavigationChevronRight=require("../svg-icons/navigation-chevron-right"),NavigationChevronRightDouble=require("../svg-icons/navigation-chevron-right-double"),SlideInTransitionGroup=require("../transition-groups/slide-in"),CalendarToolbar=React.createClass({displayName:"CalendarToolbar",propTypes:{displayDate:React.PropTypes.object.isRequired,onMonthChange:React.PropTypes.func,onYearChange:React.PropTypes.func,prevYear:React.PropTypes.bool,nextYear:React.PropTypes.bool,prevMonth:React.PropTypes.bool,nextMonth:React.PropTypes.bool,hideYearChangeButtons:React.PropTypes.bool},getDefaultProps:function(){return{prevYear:!0,nextYear:!0,prevMonth:!0,nextMonth:!0,hideYearChangeButtons:!1}},getInitialState:function(){return{transitionDirection:"up"}},componentWillReceiveProps:function(nextProps){var direction;nextProps.displayDate!==this.props.displayDate&&(direction=nextProps.displayDate>this.props.displayDate?"up":"down",this.setState({transitionDirection:direction}))},_styles:function(){return{root:{position:"relative",padding:0,backgroundColor:"inherit"},title:{position:"absolute",top:"17px",lineHeight:"14px",fontSize:"14px",height:"14px",width:"100%",fontWeight:"500",textAlign:"center",zIndex:-1}}},render:function(){var month=DateTime.getFullMonth(this.props.displayDate),year=this.props.displayDate.getFullYear(),prevYearChangeButton=this._getPrevYearChangeButton(),nextYearChangeButton=this._getNextYearChangeButton(),styles=this._styles();return React.createElement(Toolbar,{className:"mui-date-picker-calendar-toolbar",style:styles.root,noGutter:!0},React.createElement(ToolbarGroup,{key:0,"float":"left"},prevYearChangeButton,React.createElement(IconButton,{disabled:!this.props.prevMonth,onTouchTap:this._prevMonthTouchTap},React.createElement(NavigationChevronLeft,null))),React.createElement(ToolbarGroup,{key:1,"float":"right"},React.createElement(IconButton,{disabled:!this.props.nextMonth,onTouchTap:this._nextMonthTouchTap},React.createElement(NavigationChevronRight,null)),nextYearChangeButton),React.createElement(SlideInTransitionGroup,{style:styles.title,direction:this.state.transitionDirection},React.createElement("div",{key:month+"_"+year},month," ",year)))},_getPrevYearChangeButton:function(){var style={display:this.props.hideYearChangeButtons?"none":""};return React.createElement(IconButton,{style:style,disabled:!this.props.prevYear,onTouchTap:this._prevYearTouchTap},React.createElement(NavigationChevronLeftDouble,null))},_getNextYearChangeButton:function(){var style={display:this.props.hideYearChangeButtons?"none":""};return React.createElement(IconButton,{style:style,disabled:!this.props.nextYear,onTouchTap:this._nextYearTouchTap},React.createElement(NavigationChevronRightDouble,null))},_prevYearTouchTap:function(){this.props.onYearChange&&this.props.prevYear&&this.props.onYearChange(-1)},_nextYearTouchTap:function(){this.props.onYearChange&&this.props.nextYear&&this.props.onYearChange(1)},_prevMonthTouchTap:function(){this.props.onMonthChange&&this.props.prevMonth&&this.props.onMonthChange(-1)},_nextMonthTouchTap:function(){this.props.onMonthChange&&this.props.nextMonth&&this.props.onMonthChange(1)}});module.exports=CalendarToolbar;


},{"../drop-down-menu":132,"../icon-button":139,"../svg-icons/navigation-chevron-left":179,"../svg-icons/navigation-chevron-left-double":178,"../svg-icons/navigation-chevron-right":181,"../svg-icons/navigation-chevron-right-double":180,"../toolbar/toolbar":212,"../toolbar/toolbar-group":209,"../transition-groups/slide-in":215,"../utils/date-time":218,"react":404}],122:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),Colors=require("../styles/colors"),DateTime=require("../utils/date-time"),YearButton=require("./year-button"),CalendarYear=React.createClass({displayName:"CalendarYear",mixins:[StylePropable],propTypes:{displayDate:React.PropTypes.object.isRequired,onYearTouchTap:React.PropTypes.func,selectedDate:React.PropTypes.object.isRequired,minDate:React.PropTypes.object,maxDate:React.PropTypes.object},componentDidMount:function(){this._scrollToSelectedYear()},componentDidUpdate:function(prevProps,prevState){this._scrollToSelectedYear()},render:function(){var years=this._getYears(),styles={position:"relative",height:"inherit",lineHeight:"36px",textAlign:"center",padding:"8px 14px 0 14px",backgroundColor:Colors.white,overflowX:"hidden",overflowY:"scroll"};return React.createElement("div",{style:styles},years)},_getYears:function(){for(var minYear=this.props.minDate.getFullYear(),maxYear=this.props.maxDate.getFullYear(),years=[],dateCheck=DateTime.clone(this.props.selectedDate),year=minYear;maxYear>=year;year++)if(dateCheck.setFullYear(year),DateTime.isBetweenDates(dateCheck,this.props.minDate,this.props.maxDate)){var selected=this.props.selectedDate.getFullYear()===year,selectedProps={};selected&&(selectedProps={ref:"selectedYearButton"});var yearButton=React.createElement(YearButton,_extends({key:"yb"+year,year:year,onTouchTap:this._handleYearTouchTap,selected:selected},selectedProps));years.push(yearButton)}return years},_scrollToSelectedYear:function(){if(void 0!==this.refs.selectedYearButton){var container=this.getDOMNode(),yearButtonNode=this.refs.selectedYearButton.getDOMNode(),containerHeight=container.clientHeight,yearButtonNodeHeight=yearButtonNode.clientHeight||32,scrollYOffset=yearButtonNode.offsetTop+yearButtonNodeHeight/2-containerHeight/2;container.scrollTop=scrollYOffset}},_handleYearTouchTap:function(e,year){this.props.onYearTouchTap&&this.props.onYearTouchTap(e,year)}});module.exports=CalendarYear;


},{"../mixins/style-propable":153,"../styles/colors":168,"../utils/date-time":218,"./year-button":128,"react":404}],123:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),WindowListenable=require("../mixins/window-listenable"),DateTime=require("../utils/date-time"),KeyCode=require("../utils/key-code"),Transitions=require("../styles/transitions"),CalendarMonth=require("./calendar-month"),CalendarYear=require("./calendar-year"),CalendarToolbar=require("./calendar-toolbar"),DateDisplay=require("./date-display"),SlideInTransitionGroup=require("../transition-groups/slide-in"),ClearFix=require("../clearfix"),Calendar=React.createClass({displayName:"Calendar",mixins:[StylePropable,WindowListenable],propTypes:{initialDate:React.PropTypes.object,isActive:React.PropTypes.bool,minDate:React.PropTypes.object,maxDate:React.PropTypes.object,shouldDisableDate:React.PropTypes.func,hideToolbarYearChange:React.PropTypes.bool,shouldShowMonthDayPickerFirst:React.PropTypes.bool,shouldShowYearPickerFirst:React.PropTypes.bool,showYearSelector:React.PropTypes.bool,onSelectedDate:React.PropTypes.func},windowListeners:{keydown:"_handleWindowKeyDown"},getDefaultProps:function(){return{initialDate:new Date,minDate:DateTime.addYears(new Date,-100),maxDate:DateTime.addYears(new Date,100),hideToolbarYearChange:!1,shouldShowMonthDayPickerFirst:!0,shouldShowYearPickerFirst:!1,showYearSelector:!1}},getInitialState:function(){return{displayDate:DateTime.getFirstDayOfMonth(this.props.initialDate),selectedDate:this.props.initialDate,transitionDirection:"left",displayMonthDay:this.props.shouldShowMonthDayPickerFirst||this.props.shouldShowYearPickerFirst||!0,transitionEnter:!0}},getStyles:function(){},componentWillReceiveProps:function(nextProps){if(nextProps.initialDate!==this.props.initialDate){var d=nextProps.initialDate||new Date;this.setState({displayDate:DateTime.getFirstDayOfMonth(d),selectedDate:d})}nextProps.shouldShowMonthDayPickerFirst&&this.setState({displayMonthDay:nextProps.shouldShowMonthDayPickerFirst})},render:function(){var yearCount=DateTime.yearDiff(this.props.maxDate,this.props.minDate)+1,weekCount=DateTime.getWeekArray(this.state.displayDate).length,toolbarInteractions=this._getToolbarInteractions(),hideYearChangeButtons=this.props.hideToolbarYearChange||!this.props.showYearSelector,isMultiYearRange=yearCount>2,isLandscape="landscape"===this.props.mode,styles={root:{fontSize:"12px"},calendarContainer:{width:isLandscape?"280px":"100%",height:5===weekCount?"268px":6===weekCount?"308px":"228px","float":isLandscape?"right":"none",transition:Transitions.easeOut("150ms","height")},yearContainer:{width:"280px",overflow:"hidden",height:6>yearCount?56*yearCount+10:5===weekCount?"268px":6===weekCount?"308px":"228px","float":isLandscape?"right":"none"},dateDisplay:{width:isLandscape?"280px":"100%",height:"100%","float":isLandscape?"left":"none"},weekTitle:{padding:"0 14px",lineHeight:"12px",opacity:"0.5",height:"12px",fontWeight:"500",margin:0},weekTitleDay:{listStyle:"none","float":"left",width:"32px",textAlign:"center",margin:"0 2px"}};return this.state.displayMonthDay||!this.props.showYearSelector?styles.yearContainer.display="none":styles.calendarContainer.display="none",React.createElement(ClearFix,{style:this.mergeAndPrefix(styles.root)},React.createElement(DateDisplay,{style:styles.dateDisplay,selectedDate:this.state.selectedDate,handleMonthDayClick:this._handleMonthDayClick,handleYearClick:this._handleYearClick,yearSelectionAvailable:this.props.showYearSelector&&isMultiYearRange,monthDaySelected:this.state.displayMonthDay,mode:this.props.mode,weekCount:weekCount}),React.createElement("div",{style:styles.calendarContainer},React.createElement(CalendarToolbar,{displayDate:this.state.displayDate,onMonthChange:this._handleMonthChange,onYearChange:this._handleYearChange,prevMonth:toolbarInteractions.prevMonth,nextMonth:toolbarInteractions.nextMonth,prevYear:toolbarInteractions.prevYear,nextYear:toolbarInteractions.nextYear,hideYearChangeButtons:hideYearChangeButtons}),React.createElement(ClearFix,{elementType:"ul",style:styles.weekTitle},React.createElement("li",{style:styles.weekTitleDay},"S"),React.createElement("li",{style:styles.weekTitleDay},"M"),React.createElement("li",{style:styles.weekTitleDay},"T"),React.createElement("li",{style:styles.weekTitleDay},"W"),React.createElement("li",{style:styles.weekTitleDay},"T"),React.createElement("li",{style:styles.weekTitleDay},"F"),React.createElement("li",{style:styles.weekTitleDay},"S")),React.createElement(SlideInTransitionGroup,{direction:this.state.transitionDirection},React.createElement(CalendarMonth,{key:this.state.displayDate.toDateString(),ref:"calendar",displayDate:this.state.displayDate,onDayTouchTap:this._handleDayTouchTap,selectedDate:this.state.selectedDate,minDate:this.props.minDate,maxDate:this.props.maxDate,shouldDisableDate:this.props.shouldDisableDate}))),React.createElement("div",{style:styles.yearContainer},this._yearSelector()))},_yearSelector:function(){return this.props.showYearSelector?React.createElement(CalendarYear,{key:"years",displayDate:this.state.displayDate,onYearTouchTap:this._handleYearTouchTap,selectedDate:this.state.selectedDate,minDate:this.props.minDate,maxDate:this.props.maxDate}):void 0},getSelectedDate:function(){return this.state.selectedDate},isSelectedDateDisabled:function(){return this.refs.calendar.isSelectedDateDisabled()},_addSelectedDays:function(days){this._setSelectedDate(DateTime.addDays(this.state.selectedDate,days))},_addSelectedMonths:function(months){this._setSelectedDate(DateTime.addMonths(this.state.selectedDate,months))},_addSelectedYears:function(years){this._setSelectedDate(DateTime.addYears(this.state.selectedDate,years))},_setDisplayDate:function(d,newSelectedDate){var newDisplayDate=DateTime.getFirstDayOfMonth(d),direction=newDisplayDate>this.state.displayDate?"left":"right";newDisplayDate!==this.state.displayDate&&this.setState({displayDate:newDisplayDate,transitionDirection:direction,selectedDate:newSelectedDate||this.state.selectedDate})},_setSelectedDate:function(date,e){var adjustedDate=date;DateTime.isBeforeDate(date,this.props.minDate)?adjustedDate=this.props.minDate:DateTime.isAfterDate(date,this.props.maxDate)&&(adjustedDate=this.props.maxDate);var newDisplayDate=DateTime.getFirstDayOfMonth(adjustedDate);newDisplayDate!==this.state.displayDate?this._setDisplayDate(newDisplayDate,adjustedDate):this.setState({selectedDate:adjustedDate}),this.props.onSelectedDate&&this.props.onSelectedDate(e,date)},_handleDayTouchTap:function(e,date){this._setSelectedDate(date,e)},_handleMonthChange:function(months){this._addSelectedMonths(months)},_handleYearChange:function(years){this._addSelectedYears(years)},_handleYearTouchTap:function(e,year){var date=DateTime.clone(this.state.selectedDate);date.setFullYear(year),this._setSelectedDate(date,e)},_getToolbarInteractions:function(){return{prevMonth:DateTime.monthDiff(this.state.selectedDate,this.props.minDate)>0,nextMonth:DateTime.monthDiff(this.state.selectedDate,this.props.maxDate)<0,prevYear:DateTime.yearDiff(this.state.selectedDate,this.props.minDate)>0,nextYear:DateTime.yearDiff(this.state.selectedDate,this.props.maxDate)<0}},_handleMonthDayClick:function(){this.setState({displayMonthDay:!0})},_handleYearClick:function(){this.setState({displayMonthDay:!1})},_handleWindowKeyDown:function(e){if(this.props.isActive)switch(e.keyCode){case KeyCode.UP:e.altKey&&e.shiftKey?this._addSelectedYears(-1):e.shiftKey?this._addSelectedMonths(-1):this._addSelectedDays(-7);break;case KeyCode.DOWN:e.altKey&&e.shiftKey?this._addSelectedYears(1):e.shiftKey?this._addSelectedMonths(1):this._addSelectedDays(7);break;case KeyCode.RIGHT:e.altKey&&e.shiftKey?this._addSelectedYears(1):e.shiftKey?this._addSelectedMonths(1):this._addSelectedDays(1);break;case KeyCode.LEFT:e.altKey&&e.shiftKey?this._addSelectedYears(-1):e.shiftKey?this._addSelectedMonths(-1):this._addSelectedDays(-1)}}});module.exports=Calendar;


},{"../clearfix":119,"../mixins/style-propable":153,"../mixins/window-listenable":155,"../styles/transitions":174,"../transition-groups/slide-in":215,"../utils/date-time":218,"../utils/key-code":222,"./calendar-month":120,"./calendar-toolbar":121,"./calendar-year":122,"./date-display":124,"react":404}],124:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),DateTime=require("../utils/date-time"),Transitions=require("../styles/transitions"),AutoPrefix=require("../styles/auto-prefix"),SlideInTransitionGroup=require("../transition-groups/slide-in"),DateDisplay=React.createClass({displayName:"DateDisplay",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{selectedDate:React.PropTypes.object.isRequired,weekCount:React.PropTypes.number,yearSelectionAvailable:React.PropTypes.bool,monthDaySelected:React.PropTypes.bool},getDefaultProps:function(){return{weekCount:4,yearSelectionAvailable:!0,monthDaySelected:!0}},getInitialState:function(){return{transitionDirection:"up",selectedYear:!this.props.monthDaySelected}},componentWillReceiveProps:function(nextProps){var direction;nextProps.selectedDate!==this.props.selectedDate&&(direction=nextProps.selectedDate>this.props.selectedDate?"up":"down",this.setState({transitionDirection:direction})),void 0!==nextProps.monthDaySelected&&this.setState({selectedYear:!nextProps.monthDaySelected})},getTheme:function(){return this.context.muiTheme.component.datePicker},render:function(){var _props=this.props,other=(_props.selectedDate,_props.style,_objectWithoutProperties(_props,["selectedDate","style"])),dayOfWeek=DateTime.getDayOfWeek(this.props.selectedDate),month=DateTime.getShortMonth(this.props.selectedDate),day=this.props.selectedDate.getDate(),year=this.props.selectedDate.getFullYear(),isLandscape="landscape"===this.props.mode,dateYPosition="0px",dayYPosition="30px",yearYPosition="95px";isLandscape&&(dateYPosition=5===this.props.weekCount?"14px":6===this.props.weekCount?"34px":"8px",yearYPosition=4===this.props.weekCount?"114px":"150px",this.props.weekCount>4&&(dayYPosition="50px"));var styles={root:{textAlign:"center",position:"relative"},dateContainer:{backgroundColor:this.getTheme().color,height:isLandscape?40*this.props.weekCount+36+"px":"150px",padding:"16px 0",transition:Transitions.easeOut(),boxSizing:"border-box"},date:{position:"relative",color:this.getTheme().textColor,transition:Transitions.easeOut(),transform:"translate3d(0,"+dateYPosition+",0)"},dowContainer:{height:"32px",backgroundColor:this.getTheme().selectColor,borderRadius:isLandscape?"2px 0 0 0":"2px 2px 0 0",paddingTop:"9px",boxSizing:"border-box"},dow:{fontSize:"13px",lineHeight:"13px",height:"100%",color:this.getTheme().selectTextColor},day:{root:{position:"absolute",lineHeight:isLandscape?"76px":"58px",fontSize:isLandscape?"76px":"58px",height:isLandscape?"76px":"58px",width:"100%",opacity:this.state.selectedYear?"0.7":"1.0",transition:Transitions.easeOut(),transform:"translate3d(0,"+dayYPosition+",0)"},title:{width:"100px",marginLeft:"auto",marginRight:"auto",cursor:this.state.selectedYear?"pointer":"default"}},month:{root:{position:"absolute",top:isLandscape?"0px":"1px",fontSize:isLandscape?"26px":"22px",lineHeight:isLandscape?"26px":"22px",height:isLandscape?"26px":"22px",width:"100%",textTransform:"uppercase",opacity:this.state.selectedYear?"0.7":"1.0"},title:{width:"100px",marginLeft:"auto",marginRight:"auto",cursor:this.state.selectedYear?"pointer":"default"}},year:{root:{position:"absolute",margin:"0px",fontSize:isLandscape?"26px":"22px",lineHeight:isLandscape?"26px":"22px",height:isLandscape?"26px":"22px",width:"100%",textTransform:"uppercase",opacity:this.state.selectedYear?"1.0":"0.7",transition:Transitions.easeOut(),transform:"translate3d(0,"+yearYPosition+",0)"},title:{width:"100px",marginLeft:"auto",marginRight:"auto",cursor:!this.props.yearSelectionAvailable||this.state.selectedYear?"default":"pointer"}}};return React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root,this.props.style)}),React.createElement("div",{style:styles.dowContainer},React.createElement(SlideInTransitionGroup,{style:styles.dow,direction:this.state.transitionDirection},React.createElement("div",{key:dayOfWeek},dayOfWeek))),React.createElement("div",{style:AutoPrefix.all(styles.dateContainer)},React.createElement("div",{style:AutoPrefix.all(styles.date)},React.createElement(SlideInTransitionGroup,{style:styles.month.root,direction:this.state.transitionDirection},React.createElement("div",{key:month,style:styles.month.title,onTouchTap:this._handleMonthDayClick},month)),React.createElement(SlideInTransitionGroup,{style:styles.day.root,direction:this.state.transitionDirection},React.createElement("div",{key:day,style:styles.day.title,onTouchTap:this._handleMonthDayClick},day)),React.createElement(SlideInTransitionGroup,{style:styles.year.root,direction:this.state.transitionDirection},React.createElement("div",{key:year,style:styles.year.title,onTouchTap:this._handleYearClick},year)))))},_handleMonthDayClick:function(){this.props.handleMonthDayClick&&this.state.selectedYear&&this.props.handleMonthDayClick(),this.props.yearSelectionAvailable&&this.setState({selectedYear:!1})},_handleYearClick:function(){this.props.handleYearClick&&!this.state.selectedYear&&this.props.yearSelectionAvailable&&this.props.handleYearClick(),this.props.yearSelectionAvailable&&this.setState({selectedYear:!0})}});module.exports=DateDisplay;


},{"../mixins/style-propable":153,"../styles/auto-prefix":167,"../styles/transitions":174,"../transition-groups/slide-in":215,"../utils/date-time":218,"react":404}],125:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),WindowListenable=require("../mixins/window-listenable"),CssEvent=require("../utils/css-event"),KeyCode=require("../utils/key-code"),Calendar=require("./calendar"),DialogWindow=require("../dialog-window"),FlatButton=require("../flat-button"),DatePickerDialog=React.createClass({displayName:"DatePickerDialog",mixins:[StylePropable,WindowListenable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{initialDate:React.PropTypes.object,onAccept:React.PropTypes.func,onShow:React.PropTypes.func,onDismiss:React.PropTypes.func,onClickAway:React.PropTypes.func,minDate:React.PropTypes.object,maxDate:React.PropTypes.object,shouldDisableDate:React.PropTypes.func,hideToolbarYearChange:React.PropTypes.bool,showYearSelector:React.PropTypes.bool},windowListeners:{keyup:"_handleWindowKeyUp"},getInitialState:function(){return{isCalendarActive:!1,showMonthDayPicker:!0}},render:function(){var _props=this.props,other=(_props.initialDate,_props.onAccept,_props.style,_objectWithoutProperties(_props,["initialDate","onAccept","style"])),styles={root:{fontSize:"14px",color:this.context.muiTheme.component.datePicker.calendarTextColor},dialogContents:{width:"landscape"===this.props.mode?"560px":"280px"},actions:{marginRight:8}},actions=[React.createElement(FlatButton,{key:0,label:"Cancel",secondary:!0,style:styles.actions,onTouchTap:this._handleCancelTouchTap}),React.createElement(FlatButton,{key:1,label:"OK",secondary:!0,disabled:void 0!==this.refs.calendar&&this.refs.calendar.isSelectedDateDisabled(),style:styles.actions,onTouchTap:this._handleOKTouchTap})];return this.props.autoOk&&(actions=actions.slice(0,1)),React.createElement(DialogWindow,_extends({},other,{ref:"dialogWindow",style:styles.root,contentStyle:styles.dialogContents,actions:actions,onDismiss:this._handleDialogDismiss,onShow:this._handleDialogShow,onClickAway:this._handleDialogClickAway,repositionOnUpdate:!1}),React.createElement(Calendar,{ref:"calendar",onSelectedDate:this._onSelectedDate,initialDate:this.props.initialDate,isActive:this.state.isCalendarActive,minDate:this.props.minDate,maxDate:this.props.maxDate,shouldDisableDate:this.props.shouldDisableDate,shouldShowMonthDayPickerFirst:this.state.showMonthDayPicker,hideToolbarYearChange:this.props.hideToolbarYearChange,showYearSelector:this.props.showYearSelector,mode:this.props.mode}))},show:function(){this.refs.dialogWindow.show()},dismiss:function(){this.refs.dialogWindow.dismiss()},_onSelectedDate:function(e){this.props.autoOk&&setTimeout(this._handleOKTouchTap,300)},_handleCancelTouchTap:function(){this.dismiss()},_handleOKTouchTap:function(){this.props.onAccept&&!this.refs.calendar.isSelectedDateDisabled()&&this.props.onAccept(this.refs.calendar.getSelectedDate()),this.dismiss()},_handleDialogShow:function(){this.setState({isCalendarActive:!0}),this.props.onShow&&this.props.onShow()},_handleDialogDismiss:function(){CssEvent.onTransitionEnd(this.refs.dialogWindow.getDOMNode(),function(){this.setState({isCalendarActive:!1,showMonthDayPicker:!0})}.bind(this)),this.props.onDismiss&&this.props.onDismiss()},_handleDialogClickAway:function(){CssEvent.onTransitionEnd(this.refs.dialogWindow.getDOMNode(),function(){this.setState({isCalendarActive:!1,showMonthDayPicker:!0})}.bind(this)),this.props.onClickAway&&this.props.onClickAway()},_handleWindowKeyUp:function(e){if(this.refs.dialogWindow.isOpen())switch(e.keyCode){case KeyCode.ENTER:this._handleOKTouchTap()}}});module.exports=DatePickerDialog;


},{"../dialog-window":129,"../flat-button":136,"../mixins/style-propable":153,"../mixins/window-listenable":155,"../utils/css-event":217,"../utils/key-code":222,"./calendar":123,"react":404}],126:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),WindowListenable=require("../mixins/window-listenable"),DateTime=require("../utils/date-time"),DatePickerDialog=require("./date-picker-dialog"),TextField=require("../text-field"),DatePicker=React.createClass({displayName:"DatePicker",mixins:[StylePropable,WindowListenable],propTypes:{defaultDate:React.PropTypes.object,formatDate:React.PropTypes.func,mode:React.PropTypes.oneOf(["portrait","landscape","inline"]),onFocus:React.PropTypes.func,onTouchTap:React.PropTypes.func,onChange:React.PropTypes.func,onShow:React.PropTypes.func,onDismiss:React.PropTypes.func,minDate:React.PropTypes.object,maxDate:React.PropTypes.object,shouldDisableDate:React.PropTypes.func,hideToolbarYearChange:React.PropTypes.bool,autoOk:React.PropTypes.bool,showYearSelector:React.PropTypes.bool},windowListeners:{keyup:"_handleWindowKeyUp"},getDefaultProps:function(){return{formatDate:DateTime.format,autoOk:!1,showYearSelector:!1}},getInitialState:function(){return{date:this.props.defaultDate,dialogDate:new Date}},componentWillReceiveProps:function(nextProps){this.props.defaultDate!==nextProps.defaultDate&&this.setDate(nextProps.defaultDate)},render:function(){var defaultInputValue,_props=this.props,onShow=(_props.formatDate,_props.mode,_props.onFocus,_props.onTouchTap,_props.onShow),minDate=(_props.onDismiss,_props.minDate),maxDate=_props.maxDate,autoOk=_props.autoOk,showYearSelector=_props.showYearSelector,other=_objectWithoutProperties(_props,["formatDate","mode","onFocus","onTouchTap","onShow","onDismiss","minDate","maxDate","autoOk","showYearSelector"]);return this.props.defaultDate&&(defaultInputValue=this.props.formatDate(this.props.defaultDate)),React.createElement("div",{style:this.props.style},React.createElement(TextField,_extends({},other,{ref:"input",defaultValue:defaultInputValue,onFocus:this._handleInputFocus,onTouchTap:this._handleInputTouchTap})),React.createElement(DatePickerDialog,{ref:"dialogWindow",mode:this.props.mode,initialDate:this.state.dialogDate,onAccept:this._handleDialogAccept,onShow:onShow,onDismiss:this._handleDialogDismiss,minDate:minDate,maxDate:maxDate,autoOk:autoOk,showYearSelector:showYearSelector,shouldDisableDate:this.props.shouldDisableDate,hideToolbarYearChange:this.props.hideToolbarYearChange}))},getDate:function(){return this.state.date},setDate:function(d){this.setState({date:d}),this.refs.input.setValue(this.props.formatDate(d))},_handleDialogAccept:function(d){this.setDate(d),this.props.onChange&&this.props.onChange(null,d)},_handleDialogDismiss:function(){this.props.onDismiss&&this.props.onDismiss()},_handleInputFocus:function(e){e.target.blur(),this.props.onFocus&&this.props.onFocus(e)},_handleInputTouchTap:function(e){this.setState({dialogDate:this.getDate()}),this.refs.dialogWindow.show(),this.props.onTouchTap&&this.props.onTouchTap(e)},_handleWindowKeyUp:function(){}});module.exports=DatePicker;


},{"../mixins/style-propable":153,"../mixins/window-listenable":155,"../text-field":196,"../utils/date-time":218,"./date-picker-dialog":125,"react":404}],127:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),Transition=require("../styles/transitions"),DateTime=require("../utils/date-time"),EnhancedButton=require("../enhanced-button"),DayButton=React.createClass({displayName:"DayButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{date:React.PropTypes.object,onTouchTap:React.PropTypes.func,selected:React.PropTypes.bool,disabled:React.PropTypes.bool},getDefaultProps:function(){return{selected:!1,disabled:!1}},getInitialState:function(){return{hover:!1}},getTheme:function(){return this.context.muiTheme.component.datePicker},render:function(){var _props=this.props,other=(_props.date,_props.onTouchTap,_props.selected,_objectWithoutProperties(_props,["date","onTouchTap","selected"])),styles={root:{boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",position:"relative","float":"left",width:36,padding:"4px 2px"},label:{position:"relative",color:this.context.muiTheme.palette.textColor},buttonState:{position:"absolute",height:32,width:32,opacity:0,borderRadius:"50%",transform:"scale(0)",transition:Transition.easeOut(),backgroundColor:this.getTheme().selectColor}};return this.state.hover&&(styles.label.color=this.getTheme().selectTextColor,styles.buttonState.opacity="0.6",styles.buttonState.transform="scale(1)"),this.props.selected?(styles.label.color=this.getTheme().selectTextColor,styles.buttonState.opacity=1,styles.buttonState.transform="scale(1)"):this.props.disabled&&(styles.root.opacity="0.6"),DateTime.isEqualDate(this.props.date,new Date)&&!this.props.selected&&(styles.label.color=this.getTheme().color),this.props.date?React.createElement(EnhancedButton,_extends({},other,{style:styles.root,hoverStyle:styles.hover,disabled:this.props.disabled,disableFocusRipple:!0,disableTouchRipple:!0,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut,onTouchTap:this._handleTouchTap,onKeyboardFocus:this._handleKeyboardFocus}),React.createElement("div",{style:styles.buttonState}),React.createElement("span",{style:styles.label},this.props.date.getDate())):React.createElement("span",{style:styles.root})},_handleMouseOver:function(){this.props.disabled||this.setState({hover:!0})},_handleMouseOut:function(){this.props.disabled||this.setState({hover:!1})},_handleTouchTap:function(e){!this.props.disabled&&this.props.onTouchTap&&this.props.onTouchTap(e,this.props.date)},_handleKeyboardFocus:function(e,keyboardFocused){!this.props.disabled&&this.props.onKeyboardFocus&&this.props.onKeyboardFocus(e,keyboardFocused,this.props.date)}});module.exports=DayButton;


},{"../enhanced-button":133,"../mixins/style-propable":153,"../styles/transitions":174,"../utils/date-time":218,"react":404}],128:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),DateTime=require("../utils/date-time"),EnhancedButton=require("../enhanced-button"),YearButton=React.createClass({displayName:"YearButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{year:React.PropTypes.number,onTouchTap:React.PropTypes.func,selected:React.PropTypes.bool},getDefaultProps:function(){return{selected:!1}},getInitialState:function(){return{hover:!1}},getTheme:function(){return this.context.muiTheme.component.datePicker},render:function(){var _props=this.props,year=(_props.className,_props.year),selected=(_props.onTouchTap,_props.selected),other=_objectWithoutProperties(_props,["className","year","onTouchTap","selected"]),styles={root:{boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",position:"relative",display:"block",margin:"0 auto",width:36,fontSize:"14px",padding:"8px 2px"},label:{position:"relative",top:"-1px",color:this.context.muiTheme.palette.textColor},buttonState:{position:"absolute",height:32,width:32,opacity:0,borderRadius:"50%",transform:"scale(0)",backgroundColor:this.getTheme().selectColor}};return this.state.hover&&(styles.label.color=this.getTheme().selectTextColor,styles.buttonState.opacity="0.6",styles.buttonState.transform="scale(1.5)"),selected&&(styles.label.color=this.getTheme().selectTextColor,styles.buttonState.opacity=1,styles.buttonState.transform="scale(1.5)"),year===(new Date).getFullYear()&&(styles.root.color=this.getTheme().color),React.createElement(EnhancedButton,_extends({},other,{style:styles.root,disableFocusRipple:!0,disableTouchRipple:!0,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut,onTouchTap:this._handleTouchTap}),React.createElement("div",{style:styles.buttonState}),React.createElement("span",{style:styles.label},year))},_handleMouseOver:function(){this.setState({hover:!0})},_handleMouseOut:function(){this.setState({hover:!1})},_handleTouchTap:function(e){this.props.onTouchTap&&this.props.onTouchTap(e,this.props.year)}});module.exports=YearButton;


},{"../enhanced-button":133,"../mixins/style-propable":153,"../utils/date-time":218,"react":404}],129:[function(require,module,exports){
"use strict";var React=require("react"),WindowListenable=require("./mixins/window-listenable"),CssEvent=require("./utils/css-event"),KeyCode=require("./utils/key-code"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),FlatButton=require("./flat-button"),Overlay=require("./overlay"),Paper=require("./paper"),DialogWindow=React.createClass({displayName:"DialogWindow",closeable:!1,mixins:[WindowListenable,StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{actions:React.PropTypes.array,actionFocus:React.PropTypes.string,contentClassName:React.PropTypes.string,contentStyle:React.PropTypes.object,openImmediately:React.PropTypes.bool,onClickAway:React.PropTypes.func,onDismiss:React.PropTypes.func,onShow:React.PropTypes.func,repositionOnUpdate:React.PropTypes.bool,modal:React.PropTypes.bool},windowListeners:{keyup:"_handleWindowKeyUp",resize:"_positionDialog"},getDefaultProps:function(){return{actions:[],repositionOnUpdate:!0,modal:!1}},getInitialState:function(){return{open:this.props.openImmediately||!1}},componentDidMount:function(){this._positionDialog(),this.props.openImmediately&&this.show()},componentDidUpdate:function(prevProps,prevState){this._positionDialog(),this._focusOnAction()},getTheme:function(){return this.context.muiTheme},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var styles={root:{position:"fixed",boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",zIndex:10,top:0,left:-1e4,width:"100%",height:"100%",transition:Transitions.easeOut("0ms","left","450ms"),color:this.getTheme().palette.textColor},contents:{boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",transition:Transitions.easeOut(),position:"relative",width:"75%",maxWidth:12*this.getSpacing().desktopKeylineIncrement,margin:"0 auto",zIndex:10,background:this.getTheme().palette.canvasColor,opacity:0},rootWhenOpen:{left:2,transition:Transitions.easeOut("0ms","left","0ms")},contentsWhenOpen:{opacity:1,top:0,transform:"translate3d(0, "+this.getSpacing().desktopKeylineIncrement+"px, 0)"}};return styles},render:function(){var actions=this._getActionsContainer(this.props.actions),styles=this.getStyles();return React.createElement("div",{ref:"container",style:this.mergeAndPrefix(styles.root,this.props.style,this.state.open&&styles.rootWhenOpen)},React.createElement(Paper,{ref:"dialogWindow",style:this.mergeAndPrefix(styles.contents,this.props.contentStyle,this.state.open&&styles.contentsWhenOpen),className:this.props.contentClassName,zDepth:4},this.props.children,actions),React.createElement(Overlay,{ref:"dialogOverlay",show:this.state.open,autoLockScrolling:!1,onTouchTap:this._handleOverlayTouchTap}))},isOpen:function(){return this.state.open},dismiss:function(){this.closeable&&(CssEvent.onTransitionEnd(React.findDOMNode(this),function(){this.refs.dialogOverlay.allowScrolling()}.bind(this)),this.setState({open:!1}),this._onDismiss())},show:function(){setTimeout(function(){this.closeable=!0}.bind(this),250),this.refs.dialogOverlay.preventScrolling(),this._focusOnAction(),this.setState({open:!0}),this._onShow()},_getAction:function(actionJSON,key){var _this=this,styles={marginRight:8},props={key:key,secondary:!0,onClick:actionJSON.onClick,onTouchTap:function(){actionJSON.onTouchTap&&actionJSON.onTouchTap.call(void 0),actionJSON.onClick||actionJSON.onTouchTap||_this.dismiss()},label:actionJSON.text,style:styles};return actionJSON.ref&&(props.ref=actionJSON.ref,props.keyboardFocused=actionJSON.ref===this.props.actionFocus),React.createElement(FlatButton,props)},_getActionsContainer:function(actions){var actionContainer,actionObjects=[],actionStyle={boxSizing:"border-box",WebkitTapHighlightColor:"rgba(s0,0,0,0)",padding:8,marginBottom:8,width:"100%",textAlign:"right"};if(actions.length){for(var i=0;i<actions.length;i++){var currentAction=actions[i];React.isValidElement(currentAction)||(currentAction=this._getAction(currentAction,i)),actionObjects.push(currentAction)}actionContainer=React.createElement("div",{style:actionStyle},actionObjects)}return actionContainer},_positionDialog:function(){var container=React.findDOMNode(this),dialogWindow=React.findDOMNode(this.refs.dialogWindow),containerHeight=container.offsetHeight,dialogWindowHeight=dialogWindow.offsetHeight;dialogWindow.style.height="";var paddingTop=Math.max((containerHeight-dialogWindowHeight)/2-64,0);(this.props.repositionOnUpdate||!container.style.paddingTop)&&(container.style.paddingTop=paddingTop+"px")},_focusOnAction:function(){this.props.actionFocus&&React.findDOMNode(this.refs[this.props.actionFocus]).focus()},_onShow:function(){this.props.onShow&&this.props.onShow()},_onDismiss:function(){this.props.onDismiss&&this.props.onDismiss()},_handleOverlayTouchTap:function(){!this.props.modal&&this.closeable&&(this.dismiss(),this.props.onClickAway&&this.props.onClickAway())},_handleWindowKeyUp:function(e){this.props.modal||e.keyCode!=KeyCode.ESC||this.dismiss()}});module.exports=DialogWindow;


},{"./flat-button":136,"./mixins/style-propable":153,"./mixins/window-listenable":155,"./overlay":156,"./paper":157,"./styles/transitions":174,"./utils/css-event":217,"./utils/key-code":222,"react":404}],130:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),DialogWindow=require("./dialog-window"),Dialog=React.createClass({displayName:"Dialog",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{title:React.PropTypes.node,contentInnerStyle:React.PropTypes.object},getStyles:function(){var spacing=this.context.muiTheme.spacing,gutter=spacing.desktopGutter+"px ",styles={title:{margin:0,padding:gutter+gutter+"0 "+gutter,color:this.context.muiTheme.palette.textColor,fontSize:"24px",lineHeight:"32px",fontWeight:"400"},content:{padding:spacing.desktopGutter}};return styles},render:function(){var title,_props=this.props,className=_props.className,contentInnerStyle=_props.contentInnerStyle,other=_objectWithoutProperties(_props,["className","contentInnerStyle"]),styles=this.getStyles();return this.props.title&&(title="[object String]"===Object.prototype.toString.call(this.props.title)?React.createElement("h3",{style:styles.title},this.props.title):this.props.title),React.createElement(DialogWindow,_extends({},other,{ref:"dialogWindow",className:className,style:this.props.style}),title,React.createElement("div",{ref:"dialogContent",style:this.mergeAndPrefix(styles.content,contentInnerStyle)},this.props.children))},dismiss:function(){this.refs.dialogWindow.dismiss()},show:function(){this.refs.dialogWindow.show()}});module.exports=Dialog;


},{"./dialog-window":129,"./mixins/style-propable":153,"react":404}],131:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),ClickAwayable=require("./mixins/click-awayable"),FontIcon=require("./font-icon"),Menu=require("./menu/menu"),DropDownIcon=React.createClass({displayName:"DropDownIcon",mixins:[StylePropable,ClickAwayable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{onChange:React.PropTypes.func,menuItems:React.PropTypes.array.isRequired,closeOnMenuItemTouchTap:React.PropTypes.bool,iconStyle:React.PropTypes.object,iconClassName:React.PropTypes.string,iconLigature:React.PropTypes.string},getInitialState:function(){return{open:!1}},getDefaultProps:function(){return{closeOnMenuItemTouchTap:!0}},componentClickAway:function(){this.setState({open:!1})},getStyles:function(){var spacing=this.context.muiTheme.spacing,iconWidth=48,styles={root:{display:"inline-block",width:iconWidth+"px !important",position:"relative",height:spacing.desktopToolbarHeight,fontSize:spacing.desktopDropDownMenuFontSize,cursor:"pointer"},menu:{transition:Transitions.easeOut(),right:"-14px !important",top:"9px !important",opacity:this.state.open?1:0},menuItem:{paddingRight:spacing.iconSize+2*spacing.desktopGutterLess,height:spacing.desktopDropDownMenuItemHeight,lineHeight:spacing.desktopDropDownMenuItemHeight+"px"}};return styles},render:function(){var _props=this.props,menuItems=(_props.style,_props.children,_props.menuItems),iconStyle=(_props.closeOnMenuItemTouchTap,_props.iconStyle),iconClassName=_props.iconClassName,other=_objectWithoutProperties(_props,["style","children","menuItems","closeOnMenuItemTouchTap","iconStyle","iconClassName"]),styles=this.getStyles();return React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root,this.props.style)}),React.createElement("div",{onTouchTap:this._onControlClick},React.createElement(FontIcon,{className:iconClassName,style:iconStyle},this.props.iconLigature),this.props.children),React.createElement(Menu,{ref:"menuItems",style:this.mergeAndPrefix(styles.menu),menuItems:menuItems,menuItemStyle:styles.menuItem,hideable:!0,visible:this.state.open,onItemTap:this._onMenuItemClick}))},_onControlClick:function(){this.setState({open:!this.state.open})},_onMenuItemClick:function(e,key,payload){this.props.onChange&&this.props.onChange(e,key,payload),this.props.closeOnMenuItemTouchTap&&this.setState({open:!1})}});module.exports=DropDownIcon;


},{"./font-icon":138,"./menu/menu":149,"./mixins/click-awayable":152,"./mixins/style-propable":153,"./styles/transitions":174,"react":404}],132:[function(require,module,exports){
(function (process){
"use strict";var React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),ClickAwayable=require("./mixins/click-awayable"),KeyCode=require("./utils/key-code"),DropDownArrow=require("./svg-icons/drop-down-arrow"),Paper=require("./paper"),Menu=require("./menu/menu"),ClearFix=require("./clearfix"),DropDownMenu=React.createClass({displayName:"DropDownMenu",mixins:[StylePropable,ClickAwayable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,displayMember:React.PropTypes.string,valueMember:React.PropTypes.string,autoWidth:React.PropTypes.bool,onChange:React.PropTypes.func,menuItems:React.PropTypes.array.isRequired,menuItemStyle:React.PropTypes.object,underlineStyle:React.PropTypes.object,iconStyle:React.PropTypes.object,labelStyle:React.PropTypes.object,selectedIndex:React.PropTypes.number},getDefaultProps:function(){return{autoWidth:!0,valueMember:"payload",displayMember:"text"}},getInitialState:function(){return{open:!1,isHovered:!1,selectedIndex:this.props.hasOwnProperty("value")||this.props.hasOwnProperty("valueLink")?null:this.props.selectedIndex||0}},componentClickAway:function(){this.setState({open:!1})},componentDidMount:function(){this.props.autoWidth&&this._setWidth(),this.props.hasOwnProperty("selectedIndex")&&this._setSelectedIndex(this.props)},componentWillReceiveProps:function(nextProps){nextProps.hasOwnProperty("value")||nextProps.hasOwnProperty("valueLink")||nextProps.hasOwnProperty("selectedIndex")&&this._setSelectedIndex(nextProps)},getSpacing:function(){return this.context.muiTheme.spacing},getTextColor:function(){return this.context.muiTheme.palette.textColor},getStyles:function(){var accentColor=this.context.muiTheme.component.dropDownMenu.accentColor,backgroundColor=this.context.muiTheme.component.menu.backgroundColor,styles={root:{transition:Transitions.easeOut(),position:"relative",display:"inline-block",height:this.getSpacing().desktopToolbarHeight,fontSize:this.getSpacing().desktopDropDownMenuFontSize,outline:"none"},control:{cursor:"pointer",position:"static",height:"100%"},controlBg:{transition:Transitions.easeOut(),backgroundColor:backgroundColor,height:"100%",width:"100%",opacity:0},icon:{position:"absolute",top:(this.getSpacing().desktopToolbarHeight-24)/2,right:this.getSpacing().desktopGutterLess,fill:this.context.muiTheme.component.dropDownMenu.accentColor},label:{transition:Transitions.easeOut(),lineHeight:this.getSpacing().desktopToolbarHeight+"px",position:"absolute",paddingLeft:this.getSpacing().desktopGutter,top:0,opacity:1,color:this.getTextColor()},underline:{borderTop:"solid 1px "+accentColor,margin:"-1px "+this.getSpacing().desktopGutter+"px"},menuItem:{paddingRight:this.getSpacing().iconSize+this.getSpacing().desktopGutterLess+this.getSpacing().desktopGutterMini,height:this.getSpacing().desktopDropDownMenuItemHeight,lineHeight:this.getSpacing().desktopDropDownMenuItemHeight+"px",whiteSpace:"nowrap"},rootWhenOpen:{opacity:1},labelWhenOpen:{opacity:0,top:this.getSpacing().desktopToolbarHeight/2}};return styles},getInputNode:function(){var root=this.refs.root,item=this.props.menuItems[this.state.selectedIndex];return item&&(root.value=item[this.props.displayMember]),root},render:function(){var _this=this,styles=this.getStyles(),selectedIndex=this.state.selectedIndex,displayValue="";if(selectedIndex)"production"!==process.env.NODE_ENV&&console.assert(!!this.props.menuItems[selectedIndex],"SelectedIndex of "+selectedIndex+" does not exist in menuItems.");else if(this.props.valueMember&&(this.props.valueLink||this.props.value)){var value=this.props.value||this.props.valueLink.value;for(var i in this.props.menuItems)this.props.menuItems[i][this.props.valueMember]===value&&(selectedIndex=i)}var selectedItem=this.props.menuItems[selectedIndex];selectedItem&&(displayValue=selectedItem[this.props.displayMember]);var menuItems=this.props.menuItems.map(function(item){return item.text=item[_this.props.displayMember],item.payload=item[_this.props.valueMember],item});return React.createElement("div",{ref:"root",onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,onKeyDown:this._onKeyDown,onFocus:this.props.onFocus,onBlur:this.props.onBlur,className:this.props.className,style:this.mergeAndPrefix(styles.root,this.state.open&&styles.rootWhenOpen,this.props.style)},React.createElement(ClearFix,{style:this.mergeAndPrefix(styles.control),onTouchTap:this._onControlClick},React.createElement(Paper,{style:this.mergeAndPrefix(styles.controlBg),zDepth:0}),React.createElement("div",{style:this.mergeAndPrefix(styles.label,this.state.open&&styles.labelWhenOpen,this.props.labelStyle)},displayValue),React.createElement(DropDownArrow,{style:this.mergeAndPrefix(styles.icon,this.props.iconStyle)}),React.createElement("div",{style:this.mergeAndPrefix(styles.underline,this.props.underlineStyle)})),React.createElement(Menu,{ref:"menuItems",autoWidth:this.props.autoWidth,selectedIndex:selectedIndex,menuItems:menuItems,menuItemStyle:this.mergeAndPrefix(styles.menuItem,this.props.menuItemStyle),hideable:!0,visible:this.state.open,onRequestClose:this._onMenuRequestClose,onItemTap:this._onMenuItemClick}))},_setWidth:function(){var el=React.findDOMNode(this),menuItemsDom=React.findDOMNode(this.refs.menuItems);this.props.style&&this.props.style.hasOwnProperty("width")||(el.style.width=menuItemsDom.offsetWidth+"px")},_setSelectedIndex:function(props){var selectedIndex=props.selectedIndex;"production"!==process.env.NODE_ENV&&0>selectedIndex&&console.warn("Cannot set selectedIndex to a negative index.",selectedIndex),this.setState({selectedIndex:selectedIndex>-1?selectedIndex:0})},_onControlClick:function(){this.setState({open:!this.state.open})},_onKeyDown:function(e){switch(e.which){case KeyCode.UP:this.state.open?e.altKey&&this.setState({open:!1}):this._selectPreviousItem();break;case KeyCode.DOWN:this.state.open||(e.altKey?this.setState({open:!0}):this._selectNextItem());break;case KeyCode.ENTER:case KeyCode.SPACE:this.setState({open:!0});break;default:return}e.preventDefault()},_onMenuItemClick:function(e,key,payload){if(this.props.onChange&&this.state.selectedIndex!==key){var selectedItem=this.props.menuItems[key];selectedItem&&(e.target.value=selectedItem[this.props.valueMember]),this.props.valueLink?this.props.valueLink.requestChange(e.target.value):this.props.onChange(e,key,payload)}this.setState({selectedIndex:key,value:e.target.value,open:!1,isHovered:!1})},_onMenuRequestClose:function(){this.setState({open:!1})},_handleMouseOver:function(){this.setState({isHovered:!0})},_handleMouseOut:function(){this.setState({isHovered:!1})},_selectPreviousItem:function(){this.setState({selectedIndex:Math.max(this.state.selectedIndex-1,0)})},_selectNextItem:function(){this.setState({selectedIndex:Math.min(this.state.selectedIndex+1,this.props.menuItems.length-1)})}});module.exports=DropDownMenu;


}).call(this,require('_process'))

},{"./clearfix":119,"./menu/menu":149,"./mixins/click-awayable":152,"./mixins/style-propable":153,"./paper":157,"./styles/transitions":174,"./svg-icons/drop-down-arrow":177,"./utils/key-code":222,"_process":106,"react":404}],133:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),KeyCode=require("./utils/key-code"),StylePropable=require("./mixins/style-propable"),WindowListenable=require("./mixins/window-listenable"),FocusRipple=require("./ripples/focus-ripple"),TouchRipple=require("./ripples/touch-ripple"),EnhancedButton=React.createClass({displayName:"EnhancedButton",mixins:[StylePropable,WindowListenable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{centerRipple:React.PropTypes.bool,containerElement:React.PropTypes.oneOfType([React.PropTypes.string,React.PropTypes.element]),disabled:React.PropTypes.bool,disableFocusRipple:React.PropTypes.bool,disableTouchRipple:React.PropTypes.bool,keyboardFocused:React.PropTypes.bool,linkButton:React.PropTypes.bool,focusRippleColor:React.PropTypes.string,touchRippleColor:React.PropTypes.string,focusRippleOpacity:React.PropTypes.number,touchRippleOpacity:React.PropTypes.number,onBlur:React.PropTypes.func,onFocus:React.PropTypes.func,onMouseOut:React.PropTypes.func,onMouseOver:React.PropTypes.func,onTouchTap:React.PropTypes.func,onKeyboardFocus:React.PropTypes.func},getDefaultProps:function(){return{containerElement:"button"}},windowListeners:{keydown:"_handleWindowKeydown",keyup:"_handleWindowKeyup"},getInitialState:function(){return{isKeyboardFocused:!this.props.disabled&&this.props.keyboardFocused}},componentDidMount:function(){if(!EnhancedButton.hasStyleBeenInjected){var style=document.createElement("style");style.innerHTML="button::-moz-focus-inner,input::-moz-focus-inner { border: 0; padding: 0; }",document.body.appendChild(style),EnhancedButton.hasStyleBeenInjected=!0}},getStyles:function(){var styles={root:{border:10,background:"none",boxSizing:"border-box",font:"inherit",fontFamily:this.context.muiTheme.contentFontFamily,WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",WebkitAppearance:!this.props.linkButton&&"button",cursor:"pointer"},rootWhenLinkButton:{display:"inline-block",cursor:this.props.disabled?"default":"pointer",textDecoration:"none"},rootWhenDisabled:{cursor:"default"}};return styles},render:function(){var _props=this.props,centerRipple=_props.centerRipple,containerElement=_props.containerElement,disabled=_props.disabled,disableFocusRipple=_props.disableFocusRipple,disableTouchRipple=_props.disableTouchRipple,focusRippleColor=_props.focusRippleColor,focusRippleOpacity=_props.focusRippleOpacity,linkButton=_props.linkButton,touchRippleColor=_props.touchRippleColor,touchRippleOpacity=_props.touchRippleOpacity,style=(_props.onBlur,_props.onFocus,_props.onMouseOver,_props.onMouseOut,_props.onTouchTap,_props.style),other=_objectWithoutProperties(_props,["centerRipple","containerElement","disabled","disableFocusRipple","disableTouchRipple","focusRippleColor","focusRippleOpacity","linkButton","touchRippleColor","touchRippleOpacity","onBlur","onFocus","onMouseOver","onMouseOut","onTouchTap","style"]),styles=this.getStyles(),mergedStyles=this.mergeAndPrefix(styles.root,linkButton&&styles.rootWhenLinkButton,disabled&&styles.rootWhenDisabled,style),buttonProps=_extends({},other,{style:mergedStyles,disabled:disabled,onBlur:this._handleBlur,onFocus:this._handleFocus,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut,onTouchTap:this._handleTouchTap}),buttonChildren=[];return buttonChildren.push(disabled||disableTouchRipple?this.props.children:React.createElement(TouchRipple,{ref:"touchRipple",key:"touchRipple",centerRipple:centerRipple,color:touchRippleColor,opacity:touchRippleOpacity},this.props.children)),buttonChildren.push(disabled||disableFocusRipple?null:React.createElement(FocusRipple,{key:"focusRipple",color:focusRippleColor,opacity:focusRippleOpacity,show:this.state.isKeyboardFocused})),disabled&&linkButton?React.createElement("span",_extends({},other,{style:mergedStyles}),this.props.children):React.isValidElement(containerElement)?React.cloneElement(containerElement,buttonProps,buttonChildren):React.createElement(linkButton?"a":containerElement,buttonProps,buttonChildren)},isKeyboardFocused:function(){return this.state.isKeyboardFocused},_handleWindowKeydown:function(e){this.props.disabled||(e.keyCode==KeyCode.TAB&&(this._tabPressed=!0),e.keyCode==KeyCode.ENTER&&this.state.isKeyboardFocused&&this._handleTouchTap(e))},_handleWindowKeyup:function(e){!this.props.disabled&&e.keyCode==KeyCode.SPACE&&this.state.isKeyboardFocused&&this._handleTouchTap(e)},_handleBlur:function(e){this._cancelFocusTimeout(),this.props.disabled||(this.setState({isKeyboardFocused:!1}),this.props.onKeyboardFocus&&this.props.onKeyboardFocus(e,!1),this.props.onBlur&&this.props.onBlur(e))},_handleFocus:function(e){React.findDOMNode(this).style.outline="none",this.props.disabled||(this._focusTimeout=setTimeout(function(){this._tabPressed&&(this.setState({isKeyboardFocused:!0}),this.props.onKeyboardFocus&&this.props.onKeyboardFocus(e,!0))}.bind(this),150),this.props.onFocus&&this.props.onFocus(e))},_handleMouseOver:function(e){React.findDOMNode(this).style.textDecoration="none",this.props.onMouseOver&&this.props.onMouseOver(e)},_handleMouseOut:function(e){this.props.onMouseOut&&this.props.onMouseOut(e)},_handleTouchTap:function(e){this._cancelFocusTimeout(),this.props.disabled||(this._tabPressed=!1,this.setState({isKeyboardFocused:!1}),this.props.onKeyboardFocus&&this.props.onKeyboardFocus(e,!1),this.props.onTouchTap&&this.props.onTouchTap(e))},_cancelFocusTimeout:function(){this._focusTimeout&&(clearTimeout(this._focusTimeout),this._focusTimeout=null)}});EnhancedButton.hasStyleBeenInjected=!1,module.exports=EnhancedButton;


},{"./mixins/style-propable":153,"./mixins/window-listenable":155,"./ripples/focus-ripple":162,"./ripples/touch-ripple":163,"./utils/key-code":222,"react":404}],134:[function(require,module,exports){
(function (process){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),KeyCode=require("./utils/key-code"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),UniqueId=require("./utils/unique-id"),WindowListenable=require("./mixins/window-listenable"),ClearFix=require("./clearfix"),FocusRipple=require("./ripples/focus-ripple"),TouchRipple=require("./ripples/touch-ripple"),Paper=require("./paper"),EnhancedSwitch=React.createClass({displayName:"EnhancedSwitch",mixins:[WindowListenable,StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{id:React.PropTypes.string,inputType:React.PropTypes.string.isRequired,switchElement:React.PropTypes.element.isRequired,onParentShouldUpdate:React.PropTypes.func.isRequired,switched:React.PropTypes.bool.isRequired,rippleStyle:React.PropTypes.object,rippleColor:React.PropTypes.string,iconStyle:React.PropTypes.object,thumbStyle:React.PropTypes.object,trackStyle:React.PropTypes.object,labelStyle:React.PropTypes.object,name:React.PropTypes.string,value:React.PropTypes.string,label:React.PropTypes.string,onSwitch:React.PropTypes.func,required:React.PropTypes.bool,disabled:React.PropTypes.bool,defaultSwitched:React.PropTypes.bool,labelPosition:React.PropTypes.oneOf(["left","right"]),disableFocusRipple:React.PropTypes.bool,disableTouchRipple:React.PropTypes.bool},windowListeners:{keydown:"_handleWindowKeydown",keyup:"_handleWindowKeyup"},getInitialState:function(){return{isKeyboardFocused:!1,parentWidth:100}},getEvenWidth:function(){return parseInt(window.getComputedStyle(React.findDOMNode(this.refs.root)).getPropertyValue("width"),10)},componentDidMount:function(){var inputNode=React.findDOMNode(this.refs.checkbox);this.props.switched&&inputNode.checked==this.props.switched||this.props.onParentShouldUpdate(inputNode.checked),window.addEventListener("resize",this._handleResize),this._handleResize()},componentWillUnmount:function(){window.removeEventListener("resize",this._handleResize)},componentWillReceiveProps:function(nextProps){var hasCheckedLinkProp=nextProps.hasOwnProperty("checkedLink"),hasCheckedProp=nextProps.hasOwnProperty("checked"),hasToggledProp=nextProps.hasOwnProperty("toggled"),hasNewDefaultProp=nextProps.hasOwnProperty("defaultSwitched")&&nextProps.defaultSwitched!=this.props.defaultSwitched,newState={};hasCheckedProp?newState.switched=nextProps.checked:hasToggledProp?newState.switched=nextProps.toggled:hasCheckedLinkProp?newState.switched=nextProps.checkedLink.value:hasNewDefaultProp&&(newState.switched=nextProps.defaultSwitched),void 0!==newState.switched&&newState.switched!=this.props.switched&&this.props.onParentShouldUpdate(newState.switched)},getTheme:function(){return this.context.muiTheme.palette},getStyles:function(){var spacing=this.context.muiTheme.spacing,switchWidth=60-spacing.desktopGutterLess,labelWidth="calc(100% - 60px)",styles={root:{position:"relative",cursor:this.props.disabled?"default":"pointer",overflow:"visible",display:"table",height:"auto",width:"100%"},input:{position:"absolute",cursor:this.props.disabled?"default":"pointer",pointerEvents:"all",opacity:0,width:"100%",height:"100%",zIndex:2,left:0,boxSizing:"border-box",padding:0,margin:0},controls:{width:"100%",height:"100%"},label:{"float":"left",position:"relative",display:"block",width:labelWidth,lineHeight:"24px",color:this.getTheme().textColor},wrap:{transition:Transitions.easeOut(),"float":"left",position:"relative",display:"block",width:switchWidth,marginRight:"right"==this.props.labelPosition?spacing.desktopGutterLess:0,marginLeft:"left"==this.props.labelPosition?spacing.desktopGutterLess:0},ripple:{height:"200%",width:"200%",top:"-12",left:"-12"}};return styles},render:function(){var _props=this.props,disableTouchRipple=(_props.type,_props.name,_props.value,_props.label,_props.onSwitch,_props.defaultSwitched,_props.onBlur,_props.onFocus,_props.onMouseUp,_props.onMouseDown,_props.onMouseOut,_props.onTouchStart,_props.onTouchEnd,_props.disableTouchRipple),disableFocusRipple=_props.disableFocusRipple,className=_props.className,other=_objectWithoutProperties(_props,["type","name","value","label","onSwitch","defaultSwitched","onBlur","onFocus","onMouseUp","onMouseDown","onMouseOut","onTouchStart","onTouchEnd","disableTouchRipple","disableFocusRipple","className"]),styles=this.getStyles(),wrapStyles=this.mergeAndPrefix(styles.wrap,this.props.iconStyle),rippleStyle=this.mergeAndPrefix(styles.ripple,this.props.rippleStyle),rippleColor=this.props.hasOwnProperty("rippleColor")?this.props.rippleColor:this.getTheme().primary1Color;this.props.thumbStyle&&(wrapStyles.marginLeft/=2,wrapStyles.marginRight/=2);var inputId=this.props.id||UniqueId.generate(),labelStyle=this.mergeAndPrefix(styles.label,this.props.labelStyle),labelElement=this.props.label?React.createElement("label",{style:labelStyle,htmlFor:inputId},this.props.label):null,inputProps={ref:"checkbox",type:this.props.inputType,style:this.mergeAndPrefix(styles.input),name:this.props.name,value:this.props.value,defaultChecked:this.props.defaultSwitched,onBlur:this._handleBlur,onFocus:this._handleFocus},hideTouchRipple=this.props.disabled||disableTouchRipple;hideTouchRipple||(inputProps.onMouseUp=this._handleMouseUp,inputProps.onMouseDown=this._handleMouseDown,inputProps.onMouseOut=this._handleMouseOut,inputProps.onTouchStart=this._handleTouchStart,inputProps.onTouchEnd=this._handleTouchEnd),this.props.hasOwnProperty("checkedLink")||(inputProps.onChange=this._handleChange);var inputElement=React.createElement("input",_extends({},other,inputProps)),touchRipple=React.createElement(TouchRipple,{ref:"touchRipple",key:"touchRipple",style:rippleStyle,color:rippleColor,centerRipple:!0}),focusRipple=React.createElement(FocusRipple,{key:"focusRipple",innerStyle:rippleStyle,color:rippleColor,show:this.state.isKeyboardFocused}),ripples=[hideTouchRipple?null:touchRipple,this.props.disabled||disableFocusRipple?null:focusRipple],switchElement=this.props.thumbStyle?React.createElement("div",{style:wrapStyles},React.createElement("div",{style:this.props.trackStyle}),React.createElement(Paper,{style:this.props.thumbStyle,zDepth:1,circle:!0}," ",ripples," ")):React.createElement("div",{style:wrapStyles},this.props.switchElement,ripples),labelPositionExist=this.props.labelPosition,elementsInOrder=labelPositionExist&&"RIGHT"===this.props.labelPosition.toUpperCase()?React.createElement(ClearFix,{style:this.mergeAndPrefix(styles.controls)},switchElement,labelElement):React.createElement(ClearFix,{style:this.mergeAndPrefix(styles.controls)},labelElement,switchElement);return React.createElement("div",{ref:"root",className:className,style:this.mergeAndPrefix(styles.root,this.props.style)},inputElement,elementsInOrder)},isSwitched:function(){return React.findDOMNode(this.refs.checkbox).checked},setSwitched:function(newSwitchedValue){if(this.props.hasOwnProperty("checked")&&this.props.checked!==!1){if("production"!==process.env.NODE_ENV){var message="Cannot call set method while checked is defined as a property.";console.error(message)}}else this.props.onParentShouldUpdate(newSwitchedValue),React.findDOMNode(this.refs.checkbox).checked=newSwitchedValue},getValue:function(){return React.findDOMNode(this.refs.checkbox).value},isKeyboardFocused:function(){return this.state.isKeyboardFocused},_handleChange:function(e){this._tabPressed=!1,this.setState({isKeyboardFocused:!1});var isInputChecked=React.findDOMNode(this.refs.checkbox).checked;this.props.hasOwnProperty("checked")||this.props.onParentShouldUpdate(isInputChecked),this.props.onSwitch&&this.props.onSwitch(e,isInputChecked)},_handleWindowKeydown:function(e){e.keyCode==KeyCode.TAB&&(this._tabPressed=!0),e.keyCode==KeyCode.SPACE&&this.state.isKeyboardFocused&&this._handleChange(e)},_handleWindowKeyup:function(e){e.keyCode==KeyCode.SPACE&&this.state.isKeyboardFocused&&this._handleChange(e)},_handleMouseDown:function(e){0===e.button&&this.refs.touchRipple.start(e)},_handleMouseUp:function(){this.refs.touchRipple.end()},_handleMouseOut:function(){this.refs.touchRipple.end()},_handleTouchStart:function(e){this.refs.touchRipple.start(e)},_handleTouchEnd:function(){this.refs.touchRipple.end()},_handleBlur:function(e){this.setState({isKeyboardFocused:!1}),this.props.onBlur&&this.props.onBlur(e)},_handleFocus:function(e){setTimeout(function(){this._tabPressed&&this.setState({isKeyboardFocused:!0})}.bind(this),150),this.props.onFocus&&this.props.onFocus(e)},_handleResize:function(){this.setState({parentWidth:this.getEvenWidth()})}});module.exports=EnhancedSwitch;


}).call(this,require('_process'))

},{"./clearfix":119,"./mixins/style-propable":153,"./mixins/window-listenable":155,"./paper":157,"./ripples/focus-ripple":162,"./ripples/touch-ripple":163,"./styles/transitions":174,"./utils/key-code":222,"./utils/unique-id":225,"_process":106,"react":404}],135:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),AutoPrefix=require("./styles/auto-prefix"),EnhancedTextarea=React.createClass({displayName:"EnhancedTextarea",mixins:[StylePropable],propTypes:{onChange:React.PropTypes.func,onHeightChange:React.PropTypes.func,textareaStyle:React.PropTypes.object,rows:React.PropTypes.number},getDefaultProps:function(){return{rows:1}},getInitialState:function(){return{height:24*this.props.rows}},componentDidMount:function(){this._syncHeightWithShadow()},getStyles:function(){var styles={root:{width:"100%",resize:"none",overflow:"hidden",font:"inherit",padding:0}};return styles},render:function(){var _props=this.props,style=(_props.onChange,_props.onHeightChange,_props.rows,_props.style),textareaStyle=_props.textareaStyle,other=(_props.valueLink,_objectWithoutProperties(_props,["onChange","onHeightChange","rows","style","textareaStyle","valueLink"])),styles=this.getStyles().root,textAreaStyles={width:"100%",resize:"none",overflow:"hidden",font:"inherit",padding:0},inputStyles=this.mergeAndPrefix(styles,{height:this.state.height+"px"});inputStyles=this.mergeAndPrefix(inputStyles,textareaStyle);var shadowStyles=this.mergeAndPrefix(textAreaStyles,{position:"absolute",opacity:0});return this.props.hasOwnProperty("valueLink")&&(other.value=this.props.valueLink.value),this.props.disabled&&(style.cursor="default"),React.createElement("div",{style:this.props.style},React.createElement("textarea",{ref:"shadow",style:AutoPrefix.all(shadowStyles),tabIndex:"-1",rows:this.props.rows,defaultValue:this.props.defaultValue,readOnly:!0,value:this.props.value,valueLink:this.props.valueLink}),React.createElement("textarea",_extends({},other,{ref:"input",rows:this.props.rows,style:AutoPrefix.all(inputStyles),onChange:this._handleChange})))},getInputNode:function(){return React.findDOMNode(this.refs.input)},setValue:function(value){this.refs.input.value=value,this._syncHeightWithShadow(value)},_syncHeightWithShadow:function(newValue,e){var newHeight,shadow=React.findDOMNode(this.refs.shadow),currentHeight=this.state.height;void 0!==newValue&&(shadow.value=newValue),newHeight=shadow.scrollHeight,currentHeight!==newHeight&&(this.setState({height:newHeight}),this.props.onHeightChange&&this.props.onHeightChange(e,newHeight))},_handleChange:function(e){this._syncHeightWithShadow(e.target.value),this.props.hasOwnProperty("valueLink")&&this.props.valueLink.requestChange(e.target.value),this.props.onChange&&this.props.onChange(e)},componentWillReceiveProps:function(nextProps){nextProps.value!=this.props.value&&this._syncHeightWithShadow(nextProps.value)}});module.exports=EnhancedTextarea;


},{"./mixins/style-propable":153,"./styles/auto-prefix":167,"react":404}],136:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),ColorManipulator=require("./utils/color-manipulator"),Typography=require("./styles/typography"),EnhancedButton=require("./enhanced-button"),FlatButton=React.createClass({displayName:"FlatButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,disabled:React.PropTypes.bool,hoverColor:React.PropTypes.string,label:function(props,propName,componentName){return props.children||props.label?void 0:new Error("Warning: Required prop `label` or `children` was not specified in `"+componentName+"`.")},labelStyle:React.PropTypes.object,primary:React.PropTypes.bool,rippleColor:React.PropTypes.string,secondary:React.PropTypes.bool},getDefaultProps:function(){return{labelStyle:{}}},getInitialState:function(){return{hovered:!1,isKeyboardFocused:!1}},getThemeButton:function(){return this.context.muiTheme.component.button},getTheme:function(){return this.context.muiTheme.component.flatButton},_getColor:function(){var theme=this.getTheme(),color=this.props.disabled?theme.disabledTextColor:this.props.primary?theme.primaryTextColor:this.props.secondary?theme.secondaryTextColor:theme.textColor;return{"default":color,hover:this.props.hoverColor||ColorManipulator.fade(ColorManipulator.lighten(color,.4),.15),ripple:this.props.rippleColor||ColorManipulator.fade(color,.8)}},getStyles:function(){var color=this._getColor(),styles={root:{color:color["default"],transition:Transitions.easeOut(),fontSize:Typography.fontStyleButtonFontSize,letterSpacing:0,textTransform:"uppercase",fontWeight:Typography.fontWeightMedium,borderRadius:2,userSelect:"none",position:"relative",overflow:"hidden",backgroundColor:this.getTheme().color,lineHeight:this.getThemeButton().height+"px",minWidth:this.getThemeButton().minWidth,padding:0,margin:0,transform:"translate3d(0, 0, 0)"},label:{position:"relative",padding:"0px "+this.context.muiTheme.spacing.desktopGutterLess+"px"},rootWhenHovered:{backgroundColor:color.hover},rippleColor:color.ripple};return styles},render:function(){var labelElement,_props=this.props,label=(_props.children,_props.hoverColor,_props.label),other=(_props.labelStyle,_props.onBlur,_props.onMouseOut,_props.onMouseOver,_props.primary,_props.rippleColor,_props.secondary,_props.style,_objectWithoutProperties(_props,["children","hoverColor","label","labelStyle","onBlur","onMouseOut","onMouseOver","primary","rippleColor","secondary","style"])),styles=this.getStyles();return label&&(labelElement=React.createElement("span",{style:this.mergeAndPrefix(styles.label,this.props.labelStyle)},label)),React.createElement(EnhancedButton,_extends({},other,{ref:"enhancedButton",style:this.mergeStyles(styles.root,(this.state.hovered||this.state.isKeyboardFocused)&&!this.props.disabled&&styles.rootWhenHovered,this.props.style),onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut,focusRippleColor:styles.rippleColor,touchRippleColor:styles.rippleColor,onKeyboardFocus:this._handleKeyboardFocus}),labelElement,this.props.children)},_handleMouseOver:function(e){this.setState({hovered:!0}),this.props.onMouseOver&&this.props.onMouseOver(e)},_handleMouseOut:function(e){this.setState({hovered:!1}),this.props.onMouseOut&&this.props.onMouseOut(e)},_handleKeyboardFocus:function(e,isKeyboardFocused){this.setState({isKeyboardFocused:isKeyboardFocused})},_handleOnBlur:function(e){this.setState({hovered:!1}),this.props.onBlur&&this.props.onBlur(e)}});module.exports=FlatButton;


},{"./enhanced-button":133,"./mixins/style-propable":153,"./styles/transitions":174,"./styles/typography":175,"./utils/color-manipulator":216,"react":404}],137:[function(require,module,exports){
(function (process){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),ColorManipulator=require("./utils/color-manipulator"),EnhancedButton=require("./enhanced-button"),FontIcon=require("./font-icon"),Paper=require("./paper"),getZDepth=function(disabled){var zDepth=disabled?0:2;return{zDepth:zDepth,initialZDepth:zDepth}},RaisedButton=React.createClass({displayName:"RaisedButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{disabled:React.PropTypes.bool,iconClassName:React.PropTypes.string,iconStyle:React.PropTypes.object,mini:React.PropTypes.bool,onMouseDown:React.PropTypes.func,onMouseUp:React.PropTypes.func,onMouseOut:React.PropTypes.func,onTouchEnd:React.PropTypes.func,onTouchStart:React.PropTypes.func,secondary:React.PropTypes.bool},getInitialState:function(){var zDepth=this.props.disabled?0:2;return{zDepth:zDepth,initialZDepth:zDepth,hovered:!1}},componentWillMount:function(){this.setState(getZDepth(this.props.disabled))},componentWillReceiveProps:function(newProps){newProps.disabled!==this.props.disabled&&this.setState(getZDepth(newProps.disabled))},componentDidMount:function(){if("production"!==process.env.NODE_ENV&&this.props.iconClassName&&this.props.children){var warning="You have set both an iconClassName and a child icon. It is recommended you use only one method when adding icons to FloatingActionButtons.";console.warn(warning)}},_getBackgroundColor:function(){return this.props.disabled?this.getTheme().disabledColor:this.props.secondary?this.getTheme().secondaryColor:this.getTheme().color},getTheme:function(){return this.context.muiTheme.component.floatingActionButton},_getIconColor:function(){return this.props.disabled?this.getTheme().disabledTextColor:this.props.secondary?this.getTheme().secondaryIconColor:this.getTheme().iconColor},getStyles:function(){var styles={root:{transition:Transitions.easeOut(),display:"inline-block"},container:{transition:Transitions.easeOut(),position:"relative",height:this.getTheme().buttonSize,width:this.getTheme().buttonSize,padding:0,overflow:"hidden",backgroundColor:this._getBackgroundColor(),borderRadius:"50%",textAlign:"center",verticalAlign:"bottom",transform:"translate3d(0, 0, 0)"},icon:{lineHeight:this.getTheme().buttonSize+"px",fill:this.getTheme().iconColor,color:this._getIconColor()},overlay:{transition:Transitions.easeOut(),top:0},containerWhenMini:{height:this.getTheme().miniSize,width:this.getTheme().miniSize},iconWhenMini:{lineHeight:this.getTheme().miniSize+"px"},overlayWhenHovered:{backgroundColor:ColorManipulator.fade(this._getIconColor(),.4)}};return styles},render:function(){var iconElement,_props=this.props,disabled=_props.disabled,mini=(_props.icon,_props.mini),other=(_props.secondary,_objectWithoutProperties(_props,["disabled","icon","mini","secondary"])),styles=this.getStyles();this.props.iconClassName&&(iconElement=React.createElement(FontIcon,{className:this.props.iconClassName,style:this.mergeAndPrefix(styles.icon,mini&&styles.iconWhenMini,this.props.iconStyle)}));var rippleColor=styles.icon.color,buttonEventHandlers=disabled?null:{onMouseDown:this._handleMouseDown,onMouseUp:this._handleMouseUp,onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,onTouchStart:this._handleTouchStart,onTouchEnd:this._handleTouchEnd,onKeyboardFocus:this._handleKeyboardFocus};return React.createElement(Paper,{style:this.mergeAndPrefix(styles.root,this.props.style),zDepth:this.state.zDepth,circle:!0},React.createElement(EnhancedButton,_extends({},other,buttonEventHandlers,{ref:"container",disabled:disabled,style:this.mergeAndPrefix(styles.container,this.props.mini&&styles.containerWhenMini),focusRippleColor:rippleColor,touchRippleColor:rippleColor}),React.createElement("div",{ref:"overlay",style:this.mergeAndPrefix(styles.overlay,this.state.hovered&&!this.props.disabled&&styles.overlayWhenHovered)},iconElement,this.props.children)))},_handleMouseDown:function(e){0===e.button&&this.setState({zDepth:this.state.initialZDepth+1}),this.props.onMouseDown&&this.props.onMouseDown(e)},_handleMouseUp:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onMouseUp&&this.props.onMouseUp(e)},_handleMouseOut:function(e){this.refs.container.isKeyboardFocused()||this.setState({zDepth:this.state.initialZDepth,hovered:!1}),this.props.onMouseOut&&this.props.onMouseOut(e)},_handleMouseOver:function(e){this.refs.container.isKeyboardFocused()||this.setState({hovered:!0}),this.props.onMouseOver&&this.props.onMouseOver(e)},_handleTouchStart:function(e){this.setState({zDepth:this.state.initialZDepth+1}),this.props.onTouchStart&&this.props.onTouchStart(e)},_handleTouchEnd:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onTouchEnd&&this.props.onTouchEnd(e)},_handleKeyboardFocus:function(e,keyboardFocused){keyboardFocused&&!this.props.disabled?(this.setState({zDepth:this.state.initialZDepth+1}),React.findDOMNode(this.refs.overlay).style.backgroundColor=ColorManipulator.fade(this.getStyles().icon.color,.4)):this.state.hovered||(this.setState({zDepth:this.state.initialZDepth}),React.findDOMNode(this.refs.overlay).style.backgroundColor="transparent")}});module.exports=RaisedButton;


}).call(this,require('_process'))

},{"./enhanced-button":133,"./font-icon":138,"./mixins/style-propable":153,"./paper":157,"./styles/transitions":174,"./utils/color-manipulator":216,"_process":106,"react":404}],138:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),FontIcon=React.createClass({displayName:"FontIcon",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{color:React.PropTypes.string,hoverColor:React.PropTypes.string,onMouseOut:React.PropTypes.func,onMouseOver:React.PropTypes.func},getInitialState:function(){return{hovered:!1}},render:function(){var _props=this.props,color=_props.color,hoverColor=_props.hoverColor,style=(_props.onMouseOut,_props.onMouseOver,_props.style),other=_objectWithoutProperties(_props,["color","hoverColor","onMouseOut","onMouseOver","style"]),spacing=this.context.muiTheme.spacing,offColor=color?color:style&&style.color?style.color:this.context.muiTheme.palette.textColor,onColor=hoverColor?hoverColor:offColor,mergedStyles=this.mergeAndPrefix({position:"relative",fontSize:spacing.iconSize,display:"inline-block",userSelect:"none",transition:Transitions.easeOut()},style,{color:this.state.hovered?onColor:offColor});return React.createElement("span",_extends({},other,{onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,style:mergedStyles}))},_handleMouseOut:function(e){this.setState({hovered:!1}),this.props.onMouseOut&&this.props.onMouseOut(e)},_handleMouseOver:function(e){this.setState({hovered:!0}),this.props.onMouseOver&&this.props.onMouseOver(e)}});module.exports=FontIcon;


},{"./mixins/style-propable":153,"./styles/transitions":174,"react":404}],139:[function(require,module,exports){
(function (process){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),EnhancedButton=require("./enhanced-button"),FontIcon=require("./font-icon"),Tooltip=require("./tooltip"),IconButton=React.createClass({displayName:"IconButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,disabled:React.PropTypes.bool,iconClassName:React.PropTypes.string,iconStyle:React.PropTypes.object,onBlur:React.PropTypes.func,onFocus:React.PropTypes.func,tooltip:React.PropTypes.string,touch:React.PropTypes.bool},getInitialState:function(){return{tooltipShown:!1}},getDefaultProps:function(){return{iconStyle:{}}},componentDidMount:function(){if(this.props.tooltip&&this._positionTooltip(),"production"!==process.env.NODE_ENV&&this.props.iconClassName&&this.props.children){var warning="You have set both an iconClassName and a child icon. It is recommended you use only one method when adding icons to IconButtons.";console.warn(warning)}},getStyles:function(){var spacing=this.context.muiTheme.spacing,palette=this.context.muiTheme.palette,styles={root:{position:"relative",boxSizing:"border-box",transition:Transitions.easeOut(),padding:spacing.iconSize/2,width:2*spacing.iconSize,height:2*spacing.iconSize},tooltip:{boxSizing:"border-box",marginTop:this.context.muiTheme.component.button.iconButtonSize+4},icon:{color:palette.textColor,fill:palette.textColor},overlay:{position:"relative",top:0,width:"100%",height:"100%",background:palette.disabledColor},disabled:{color:palette.disabledColor,fill:palette.disabledColor}};return styles},render:function(){var fonticon,_props=this.props,disabled=_props.disabled,iconClassName=_props.iconClassName,tooltip=_props.tooltip,touch=_props.touch,other=_objectWithoutProperties(_props,["disabled","iconClassName","tooltip","touch"]),styles=this.getStyles(),tooltipElement=tooltip?React.createElement(Tooltip,{ref:"tooltip",label:tooltip,show:this.state.tooltipShown,touch:touch,style:this.mergeStyles(styles.tooltip)}):null;if(iconClassName){var _props$iconStyle=this.props.iconStyle,iconHoverColor=_props$iconStyle.iconHoverColor,iconStyle=_objectWithoutProperties(_props$iconStyle,["iconHoverColor"]);fonticon=React.createElement(FontIcon,{className:iconClassName,hoverColor:disabled?null:iconHoverColor,style:this.mergeStyles(styles.icon,disabled?styles.disabled:{},iconStyle)})}var children=disabled?this._addStylesToChildren(styles.disabled):this.props.children;return React.createElement(EnhancedButton,_extends({},other,{ref:"button",centerRipple:!0,disabled:disabled,style:this.mergeStyles(styles.root,this.props.style),onBlur:this._handleBlur,onFocus:this._handleFocus,onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,onKeyboardFocus:this._handleKeyboardFocus}),tooltipElement,fonticon,children)},_addStylesToChildren:function(styles){var children=[];return React.Children.forEach(this.props.children,function(child){children.push(React.cloneElement(child,{key:child.props.key?child.props.key:children.length,style:styles}))}),children},_positionTooltip:function(){var tooltip=React.findDOMNode(this.refs.tooltip),tooltipWidth=tooltip.offsetWidth,buttonWidth=48;tooltip.style.left=(tooltipWidth-buttonWidth)/2*-1+"px"},_showTooltip:function(){!this.props.disabled&&this.props.tooltip&&this.setState({tooltipShown:!0})},_hideTooltip:function(){this.props.tooltip&&this.setState({tooltipShown:!1})},_handleBlur:function(e){this._hideTooltip(),this.props.onBlur&&this.props.onBlur(e)},_handleFocus:function(e){this._showTooltip(),this.props.onFocus&&this.props.onFocus(e)},_handleMouseOut:function(e){this.refs.button.isKeyboardFocused()||this._hideTooltip(),this.props.onMouseOut&&this.props.onMouseOut(e)},_handleMouseOver:function(e){this._showTooltip(),this.props.onMouseOver&&this.props.onMouseOver(e)},_handleKeyboardFocus:function(e,keyboardFocused){keyboardFocused&&!this.props.disabled?(this._showTooltip(),this.props.onFocus&&this.props.onFocus(e)):this.state.hovered||(this._hideTooltip(),this.props.onBlur&&this.props.onBlur(e))}});module.exports=IconButton;


}).call(this,require('_process'))

},{"./enhanced-button":133,"./font-icon":138,"./mixins/style-propable":153,"./styles/transitions":174,"./tooltip":213,"_process":106,"react":404}],140:[function(require,module,exports){
"use strict";module.exports={AppBar:require("./app-bar"),AppCanvas:require("./app-canvas"),Avatar:require("./avatar"),BeforeAfterWrapper:require("./before-after-wrapper"),Card:require("./card/card"),CardActions:require("./card/card-actions"),CardHeader:require("./card/card-header"),CardMedia:require("./card/card-media"),CardText:require("./card/card-text"),CardTitle:require("./card/card-title"),Checkbox:require("./checkbox"),CircularProgress:require("./circular-progress"),ClearFix:require("./clearfix"),DatePicker:require("./date-picker/date-picker"),Dialog:require("./dialog"),DialogWindow:require("./dialog-window"),DropDownIcon:require("./drop-down-icon"),DropDownMenu:require("./drop-down-menu"),EnhancedButton:require("./enhanced-button"),FlatButton:require("./flat-button"),FloatingActionButton:require("./floating-action-button"),FontIcon:require("./font-icon"),IconButton:require("./icon-button"),LeftNav:require("./left-nav"),LinearProgress:require("./linear-progress"),List:require("./lists/list"),ListDivider:require("./lists/list-divider"),ListItem:require("./lists/list-item"),Menu:require("./menu/menu"),MenuItem:require("./menu/menu-item"),Mixins:{Classable:require("./mixins/classable"),ClickAwayable:require("./mixins/click-awayable"),WindowListenable:require("./mixins/window-listenable"),StylePropable:require("./mixins/style-propable"),StyleResizable:require("./mixins/style-resizable")},Paper:require("./paper"),RadioButton:require("./radio-button"),RadioButtonGroup:require("./radio-button-group"),RaisedButton:require("./raised-button"),SelectField:require("./select-field"),Slider:require("./slider"),SvgIcon:require("./svg-icon"),Icons:{NavigationMenu:require("./svg-icons/navigation-menu"),NavigationChevronLeft:require("./svg-icons/navigation-chevron-left"),NavigationChevronRight:require("./svg-icons/navigation-chevron-right")},Styles:{AutoPrefix:require("./styles/auto-prefix"),Colors:require("./styles/colors"),Spacing:require("./styles/spacing"),ThemeManager:require("./styles/theme-manager"),Transitions:require("./styles/transitions"),Typography:require("./styles/typography")},Snackbar:require("./snackbar"),Tab:require("./tabs/tab"),Table:require("./table/table"),Tabs:require("./tabs/tabs"),Theme:require("./theme"),Toggle:require("./toggle"),TimePicker:require("./time-picker"),TextField:require("./text-field"),Toolbar:require("./toolbar/toolbar"),ToolbarGroup:require("./toolbar/toolbar-group"),ToolbarSeparator:require("./toolbar/toolbar-separator"),ToolbarTitle:require("./toolbar/toolbar-title"),Tooltip:require("./tooltip"),Utils:{CssEvent:require("./utils/css-event"),Dom:require("./utils/dom"),Events:require("./utils/events"),KeyCode:require("./utils/key-code"),KeyLine:require("./utils/key-line"),ColorManipulator:require("./utils/color-manipulator"),Extend:require("./utils/extend"),UniqueId:require("./utils/unique-id")}};


},{"./app-bar":107,"./app-canvas":108,"./avatar":109,"./before-after-wrapper":110,"./card/card":116,"./card/card-actions":111,"./card/card-header":112,"./card/card-media":113,"./card/card-text":114,"./card/card-title":115,"./checkbox":117,"./circular-progress":118,"./clearfix":119,"./date-picker/date-picker":126,"./dialog":130,"./dialog-window":129,"./drop-down-icon":131,"./drop-down-menu":132,"./enhanced-button":133,"./flat-button":136,"./floating-action-button":137,"./font-icon":138,"./icon-button":139,"./left-nav":142,"./linear-progress":143,"./lists/list":146,"./lists/list-divider":144,"./lists/list-item":145,"./menu/menu":149,"./menu/menu-item":148,"./mixins/classable":151,"./mixins/click-awayable":152,"./mixins/style-propable":153,"./mixins/style-resizable":154,"./mixins/window-listenable":155,"./paper":157,"./radio-button":159,"./radio-button-group":158,"./raised-button":160,"./select-field":164,"./slider":165,"./snackbar":166,"./styles/auto-prefix":167,"./styles/colors":168,"./styles/spacing":170,"./styles/theme-manager":171,"./styles/transitions":174,"./styles/typography":175,"./svg-icon":176,"./svg-icons/navigation-chevron-left":179,"./svg-icons/navigation-chevron-right":181,"./svg-icons/navigation-menu":182,"./table/table":192,"./tabs/tab":193,"./tabs/tabs":195,"./text-field":196,"./theme":197,"./time-picker":204,"./toggle":208,"./toolbar/toolbar":212,"./toolbar/toolbar-group":209,"./toolbar/toolbar-separator":210,"./toolbar/toolbar-title":211,"./tooltip":213,"./utils/color-manipulator":216,"./utils/css-event":217,"./utils/dom":219,"./utils/events":220,"./utils/extend":221,"./utils/key-code":222,"./utils/key-line":223,"./utils/unique-id":225}],141:[function(require,module,exports){
"use strict";var React=require("react"),Transitions=require("./styles/transitions"),StylePropable=require("./mixins/style-propable"),InkBar=React.createClass({displayName:"InkBar",contextTypes:{muiTheme:React.PropTypes.object},propTypes:{left:React.PropTypes.string.isRequired,width:React.PropTypes.string.isRequired},mixins:[StylePropable],render:function(){var palette=this.context.muiTheme.palette,styles=this.mergeAndPrefix({left:this.props.left,width:this.props.width,bottom:0,display:"block",backgroundColor:palette.accent1Color,height:2,marginTop:-2,position:"relative",transition:Transitions.easeOut("1s","left")});return React.createElement("div",{style:styles}," ")}});module.exports=InkBar;


},{"./mixins/style-propable":153,"./styles/transitions":174,"react":404}],142:[function(require,module,exports){
"use strict";var React=require("react"),KeyCode=require("./utils/key-code"),StylePropable=require("./mixins/style-propable"),AutoPrefix=require("./styles/auto-prefix"),Transitions=require("./styles/transitions"),WindowListenable=require("./mixins/window-listenable"),Overlay=require("./overlay"),Paper=require("./paper"),Menu=require("./menu/menu"),LeftNav=React.createClass({displayName:"LeftNav",mixins:[StylePropable,WindowListenable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,docked:React.PropTypes.bool,header:React.PropTypes.element,menuItems:React.PropTypes.array.isRequired,onChange:React.PropTypes.func,onNavOpen:React.PropTypes.func,onNavClose:React.PropTypes.func,openRight:React.PropTypes.bool,selectedIndex:React.PropTypes.number},windowListeners:{keyup:"_onWindowKeyUp",resize:"_onWindowResize"},getDefaultProps:function(){return{docked:!0}},getInitialState:function(){return{open:this.props.docked,maybeSwiping:!1,swiping:!1}},componentDidMount:function(){this._updateMenuHeight(),this._enableSwipeHandling()},componentDidUpdate:function(prevProps,prevState){this._updateMenuHeight(),this._enableSwipeHandling()},componentWillUnmount:function(){this._disableSwipeHandling()},toggle:function(){return this.setState({open:!this.state.open}),this},close:function(){return this.setState({open:!1}),this.props.onNavClose&&this.props.onNavClose(),this},open:function(){return this.setState({open:!0}),this.props.onNavOpen&&this.props.onNavOpen(),this},getThemePalette:function(){return this.context.muiTheme.palette},getTheme:function(){return this.context.muiTheme.component.leftNav},getStyles:function(){var x=this._getTranslateMultiplier()*(this.state.open?0:this._getMaxTranslateX())+"px",styles={root:{height:"100%",width:this.getTheme().width,position:"fixed",zIndex:10,left:0,top:0,transform:"translate3d("+x+", 0, 0)",transition:!this.state.swiping&&Transitions.easeOut(),backgroundColor:this.getTheme().color,overflow:"hidden"},menu:{overflowY:"auto",overflowX:"hidden",height:"100%"},menuItem:{height:this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight,lineHeight:this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight+"px"},rootWhenOpenRight:{left:"auto",right:"0"}};return styles.menuItemLink=this.mergeAndPrefix(styles.menuItem,{display:"block",textDecoration:"none",color:this.getThemePalette().textColor}),styles.menuItemSubheader=this.mergeAndPrefix(styles.menuItem,{overflow:"hidden"}),styles},render:function(){var overlay,selectedIndex=this.props.selectedIndex,styles=this.getStyles();return this.props.docked||(overlay=React.createElement(Overlay,{ref:"overlay",show:this.state.open,transitionEnabled:!this.state.swiping,onTouchTap:this._onOverlayTouchTap})),React.createElement("div",{className:this.props.className},overlay,React.createElement(Paper,{ref:"clickAwayableElement",zDepth:2,rounded:!1,transitionEnabled:!this.state.swiping,style:this.mergeAndPrefix(styles.root,this.props.openRight&&styles.rootWhenOpenRight,this.props.style)},this.props.header,React.createElement(Menu,{ref:"menuItems",style:this.mergeAndPrefix(styles.menu),zDepth:0,menuItems:this.props.menuItems,menuItemStyle:this.mergeAndPrefix(styles.menuItem),menuItemStyleLink:this.mergeAndPrefix(styles.menuItemLink),menuItemStyleSubheader:this.mergeAndPrefix(styles.menuItemSubheader),selectedIndex:selectedIndex,onItemTap:this._onMenuItemClick})))},_updateMenuHeight:function(){if(this.props.header){var container=React.findDOMNode(this.refs.clickAwayableElement),menu=React.findDOMNode(this.refs.menuItems),menuHeight=container.clientHeight-menu.offsetTop;menu.style.height=menuHeight+"px"}},_onMenuItemClick:function(e,key,payload){this.props.onChange&&this.props.selectedIndex!==key&&this.props.onChange(e,key,payload),this.props.docked||this.close()},_onOverlayTouchTap:function(){this.close()},_onWindowKeyUp:function(e){e.keyCode==KeyCode.ESC&&!this.props.docked&&this.state.open&&this.close()},_onWindowResize:function(e){this._updateMenuHeight()},_getMaxTranslateX:function(){return this.getTheme().width+10},_getTranslateMultiplier:function(){return this.props.openRight?1:-1},_enableSwipeHandling:function(){this.state.open&&!this.props.docked?document.body.addEventListener("touchstart",this._onBodyTouchStart):this._disableSwipeHandling()},_disableSwipeHandling:function(){document.body.removeEventListener("touchstart",this._onBodyTouchStart)},_onBodyTouchStart:function(e){var touchStartX=e.touches[0].pageX,touchStartY=e.touches[0].pageY;this.setState({maybeSwiping:!0,touchStartX:touchStartX,touchStartY:touchStartY}),document.body.addEventListener("touchmove",this._onBodyTouchMove),document.body.addEventListener("touchend",this._onBodyTouchEnd),document.body.addEventListener("touchcancel",this._onBodyTouchEnd)},_onBodyTouchMove:function(e){var currentX=e.touches[0].pageX,currentY=e.touches[0].pageY;if(this.state.swiping){e.preventDefault();var translateX=Math.min(Math.max(this._getTranslateMultiplier()*(currentX-this.state.swipeStartX),0),this._getMaxTranslateX()),leftNav=React.findDOMNode(this.refs.clickAwayableElement);leftNav.style[AutoPrefix.single("transform")]="translate3d("+this._getTranslateMultiplier()*translateX+"px, 0, 0)",this.refs.overlay.setOpacity(1-translateX/this._getMaxTranslateX())}else if(this.state.maybeSwiping){var dXAbs=Math.abs(currentX-this.state.touchStartX),dYAbs=Math.abs(currentY-this.state.touchStartY),threshold=10;dXAbs>threshold&&threshold>=dYAbs?this.setState({swiping:!0,swipeStartX:currentX}):threshold>=dXAbs&&dYAbs>threshold&&this._onBodyTouchEnd()}},_onBodyTouchEnd:function(){var shouldClose=!1;this.state.swiping&&(shouldClose=!0),this.setState({maybeSwiping:!1,swiping:!1}),shouldClose&&this.close(),document.body.removeEventListener("touchmove",this._onBodyTouchMove),document.body.removeEventListener("touchend",this._onBodyTouchEnd),document.body.removeEventListener("touchcancel",this._onBodyTouchEnd)}});module.exports=LeftNav;


},{"./menu/menu":149,"./mixins/style-propable":153,"./mixins/window-listenable":155,"./overlay":156,"./paper":157,"./styles/auto-prefix":167,"./styles/transitions":174,"./utils/key-code":222,"react":404}],143:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),LinearProgress=React.createClass({displayName:"LinearProgress",mixins:[StylePropable],propTypes:{mode:React.PropTypes.oneOf(["determinate","indeterminate"]),value:React.PropTypes.number,min:React.PropTypes.number,max:React.PropTypes.number},contextTypes:{muiTheme:React.PropTypes.object},_getRelativeValue:function(){var value=this.props.value,min=this.props.min,max=this.props.max,clampedValue=Math.min(Math.max(min,value),max),rangeValue=max-min,relValue=Math.round(clampedValue/rangeValue*1e4)/1e4;return 100*relValue},componentDidMount:function(){var bar1=React.findDOMNode(this.refs.bar1),bar2=React.findDOMNode(this.refs.bar2);this._barUpdate(0,bar1,[[-35,100],[100,-90]]),setTimeout(function(){this._barUpdate(0,bar2,[[-200,100],[107,-8]])}.bind(this),850)},_barUpdate:function(step,barElement,stepValues){step=step||0,step%=4,setTimeout(this._barUpdate.bind(this,step+1,barElement,stepValues),420),this.isMounted()&&"indeterminate"==this.props.mode&&(0===step?(barElement.style.left=stepValues[0][0]+"%",barElement.style.right=stepValues[0][1]+"%"):1==step?barElement.style.transitionDuration="840ms":2==step?(barElement.style.left=stepValues[1][0]+"%",barElement.style.right=stepValues[1][1]+"%"):3==step&&(barElement.style.transitionDuration="0ms"))},getDefaultProps:function(){return{mode:"indeterminate",value:0,min:0,max:100}},getTheme:function(){return this.context.muiTheme.palette},getStyles:function(){var styles={root:{position:"relative",height:"4px",display:"block",width:"100%",backgroundColor:this.getTheme().primary3Color,borderRadius:"2px",margin:0,overflow:"hidden"},bar:{height:"100%"},barFragment1:{},barFragment2:{}};return"indeterminate"==this.props.mode?(styles.barFragment1={position:"absolute",backgroundColor:this.getTheme().primary1Color,top:0,left:0,bottom:0,transition:Transitions.create("all","840ms",null,"cubic-bezier(0.650, 0.815, 0.735, 0.395)")},styles.barFragment2={position:"absolute",backgroundColor:this.getTheme().primary1Color,top:0,left:0,bottom:0,transition:Transitions.create("all","840ms",null,"cubic-bezier(0.165, 0.840, 0.440, 1.000)")}):(styles.bar.backgroundColor=this.getTheme().primary1Color,styles.bar.transition=Transitions.create("width",".3s",null,"linear"),styles.bar.width=this._getRelativeValue()+"%"),styles},render:function(){var _props=this.props,style=_props.style,other=_objectWithoutProperties(_props,["style"]),styles=this.getStyles();return React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root,style)}),React.createElement("div",{style:this.mergeAndPrefix(styles.bar)},React.createElement("div",{ref:"bar1",style:this.mergeAndPrefix(styles.barFragment1)}),React.createElement("div",{ref:"bar2",style:this.mergeAndPrefix(styles.barFragment2)})))}});module.exports=LinearProgress;


},{"./mixins/style-propable":153,"./styles/transitions":174,"react":404}],144:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),StylePropable=require("../mixins/style-propable"),ListDivider=React.createClass({displayName:"ListDivider",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{inset:React.PropTypes.bool},render:function(){var _props=this.props,inset=_props.inset,style=_props.style,other=_objectWithoutProperties(_props,["inset","style"]),mergedStyles=this.mergeAndPrefix({margin:0,marginTop:-1,marginLeft:inset?72:0,height:1,border:"none",backgroundColor:this.context.muiTheme.palette.borderColor},style);return React.createElement("hr",_extends({},other,{style:mergedStyles}))}});module.exports=ListDivider;


},{"../mixins/style-propable":153,"react/addons":232}],145:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),ColorManipulator=require("../utils/color-manipulator"),StylePropable=require("../mixins/style-propable"),Colors=require("../styles/colors"),Transitions=require("../styles/transitions"),Typography=require("../styles/typography"),EnhancedButton=require("../enhanced-button"),ListItem=React.createClass({displayName:"ListItem",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{disableTouchTap:React.PropTypes.bool,insetChildren:React.PropTypes.bool,leftAvatar:React.PropTypes.element,leftCheckbox:React.PropTypes.element,leftIcon:React.PropTypes.element,onMouseOut:React.PropTypes.func,onMouseOver:React.PropTypes.func,rightAvatar:React.PropTypes.element,rightIcon:React.PropTypes.element,rightIconButton:React.PropTypes.element,rightToggle:React.PropTypes.element,secondaryText:React.PropTypes.node,secondaryTextLines:React.PropTypes.oneOf([1,2])},getDefaultProps:function(){return{secondaryTextLines:1}},getInitialState:function(){return{hovered:!1,rightIconButtonHovered:!1}},render:function(){var _props=this.props,disableTouchTap=_props.disableTouchTap,insetChildren=_props.insetChildren,leftAvatar=_props.leftAvatar,leftCheckbox=_props.leftCheckbox,leftIcon=_props.leftIcon,rightAvatar=(_props.onMouseOut,_props.onMouseOver,_props.rightAvatar),rightIcon=_props.rightIcon,rightIconButton=_props.rightIconButton,rightToggle=_props.rightToggle,secondaryText=_props.secondaryText,secondaryTextLines=_props.secondaryTextLines,style=_props.style,other=_objectWithoutProperties(_props,["disableTouchTap","insetChildren","leftAvatar","leftCheckbox","leftIcon","onMouseOut","onMouseOver","rightAvatar","rightIcon","rightIconButton","rightToggle","secondaryText","secondaryTextLines","style"]),textColor=this.context.muiTheme.palette.textColor,hoverColor=ColorManipulator.fade(textColor,.03),singleAvatar=!secondaryText&&(leftAvatar||rightAvatar),singleNoAvatar=!secondaryText&&!(leftAvatar||rightAvatar),twoLine=secondaryText&&1===secondaryTextLines,threeLine=secondaryText&&secondaryTextLines>1,hasCheckbox=leftCheckbox||rightToggle,styles={root:{backgroundColor:this.state.hovered&&!this.state.rightIconButtonHovered?hoverColor:null,color:textColor,display:"block",fontSize:16,lineHeight:"16px",overflow:"hidden",position:"relative",transition:Transitions.easeOut()},innerDiv:{paddingLeft:leftIcon||leftAvatar||leftCheckbox||insetChildren?72:16,paddingRight:rightIcon||rightAvatar||rightIconButton?56:rightToggle?72:16,paddingBottom:singleAvatar?20:16,paddingTop:singleNoAvatar||threeLine?16:20},label:{cursor:"pointer"},icons:{height:24,width:24,display:"block",position:"absolute",top:twoLine?12:singleAvatar?4:0,padding:12},leftIcon:{color:Colors.grey600,fill:Colors.grey600,left:4},rightIcon:{color:Colors.grey400,fill:Colors.grey400,right:4},avatars:{position:"absolute",top:singleAvatar?8:16},leftAvatar:{left:16},rightAvatar:{right:16},leftCheckbox:{position:"absolute",display:"block",width:24,top:twoLine?24:singleAvatar?16:12,left:16},rightIconButton:{position:"absolute",display:"block",top:twoLine?12:singleAvatar?4:0,right:4},rightToggle:{position:"absolute",display:"block",width:54,top:twoLine?25:singleAvatar?17:13,right:8},secondaryText:{fontSize:14,lineHeight:threeLine?"18px":"16px",height:threeLine?36:16,margin:0,marginTop:4,color:Typography.textLightBlack,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:threeLine?null:"nowrap",display:threeLine?"-webkit-box":null,WebkitLineClamp:threeLine?2:null,WebkitBoxOrient:threeLine?"vertical":null}},secondaryTextIsAnElement=React.isValidElement(secondaryText),mergedRootStyles=this.mergeAndPrefix(styles.root,style),mergedDivStyles=this.mergeAndPrefix(styles.root,styles.innerDiv,style),mergedLabelStyles=this.mergeAndPrefix(styles.root,styles.innerDiv,styles.label,style),mergedSecondaryTextStyles=secondaryTextIsAnElement?this.mergeStyles(styles.secondaryText,secondaryText.props.style):null,contentChildren=[];return this._pushElement(contentChildren,leftIcon,this.mergeStyles(styles.icons,styles.leftIcon)),this._pushElement(contentChildren,rightIcon,this.mergeStyles(styles.icons,styles.rightIcon)),this._pushElement(contentChildren,leftAvatar,this.mergeStyles(styles.avatars,styles.leftAvatar)),this._pushElement(contentChildren,rightAvatar,this.mergeStyles(styles.avatars,styles.rightAvatar)),this._pushElement(contentChildren,leftCheckbox,this.mergeStyles(styles.leftCheckbox)),this._pushElement(contentChildren,rightIconButton,this.mergeStyles(styles.rightIconButton),{onMouseOver:this._handleRightIconButtonMouseOver,onMouseOut:this._handleRightIconButtonMouseOut,onTouchTap:this._handleRightIconButtonTouchTap,onMouseDown:this._handleRightIconButtonMouseUp,onMouseUp:this._handleRightIconButtonMouseUp}),this._pushElement(contentChildren,rightToggle,this.mergeStyles(styles.rightToggle)),this.props.children&&contentChildren.push(this.props.children),secondaryText&&contentChildren.push(React.isValidElement(secondaryText)?React.cloneElement(secondaryText,{key:"secondaryText",style:mergedSecondaryTextStyles}):React.createElement("div",{key:"secondaryText",style:styles.secondaryText},secondaryText)),hasCheckbox||disableTouchTap?React.createElement(hasCheckbox?"label":"div",{style:hasCheckbox?mergedLabelStyles:mergedDivStyles},contentChildren):React.createElement(EnhancedButton,_extends({},other,{linkButton:!0,onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,style:mergedRootStyles}),React.createElement("div",{style:styles.innerDiv},contentChildren))},_pushElement:function(children,element,baseStyles,additionalProps){if(element){var styles=this.mergeStyles(baseStyles,element.props.style);children.push(React.cloneElement(element,_extends({key:children.length,style:styles},additionalProps)))}},_handleRightIconButtonMouseDown:function(e){var iconButton=this.props.rightIconButton;e.stopPropagation(),iconButton.onMouseDown&&iconButton.onDown(e)},_handleRightIconButtonMouseOut:function(e){var iconButton=this.props.rightIconButton;this.setState({rightIconButtonHovered:!1}),iconButton.onMouseOut&&iconButton.onMouseOut(e)},_handleRightIconButtonMouseOver:function(e){var iconButton=this.props.rightIconButton;this.setState({rightIconButtonHovered:!0}),iconButton.onMouseOver&&iconButton.onMouseOver(e)},_handleRightIconButtonMouseUp:function(e){var iconButton=this.props.rightIconButton;e.stopPropagation(),iconButton.onMouseUp&&iconButton.onUp(e)},_handleRightIconButtonTouchTap:function(e){var iconButton=this.props.rightIconButton;e.stopPropagation(),iconButton.onTouchTap&&iconButton.onTouchTap(e)},_handleMouseOver:function(e){this.setState({hovered:!0}),this.props.onMouseOver&&this.props.onMouseOver(e)},_handleMouseOut:function(e){this.setState({hovered:!1}),this.props.onMouseOut&&this.props.onMouseOut(e)}});module.exports=ListItem;


},{"../enhanced-button":133,"../mixins/style-propable":153,"../styles/colors":168,"../styles/transitions":174,"../styles/typography":175,"../utils/color-manipulator":216,"react/addons":232}],146:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),StylePropable=require("../mixins/style-propable"),Typography=require("../styles/typography"),List=React.createClass({displayName:"List",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{insetSubheader:React.PropTypes.bool,subheader:React.PropTypes.string,subheaderStyle:React.PropTypes.object},getDefaultProps:function(){return{}},render:function(){var _props=this.props,insetSubheader=_props.insetSubheader,style=_props.style,subheader=_props.subheader,subheaderStyle=_props.subheaderStyle,other=_objectWithoutProperties(_props,["insetSubheader","style","subheader","subheaderStyle"]),styles={root:{padding:0,paddingBottom:8,paddingTop:subheader?0:8},subheader:{color:Typography.textLightBlack,fontSize:14,fontWeight:Typography.fontWeightMedium,lineHeight:"48px",paddingLeft:insetSubheader?72:16}},mergedRootStyles=this.mergeAndPrefix(styles.root,style),mergedSubheaderStyles=this.mergeAndPrefix(styles.subheader,subheaderStyle),subheaderElement=subheader?React.createElement("div",{style:mergedSubheaderStyles},subheader):null;return React.createElement("div",_extends({},other,{style:mergedRootStyles}),subheaderElement,this.props.children)}});module.exports=List;


},{"../mixins/style-propable":153,"../styles/typography":175,"react/addons":232}],147:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),LinkMenuItem=React.createClass({displayName:"LinkMenuItem",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{index:React.PropTypes.number.isRequired,payload:React.PropTypes.string.isRequired,text:React.PropTypes.string.isRequired,target:React.PropTypes.string,active:React.PropTypes.bool,disabled:React.PropTypes.bool,className:React.PropTypes.string},getDefaultProps:function(){return{active:!1,disabled:!1}},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.menuItem},getStyles:function(){var style={root:{userSelect:"none",cursor:"pointer",display:"block",lineHeight:this.getTheme().height+"px",paddingLeft:this.getTheme().padding,paddingRight:this.getTheme().padding},rootWhenHovered:{backgroundColor:this.getTheme().hoverColor},rootWhenSelected:{color:this.getTheme().selectedTextColor},rootWhenDisabled:{cursor:"default",color:this.context.muiTheme.palette.disabledColor}};return style},render:function(){var onClickHandler=this.props.disabled?this._stopLink:void 0,linkAttribute=this.props.disabled?"data-href":"href",link={};link[linkAttribute]=this.props.payload;var styles=this.getStyles(),linkStyles=this.mergeAndPrefix(styles.root,this.props.selected&&styles.rootWhenSelected,this.props.selected&&styles.rootWhenSelected,this.props.active&&!this.props.disabled&&styles.rootWhenHovered,this.props.style,this.props.disabled&&styles.rootWhenDisabled);return React.createElement("a",_extends({key:this.props.index,target:this.props.target,style:linkStyles},link,{className:this.props.className,onClick:onClickHandler,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut}),this.props.text)},_stopLink:function(event){event.preventDefault()},_handleMouseOver:function(e){this.setState({hovered:!0}),!this.props.disabled&&this.props.onMouseOver&&this.props.onMouseOver(e)},_handleMouseOut:function(e){this.setState({hovered:!1}),!this.props.disabled&&this.props.onMouseOut&&this.props.onMouseOut(e)}});module.exports=LinkMenuItem;


},{"../mixins/style-propable":153,"react":404}],148:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),FontIcon=require("../font-icon"),Toggle=require("../toggle"),Types={LINK:"LINK",SUBHEADER:"SUBHEADER",NESTED:"NESTED"},MenuItem=React.createClass({displayName:"MenuItem",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{index:React.PropTypes.number.isRequired,className:React.PropTypes.string,iconClassName:React.PropTypes.string,iconRightClassName:React.PropTypes.string,iconStyle:React.PropTypes.object,iconRightStyle:React.PropTypes.object,attribute:React.PropTypes.string,number:React.PropTypes.string,data:React.PropTypes.string,toggle:React.PropTypes.bool,disabled:React.PropTypes.bool,onTouchTap:React.PropTypes.func,onToggle:React.PropTypes.func,selected:React.PropTypes.bool,active:React.PropTypes.bool},statics:{Types:Types},getDefaultProps:function(){return{toggle:!1,disabled:!1,active:!1}},getTheme:function(){return this.context.muiTheme.component.menuItem},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var styles={root:{userSelect:"none",cursor:"pointer",lineHeight:this.getTheme().height+"px",paddingLeft:this.getTheme().padding,paddingRight:this.getTheme().padding,color:this.context.muiTheme.palette.textColor},number:{"float":"right",width:24,textAlign:"center"},attribute:{"float":"right"},iconRight:{lineHeight:this.getTheme().height+"px","float":"right"},icon:{"float":"left",lineHeight:this.getTheme().height+"px",marginRight:this.getSpacing().desktopGutter},data:{display:"block",paddingLeft:2*this.getSpacing().desktopGutter,lineHeight:this.getTheme().dataHeight+"px",height:this.getTheme().dataHeight+"px",verticalAlign:"top",top:-12,position:"relative",fontWeight:300,color:this.context.muiTheme.palette.textColor},toggle:{marginTop:(this.getTheme().height-this.context.muiTheme.component.radioButton.size)/2,"float":"right",width:42},rootWhenHovered:{backgroundColor:this.getTheme().hoverColor},rootWhenSelected:{color:this.getTheme().selectedTextColor},rootWhenDisabled:{cursor:"default",color:this.context.muiTheme.palette.disabledColor}};return styles},render:function(){var icon,data,iconRight,attribute,number,toggleElement,styles=this.getStyles();if(this.props.iconClassName&&(icon=React.createElement(FontIcon,{style:this.mergeAndPrefix(styles.icon,this.props.iconStyle),className:this.props.iconClassName})),this.props.iconRightClassName&&(iconRight=React.createElement(FontIcon,{style:this.mergeAndPrefix(styles.iconRight,this.props.iconRightStyle),className:this.props.iconRightClassName})),this.props.data&&(data=React.createElement("span",{style:this.mergeAndPrefix(styles.data)},this.props.data)),void 0!==this.props.number&&(number=React.createElement("span",{style:this.mergeAndPrefix(styles.number)},this.props.number)),void 0!==this.props.attribute&&(attribute=React.createElement("span",{style:this.mergeAndPrefix(styles.style)},this.props.attribute)),this.props.toggle){var _props=this.props,other=(_props.toggle,_props.onTouchTap,_props.onToggle,_props.onMouseOver,_props.onMouseOut,_props.children,_props.label,_props.style,_objectWithoutProperties(_props,["toggle","onTouchTap","onToggle","onMouseOver","onMouseOut","children","label","style"]));toggleElement=React.createElement(Toggle,_extends({},other,{onToggle:this._handleToggle,style:styles.toggle}))}return React.createElement("div",{key:this.props.index,className:this.props.className,onTouchTap:this._handleTouchTap,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut,f:!0,style:this.mergeAndPrefix(styles.root,this.props.selected&&styles.rootWhenSelected,this.props.active&&!this.props.disabled&&styles.rootWhenHovered,this.props.style,this.props.disabled&&styles.rootWhenDisabled)},icon,this.props.children,data,attribute,number,toggleElement,iconRight)},_handleTouchTap:function(e){!this.props.disabled&&this.props.onTouchTap&&this.props.onTouchTap(e,this.props.index)},_handleToggle:function(e,toggled){!this.props.disabled&&this.props.onToggle&&this.props.onToggle(e,this.props.index,toggled)},_handleMouseOver:function(e){!this.props.disabled&&this.props.onMouseOver&&this.props.onMouseOver(e,this.props.index)},_handleMouseOut:function(e){!this.props.disabled&&this.props.onMouseOut&&this.props.onMouseOut(e,this.props.index)}});module.exports=MenuItem;


},{"../font-icon":138,"../mixins/style-propable":153,"../toggle":208,"react":404}],149:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),CssEvent=require("../utils/css-event"),Dom=require("../utils/dom"),KeyLine=require("../utils/key-line"),KeyCode=require("../utils/key-code"),StylePropable=require("../mixins/style-propable"),Transitions=require("../styles/transitions"),ClickAwayable=require("../mixins/click-awayable"),Paper=require("../paper"),MenuItem=require("./menu-item"),LinkMenuItem=require("./link-menu-item"),SubheaderMenuItem=require("./subheader-menu-item"),WindowListenable=require("../mixins/window-listenable"),NestedMenuItem=React.createClass({displayName:"NestedMenuItem",mixins:[ClickAwayable,StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{index:React.PropTypes.number.isRequired,text:React.PropTypes.string,menuItems:React.PropTypes.array.isRequired,zDepth:React.PropTypes.number,disabled:React.PropTypes.bool,active:React.PropTypes.bool,onItemTap:React.PropTypes.func,menuItemStyle:React.PropTypes.object},getDefaultProps:function(){return{disabled:!1}},getInitialState:function(){return{open:!1,activeIndex:0}},componentClickAway:function(){this._closeNestedMenu()},componentDidMount:function(){this._positionNestedMenu();var el=this.getDOMNode();el.focus()},componentDidUpdate:function(){this._positionNestedMenu()},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var styles={root:{userSelect:"none",cursor:"pointer",lineHeight:this.getTheme().height+"px",color:this.context.muiTheme.palette.textColor},icon:{"float":"left",lineHeight:this.getTheme().height+"px",marginRight:this.getSpacing().desktopGutter},toggle:{marginTop:(this.getTheme().height-this.context.muiTheme.component.radioButton.size)/2,"float":"right",width:42},rootWhenHovered:{backgroundColor:this.getTheme().hoverColor},rootWhenSelected:{color:this.getTheme().selectedTextColor},rootWhenDisabled:{cursor:"default",color:this.context.muiTheme.palette.disabledColor}};return styles},getTheme:function(){return this.context.muiTheme.component.menuItem},render:function(){var styles=this.getStyles();styles=this.mergeAndPrefix(styles.root,this.props.active&&!this.props.disabled&&styles.rootWhenHovered,{position:"relative"},this.props.style);var iconCustomArrowDropRight={marginRight:-1*this.getSpacing().desktopGutterMini,color:this.context.muiTheme.component.dropDownMenu.accentColor},_props=this.props,index=_props.index,menuItemStyle=_props.menuItemStyle,other=_objectWithoutProperties(_props,["index","menuItemStyle"]);return React.createElement("div",{ref:"root",style:styles,onMouseEnter:this._openNestedMenu,onMouseLeave:this._closeNestedMenu,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut},React.createElement(MenuItem,{index:index,style:menuItemStyle,disabled:this.props.disabled,iconRightStyle:iconCustomArrowDropRight,iconRightClassName:"muidocs-icon-custom-arrow-drop-right",onTouchTap:this._onParentItemTap},this.props.text),React.createElement(Menu,_extends({},other,{ref:"nestedMenu",menuItems:this.props.menuItems,menuItemStyle:menuItemStyle,onItemTap:this._onMenuItemTap,hideable:!0,visible:this.state.open,onRequestClose:this._closeNestedMenu,zDepth:this.props.zDepth+1})))},toggleNestedMenu:function(){this.props.disabled||this.setState({open:!this.state.open})},isOpen:function(){return this.state.open},_positionNestedMenu:function(){var el=React.findDOMNode(this),nestedMenu=React.findDOMNode(this.refs.nestedMenu);nestedMenu.style.left=el.offsetWidth+"px"},_openNestedMenu:function(){this.props.disabled||this.setState({open:!0})},_closeNestedMenu:function(){this.setState({open:!1}),React.findDOMNode(this).focus()},_onParentItemTap:function(){this.toggleNestedMenu()},_onMenuItemTap:function(e,index,menuItem){this.props.onItemTap&&this.props.onItemTap(e,index,menuItem),this._closeNestedMenu()},_handleMouseOver:function(e){!this.props.disabled&&this.props.onMouseOver&&this.props.onMouseOver(e,this.props.index)},_handleMouseOut:function(e){!this.props.disabled&&this.props.onMouseOut&&this.props.onMouseOut(e,this.props.index)}}),Menu=React.createClass({displayName:"Menu",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{autoWidth:React.PropTypes.bool,onItemTap:React.PropTypes.func,onToggle:React.PropTypes.func,onRequestClose:React.PropTypes.func,menuItems:React.PropTypes.array.isRequired,selectedIndex:React.PropTypes.number,hideable:React.PropTypes.bool,visible:React.PropTypes.bool,zDepth:React.PropTypes.number,menuItemStyle:React.PropTypes.object,menuItemStyleSubheader:React.PropTypes.object,menuItemStyleLink:React.PropTypes.object,menuItemClassName:React.PropTypes.string,menuItemClassNameSubheader:React.PropTypes.string,menuItemClassNameLink:React.PropTypes.string},getInitialState:function(){return{nestedMenuShown:!1,activeIndex:0}},getDefaultProps:function(){return{autoWidth:!0,hideable:!1,visible:!0,zDepth:1,onRequestClose:function(){}}},componentDidMount:function(){var el=React.findDOMNode(this);this._setKeyWidth(el),this._initialMenuItemHeight=el.offsetHeight/Math.max(1,this.props.menuItems.length),this._renderVisibility()},componentDidUpdate:function(prevProps){this.props.visible!==prevProps.visible&&this._renderVisibility()},getTheme:function(){return this.context.muiTheme.component.menu},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var styles={root:{backgroundColor:this.getTheme().containerBackgroundColor,paddingTop:this.getSpacing().desktopGutterMini,paddingBottom:this.getSpacing().desktopGutterMini,transition:Transitions.easeOut(null,"height"),outline:"none !important"},subheader:{paddingLeft:this.context.muiTheme.component.menuSubheader.padding,paddingRight:this.context.muiTheme.component.menuSubheader.padding},hideable:{opacity:this.props.visible?1:0,overflow:"hidden",position:"absolute",top:0,zIndex:1}};return styles},render:function(){var styles=this.getStyles();return React.createElement(Paper,{ref:"paperContainer",tabIndex:"0",onKeyDown:this._onKeyDown,zDepth:this.props.zDepth,style:this.mergeAndPrefix(styles.root,this.props.hideable&&styles.hideable,this.props.style)},this._getChildren())},_getChildren:function(){var menuItem,itemComponent,isSelected,isDisabled,styles=this.getStyles();this._children=[],this._nestedChildren=[];for(var i=0;i<this.props.menuItems.length;i++){menuItem=this.props.menuItems[i],isSelected=i===this.props.selectedIndex,isDisabled=void 0===menuItem.disabled?!1:menuItem.disabled;var other=(menuItem.icon,menuItem.data,menuItem.attribute,menuItem.number,menuItem.toggle,menuItem.onTouchTap,_objectWithoutProperties(menuItem,["icon","data","attribute","number","toggle","onTouchTap"]));switch(menuItem.type){case MenuItem.Types.LINK:itemComponent=React.createElement(LinkMenuItem,{key:i,index:i,active:this.state.activeIndex==i,text:menuItem.text,disabled:isDisabled,className:this.props.menuItemClassNameLink,style:this.props.menuItemStyleLink,payload:menuItem.payload,target:menuItem.target});break;case MenuItem.Types.SUBHEADER:itemComponent=React.createElement(SubheaderMenuItem,{key:i,index:i,className:this.props.menuItemClassNameSubheader,style:this.mergeAndPrefix(styles.subheader),firstChild:0===i,text:menuItem.text});break;case MenuItem.Types.NESTED:var _props2=this.props,other=(_props2.ref,_props2.key,_props2.index,_props2.zDepth,_objectWithoutProperties(_props2,["ref","key","index","zDepth"]));itemComponent=React.createElement(NestedMenuItem,_extends({},other,{ref:i,key:i,index:i,nested:!0,active:this.state.activeIndex==i,text:menuItem.text,disabled:isDisabled,menuItems:menuItem.items,menuItemStyle:this.props.menuItemStyle,zDepth:this.props.zDepth,onMouseOver:this._onItemActivated,onMouseOut:this._onItemDeactivated,onItemTap:this._onNestedItemTap})),this._nestedChildren.push(i);break;default:itemComponent=React.createElement(MenuItem,_extends({},other,{selected:isSelected,key:i,index:i,active:this.state.activeIndex==i,icon:menuItem.icon,data:menuItem.data,className:this.props.menuItemClassName,style:this.props.menuItemStyle,attribute:menuItem.attribute,number:menuItem.number,toggle:menuItem.toggle,onToggle:this.props.onToggle,disabled:isDisabled,onTouchTap:this._onItemTap,onMouseOver:this._onItemActivated,onMouseOut:this._onItemDeactivated}),menuItem.text)}this._children.push(itemComponent)}return this._children},_setKeyWidth:function(el){var menuWidth=this.props.autoWidth?KeyLine.getIncrementalDim(el.offsetWidth)+"px":"100%";Dom.withoutTransition(el,function(){el.style.width=menuWidth})},_getCurrentHeight:function(){var totalItens=Math.max(1,this.props.menuItems.length),newHeight=this._initialMenuItemHeight*totalItens;return newHeight},_renderVisibility:function(){var el;if(this.props.hideable){el=React.findDOMNode(this);var container=React.findDOMNode(this.refs.paperContainer);this.props.visible?(el.style.transition=Transitions.easeOut(),el.style.height=this._getCurrentHeight()+"px",CssEvent.onTransitionEnd(el,function(){this.props.visible&&(container.style.overflow="visible"),el.focus()}.bind(this))):(el.style.height="0px",container.style.overflow="hidden")}},_onNestedItemTap:function(e,index,menuItem){this.props.onItemTap&&this.props.onItemTap(e,index,menuItem)},_onItemTap:function(e,index){this.props.onItemTap&&this.props.onItemTap(e,index,this.props.menuItems[index])},_onItemToggle:function(e,index,toggled){this.props.onItemToggle&&this.props.onItemToggle(e,index,this.props.menuItems[index],toggled)},_onItemActivated:function(e,index){this.setState({activeIndex:index})},_onItemDeactivated:function(e,index){this.state.activeKey==index&&this.setState({activeIndex:0})},_onKeyDown:function(e){if(this.state.open||this.props.visible){var nested=this._children[this.state.activeIndex];if(!(nested&&nested.props.nested&&this.refs[this.state.activeIndex].isOpen())){switch(e.which){case KeyCode.UP:this._activatePreviousItem();break;case KeyCode.DOWN:this._activateNextItem();break;case KeyCode.RIGHT:this._tryToggleNested(this.state.activeIndex);break;case KeyCode.LEFT:this._close();break;case KeyCode.ESC:this._close();break;case KeyCode.TAB:return void this._close();case KeyCode.ENTER:case KeyCode.SPACE:e.stopPropagation(),this._triggerSelection(e);break;default:return}e.preventDefault(),e.stopPropagation()}}},_activatePreviousItem:function(){var active=this.state.activeIndex||0;active=Math.max(active-1,0),this.setState({activeIndex:active})},_activateNextItem:function(){var active=this.state.activeIndex||0;active=Math.min(active+1,this._children.length-1),this.setState({activeIndex:active})},_triggerSelection:function(e){var index=this.state.activeIndex||0;this._onItemTap(e,index)},_close:function(){this.props.onRequestClose()},_tryToggleNested:function(index){var item=this.refs[index];item.toggleNestedMenu;item&&item.toggleNestedMenu&&item.toggleNestedMenu()}});module.exports=Menu;


},{"../mixins/click-awayable":152,"../mixins/style-propable":153,"../mixins/window-listenable":155,"../paper":157,"../styles/transitions":174,"../utils/css-event":217,"../utils/dom":219,"../utils/key-code":222,"../utils/key-line":223,"./link-menu-item":147,"./menu-item":148,"./subheader-menu-item":150,"react":404}],150:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),Typography=require("../styles/typography"),SubheaderMenuItem=React.createClass({displayName:"SubheaderMenuItem",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{index:React.PropTypes.number.isRequired,text:React.PropTypes.string.isRequired,firstChild:React.PropTypes.bool,className:React.PropTypes.string},getTheme:function(){return this.context.muiTheme.component.menuSubheader},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var gutterMini=this.getSpacing().desktopGutterMini,subheaderHeight=this.getSpacing().desktopSubheaderHeight,styles={root:{boxSizing:"border-box",fontSize:"13px",letterSpacing:0,fontWeight:Typography.fontWeightMedium,margin:0,height:subheaderHeight+gutterMini,lineHeight:subheaderHeight+"px",color:this.getTheme().textColor,borderTop:"solid 1px "+this.getTheme().borderColor,paddingTop:gutterMini,marginTop:gutterMini},rootWhenFirstChild:{height:subheaderHeight,borderTop:"none",paddingTop:0,marginTop:0}};return styles},render:function(){return React.createElement("div",{key:this.props.index,className:this.props.className,style:this.mergeAndPrefix(this.getStyles().root,this.props.firstChild&&this.getStyles().rootWhenFirstChild,this.props.style)},this.props.text)}});module.exports=SubheaderMenuItem;


},{"../mixins/style-propable":153,"../styles/typography":175,"react":404}],151:[function(require,module,exports){
"use strict";var React=require("react"),classNames=require("classnames");module.exports={propTypes:{className:React.PropTypes.string},getDefaultProps:function(){return{className:""}},getClasses:function(initialClasses,additionalClassObj){var classString="";return this.props.className.length&&(classString+=" "+this.props.className),classString+="object"==typeof initialClasses?" "+classNames(initialClasses):" "+initialClasses,additionalClassObj&&(classString+=" "+classNames(additionalClassObj)),classNames(this.getClassSet(classString))},getClassSet:function(classString){var classObj={};return classString&&classString.split(" ").forEach(function(className){className&&(classObj[className]=!0)}),classObj}};


},{"classnames":226,"react":404}],152:[function(require,module,exports){
"use strict";var React=require("react"),Events=require("../utils/events"),Dom=require("../utils/dom");module.exports={componentDidMount:function(){this.manuallyBindClickAway||this._bindClickAway()},componentWillUnmount:function(){this._unbindClickAway()},_checkClickAway:function(e){var el=React.findDOMNode(this);e.target!=el&&!Dom.isDescendant(el,e.target)&&document.documentElement.contains(e.target)&&this.componentClickAway&&this.componentClickAway()},_bindClickAway:function(){Events.on(document,"mouseup",this._checkClickAway),Events.on(document,"touchend",this._checkClickAway)},_unbindClickAway:function(){Events.off(document,"mouseup",this._checkClickAway),Events.off(document,"touchend",this._checkClickAway)}};


},{"../utils/dom":219,"../utils/events":220,"react":404}],153:[function(require,module,exports){
"use strict";var React=require("react/addons"),AutoPrefix=require("../styles/auto-prefix"),Extend=require("../utils/extend");module.exports={propTypes:{style:React.PropTypes.object},mergeStyles:function(){for(var args=Array.prototype.slice.call(arguments,0),base=args[0],i=1;i<args.length;i++)args[i]&&(base=Extend(base,args[i]));return base},mergeAndPrefix:function(){var mergedStyles=this.mergeStyles.apply(this,arguments);return AutoPrefix.all(mergedStyles)}};


},{"../styles/auto-prefix":167,"../utils/extend":221,"react/addons":232}],154:[function(require,module,exports){
"use strict";var Events=require("../utils/events"),Sizes={SMALL:1,MEDIUM:2,LARGE:3};module.exports={statics:{Sizes:Sizes},getInitialState:function(){return{deviceSize:Sizes.SMALL}},componentDidMount:function(){this._updateDeviceSize(),this.manuallyBindResize||this._bindResize()},componentWillUnmount:function(){this._unbindResize()},isDeviceSize:function(desiredSize){return this.state.deviceSize>=desiredSize},_updateDeviceSize:function(){var width=window.innerWidth;width>=992?this.setState({deviceSize:Sizes.LARGE}):width>=768?this.setState({deviceSize:Sizes.MEDIUM}):this.setState({deviceSize:Sizes.SMALL})},_bindResize:function(){Events.on(window,"resize",this._updateDeviceSize)},_unbindResize:function(){Events.off(window,"resize",this._updateDeviceSize)}};


},{"../utils/events":220}],155:[function(require,module,exports){
"use strict";var Events=require("../utils/events");module.exports={componentDidMount:function(){var listeners=this.windowListeners;for(var eventName in listeners){var callbackName=listeners[eventName];Events.on(window,eventName,this[callbackName])}},componentWillUnmount:function(){var listeners=this.windowListeners;for(var eventName in listeners){var callbackName=listeners[eventName];Events.off(window,eventName,this[callbackName])}}};


},{"../utils/events":220}],156:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),Colors=require("./styles/colors"),Overlay=React.createClass({displayName:"Overlay",mixins:[StylePropable],propTypes:{show:React.PropTypes.bool,autoLockScrolling:React.PropTypes.bool,transitionEnabled:React.PropTypes.bool},getDefaultProps:function(){return{autoLockScrolling:!0,transitionEnabled:!0}},componentDidUpdate:function(){this.props.autoLockScrolling&&(this.props.show?this._preventScrolling():this._allowScrolling())},setOpacity:function(opacity){var overlay=React.findDOMNode(this);overlay.style.opacity=opacity},getStyles:function(){var styles={root:{position:"fixed",height:"100%",width:"100%",zIndex:9,top:0,left:"-100%",opacity:0,backgroundColor:Colors.lightBlack,WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",willChange:"opacity",transform:"translateZ(0)",transition:this.props.transitionEnabled&&Transitions.easeOut("0ms","left","400ms")+","+Transitions.easeOut("400ms","opacity")},rootWhenShown:{left:"0",opacity:1,transition:this.props.transitionEnabled&&Transitions.easeOut("0ms","left")+","+Transitions.easeOut("400ms","opacity")}};return styles},render:function(){var _props=this.props,other=(_props.show,_props.style,_objectWithoutProperties(_props,["show","style"])),styles=this.mergeAndPrefix(this.getStyles().root,this.props.style,this.props.show&&this.getStyles().rootWhenShown);return React.createElement("div",_extends({},other,{style:styles}))},preventScrolling:function(){this.props.autoLockScrolling||this._preventScrolling()},allowScrolling:function(){this.props.autoLockScrolling||this._allowScrolling()},_preventScrolling:function(){var body=document.getElementsByTagName("body")[0];body.style.overflow="hidden"},_allowScrolling:function(){var body=document.getElementsByTagName("body")[0];body.style.overflow=""}});module.exports=Overlay;


},{"./mixins/style-propable":153,"./styles/colors":168,"./styles/transitions":174,"react":404}],157:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),Paper=React.createClass({displayName:"Paper",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{circle:React.PropTypes.bool,rounded:React.PropTypes.bool,zDepth:React.PropTypes.oneOf([0,1,2,3,4,5]),transitionEnabled:React.PropTypes.bool},getDefaultProps:function(){return{rounded:!0,zDepth:1,transitionEnabled:!0}},getStyles:function(){var styles={root:{backgroundColor:this.context.muiTheme.component.paper.backgroundColor,transition:this.props.transitionEnabled&&Transitions.easeOut(),boxSizing:"border-box",fontFamily:this.context.muiTheme.contentFontFamily,WebkitTapHighlightColor:"rgba(0,0,0,0)",boxShadow:this._getZDepthShadows(this.props.zDepth),borderRadius:this.props.circle?"50%":this.props.rounded?"2px":"0px"}};return styles},render:function(){var _props=this.props,other=(_props.style,_props.circle,_props.rounded,_props.zDepth,_objectWithoutProperties(_props,["style","circle","rounded","zDepth"])),styles=this.getStyles();return React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root,this.props.style)}),this.props.children)},_getZDepthShadows:function(zDepth){var shadows=["","0 1px 6px rgba(0, 0, 0, 0.12), 0 1px 4px rgba(0, 0, 0, 0.24)","0 3px 10px rgba(0, 0, 0, 0.16), 0 3px 10px rgba(0, 0, 0, 0.23)","0 10px 30px rgba(0, 0, 0, 0.19), 0 6px 10px rgba(0, 0, 0, 0.23)","0 14px 45px rgba(0, 0, 0, 0.25), 0 10px 18px rgba(0, 0, 0, 0.22)","0 19px 60px rgba(0, 0, 0, 0.30), 0 15px 20px rgba(0, 0, 0, 0.22)"];return shadows[zDepth]}});module.exports=Paper;


},{"./mixins/style-propable":153,"./styles/transitions":174,"react":404}],158:[function(require,module,exports){
(function (process){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),RadioButton=require("./radio-button"),RadioButtonGroup=React.createClass({displayName:"RadioButtonGroup",propTypes:{name:React.PropTypes.string.isRequired,valueSelected:React.PropTypes.string,defaultSelected:React.PropTypes.string,labelPosition:React.PropTypes.oneOf(["left","right"]),onChange:React.PropTypes.func},_hasCheckAttribute:function(radioButton){return radioButton.props.hasOwnProperty("checked")&&radioButton.props.checked},getInitialState:function(){return{numberCheckedRadioButtons:0,selected:this.props.valueSelected||this.props.defaultSelected||""}},componentWillMount:function(){var cnt=0;React.Children.forEach(this.props.children,function(option){this._hasCheckAttribute(option)&&cnt++},this),this.setState({numberCheckedRadioButtons:cnt})},componentWillReceiveProps:function(nextProps){nextProps.hasOwnProperty("valueSelected")&&this.setState({selected:nextProps.valueSelected})},render:function(){var options=React.Children.map(this.props.children,function(option){var _option$props=option.props,other=(_option$props.name,_option$props.value,_option$props.label,_option$props.onCheck,_objectWithoutProperties(_option$props,["name","value","label","onCheck"]));return React.createElement(RadioButton,_extends({},other,{ref:option.props.value,name:this.props.name,key:option.props.value,value:option.props.value,label:option.props.label,labelPosition:this.props.labelPosition,onCheck:this._onChange,checked:option.props.value==this.state.selected}))},this);return React.createElement("div",{style:this.props.style,className:this.props.className||""},options)},_updateRadioButtons:function(newSelection){if(0===this.state.numberCheckedRadioButtons)this.setState({selected:newSelection});else if("production"!==process.env.NODE_ENV){var message="Cannot select a different radio button while another radio button has the 'checked' property set to true.";console.error(message)}},_onChange:function(e,newSelection){this._updateRadioButtons(newSelection),0===this.state.numberCheckedRadioButtons&&this.props.onChange&&this.props.onChange(e,newSelection)},getSelectedValue:function(){return this.state.selected},setSelectedValue:function(newSelectionValue){this._updateRadioButtons(newSelectionValue)},clearValue:function(){this.setSelectedValue("")}});module.exports=RadioButtonGroup;


}).call(this,require('_process'))

},{"./radio-button":159,"_process":106,"react":404}],159:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),EnhancedSwitch=require("./enhanced-switch"),RadioButtonOff=require("./svg-icons/toggle-radio-button-off"),RadioButtonOn=require("./svg-icons/toggle-radio-button-on"),RadioButton=React.createClass({displayName:"RadioButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{iconStyle:React.PropTypes.object,labelStyle:React.PropTypes.object,onCheck:React.PropTypes.func},getTheme:function(){return this.context.muiTheme.component.radioButton},getStyles:function(){var styles={icon:{height:this.getTheme().size,width:this.getTheme().size},target:{transition:Transitions.easeOut(),position:"absolute",opacity:1,transform:"scale(1)",fill:this.getTheme().borderColor},fill:{position:"absolute",opacity:1,transform:"scale(0)",transformOrigin:"50% 50%",transition:Transitions.easeOut(),fill:this.getTheme().checkedColor},targetWhenChecked:{opacity:0,transform:"scale(0)"},fillWhenChecked:{opacity:1,transform:"scale(1)"},targetWhenDisabled:{fill:this.getTheme().disabledColor},fillWhenDisabled:{fill:this.getTheme().disabledColor},label:{color:this.props.disabled?this.getTheme().labelDisabledColor:this.getTheme().labelColor}};return styles},render:function(){var _props=this.props,other=(_props.onCheck,_objectWithoutProperties(_props,["onCheck"])),styles=this.getStyles(),onStyles=this.mergeAndPrefix(styles.target,this.props.checked&&styles.targetWhenChecked,this.props.iconStyle,this.props.disabled&&styles.targetWhenDisabled),offStyles=this.mergeAndPrefix(styles.fill,this.props.checked&&styles.fillWhenChecked,this.props.iconStyle,this.props.disabled&&styles.fillWhenDisabled),radioButtonElement=React.createElement("div",null,React.createElement(RadioButtonOff,{style:onStyles}),React.createElement(RadioButtonOn,{style:offStyles})),rippleColor=this.props.checked?this.getTheme().checkedColor:this.getTheme().borderColor,iconStyle=this.mergeAndPrefix(styles.icon,this.props.iconStyle),labelStyle=this.mergeAndPrefix(styles.label,this.props.labelStyle),enhancedSwitchProps={ref:"enhancedSwitch",inputType:"radio",switched:this.props.checked||!1,switchElement:radioButtonElement,rippleColor:rippleColor,iconStyle:iconStyle,labelStyle:labelStyle,onSwitch:this._handleCheck,onParentShouldUpdate:this._handleStateChange,labelPosition:this.props.labelPosition?this.props.labelPosition:"right"};return React.createElement(EnhancedSwitch,_extends({},other,enhancedSwitchProps))},_handleCheck:function(e){this.props.onCheck&&this.props.onCheck(e,this.props.value)},_handleStateChange:function(){},isChecked:function(){return this.refs.enhancedSwitch.isSwitched()},setChecked:function(newCheckedValue){this.refs.enhancedSwitch.setSwitched(newCheckedValue)},getValue:function(){return this.refs.enhancedSwitch.getValue()}});module.exports=RadioButton;


},{"./enhanced-switch":134,"./mixins/style-propable":153,"./styles/transitions":174,"./svg-icons/toggle-radio-button-off":185,"./svg-icons/toggle-radio-button-on":186,"react":404}],160:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),ColorManipulator=require("./utils/color-manipulator"),Typography=require("./styles/typography"),EnhancedButton=require("./enhanced-button"),Paper=require("./paper"),RaisedButton=React.createClass({displayName:"RaisedButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,disabled:React.PropTypes.bool,label:function(props,propName,componentName){return props.children||props.label?void 0:new Error("Warning: Required prop `label` or `children` was not specified in `"+componentName+"`.")},onMouseDown:React.PropTypes.func,onMouseUp:React.PropTypes.func,onMouseOut:React.PropTypes.func,onTouchEnd:React.PropTypes.func,onTouchStart:React.PropTypes.func,primary:React.PropTypes.bool,secondary:React.PropTypes.bool,labelStyle:React.PropTypes.object},getInitialState:function(){var zDepth=this.props.disabled?0:1;return{zDepth:zDepth,initialZDepth:zDepth,hovered:!1}},componentWillReceiveProps:function(nextProps){var zDepth=nextProps.disabled?0:1;this.setState({zDepth:zDepth,initialZDepth:zDepth})},_getBackgroundColor:function(){return this.props.disabled?this.getTheme().disabledColor:this.props.primary?this.getTheme().primaryColor:this.props.secondary?this.getTheme().secondaryColor:this.getTheme().color},_getLabelColor:function(){return this.props.disabled?this.getTheme().disabledTextColor:this.props.primary?this.getTheme().primaryTextColor:this.props.secondary?this.getTheme().secondaryTextColor:this.getTheme().textColor},getThemeButton:function(){return this.context.muiTheme.component.button},getTheme:function(){return this.context.muiTheme.component.raisedButton},getStyles:function(){var amount=this.props.primary||this.props.secondary?.4:.08,styles={root:{display:"inline-block",minWidth:this.getThemeButton().minWidth,height:this.getThemeButton().height,transition:Transitions.easeOut()},container:{position:"relative",height:"100%",width:"100%",padding:0,overflow:"hidden",borderRadius:2,transition:Transitions.easeOut(),backgroundColor:this._getBackgroundColor(),transform:"translate3d(0, 0, 0)"},label:{position:"relative",opacity:1,fontSize:"14px",letterSpacing:0,textTransform:"uppercase",fontWeight:Typography.fontWeightMedium,margin:0,padding:"0px "+this.context.muiTheme.spacing.desktopGutterLess+"px",userSelect:"none",lineHeight:this.getThemeButton().height+"px",color:this._getLabelColor()},overlay:{transition:Transitions.easeOut(),top:0},overlayWhenHovered:{backgroundColor:ColorManipulator.fade(this._getLabelColor(),amount)}};return styles},render:function(){var labelElement,_props=this.props,disabled=_props.disabled,label=_props.label,primary=_props.primary,secondary=_props.secondary,other=_objectWithoutProperties(_props,["disabled","label","primary","secondary"]),styles=this.getStyles();label&&(labelElement=React.createElement("span",{style:this.mergeAndPrefix(styles.label,this.props.labelStyle)},label));var rippleColor=styles.label.color,rippleOpacity=primary||secondary?.16:.1,buttonEventHandlers=disabled?null:{onMouseDown:this._handleMouseDown,onMouseUp:this._handleMouseUp,onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,onTouchStart:this._handleTouchStart,onTouchEnd:this._handleTouchEnd,onKeyboardFocus:this._handleKeyboardFocus};return React.createElement(Paper,{style:this.mergeAndPrefix(styles.root,this.props.style),zDepth:this.state.zDepth},React.createElement(EnhancedButton,_extends({},other,buttonEventHandlers,{ref:"container",disabled:disabled,style:this.mergeAndPrefix(styles.container),focusRippleColor:rippleColor,touchRippleColor:rippleColor,focusRippleOpacity:rippleOpacity,touchRippleOpacity:rippleOpacity}),React.createElement("div",{ref:"overlay",style:this.mergeAndPrefix(styles.overlay,this.state.hovered&&!this.props.disabled&&styles.overlayWhenHovered)},labelElement,this.props.children)))},_handleMouseDown:function(e){0===e.button&&this.setState({zDepth:this.state.initialZDepth+1}),this.props.onMouseDown&&this.props.onMouseDown(e)},_handleMouseUp:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onMouseUp&&this.props.onMouseUp(e)},_handleMouseOut:function(e){this.refs.container.isKeyboardFocused()||this.setState({zDepth:this.state.initialZDepth,hovered:!1}),this.props.onMouseOut&&this.props.onMouseOut(e)},_handleMouseOver:function(e){this.refs.container.isKeyboardFocused()||this.setState({hovered:!0}),this.props.onMouseOver&&this.props.onMouseOver(e)},_handleTouchStart:function(e){this.setState({zDepth:this.state.initialZDepth+1}),this.props.onTouchStart&&this.props.onTouchStart(e)},_handleTouchEnd:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onTouchEnd&&this.props.onTouchEnd(e)},_handleKeyboardFocus:function(e,keyboardFocused){if(keyboardFocused&&!this.props.disabled){this.setState({zDepth:this.state.initialZDepth+1});var amount=this.props.primary||this.props.secondary?.4:.08;React.findDOMNode(this.refs.overlay).style.backgroundColor=ColorManipulator.fade(this.mergeAndPrefix(this.getStyles().label,this.props.labelStyle).color,amount)}else this.state.hovered||(this.setState({zDepth:this.state.initialZDepth}),React.findDOMNode(this.refs.overlay).style.backgroundColor="transparent")}});module.exports=RaisedButton;


},{"./enhanced-button":133,"./mixins/style-propable":153,"./paper":157,"./styles/transitions":174,"./styles/typography":175,"./utils/color-manipulator":216,"react":404}],161:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),Transitions=require("../styles/transitions"),Colors=require("../styles/colors"),RippleCircle=React.createClass({displayName:"RippleCircle",mixins:[StylePropable],propTypes:{color:React.PropTypes.string,opacity:React.PropTypes.number,started:React.PropTypes.bool,ending:React.PropTypes.bool},getDefaultProps:function(){return{color:Colors.darkBlack}},render:function(){var _props=this.props,other=(_props.color,_props.started,_props.ending,_props.style,_objectWithoutProperties(_props,["color","started","ending","style"])),styles=this.mergeAndPrefix({position:"absolute",top:0,left:0,height:"100%",width:"100%",opacity:this.props.ending?0:this.props.opacity?this.props.opacity:.16,borderRadius:"50%",transform:this.props.started?"scale(1)":"scale(0)",backgroundColor:this.props.color,transition:Transitions.easeOut("2s","opacity")+","+Transitions.easeOut("1s","transform")},this.props.style);return React.createElement("div",_extends({},other,{style:styles}))}});module.exports=RippleCircle;


},{"../mixins/style-propable":153,"../styles/colors":168,"../styles/transitions":174,"react":404}],162:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),Transitions=require("../styles/transitions"),Colors=require("../styles/colors"),AutoPrefix=require("../styles/auto-prefix"),pulsateDuration=750,FocusRipple=React.createClass({displayName:"FocusRipple",mixins:[StylePropable],propTypes:{color:React.PropTypes.string,opacity:React.PropTypes.number,show:React.PropTypes.bool,innerStyle:React.PropTypes.object},getDefaultProps:function(){return{color:Colors.darkBlack}},componentDidMount:function(){this._setRippleSize(),this._pulsate()},render:function(){var outerStyles=this.mergeAndPrefix({height:"100%",width:"100%",position:"absolute",top:0,left:0,transition:Transitions.easeOut(),transform:this.props.show?"scale(1)":"scale(0)",opacity:this.props.show?1:0},this.props.style),innerStyles=this.mergeAndPrefix({position:"absolute",height:"100%",width:"100%",borderRadius:"50%",opacity:this.props.opacity?this.props.opacity:.16,backgroundColor:this.props.color,transition:Transitions.easeOut(pulsateDuration+"ms",null,null,Transitions.easeInOutFunction)},this.props.innerStyle);return React.createElement("div",{style:outerStyles},React.createElement("div",{ref:"innerCircle",style:innerStyles}))},_pulsate:function(){if(this.isMounted()&&this.props.show){var nextScale,startScale="scale(0.75)",endScale="scale(0.85)",innerCircle=React.findDOMNode(this.refs.innerCircle),currentScale=innerCircle.style[AutoPrefix.single("transform")];currentScale=currentScale||startScale,nextScale=currentScale===startScale?endScale:startScale,innerCircle.style[AutoPrefix.single("transform")]=nextScale,setTimeout(this._pulsate,pulsateDuration)}},_setRippleSize:function(){var el=React.findDOMNode(this),height=el.offsetHeight,width=el.offsetWidth,size=Math.max(height,width);el.style.height=size+"px",el.style.top=size/2*-1+height/2+"px"}});module.exports=FocusRipple;


},{"../mixins/style-propable":153,"../styles/auto-prefix":167,"../styles/colors":168,"../styles/transitions":174,"react":404}],163:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),Dom=require("../utils/dom"),RippleCircle=require("./circle"),TouchRipple=React.createClass({displayName:"TouchRipple",mixins:[StylePropable],propTypes:{centerRipple:React.PropTypes.bool,color:React.PropTypes.string,opacity:React.PropTypes.number},getInitialState:function(){return{ripples:[{key:0,started:!1,ending:!1}]}},render:function(){var styles=this.mergeAndPrefix({height:"100%",width:"100%",position:"absolute",top:0,left:0},this.props.style);return React.createElement("div",{onMouseUp:this._handleMouseUp,onMouseDown:this._handleMouseDown,onMouseOut:this._handleMouseOut,onTouchStart:this._handleTouchStart,onTouchEnd:this._handleTouchEnd},React.createElement("div",{style:styles},this._getRippleElements()),this.props.children)},start:function(e,isRippleTouchGenerated){var ripple,ripples=this.state.ripples,nextKey=ripples[ripples.length-1].key+1,style=this.props.centerRipple?{}:this._getRippleStyle(e);if(!isRippleTouchGenerated)for(var i=0;i<ripples.length;i++)if(ripples[i].touchGenerated)return;for(var i=0;i<ripples.length;i++)if(ripple=ripples[i],!ripple.started){ripple.started=!0,ripple.touchGenerated=isRippleTouchGenerated,ripple.style=style;break}ripples.push({key:nextKey,started:!1,ending:!1}),this.setState({ripples:ripples})},end:function(){for(var ripple,endingRipple,ripples=this.state.ripples,i=0;i<ripples.length;i++)if(ripple=ripples[i],ripple.started&&!ripple.ending){ripple.ending=!0,endingRipple=ripple;break}endingRipple&&(this.setState({ripples:ripples}),setTimeout(function(){ripples.shift(),this.isMounted()&&this.setState({ripples:ripples})}.bind(this),2e3))},_handleMouseDown:function(e){0===e.button&&this.start(e,!1)},_handleMouseUp:function(){this.end()},_handleMouseOut:function(){this.end()},_handleTouchStart:function(e){this.start(e,!0)},_handleTouchEnd:function(){this.end()},_getRippleStyle:function(e){var style={},el=React.findDOMNode(this),elHeight=el.offsetHeight,elWidth=el.offsetWidth,offset=Dom.offset(el),isTouchEvent=e.touches&&e.touches.length,pageX=isTouchEvent?e.touches[0].pageX:e.pageX,pageY=isTouchEvent?e.touches[0].pageY:e.pageY,pointerX=pageX-offset.left,pointerY=pageY-offset.top,topLeftDiag=this._calcDiag(pointerX,pointerY),topRightDiag=this._calcDiag(elWidth-pointerX,pointerY),botRightDiag=this._calcDiag(elWidth-pointerX,elHeight-pointerY),botLeftDiag=this._calcDiag(pointerX,elHeight-pointerY),rippleRadius=Math.max(topLeftDiag,topRightDiag,botRightDiag,botLeftDiag),rippleSize=2*rippleRadius,left=pointerX-rippleRadius,top=pointerY-rippleRadius;return style.height=rippleSize+"px",style.width=rippleSize+"px",style.top=top+"px",style.left=left+"px",style},_calcDiag:function(a,b){return Math.sqrt(a*a+b*b)},_getRippleElements:function(){return this.state.ripples.map(function(ripple){return React.createElement(RippleCircle,{key:ripple.key,started:ripple.started,ending:ripple.ending,style:ripple.style,color:this.props.color,opacity:this.props.opacity})}.bind(this))}});module.exports=TouchRipple;


},{"../mixins/style-propable":153,"../utils/dom":219,"./circle":161,"react":404}],164:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),TextField=require("./text-field"),DropDownMenu=require("./drop-down-menu"),SelectField=React.createClass({displayName:"SelectField",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{errorText:React.PropTypes.string,floatingLabelText:React.PropTypes.string,hintText:React.PropTypes.string,id:React.PropTypes.string,multiLine:React.PropTypes.bool,onBlur:React.PropTypes.func,onChange:React.PropTypes.func,onFocus:React.PropTypes.func,onKeyDown:React.PropTypes.func,onEnterKeyDown:React.PropTypes.func,type:React.PropTypes.string,rows:React.PropTypes.number,inputStyle:React.PropTypes.object,floatingLabelStyle:React.PropTypes.object,autoWidth:React.PropTypes.bool,menuItems:React.PropTypes.array.isRequired,menuItemStyle:React.PropTypes.object,selectedIndex:React.PropTypes.number},getDefaultProps:function(){return{}},getStyles:function(){var styles={selectfield:{root:{height:"auto",position:"relative",width:"100%"},label:{paddingLeft:0,top:4,width:"100%"},icon:{top:20,right:0},underline:{borderTop:"none"}}};return styles},onChange:function(e,index,payload){e.target.value=payload,this.props.onChange&&this.props.onChange(e)},render:function(){var styles=this.getStyles();return React.createElement(TextField,this.props,React.createElement(DropDownMenu,_extends({},this.props,{onChange:this.onChange,style:styles.selectfield.root,labelStyle:styles.selectfield.label,iconStyle:styles.selectfield.icon,underlineStyle:styles.selectfield.underline,autoWidth:!1})))}});module.exports=SelectField;


},{"./drop-down-menu":132,"./mixins/style-propable":153,"./styles/transitions":174,"./text-field":196,"react":404}],165:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("./mixins/style-propable"),Draggable=require("react-draggable2"),Transitions=require("./styles/transitions.js"),FocusRipple=require("./ripples/focus-ripple"),Slider=React.createClass({displayName:"Slider",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{required:React.PropTypes.bool,disabled:React.PropTypes.bool,min:React.PropTypes.number,max:React.PropTypes.number,step:React.PropTypes.number,error:React.PropTypes.string,description:React.PropTypes.string,name:React.PropTypes.string.isRequired,onChange:React.PropTypes.func,onFocus:React.PropTypes.func,onBlur:React.PropTypes.func,onDragStart:React.PropTypes.func,onDragStop:React.PropTypes.func},getDefaultProps:function(){return{required:!0,disabled:!1,defaultValue:0,step:.01,min:0,max:1,dragging:!1}},getInitialState:function(){var value=this.props.value;null==value&&(value=this.props.defaultValue);var percent=(value-this.props.min)/(this.props.max-this.props.min);return isNaN(percent)&&(percent=0),{value:value,percent:percent,focused:!1,active:!1,hovered:!1}},componentWillReceiveProps:function(nextProps){null!=nextProps.value&&this.setValue(nextProps.value)},getTheme:function(){return this.context.muiTheme.component.slider},getStyles:function(){var size=this.getTheme().handleSize+this.getTheme().trackSize,gutter=(this.getTheme().handleSizeDisabled+this.getTheme().trackSize)/2,fillGutter=this.getTheme().handleSizeDisabled-this.getTheme().trackSize,styles={root:{touchCallout:"none",userSelect:"none",cursor:"default",height:this.getTheme().handleSizeActive,position:"relative",marginTop:24,marginBottom:48},track:{position:"absolute",top:(this.getTheme().handleSizeActive-this.getTheme().trackSize)/2,left:0,width:"100%",height:this.getTheme().trackSize},filledAndRemaining:{position:"absolute",top:0,height:"100%",transition:Transitions.easeOut(null,"margin")},percentZeroRemaining:{left:1,marginLeft:gutter},handle:{boxSizing:"border-box",position:"absolute",cursor:"pointer",pointerEvents:"inherit",top:(this.getTheme().handleSizeActive-this.getTheme().trackSize)/2+"px",left:"0%",zIndex:1,margin:this.getTheme().trackSize/2+"px 0 0 0",width:this.getTheme().handleSize,height:this.getTheme().handleSize,backgroundColor:this.getTheme().selectionColor,backgroundClip:"padding-box",border:"0px solid transparent",borderRadius:"50%",transform:"translate(-50%, -50%)",transition:Transitions.easeOut("450ms","border")+","+Transitions.easeOut("450ms","width")+","+Transitions.easeOut("450ms","height"),overflow:"visible"},handleWhenDisabled:{boxSizing:"content-box",cursor:"not-allowed",backgroundColor:this.getTheme().trackColor,width:this.getTheme().handleSizeDisabled,height:this.getTheme().handleSizeDisabled,border:"2px solid white"},handleWhenPercentZero:{border:this.getTheme().trackSize+"px solid "+this.getTheme().trackColor,backgroundColor:this.getTheme().handleFillColor,boxShadow:"none"},handleWhenActive:{borderColor:this.getTheme().trackColorSelected,width:this.getTheme().handleSizeActive,height:this.getTheme().handleSizeActive,transition:Transitions.easeOut("450ms","backgroundColor")+","+Transitions.easeOut("450ms","width")+","+Transitions.easeOut("450ms","height")},ripples:{height:"300%",width:"300%",top:"-12px",left:"-12px"},handleWhenDisabledAndZero:{width:size/2+"px",height:size/2+"px"},handleWhenPercentZeroAndHovered:{border:this.getTheme().trackSize+"px solid "+this.getTheme().handleColorZero,width:size+"px",height:size+"px"}};return styles.filled=this.mergeAndPrefix(styles.filledAndRemaining,{left:0,backgroundColor:this.props.disabled?this.getTheme().trackColor:this.getTheme().selectionColor,marginRight:fillGutter,width:100*this.state.percent+(this.props.disabled?-1:0)+"%"}),styles.remaining=this.mergeAndPrefix(styles.filledAndRemaining,{right:0,backgroundColor:this.getTheme().trackColor,marginLeft:fillGutter,width:100*(1-this.state.percent)+(this.props.disabled?-1:0)+"%"}),styles.percentZeroRemaining.width=styles.remaining.width-styles.percentZeroRemaining.left,styles},render:function(){var percent=this.state.percent;percent>1?percent=1:0>percent&&(percent=0);var gutter=(this.getTheme().handleSizeDisabled+this.getTheme().trackSize)/2,fillGutter=this.getTheme().handleSizeDisabled-this.getTheme().trackSize,styles=this.getStyles(),sliderStyles=this.mergeAndPrefix(styles.root,this.props.style),trackStyles=styles.track,filledStyles=styles.filled,remainingStyles=this.mergeAndPrefix(styles.remaining,0===percent&&styles.percentZeroRemaining),handleStyles=0===percent?this.mergeAndPrefix(styles.handle,styles.handleWhenPercentZero,this.state.active&&styles.handleWhenActive,this.state.focused&&{outline:"none"},this.state.hovered&&styles.handleWhenPercentZeroAndHovered,this.props.disabled&&styles.handleWhenDisabledAndZero):this.mergeAndPrefix(styles.handle,this.state.active&&styles.handleWhenActive,this.state.focused&&{outline:"none"},this.props.disabled&&styles.handleWhenDisabled),rippleStyle={height:"12px",width:"12px"};!this.state.hovered&&!this.state.focused||this.props.disabled||(remainingStyles.backgroundColor=this.getTheme().trackColorSelected),0===percent&&(filledStyles.marginRight=gutter),0===this.state.percent&&this.state.active&&(remainingStyles.marginLeft=fillGutter);var focusRipple,rippleShowCondition=(this.state.hovered||this.state.focused)&&!this.state.active&&0!==this.state.percent,rippleColor=0===this.state.percent?this.getTheme().handleColorZero:this.getTheme().rippleColor;return this.props.disabled||this.props.disableFocusRipple||(focusRipple=React.createElement(FocusRipple,{ref:"focusRipple",key:"focusRipple",style:rippleStyle,innerStyle:styles.ripples,show:rippleShowCondition,color:rippleColor})),React.createElement("div",{style:this.props.style},React.createElement("span",{className:"mui-input-highlight"}),React.createElement("span",{className:"mui-input-bar"}),React.createElement("span",{className:"mui-input-description"},this.props.description),React.createElement("span",{className:"mui-input-error"},this.props.error),React.createElement("div",{style:sliderStyles,onFocus:this._onFocus,onBlur:this._onBlur,onMouseOver:this._onMouseOver,onMouseOut:this._onMouseOut,onMouseUp:this._onMouseUp},React.createElement("div",{ref:"track",style:trackStyles},React.createElement("div",{style:filledStyles}),React.createElement("div",{style:remainingStyles}),React.createElement(Draggable,{axis:"x",bound:"point",cancel:this.props.disabled?"*":null,start:{x:100*percent+"%"},constrain:this._constrain(),onStart:this._onDragStart,onStop:this._onDragStop,onDrag:this._onDragUpdate,onMouseDown:this._onMouseDown},React.createElement("div",{style:handleStyles,tabIndex:0},focusRipple)))),React.createElement("input",{ref:"input",type:"hidden",name:this.props.name,value:this.state.value,required:this.props.required,min:this.props.min,max:this.props.max,step:this.props.step}))},getValue:function(){return this.state.value},setValue:function(i){var percent=(i-this.props.min)/(this.props.max-this.props.min);isNaN(percent)&&(percent=0),this.setState({value:i,percent:percent})},getPercent:function(){return this.state.percent},setPercent:function(percent){var value=this._alignValue(this._percentToValue(percent));this.setState({value:value,percent:percent})},clearValue:function(){this.setValue(0)},_alignValue:function(val){var _props=this.props,step=_props.step,min=_props.min,valModStep=(val-min)%step,alignValue=val-valModStep;return 2*Math.abs(valModStep)>=step&&(alignValue+=valModStep>0?step:-step),parseFloat(alignValue.toFixed(5))},_constrain:function(){var _this=this,_props2=this.props,min=_props2.min,max=_props2.max,step=_props2.step;return function(pos){var i,pixelMax=React.findDOMNode(_this.refs.track).clientWidth,pixelStep=pixelMax/((max-min)/step),cursor=min;for(i=0;(max-min)/step>i;i++){var distance=pos.left-cursor,nextDistance=cursor+pixelStep-pos.left;if(!(Math.abs(distance)>Math.abs(nextDistance)))break;cursor+=pixelStep}return{left:cursor}}},_onFocus:function(e){this.setState({focused:!0}),this.props.onFocus&&this.props.onFocus(e)},_onBlur:function(e){this.setState({focused:!1,active:!1}),this.props.onBlur&&this.props.onBlur(e)},_onMouseOver:function(){this.setState({hovered:!0})},_onMouseOut:function(){this.setState({hovered:!1})},_onMouseUp:function(){this.props.disabled||this.setState({active:!1})},_onMouseDown:function(){this.props.disabled||this.setState({active:!0})},_onDragStart:function(e,ui){this.setState({dragging:!0,active:!0}),this.props.onDragStart&&this.props.onDragStart(e,ui)},_onDragStop:function(e,ui){this.setState({dragging:!1,active:!1}),this.props.onDragStop&&this.props.onDragStop(e,ui)},_onDragUpdate:function(e,ui){this.state.dragging&&(this.props.disabled||this._dragX(e,ui.position.left))},_dragX:function(e,pos){var max=React.findDOMNode(this.refs.track).clientWidth;0>pos?pos=0:pos>max&&(pos=max),this._updateWithChangeEvent(e,pos/max)},_updateWithChangeEvent:function(e,percent){if(this.state.percent!==percent){this.setPercent(percent);var value=this._alignValue(this._percentToValue(percent));this.props.onChange&&this.props.onChange(e,value)}},_percentToValue:function(percent){return percent*(this.props.max-this.props.min)+this.props.min}});module.exports=Slider;


},{"./mixins/style-propable":153,"./ripples/focus-ripple":162,"./styles/transitions.js":174,"react":404,"react-draggable2":227}],166:[function(require,module,exports){
"use strict";var React=require("react"),CssEvent=require("./utils/css-event"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),ClickAwayable=require("./mixins/click-awayable"),FlatButton=require("./flat-button"),Snackbar=React.createClass({displayName:"Snackbar",mixins:[StylePropable,ClickAwayable],manuallyBindClickAway:!0,contextTypes:{muiTheme:React.PropTypes.object},propTypes:{action:React.PropTypes.string,message:React.PropTypes.string.isRequired,openOnMount:React.PropTypes.bool,onActionTouchTap:React.PropTypes.func},getInitialState:function(){return{open:this.props.openOnMount||!1}},componentClickAway:function(){this.dismiss()},componentDidUpdate:function(prevProps,prevState){prevState.open!=this.state.open&&(this.state.open?CssEvent.onTransitionEnd(React.findDOMNode(this),function(){this._bindClickAway()}.bind(this)):this._unbindClickAway())},getTheme:function(){return this.context.muiTheme.component.snackbar},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var styles={root:{color:this.getTheme().textColor,backgroundColor:this.getTheme().backgroundColor,borderRadius:2,padding:"0px "+this.getSpacing().desktopGutter+"px",height:this.getSpacing().desktopSubheaderHeight,lineHeight:this.getSpacing().desktopSubheaderHeight+"px",minWidth:288,maxWidth:568,position:"fixed",zIndex:10,bottom:this.getSpacing().desktopGutter,marginLeft:this.getSpacing().desktopGutter,left:-1e4,opacity:0,transform:"translate3d(0, 20px, 0)",transition:Transitions.easeOut("0ms","left","400ms")+","+Transitions.easeOut("400ms","opacity")+","+Transitions.easeOut("400ms","transform")},action:{color:this.getTheme().actionColor,"float":"right",marginTop:6,marginRight:-16,marginLeft:this.getSpacing().desktopGutter,backgroundColor:"transparent"},rootWhenOpen:{left:"0px",opacity:1,transform:"translate3d(0, 0, 0)",transition:Transitions.easeOut("0ms","left","0ms")+","+Transitions.easeOut("400ms","opacity","0ms")+","+Transitions.easeOut("400ms","transform","0ms")}};return styles},render:function(){var action,styles=this.getStyles();this.props.action&&(action=React.createElement(FlatButton,{style:styles.action,label:this.props.action,onTouchTap:this.props.onActionTouchTap}));var rootStyles=styles.root;return this.state.open&&(rootStyles=this.mergeStyles(styles.root,styles.rootWhenOpen,this.props.style)),React.createElement("span",{style:rootStyles},React.createElement("span",null,this.props.message),action)},show:function(){this.setState({open:!0})},dismiss:function(){this.setState({open:!1})}});module.exports=Snackbar;


},{"./flat-button":136,"./mixins/click-awayable":152,"./mixins/style-propable":153,"./styles/transitions":174,"./utils/css-event":217,"react":404}],167:[function(require,module,exports){
"use strict";var isBrowser="undefined"!=typeof window,Modernizr=isBrowser?require("../utils/modernizr.custom"):void 0;module.exports={all:function(styles){var prefixedStyle={};for(var key in styles)prefixedStyle[this.single(key)]=styles[key];return prefixedStyle},set:function(style,key,value){style[this.single(key)]=value},single:function(key){return isBrowser?Modernizr.prefixed(key):key},singleHyphened:function(key){var str=this.single(key);return str?str.replace(/([A-Z])/g,function(str,m1){return"-"+m1.toLowerCase()}).replace(/^ms-/,"-ms-"):key}};


},{"../utils/modernizr.custom":224}],168:[function(require,module,exports){
"use strict";module.exports={red50:"#ffebee",red100:"#ffcdd2",red200:"#ef9a9a",red300:"#e57373",red400:"#ef5350",red500:"#f44336",red600:"#e53935",red700:"#d32f2f",red800:"#c62828",red900:"#b71c1c",redA100:"#ff8a80",redA200:"#ff5252",redA400:"#ff1744",redA700:"#d50000",pink50:"#fce4ec",pink100:"#f8bbd0",pink200:"#f48fb1",pink300:"#f06292",pink400:"#ec407a",pink500:"#e91e63",pink600:"#d81b60",pink700:"#c2185b",pink800:"#ad1457",pink900:"#880e4f",pinkA100:"#ff80ab",pinkA200:"#ff4081",pinkA400:"#f50057",pinkA700:"#c51162",purple50:"#f3e5f5",purple100:"#e1bee7",purple200:"#ce93d8",purple300:"#ba68c8",purple400:"#ab47bc",purple500:"#9c27b0",purple600:"#8e24aa",purple700:"#7b1fa2",purple800:"#6a1b9a",purple900:"#4a148c",purpleA100:"#ea80fc",purpleA200:"#e040fb",purpleA400:"#d500f9",purpleA700:"#aa00ff",deepPurple50:"#ede7f6",deepPurple100:"#d1c4e9",deepPurple200:"#b39ddb",deepPurple300:"#9575cd",deepPurple400:"#7e57c2",deepPurple500:"#673ab7",deepPurple600:"#5e35b1",deepPurple700:"#512da8",deepPurple800:"#4527a0",deepPurple900:"#311b92",deepPurpleA100:"#b388ff",deepPurpleA200:"#7c4dff",deepPurpleA400:"#651fff",deepPurpleA700:"#6200ea",indigo50:"#e8eaf6",indigo100:"#c5cae9",indigo200:"#9fa8da",indigo300:"#7986cb",indigo400:"#5c6bc0",indigo500:"#3f51b5",indigo600:"#3949ab",indigo700:"#303f9f",indigo800:"#283593",indigo900:"#1a237e",indigoA100:"#8c9eff",indigoA200:"#536dfe",indigoA400:"#3d5afe",indigoA700:"#304ffe",blue50:"#e3f2fd",blue100:"#bbdefb",blue200:"#90caf9",blue300:"#64b5f6",blue400:"#42a5f5",blue500:"#2196f3",blue600:"#1e88e5",blue700:"#1976d2",blue800:"#1565c0",blue900:"#0d47a1",blueA100:"#82b1ff",blueA200:"#448aff",blueA400:"#2979ff",blueA700:"#2962ff",lightBlue50:"#e1f5fe",lightBlue100:"#b3e5fc",lightBlue200:"#81d4fa",lightBlue300:"#4fc3f7",lightBlue400:"#29b6f6",lightBlue500:"#03a9f4",lightBlue600:"#039be5",lightBlue700:"#0288d1",lightBlue800:"#0277bd",lightBlue900:"#01579b",lightBlueA100:"#80d8ff",lightBlueA200:"#40c4ff",lightBlueA400:"#00b0ff",lightBlueA700:"#0091ea",cyan50:"#e0f7fa",cyan100:"#b2ebf2",cyan200:"#80deea",cyan300:"#4dd0e1",cyan400:"#26c6da",cyan500:"#00bcd4",cyan600:"#00acc1",cyan700:"#0097a7",cyan800:"#00838f",cyan900:"#006064",cyanA100:"#84ffff",cyanA200:"#18ffff",cyanA400:"#00e5ff",cyanA700:"#00b8d4",teal50:"#e0f2f1",teal100:"#b2dfdb",teal200:"#80cbc4",teal300:"#4db6ac",teal400:"#26a69a",teal500:"#009688",teal600:"#00897b",teal700:"#00796b",teal800:"#00695c",teal900:"#004d40",tealA100:"#a7ffeb",tealA200:"#64ffda",tealA400:"#1de9b6",tealA700:"#00bfa5",green50:"#e8f5e9",green100:"#c8e6c9",green200:"#a5d6a7",green300:"#81c784",green400:"#66bb6a",green500:"#4caf50",green600:"#43a047",green700:"#388e3c",green800:"#2e7d32",green900:"#1b5e20",greenA100:"#b9f6ca",greenA200:"#69f0ae",greenA400:"#00e676",greenA700:"#00c853",lightGreen50:"#f1f8e9",lightGreen100:"#dcedc8",lightGreen200:"#c5e1a5",lightGreen300:"#aed581",lightGreen400:"#9ccc65",lightGreen500:"#8bc34a",lightGreen600:"#7cb342",lightGreen700:"#689f38",lightGreen800:"#558b2f",lightGreen900:"#33691e",lightGreenA100:"#ccff90",lightGreenA200:"#b2ff59",lightGreenA400:"#76ff03",lightGreenA700:"#64dd17",lime50:"#f9fbe7",lime100:"#f0f4c3",lime200:"#e6ee9c",lime300:"#dce775",lime400:"#d4e157",lime500:"#cddc39",lime600:"#c0ca33",lime700:"#afb42b",lime800:"#9e9d24",lime900:"#827717",limeA100:"#f4ff81",limeA200:"#eeff41",limeA400:"#c6ff00",limeA700:"#aeea00",yellow50:"#fffde7",yellow100:"#fff9c4",yellow200:"#fff59d",yellow300:"#fff176",yellow400:"#ffee58",yellow500:"#ffeb3b",yellow600:"#fdd835",yellow700:"#fbc02d",yellow800:"#f9a825",yellow900:"#f57f17",yellowA100:"#ffff8d",yellowA200:"#ffff00",yellowA400:"#ffea00",yellowA700:"#ffd600",amber50:"#fff8e1",amber100:"#ffecb3",amber200:"#ffe082",amber300:"#ffd54f",amber400:"#ffca28",amber500:"#ffc107",amber600:"#ffb300",amber700:"#ffa000",amber800:"#ff8f00",amber900:"#ff6f00",amberA100:"#ffe57f",amberA200:"#ffd740",amberA400:"#ffc400",amberA700:"#ffab00",orange50:"#fff3e0",orange100:"#ffe0b2",orange200:"#ffcc80",orange300:"#ffb74d",orange400:"#ffa726",orange500:"#ff9800",orange600:"#fb8c00",orange700:"#f57c00",orange800:"#ef6c00",orange900:"#e65100",orangeA100:"#ffd180",orangeA200:"#ffab40",orangeA400:"#ff9100",orangeA700:"#ff6d00",deepOrange50:"#fbe9e7",deepOrange100:"#ffccbc",deepOrange200:"#ffab91",deepOrange300:"#ff8a65",deepOrange400:"#ff7043",deepOrange500:"#ff5722",deepOrange600:"#f4511e",deepOrange700:"#e64a19",deepOrange800:"#d84315",deepOrange900:"#bf360c",deepOrangeA100:"#ff9e80",deepOrangeA200:"#ff6e40",deepOrangeA400:"#ff3d00",deepOrangeA700:"#dd2c00",brown50:"#efebe9",brown100:"#d7ccc8",brown200:"#bcaaa4",brown300:"#a1887f",brown400:"#8d6e63",brown500:"#795548",brown600:"#6d4c41",brown700:"#5d4037",brown800:"#4e342e",brown900:"#3e2723",blueGrey50:"#eceff1",blueGrey100:"#cfd8dc",blueGrey200:"#b0bec5",blueGrey300:"#90a4ae",blueGrey400:"#78909c",blueGrey500:"#607d8b",blueGrey600:"#546e7a",blueGrey700:"#455a64",blueGrey800:"#37474f",blueGrey900:"#263238",grey50:"#fafafa",grey100:"#f5f5f5",grey200:"#eeeeee",grey300:"#e0e0e0",grey400:"#bdbdbd",grey500:"#9e9e9e",grey600:"#757575",grey700:"#616161",grey800:"#424242",grey900:"#212121",black:"#000000",white:"#ffffff",transparent:"rgba(0, 0, 0, 0)",fullBlack:"rgba(0, 0, 0, 1)",darkBlack:"rgba(0, 0, 0, 0.87)",lightBlack:"rgba(0, 0, 0, 0.54)",minBlack:"rgba(0, 0, 0, 0.26)",faintBlack:"rgba(0, 0, 0, 0.12)",fullWhite:"rgba(255, 255, 255, 1)",darkWhite:"rgba(255, 255, 255, 0.87)",lightWhite:"rgba(255, 255, 255, 0.54)"};


},{}],169:[function(require,module,exports){
"use strict";module.exports={AutoPrefix:require("./auto-prefix"),Colors:require("./colors"),Spacing:require("./spacing"),ThemeManager:require("./theme-manager"),Transitions:require("./transitions"),Typography:require("./typography")};


},{"./auto-prefix":167,"./colors":168,"./spacing":170,"./theme-manager":171,"./transitions":174,"./typography":175}],170:[function(require,module,exports){
"use strict";module.exports={iconSize:24,desktopGutter:24,desktopGutterMore:32,desktopGutterLess:16,desktopGutterMini:8,desktopKeylineIncrement:64,desktopDropDownMenuItemHeight:32,desktopDropDownMenuFontSize:15,desktopLeftNavMenuItemHeight:48,desktopSubheaderHeight:48,desktopToolbarHeight:56};


},{}],171:[function(require,module,exports){
"use strict";var Extend=require("../utils/extend"),Types={LIGHT:require("./themes/light-theme"),DARK:require("./themes/dark-theme")},ThemeManager=function(){return{types:Types,template:Types.LIGHT,spacing:Types.LIGHT.spacing,contentFontFamily:"Roboto, sans-serif",palette:Types.LIGHT.getPalette(),component:Types.LIGHT.getComponentThemes(Types.LIGHT.getPalette()),getCurrentTheme:function(){return this},setTheme:function(newTheme){this.setSpacing(newTheme.spacing),this.setPalette(newTheme.getPalette()),this.setComponentThemes(newTheme.getComponentThemes(newTheme.getPalette()))},setSpacing:function(newSpacing){this.spacing=Extend(this.spacing,newSpacing),this.component=Extend(this.component,this.template.getComponentThemes(this.palette,this.spacing))},setPalette:function(newPalette){this.palette=Extend(this.palette,newPalette),this.component=Extend(this.component,this.template.getComponentThemes(this.palette))},setComponentThemes:function(overrides){this.component=Extend(this.component,overrides)}}};module.exports=ThemeManager;


},{"../utils/extend":221,"./themes/dark-theme":172,"./themes/light-theme":173}],172:[function(require,module,exports){
"use strict";var Colors=require("../colors"),ColorManipulator=require("../../utils/color-manipulator"),DarkTheme={getPalette:function(){return{textColor:Colors.fullWhite,canvasColor:"#303030",borderColor:ColorManipulator.fade(Colors.fullWhite,.3),disabledColor:ColorManipulator.fade(Colors.fullWhite,.3)}},getComponentThemes:function(palette){var cardColor=Colors.grey800;return{floatingActionButton:{disabledColor:ColorManipulator.fade(palette.textColor,.12)},leftNav:{color:cardColor},menu:{backgroundColor:cardColor,containerBackgroundColor:cardColor},menuItem:{hoverColor:"rgba(255, 255, 255, .03)"},menuSubheader:{borderColor:"rgba(255, 255, 255, 0.3)"},paper:{backgroundColor:cardColor},raisedButton:{color:Colors.grey500},toggle:{thumbOnColor:Colors.cyan200,thumbOffColor:Colors.grey400,thumbDisabledColor:Colors.grey800,thumbRequiredColor:Colors.cyan200,trackOnColor:ColorManipulator.fade(Colors.cyan200,.5),trackOffColor:"rgba(255, 255, 255, 0.3)",trackDisabledColor:"rgba(255, 255, 255, 0.1)"},slider:{trackColor:Colors.minBlack,handleColorZero:cardColor,handleFillColor:cardColor,selectionColor:Colors.cyan200}}}};module.exports=DarkTheme;


},{"../../utils/color-manipulator":216,"../colors":168}],173:[function(require,module,exports){
"use strict";var Colors=require("../colors"),Spacing=require("../spacing"),ColorManipulator=require("../../utils/color-manipulator"),LightTheme={spacing:Spacing,contentFontFamily:"Roboto, sans-serif",getPalette:function(){return{primary1Color:Colors.cyan500,primary2Color:Colors.cyan700,primary3Color:Colors.cyan100,accent1Color:Colors.pinkA200,accent2Color:Colors.pinkA400,accent3Color:Colors.pinkA100,textColor:Colors.darkBlack,canvasColor:Colors.white,borderColor:Colors.grey300,disabledColor:ColorManipulator.fade(Colors.darkBlack,.3)}},getComponentThemes:function(palette,spacing){spacing=spacing||Spacing;var obj={appBar:{color:palette.primary1Color,textColor:Colors.darkWhite,height:spacing.desktopKeylineIncrement},button:{height:36,minWidth:88,iconButtonSize:2*spacing.iconSize},checkbox:{boxColor:palette.textColor,checkedColor:palette.primary1Color,requiredColor:palette.primary1Color,disabledColor:palette.disabledColor,labelColor:palette.textColor,labelDisabledColor:palette.disabledColor},datePicker:{color:palette.primary1Color,textColor:Colors.white,calendarTextColor:palette.textColor,selectColor:palette.primary2Color,selectTextColor:Colors.white},dropDownMenu:{accentColor:palette.borderColor},flatButton:{color:palette.canvasColor,textColor:palette.textColor,primaryTextColor:palette.accent1Color,secondaryTextColor:palette.primary1Color},floatingActionButton:{buttonSize:56,miniSize:40,color:palette.accent1Color,iconColor:Colors.white,secondaryColor:palette.primary1Color,secondaryIconColor:Colors.white},leftNav:{width:4*spacing.desktopKeylineIncrement,color:Colors.white},menu:{backgroundColor:Colors.white,containerBackgroundColor:Colors.white},menuItem:{dataHeight:32,height:48,hoverColor:"rgba(0, 0, 0, .035)",padding:spacing.desktopGutter,selectedTextColor:palette.accent1Color},menuSubheader:{padding:spacing.desktopGutter,borderColor:palette.borderColor,textColor:palette.primary1Color},paper:{backgroundColor:Colors.white},radioButton:{borderColor:palette.textColor,backgroundColor:Colors.white,checkedColor:palette.primary1Color,requiredColor:palette.primary1Color,disabledColor:palette.disabledColor,size:24,labelColor:palette.textColor,labelDisabledColor:palette.disabledColor},raisedButton:{color:Colors.white,textColor:palette.textColor,primaryColor:palette.accent1Color,primaryTextColor:Colors.white,secondaryColor:palette.primary1Color,secondaryTextColor:Colors.white},slider:{trackSize:2,trackColor:Colors.minBlack,trackColorSelected:Colors.grey500,handleSize:12,handleSizeDisabled:8,handleColorZero:Colors.grey400,handleFillColor:Colors.white,selectionColor:palette.primary3Color,rippleColor:palette.primary1Color},snackbar:{textColor:Colors.white,backgroundColor:"#323232",actionColor:palette.accent1Color},table:{backgroundColor:Colors.white},tableHeader:{borderColor:palette.borderColor},tableHeaderColumn:{textColor:Colors.lightBlack,height:56,spacing:28},tableFooter:{borderColor:palette.borderColor,textColor:Colors.lightBlack},tableRow:{hoverColor:Colors.grey200,stripeColor:ColorManipulator.lighten(palette.primary1Color,.55),selectedColor:Colors.grey300,textColor:Colors.darkBlack,borderColor:palette.borderColor},tableRowColumn:{height:48,spacing:28},timePicker:{color:Colors.white,textColor:Colors.grey600,accentColor:palette.primary1Color,clockColor:Colors.black,selectColor:palette.primary2Color,selectTextColor:Colors.white},toggle:{thumbOnColor:palette.primary1Color,thumbOffColor:Colors.grey50,thumbDisabledColor:Colors.grey400,thumbRequiredColor:palette.primary1Color,trackOnColor:ColorManipulator.fade(palette.primary1Color,.5),trackOffColor:Colors.minBlack,trackDisabledColor:Colors.faintBlack,labelColor:palette.textColor,labelDisabledColor:palette.disabledColor},toolbar:{backgroundColor:ColorManipulator.darken("#eeeeee",.05),height:56,titleFontSize:20,iconColor:"rgba(0, 0, 0, .40)",separatorColor:"rgba(0, 0, 0, .175)",menuHoverColor:"rgba(0, 0, 0, .10)"},tabs:{backgroundColor:palette.primary1Color},textField:{textColor:palette.textColor,hintColor:palette.disabledColor,floatingLabelColor:palette.textColor,disabledTextColor:palette.disabledColor,errorColor:Colors.red500,focusColor:palette.primary1Color,backgroundColor:"transparent",borderColor:palette.borderColor}};return obj.flatButton.disabledTextColor=ColorManipulator.fade(obj.flatButton.textColor,.3),obj.floatingActionButton.disabledColor=ColorManipulator.darken(Colors.white,.1),obj.floatingActionButton.disabledTextColor=ColorManipulator.fade(palette.textColor,.3),obj.raisedButton.disabledColor=ColorManipulator.darken(obj.raisedButton.color,.1),obj.raisedButton.disabledTextColor=ColorManipulator.fade(obj.raisedButton.textColor,.3),obj.slider.handleSizeActive=2*obj.slider.handleSize,obj.toggle.trackRequiredColor=ColorManipulator.fade(obj.toggle.thumbRequiredColor,.5),obj}};module.exports=LightTheme;


},{"../../utils/color-manipulator":216,"../colors":168,"../spacing":170}],174:[function(require,module,exports){
"use strict";var AutoPrefix=require("./auto-prefix");module.exports={easeOutFunction:"cubic-bezier(0.23, 1, 0.32, 1)",easeInOutFunction:"cubic-bezier(0.445, 0.05, 0.55, 0.95)",easeOut:function(duration,property,delay,easeFunction){return easeFunction=easeFunction||this.easeOutFunction,this.create(duration,property,delay,easeFunction)},create:function(duration,property,delay,easeFunction){return duration=duration||"450ms",property=property||"all",delay=delay||"0ms",easeFunction=easeFunction||"linear",AutoPrefix.singleHyphened(property)+" "+duration+" "+easeFunction+" "+delay}};


},{"./auto-prefix":167}],175:[function(require,module,exports){
"use strict";var Colors=require("./colors"),Typography=function(){this.textFullBlack=Colors.fullBlack,this.textDarkBlack=Colors.darkBlack,this.textLightBlack=Colors.lightBlack,this.textMinBlack=Colors.minBlack,this.textFullWhite=Colors.fullWhite,this.textDarkWhite=Colors.darkWhite,this.textLightWhite=Colors.lightWhite,this.fontWeightLight=300,this.fontWeightNormal=400,this.fontWeightMedium=500,this.fontStyleButtonFontSize=14};module.exports=new Typography;


},{"./colors":168}],176:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),SvgIcon=React.createClass({displayName:"SvgIcon",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{color:React.PropTypes.string,hoverColor:React.PropTypes.string,onMouseOut:React.PropTypes.func,onMouseOver:React.PropTypes.func,viewBox:React.PropTypes.string},getInitialState:function(){return{hovered:!1}},getDefaultProps:function(){return{viewBox:"0 0 24 24"}},render:function(){var _props=this.props,color=_props.color,hoverColor=_props.hoverColor,viewBox=_props.viewBox,style=_props.style,other=_objectWithoutProperties(_props,["color","hoverColor","viewBox","style"]),offColor=color?color:style&&style.fill?style.fill:this.context.muiTheme.palette.textColor,onColor=hoverColor?hoverColor:offColor;style&&delete style.fill;var mergedStyles=this.mergeAndPrefix({display:"inline-block",height:24,width:24,userSelect:"none",transition:Transitions.easeOut(),fill:this.state.hovered?onColor:offColor},style);return React.createElement("svg",_extends({},other,{onMouseOut:this._handleMouseOut,onMouseOver:this._handleMouseOver,style:mergedStyles,viewBox:viewBox}),this.props.children)},_handleMouseOut:function(e){this.setState({hovered:!1}),this.props.onMouseOut&&this.props.onMouseOut(e)},_handleMouseOver:function(e){this.setState({hovered:!0}),this.props.onMouseOver&&this.props.onMouseOver(e)}});module.exports=SvgIcon;


},{"./mixins/style-propable":153,"./styles/transitions":174,"react/addons":232}],177:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),DropDownArrow=React.createClass({displayName:"DropDownArrow",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("polygon",{points:"7,9.5 12,14.5 17,9.5 "}))}});module.exports=DropDownArrow;


},{"../svg-icon":176,"react":404}],178:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),NavigationChevronLeftDouble=React.createClass({displayName:"NavigationChevronLeftDouble",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M11.41 7.41 L10 6 l-6 6 6 6 1.41-1.41 L6.83 12z"}),React.createElement("path",{d:"M18.41 7.41 L17 6 l-6 6 6 6 1.41-1.41 L13.83 12z"}))}});module.exports=NavigationChevronLeftDouble;


},{"../svg-icon":176,"react":404}],179:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),NavigationChevronLeft=React.createClass({displayName:"NavigationChevronLeft",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}))}});module.exports=NavigationChevronLeft;


},{"../svg-icon":176,"react":404}],180:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),NavigationChevronRightDouble=React.createClass({displayName:"NavigationChevronRightDouble",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M6 6 L4.59  7.41 9.17 12 l-4.58 4.59 L6 18 l6 -6z"}),React.createElement("path",{d:"M13 6 L11.59 7.41 16.17 12 l-4.58 4.59 L13 18 l6 -6z"}))}});module.exports=NavigationChevronRightDouble;


},{"../svg-icon":176,"react":404}],181:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),NavigationChevronLeft=React.createClass({displayName:"NavigationChevronLeft",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}))}});module.exports=NavigationChevronLeft;


},{"../svg-icon":176,"react":404}],182:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),NavigationMenu=React.createClass({displayName:"NavigationMenu",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}))}});module.exports=NavigationMenu;


},{"../svg-icon":176,"react":404}],183:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),ToggleCheckBoxChecked=React.createClass({displayName:"ToggleCheckBoxChecked",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M19,3H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M10,17l-5-5l1.4-1.4 l3.6,3.6l7.6-7.6L19,8L10,17z"}))}});module.exports=ToggleCheckBoxChecked;


},{"../svg-icon":176,"react":404}],184:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),ToggleCheckBoxOutlineBlank=React.createClass({displayName:"ToggleCheckBoxOutlineBlank",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M19,5v14H5V5H19 M19,3H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z"}))}});module.exports=ToggleCheckBoxOutlineBlank;


},{"../svg-icon":176,"react":404}],185:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),RadioButtonOff=React.createClass({displayName:"RadioButtonOff",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}))}});module.exports=RadioButtonOff;


},{"../svg-icon":176,"react":404}],186:[function(require,module,exports){
"use strict";var React=require("react"),SvgIcon=require("../svg-icon"),RadioButtonOn=React.createClass({displayName:"RadioButtonOn",render:function(){return React.createElement(SvgIcon,this.props,React.createElement("path",{d:"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}))}});module.exports=RadioButtonOn;


},{"../svg-icon":176,"react":404}],187:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),TableFooter=React.createClass({displayName:"TableFooter",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{columns:React.PropTypes.array.isRequired},getDefaultProps:function(){return{}},getTheme:function(){return this.context.muiTheme.component.tableFooter},getStyles:function(){var styles={cell:{borderTop:"1px solid "+this.getTheme().borderColor,verticalAlign:"bottom",padding:20,textAlign:"left",whiteSpace:"nowrap"}};return styles},render:function(){var className="mui-table-footer";return React.createElement("tfoot",{className:className},this._getFooterRow())},_getFooterRow:function(){return React.createElement("tr",{className:"mui-table-footer-row"},this._getColumnHeaders(this.props.columns,"f"))},_getColumnHeaders:function(footerData,keyPrefix){for(var footers=[],styles=this.getStyles(),index=0;index<footerData.length;index++){var _footerData$index=footerData[index],content=_footerData$index.content,props=_objectWithoutProperties(_footerData$index,["content"]);void 0===content&&(content=footerData[index]);var key=keyPrefix+index;props.style=void 0!==props.style?this.mergeAndPrefix(props.style,styles.cell):styles.cell,footers.push(React.createElement("td",_extends({key:key,className:"mui-table-footer-column"},props),content))}return footers}});module.exports=TableFooter;


},{"../mixins/style-propable":153,"react":404}],188:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Checkbox=require("../checkbox"),StylePropable=require("../mixins/style-propable"),Tooltip=require("../tooltip"),TableHeaderColumn=React.createClass({displayName:"TableHeaderColumn",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{tooltip:React.PropTypes.string,columnNumber:React.PropTypes.number.isRequired,onClick:React.PropTypes.func},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.tableHeaderColumn},getStyles:function(){var theme=this.getTheme(),styles={root:{fontWeight:"normal",fontSize:12,paddingLeft:theme.spacing,paddingRight:theme.spacing,height:theme.height,textAlign:"left",whiteSpace:"nowrap",textOverflow:"ellipsis",color:this.getTheme().textColor,position:"relative"},tooltip:{boxSizing:"border-box",marginTop:theme.height}};return styles},render:function(){var className="mui-table-header-column",styles=this.getStyles(),handlers={onMouseOver:this._onMouseOver,onMouseOut:this._onMouseOut,onClick:this._onClick},tooltip=void 0;return void 0!==this.props.tooltip&&(tooltip=React.createElement(Tooltip,{label:this.props.tooltip,show:this.state.hovered,style:this.mergeStyles(styles.tooltip)})),React.createElement("th",_extends({key:this.props.key,className:className,style:this.mergeAndPrefix(styles.root,this.props.style)},handlers),tooltip,this.props.children)},_onMouseOver:function(){void 0!==this.props.tooltip&&this.setState({hovered:!0})},_onMouseOut:function(){void 0!==this.props.tooltip&&this.setState({hovered:!1})},_onClick:function(e){this.props.onClick&&this.props.onClick(e,this.props.columnNumber)}});module.exports=TableHeaderColumn;


},{"../checkbox":117,"../mixins/style-propable":153,"../tooltip":213,"react":404}],189:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),Checkbox=require("../checkbox"),StylePropable=require("../mixins/style-propable"),TableHeaderColumn=require("./table-header-column"),TableHeader=React.createClass({displayName:"TableHeader",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{columns:React.PropTypes.array.isRequired,superHeaderColumns:React.PropTypes.array,onSelectAll:React.PropTypes.func,displaySelectAll:React.PropTypes.bool,enableSelectAll:React.PropTypes.bool,fixed:React.PropTypes.bool},getDefaultProps:function(){return{displaySelectAll:!0,enableSelectAll:!0,fixed:!0}},getTheme:function(){return this.context.muiTheme.component.tableHeader},getStyles:function(){var styles={root:{borderBottom:"1px solid "+this.getTheme().borderColor}};return styles},render:function(){var className="mui-table-header";return React.createElement("thead",{className:className,style:this.getStyles().root},this._getSuperHeaderRow(),this._getHeaderRow())},getSuperHeaderRow:function(){return this.refs.superHeader},getHeaderRow:function(){return this.refs.header},_getSuperHeaderRow:function(){return void 0!==this.props.superHeaderColumns?React.createElement("tr",{className:"mui-table-super-header-row",ref:"superHeader"},this._getColumnHeaders(this.props.superHeaderColumns,"sh")):void 0},_getHeaderRow:function(){var columns=this.props.columns.slice();return this.props.displaySelectAll&&columns.splice(0,0,this._getSelectAllCheckbox()),React.createElement("tr",{className:"mui-table-header-row",ref:"header"},this._getHeaderColumns(columns,"h"))},_getHeaderColumns:function(headerData,keyPrefix){for(var headers=(this.getStyles(),[]),index=0;index<headerData.length;index++){var _headerData$index=headerData[index],content=_headerData$index.content,tooltip=_headerData$index.tooltip,style=_headerData$index.style,props=_objectWithoutProperties(_headerData$index,["content","tooltip","style"]),key=keyPrefix+index;headers.push(React.createElement(TableHeaderColumn,_extends({key:key,style:style,tooltip:tooltip,columnNumber:index},props),content))}return headers},_getSelectAllCheckbox:function(){var checkbox=React.createElement(Checkbox,{name:"selectallcb",value:"selected",disabled:!this.props.enableSelectAll,onCheck:this._onSelectAll});return{content:checkbox,style:{paddingLeft:24,paddingRight:24}}},_onSelectAll:function(){this.props.onSelectAll&&this.props.onSelectAll()},_onColumnClick:function(e,columnNumber){this.props.onColumnClick&&this.props.onColumnClick(e,columnNumber)}});module.exports=TableHeader;


},{"../checkbox":117,"../mixins/style-propable":153,"./table-header-column":188,"react":404}],190:[function(require,module,exports){
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),TableRowColumn=React.createClass({displayName:"TableRowColumn",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{columnNumber:React.PropTypes.number.isRequired,onClick:React.PropTypes.func,onHover:React.PropTypes.func,onHoverExit:React.PropTypes.func,hoverable:React.PropTypes.bool},getDefaultProps:function(){return{hoverable:!1}},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.tableRowColumn},getStyles:function(){var theme=this.getTheme(),styles={paddingLeft:theme.spacing,paddingRight:theme.spacing,height:theme.height,textAlign:"left",fontSize:13,overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"};return 1!==React.Children.count(this.props.children)||isNaN(this.props.children)||(styles.textAlign="right"),styles},render:function(){var className="mui-table-row-column",styles=this.getStyles(),handlers={onClick:this._onClick,onMouseOver:this._onMouseOver,onMouseOut:this._onMouseOut};return React.createElement("td",_extends({key:this.props.key,className:className,style:this.mergeAndPrefix(styles,this.props.style)},handlers),this.props.children)},_onClick:function(e){this.props.onClick&&this.props.onClick(e,this.props.columnNumber)},_onMouseOver:function(e){this.props.hoverable&&(this.setState({hovered:!0}),this.props.onHover&&this.props.onHover(e,this.props.columnNumber))},_onMouseOut:function(e){this.props.hoverable&&(this.setState({hovered:!1}),this.props.onHoverExit&&this.props.onHoverExit(e,this.props.columnNumber))}});module.exports=TableRowColumn;


},{"../mixins/style-propable":153,"react":404}],191:[function(require,module,exports){
"use strict";var React=require("react"),Checkbox=require("../checkbox"),StylePropable=require("../mixins/style-propable"),TableRowColumn=require("./table-row-column"),Tooltip=require("../tooltip"),TableRow=React.createClass({displayName:"TableRow",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{rowNumber:React.PropTypes.number.isRequired,columns:React.PropTypes.array.isRequired,onRowClick:React.PropTypes.func,onCellClick:React.PropTypes.func,onRowHover:React.PropTypes.func,onRowHoverExit:React.PropTypes.func,onCellHover:React.PropTypes.func,onCellHoverExit:React.PropTypes.func,selected:React.PropTypes.bool,selectable:React.PropTypes.bool,striped:React.PropTypes.bool,hoverable:React.PropTypes.bool,displayBorder:React.PropTypes.bool,displayRowCheckbox:React.PropTypes.bool},getDefaultProps:function(){return{selected:!1,selectable:!0,striped:!1,hoverable:!1,displayBorder:!0,displayRowCheckbox:!0}},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.tableRow},getStyles:function(){var theme=this.getTheme(),cellBgColor="inherit";this.state.hovered?cellBgColor=theme.hoverColor:this.props.selected?cellBgColor=theme.selectedColor:this.props.striped&&(cellBgColor=theme.stripeColor);var styles={root:{borderBottom:"1px solid "+this.getTheme().borderColor},cell:{backgroundColor:cellBgColor,color:this.getTheme().textColor}};return this.props.displayBorder||(styles.root.borderBottom=""),styles},render:function(){var className="mui-table-row",columns=this.props.columns.slice();return this.props.displayRowCheckbox&&columns.splice(0,0,this._getRowCheckbox()),React.createElement("tr",{className:className,onClick:this._onRowClick,style:this.getStyles().root},this._getColumns(columns))},_getColumns:function(columns){for(var rowColumns=[],styles=this.getStyles(),index=0;index<columns.length;index++){var key=this.props.rowNumber+"-"+index,_columns$index=columns[index],content=_columns$index.content,style=_columns$index.style;void 0===content&&(content=columns[index]);var columnComponent=React.createElement(TableRowColumn,{key:key,columnNumber:index,style:this.mergeStyles(styles.cell,style),hoverable:this.props.hoverable,onClick:this._onCellClick,onHover:this._onCellHover,onHoverExit:this._onCellHoverExit},content);rowColumns.push(columnComponent)}return rowColumns},_getRowCheckbox:function(){var key=this.props.rowNumber+"-cb",checkbox=React.createElement(Checkbox,{ref:"rowSelectCB",name:key,value:"selected",disabled:!this.props.selectable,defaultChecked:this.props.selected,onCheck:this._onCheck});return{content:checkbox,style:{paddingLeft:24,paddingRight:24}}},_onRowClick:function(e){this.props.onRowClick&&this.props.onRowClick(e,this.props.rowNumber)},_onRowHover:function(e){this.props.onRowHover&&this.props.onRowHover(e,this.props.rowNumber)},_onRowHoverExit:function(e){this.props.onRowHoverExit&&this.props.onRowHoverExit(e,this.props.rowNumber)},_onCellClick:function(e,columnIndex){this.props.selectable&&this.props.onCellClick&&this.props.onCellClick(e,this.props.rowNumber,columnIndex),void 0!==this.refs.rowSelectCB&&this.refs.rowSelectCB.setChecked(!this.refs.rowSelectCB.isChecked()),this._onRowClick(e)},_onCellHover:function(e,columnIndex){this.props.hoverable&&(this.setState({hovered:!0}),this.props.onCellHover&&this.props.onCellHover(e,this.props.rowNumber,columnIndex),this._onRowHover(e))},_onCellHoverExit:function(e,columnIndex){this.props.hoverable&&(this.setState({hovered:!1}),this.props.onCellHoverExit&&this.props.onCellHoverExit(e,this.props.rowNumber,columnIndex),this._onRowHoverExit(e))},_onCheck:function(e){e.ctrlKey=!0,this._onCellClick(e,0)}});module.exports=TableRow;


},{"../checkbox":117,"../mixins/style-propable":153,"../tooltip":213,"./table-row-column":190,"react":404}],192:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),ClickAwayable=require("../mixins/click-awayable"),TableHeader=require("./table-header"),TableRow=require("./table-row"),TableFooter=require("./table-footer"),DOM=require("../utils/dom"),Table=React.createClass({displayName:"Table",mixins:[StylePropable,ClickAwayable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{rowData:React.PropTypes.array.isRequired,columnOrder:React.PropTypes.array,headerColumns:React.PropTypes.object,footerColumns:React.PropTypes.object,header:React.PropTypes.element,footer:React.PropTypes.element,height:React.PropTypes.string,defaultColumnWidth:React.PropTypes.string,fixedHeader:React.PropTypes.bool,fixedFooter:React.PropTypes.bool,stripedRows:React.PropTypes.bool,showRowHover:React.PropTypes.bool,selectable:React.PropTypes.bool,multiSelectable:React.PropTypes.bool,showRowSelectCheckbox:React.PropTypes.bool,canSelectAll:React.PropTypes.bool,displaySelectAll:React.PropTypes.bool,onRowSelection:React.PropTypes.func,onCellClick:React.PropTypes.func,onRowHover:React.PropTypes.func,onRowHoverExit:React.PropTypes.func,onCellHover:React.PropTypes.func,onCellHoverExit:React.PropTypes.func},getDefaultProps:function(){return{fixedHeader:!0,fixedFooter:!0,height:"inherit",defaultColumnWidth:"50px",stripedRows:!1,showRowHover:!1,selectable:!0,showRowSelectCheckbox:!0,multiSelectable:!1,canSelectAll:!1,displaySelectAll:!0}},getInitialState:function(){return{selectedRows:[]}},getTheme:function(){return this.context.muiTheme.component.table},getStyles:function(){var styles={root:{backgroundColor:this.getTheme().backgroundColor,padding:"0 "+this.context.muiTheme.spacing.desktopGutter+"px",width:"100%",borderCollapse:"collapse",borderSpacing:0,tableLayout:"fixed"},bodyTable:{height:this.props.fixedHeader||this.props.fixedFooter?this.props.height:"auto",overflowX:"hidden",overflowY:"auto"},tableWrapper:{height:this.props.fixedHeader||this.props.fixedFooter?"auto":this.props.height,overflow:"auto"}};return styles},componentClickAway:function(){this.state.selectedRows.length&&this.setState({selectedRows:[]})},render:function(){var className="mui-table",styles=this.getStyles(),tHead=this._getHeader(),tBody=this._getBody(),tFoot=this._getFooter(),headerTable=void 0,footerTable=void 0,inlineHeader=void 0,inlineFooter=void 0;return void 0!==tHead&&(this.props.fixedHeader?headerTable=React.createElement("div",{className:"mui-header-table"},React.createElement("table",{ref:"headerTable",className:className,style:styles.root},tHead)):inlineHeader=tHead),void 0!==tFoot&&(this.props.fixedFooter?footerTable=React.createElement("div",{className:"mui-footer-table"},React.createElement("table",{ref:"footerTable",className:className,style:styles.root},tFoot)):inlineFooter=tFoot),React.createElement("div",{className:"mui-table-wrapper",style:styles.tableWrapper},headerTable,React.createElement("div",{className:"mui-body-table",style:styles.bodyTable},React.createElement("table",{ref:"bodyTable",className:className,style:styles.root},inlineHeader,inlineFooter,tBody)),footerTable)},_getHeader:function(){if(this.props.header)return this.props.header;if(void 0!==this.props.headerColumns){var orderedHeaderColumns=this._orderColumnBasedData(this.props.headerColumns);return React.createElement(TableHeader,{columns:orderedHeaderColumns,enableSelectAll:this.props.canSelectAll&&this.props.selectable,displaySelectAll:this.props.displaySelectAll,onSelectAll:this._onSelectAll})}},_getFooter:function(){if(this.props.footer)return this.props.footer;if(void 0!==this.props.footerColumns){var orderedFooterColumns=this._orderColumnBasedData(this.props.footerColumns);return this.props.displaySelectAll&&orderedFooterColumns.splice(0,0,{content:""}),React.createElement(TableFooter,{columns:orderedFooterColumns})}},_getBody:function(){var body=this._orderColumnBasedData(this.props.rowData,function(rowData,rowNumber){var selected=this._isRowSelected(rowNumber),striped=this.props.stripedRows&&rowNumber%2===0,border=!0;rowNumber===this.props.rowData.length-1&&(border=!1);var row=React.createElement(TableRow,{key:"r-"+rowNumber,rowNumber:rowNumber,columns:rowData,selected:selected,striped:striped,hoverable:this.props.showRowHover,displayBorder:border,selectable:this.props.selectable,onRowClick:this._handleRowClick,onCellClick:this._handleCellClick,onRowHover:this._handleRowHover,onRowHoverExit:this._handleRowHoverExit,onCellHover:this._handleCellHover,onCellHoverExit:this._handleCellHoverExit});return row}.bind(this));return React.createElement("tbody",{style:{height:this.props.height}},body)},_orderColumnBasedData:function(columnBasedData,cb){if(void 0!==this.props.columnOrder){for(var data="[object Array]"!==Object.prototype.toString.call(columnBasedData)?[columnBasedData]:columnBasedData,orderedData=[],rowIdx=0;rowIdx<data.length;rowIdx++){for(var rowData=data[rowIdx],orderedRowData=[],colIdx=0;colIdx<this.props.columnOrder.length;colIdx++){var columnId=this.props.columnOrder[colIdx],columnData=rowData[columnId]||{};orderedRowData.push(columnData)}orderedRowData.length&&(rowData=orderedRowData),1===rowIdx&&data.length>1&&(rowData=this._setColumnWidths(rowData)),orderedData.push(void 0!==cb?cb(rowData,rowIdx):rowData)}return 1===data.length?orderedData[0]:orderedData}},_setColumnWidths:function(columnData){return columnData.forEach(function(column){void 0===column.style?column.style={width:this.props.defaultColumnWidth,maxWidth:this.props.defaultColumnWidth}:(void 0===column.style.width&&(column.style.width=this.props.defaultColumnWidth),void 0===column.style.maxWidth&&(column.style.maxWidth=this.props.defaultColumnWidth))}.bind(this)),columnData},_isRowSelected:function(rowNumber){if(this.state.allRowsSelected)return!0;for(var i=0;i<this.state.selectedRows.length;i++){var selection=this.state.selectedRows[i];if("object"==typeof selection){if(this._isValueInRange(rowNumber,selection))return!0}else if(selection===rowNumber)return!0}return!1},_isValueInRange:function(value,range){return range.start<=value&&value<=range.end||range.end<=value&&value<=range.start?!0:!1},_handleRowClick:function(e,rowNumber){window.getSelection().removeAllRanges(),this.props.selectable&&this._processRowSelection(e,rowNumber)},_processRowSelection:function(e,rowNumber){var selectedRows=this.state.selectedRows;if(e.shiftKey&&this.props.multiSelectable&&selectedRows.length){var lastSelection=selectedRows[selectedRows.length-1];"object"==typeof lastSelection?lastSelection.end=rowNumber:selectedRows.push({start:lastSelection,end:rowNumber})}else if((e.ctrlKey&&!e.metaKey||e.metaKey&&!e.ctrlKey)&&this.props.multiSelectable){var idx=selectedRows.indexOf(rowNumber);0>idx?selectedRows.push(rowNumber):selectedRows.splice(idx,1)}else selectedRows=1===selectedRows.length&&selectedRows[0]===rowNumber?[]:[rowNumber];this.setState({selectedRows:selectedRows}),this.props.onRowSelection&&this.props.onRowSelection(selectedRows)},_handleCellClick:function(e,rowNumber,columnNumber){this.props.onCellClick&&this.props.onCellClick(rowNumber,this._getColumnId(columnNumber)),this._handleRowClick(e,rowNumber)},_handleRowHover:function(e,rowNumber){this.props.onRowHover&&this.props.onRowHover(rowNumber)},_handleRowHoverExit:function(e,rowNumber){this.props.onRowHoverExit&&this.props.onRowHoverExit(rowNumber)},_handleCellHover:function(e,rowNumber,columnNumber){this.props.onCellHover&&this.props.onCellHover(rowNumber,this._getColumnId(columnNumber)),this._handleRowHover(e,rowNumber)},_handleCellHoverExit:function(e,rowNumber,columnNumber){this.props.onCellHoverExit&&this.props.onCellHoverExit(rowNumber,this._getColumnId(columnNumber)),this._handleRowHoverExit(e,rowNumber)},_onSelectAll:function(){this.setState({allRowsSelected:!this.state.allRowsSelected})},_getColumnId:function(columnNumber){var columnId=columnNumber;return this.props.displayRowCheckbox&&columnId--,columnId=this.props.columnOrder.length?this.props.columnOrder[columnId]:columnId}});module.exports=Table;


},{"../mixins/click-awayable":152,"../mixins/style-propable":153,"../utils/dom":219,"./table-footer":187,"./table-header":189,"./table-row":191,"react":404}],193:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable.js"),Colors=require("../styles/colors.js"),Tab=React.createClass({displayName:"Tab",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{handleTouchTap:React.PropTypes.func,selected:React.PropTypes.bool,width:React.PropTypes.string},handleTouchTap:function(){this.props.handleTouchTap(this.props.tabIndex,this)},render:function(){var styles=this.mergeAndPrefix({display:"table-cell",cursor:"pointer",textAlign:"center",verticalAlign:"middle",height:"48px",color:Colors.white,opacity:".6",fontSize:"14px",fontWeight:"500",whiteSpace:"initial",fontFamily:this.context.muiTheme.contentFontFamily,boxSizing:"border-box",width:this.props.width},this.props.style);return this.props.selected&&(styles.opacity="1"),React.createElement("div",{style:styles,onTouchTap:this.handleTouchTap,routeName:this.props.route},this.props.label)}});module.exports=Tab;


},{"../mixins/style-propable.js":153,"../styles/colors.js":168,"react":404}],194:[function(require,module,exports){
"use strict";var React=require("react"),TabTemplate=React.createClass({displayName:"TabTemplate",render:function(){var styles={height:"0px",overflow:"hidden",width:"100%",position:"relative",textAlign:"initial"};return this.props.selected&&(delete styles.height,delete styles.overflow),React.createElement("div",{style:styles},this.props.children)}});module.exports=TabTemplate;


},{"react":404}],195:[function(require,module,exports){
"use strict";var React=require("react/addons"),TabTemplate=require("./tabTemplate"),InkBar=require("../ink-bar"),StylePropable=require("../mixins/style-propable.js"),Events=require("../utils/events"),Tabs=React.createClass({displayName:"Tabs",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{initialSelectedIndex:React.PropTypes.number,onActive:React.PropTypes.func,tabWidth:React.PropTypes.number,tabItemContainerStyle:React.PropTypes.object},getInitialState:function(){var selectedIndex=0;return this.props.initialSelectedIndex&&this.props.initialSelectedIndex<this.props.children.length&&(selectedIndex=this.props.initialSelectedIndex),{selectedIndex:selectedIndex}},getEvenWidth:function(){return parseInt(window.getComputedStyle(React.findDOMNode(this)).getPropertyValue("width"),10)},componentDidMount:function(){this._updateTabWidth(),Events.on(window,"resize",this._updateTabWidth)},componentWillUnmount:function(){Events.off(window,"resize",this._updateTabWidth)},componentWillReceiveProps:function(newProps){newProps.hasOwnProperty("style")&&this._updateTabWidth()},handleTouchTap:function(tabIndex,tab){this.props.onChange&&this.state.selectedIndex!==tabIndex&&this.props.onChange(tabIndex,tab),this.setState({selectedIndex:tabIndex}),tab.props.onActive&&tab.props.onActive(tab)},getStyles:function(){var themeVariables=this.context.muiTheme.component.tabs;return{tabItemContainer:{margin:"0",padding:"0",width:"100%",height:"48px",backgroundColor:themeVariables.backgroundColor,whiteSpace:"nowrap",display:"table"}}},render:function(){var styles=this.getStyles(),tabContent=[],width=this.state.fixedWidth?100/this.props.children.length+"%":this.props.tabWidth+"px",left="calc("+width+"*"+this.state.selectedIndex+")",tabs=React.Children.map(this.props.children,function(tab,index){if("Tab"===tab.type.displayName)return tab.props.children?tabContent.push(React.createElement(TabTemplate,{key:index,selected:this.state.selectedIndex===index},tab.props.children)):tabContent.push(void 0),React.addons.cloneWithProps(tab,{key:index,selected:this.state.selectedIndex===index,tabIndex:index,width:width,handleTouchTap:this.handleTouchTap});var type=tab.type.displayName||tab.type;throw"Tabs only accepts Tab Components as children. Found "+type+" as child number "+(index+1)+" of Tabs"},this);return React.createElement("div",{style:this.mergeAndPrefix(this.props.style)},React.createElement("div",{style:this.mergeAndPrefix(styles.tabItemContainer,this.props.tabItemContainerStyle)},tabs),React.createElement(InkBar,{left:left,width:width}),React.createElement("div",null,tabContent))},_tabWidthPropIsValid:function(){return this.props.tabWidth&&this.props.tabWidth*this.props.children.length<=this.getEvenWidth()},_updateTabWidth:function(){this._tabWidthPropIsValid()?this.setState({fixedWidth:!1}):this.setState({fixedWidth:!0})}});module.exports=Tabs;


},{"../ink-bar":141,"../mixins/style-propable.js":153,"../utils/events":220,"./tabTemplate":194,"react/addons":232}],196:[function(require,module,exports){
(function (process){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),ColorManipulator=require("./utils/color-manipulator"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),UniqueId=require("./utils/unique-id"),EnhancedTextarea=require("./enhanced-textarea"),TextField=React.createClass({displayName:"TextField",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{errorText:React.PropTypes.string,floatingLabelText:React.PropTypes.string,fullWidth:React.PropTypes.bool,hintText:React.PropTypes.string,id:React.PropTypes.string,multiLine:React.PropTypes.bool,onBlur:React.PropTypes.func,onChange:React.PropTypes.func,onFocus:React.PropTypes.func,onKeyDown:React.PropTypes.func,onEnterKeyDown:React.PropTypes.func,type:React.PropTypes.string,rows:React.PropTypes.number,inputStyle:React.PropTypes.object,floatingLabelStyle:React.PropTypes.object},getDefaultProps:function(){return{fullWidth:!1,type:"text",rows:1}},getInitialState:function(){var props=this.props;return props.children&&(props=props.children.props),{errorText:this.props.errorText,hasValue:props.value||props.defaultValue||props.valueLink&&props.valueLink.value}},getTheme:function(){return this.context.muiTheme.component.textField},componentDidMount:function(){this._uniqueId=UniqueId.generate()},componentWillReceiveProps:function(nextProps){var hasErrorProp=nextProps.hasOwnProperty("errorText"),newState={};hasErrorProp&&(newState.errorText=nextProps.errorText),nextProps.children&&nextProps.children.props&&(nextProps=nextProps.children.props);var hasValueLinkProp=nextProps.hasOwnProperty("valueLink"),hasValueProp=nextProps.hasOwnProperty("value"),hasNewDefaultValue=nextProps.defaultValue!==this.props.defaultValue;hasValueLinkProp?newState.hasValue=nextProps.valueLink.value:hasValueProp?newState.hasValue=nextProps.value:hasNewDefaultValue&&(newState.hasValue=nextProps.defaultValue),newState&&this.setState(newState)},getStyles:function(){var props=this.props,theme=this.getTheme(),styles={root:{fontSize:16,lineHeight:"24px",width:props.fullWidth?"100%":256,height:24*(props.rows-1)+(props.floatingLabelText?72:48),display:"inline-block",position:"relative",fontFamily:this.context.muiTheme.contentFontFamily,transition:Transitions.easeOut("200ms","height")},error:{position:"absolute",bottom:-10,fontSize:12,lineHeight:"12px",color:theme.errorColor,transition:Transitions.easeOut()},hint:{position:"absolute",lineHeight:"48px",opacity:1,color:theme.hintColor,transition:Transitions.easeOut()},input:{WebkitTapHighlightColor:"rgba(0,0,0,0)",position:"relative",width:"100%",height:"100%",border:"none",outline:"none",backgroundColor:theme.backgroundColor,color:props.disabled?theme.disabledTextColor:theme.textColor,font:"inherit"},underline:{border:"none",borderBottom:"solid 1px "+theme.borderColor,position:"absolute",width:"100%",bottom:8,margin:0,MozBoxSizing:"content-box",boxSizing:"content-box",height:0},underlineAfter:{position:"absolute",width:"100%",overflow:"hidden",userSelect:"none",cursor:"default",bottom:8,borderBottom:"dotted 2px "+theme.disabledTextColor}};return styles.floatingLabel=this.mergeStyles(styles.hint,{top:24,opacity:1,transform:"scale(1) translate3d(0, 0, 0)",transformOrigin:"left top"}),styles.textarea=this.mergeStyles(styles.input,{marginTop:props.floatingLabelText?36:12,marginBottom:props.floatingLabelText?-36:-12,boxSizing:"border-box",font:"inherit"}),styles.focusUnderline=this.mergeStyles(styles.underline,{borderBottom:"solid 2px",borderColor:theme.focusColor,transform:"scaleX(0)",transition:Transitions.easeOut()}),this.state.isFocused&&(styles.floatingLabel.color=theme.focusColor,styles.floatingLabel.transform="perspective(1px) scale(0.75) translate3d(0, -18px, 0)",styles.focusUnderline.transform="scaleX(1)"),this.state.hasValue&&(styles.floatingLabel.color=ColorManipulator.fade(props.disabled?theme.disabledTextColor:theme.floatingLabelColor,.5),styles.floatingLabel.transform="perspective(1px) scale(0.75) translate3d(0, -18px, 0)",styles.hint.opacity=0),props.floatingLabelText&&(styles.hint.top=24,styles.hint.opacity=0,styles.input.boxSizing="border-box",this.state.isFocused&&!this.state.hasValue&&(styles.hint.opacity=1)),props.style&&props.style.height&&(styles.hint.lineHeight=props.style.height),this.state.errorText&&this.state.isFocused&&(styles.floatingLabel.color=theme.errorColor),props.floatingLabelText&&!props.multiLine&&(styles.input.paddingTop=26),this.state.errorText&&(styles.focusUnderline.borderColor=theme.errorColor,styles.focusUnderline.transform="scaleX(1)"),styles},render:function(){var inputProps,inputElement,_props=this.props,other=(_props.className,_props.errorText,_props.floatingLabelText,_props.fullWidth,_props.hintText,_props.id,_props.multiLine,_props.onBlur,_props.onChange,_props.onFocus,_props.type,_props.rows,_objectWithoutProperties(_props,["className","errorText","floatingLabelText","fullWidth","hintText","id","multiLine","onBlur","onChange","onFocus","type","rows"])),styles=this.getStyles(),inputId=this.props.id||this._uniqueId,errorTextElement=this.state.errorText?React.createElement("div",{style:this.mergeAndPrefix(styles.error)},this.state.errorText):null,hintTextElement=this.props.hintText?React.createElement("div",{style:this.mergeAndPrefix(styles.hint)},this.props.hintText):null,floatingLabelTextElement=this.props.floatingLabelText?React.createElement("label",{style:this.mergeAndPrefix(styles.floatingLabel,this.props.floatingLabelStyle),htmlFor:inputId},this.props.floatingLabelText):null;inputProps={id:inputId,ref:this._getRef(),style:this.mergeAndPrefix(styles.input,this.props.inputStyle),onBlur:this._handleInputBlur,onFocus:this._handleInputFocus,disabled:this.props.disabled,onKeyDown:this._handleInputKeyDown},this.props.hasOwnProperty("valueLink")||(inputProps.onChange=this._handleInputChange),inputElement=this.props.children?React.cloneElement(this.props.children,_extends({},inputProps,this.props.children.props)):this.props.multiLine?React.createElement(EnhancedTextarea,_extends({},other,inputProps,{rows:this.props.rows,onHeightChange:this._handleTextAreaHeightChange,textareaStyle:this.mergeAndPrefix(styles.textarea)})):React.createElement("input",_extends({},other,inputProps,{type:this.props.type}));var underlineElement=this.props.disabled?React.createElement("div",{style:this.mergeAndPrefix(styles.underlineAfter)}):React.createElement("hr",{style:this.mergeAndPrefix(styles.underline)}),focusUnderlineElement=React.createElement("hr",{style:this.mergeAndPrefix(styles.focusUnderline)});return React.createElement("div",{className:this.props.className,style:this.mergeAndPrefix(styles.root,this.props.style)},floatingLabelTextElement,hintTextElement,inputElement,underlineElement,focusUnderlineElement,errorTextElement)},blur:function(){this.isMounted()&&this._getInputNode().blur()},clearValue:function(){this.setValue("")},focus:function(){this.isMounted()&&this._getInputNode().focus()},getValue:function(){return this.isMounted()?this._getInputNode().value:void 0},setErrorText:function(newErrorText){"production"!==process.env.NODE_ENV&&this.props.hasOwnProperty("errorText")?console.error("Cannot call TextField.setErrorText when errorText is defined as a property."):this.isMounted()&&this.setState({errorText:newErrorText})},setValue:function(newValue){"production"!==process.env.NODE_ENV&&this._isControlled()?console.error("Cannot call TextField.setValue when value or valueLink is defined as a property."):this.isMounted()&&(this.props.multiLine?this.refs[this._getRef()].setValue(newValue):this._getInputNode().value=newValue,this.setState({hasValue:newValue}))},_getRef:function(){return this.props.ref?this.props.ref:"input"},_getInputNode:function(){return this.props.children||this.props.multiLine?this.refs[this._getRef()].getInputNode():React.findDOMNode(this.refs[this._getRef()])},_handleInputBlur:function(e){this.setState({isFocused:!1}),this.props.onBlur&&this.props.onBlur(e)},_handleInputChange:function(e){this.setState({hasValue:e.target.value}),this.props.onChange&&this.props.onChange(e)},_handleInputFocus:function(e){this.props.disabled||(this.setState({isFocused:!0}),this.props.onFocus&&this.props.onFocus(e))},_handleInputKeyDown:function(e){13===e.keyCode&&this.props.onEnterKeyDown&&this.props.onEnterKeyDown(e),this.props.onKeyDown&&this.props.onKeyDown(e)},_handleTextAreaHeightChange:function(e,height){var newHeight=height+24;this.props.floatingLabelText&&(newHeight+=24),React.findDOMNode(this).style.height=newHeight+"px"},_isControlled:function(){return this.props.hasOwnProperty("value")||this.props.hasOwnProperty("valueLink")}});module.exports=TextField;


}).call(this,require('_process'))

},{"./enhanced-textarea":135,"./mixins/style-propable":153,"./styles/transitions":174,"./utils/color-manipulator":216,"./utils/unique-id":225,"_process":106,"react":404}],197:[function(require,module,exports){
"use strict";function getDisplayName(Component){return Component.displayName||Component.name||"Component"}function theme(customTheme){return function(Component){return React.createClass({displayName:"Theme("+getDisplayName(Component)+")",render:function(){return React.createElement(Theme,{theme:customTheme},function(props){return React.createElement(Component,_extends({},this.props,props))}.bind(this))}})}}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),ThemeManager=require("./styles/theme-manager"),Theme=React.createClass({displayName:"Theme",propTypes:{theme:React.PropTypes.object},childContextTypes:{muiTheme:React.PropTypes.object.isRequired,muiThemeManager:React.PropTypes.object.isRequired},getChildContext:function(){return{muiTheme:this.themeManager.getCurrentTheme(),muiThemeManager:this.themeManager}},componentWillMount:function(){this.themeManager=new ThemeManager,this.props.theme&&this.themeManager.setTheme(this.props.theme)},render:function(){return this.props.children({muiTheme:this.themeManager.getCurrentTheme(),muiThemeManager:this.themeManager})}});module.exports=Theme,module.exports.theme=theme;


},{"./styles/theme-manager":171,"react":404}],198:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),EnhancedButton=require("../enhanced-button"),Transitions=require("../styles/transitions"),ClockButton=React.createClass({displayName:"ClockButton",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{position:React.PropTypes.oneOf(["left","right"])},getDefaultProps:function(){return{position:"left"}},_handleTouchTap:function(){this.setState({selected:!0}),this.props.onTouchTap()},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var _props=this.props,other=(_props.className,_objectWithoutProperties(_props,["className"])),styles={root:{position:"absolute",bottom:"65px",pointerEvents:"auto",height:"50px",width:"50px",borderRadius:"100%"},label:{position:"absolute",top:"17px",left:"14px"},select:{position:"absolute",height:50,width:50,top:"0px",left:"0px",opacity:0,borderRadius:"50%",transform:"scale(0)",transition:Transitions.easeOut(),backgroundColor:this.getTheme().accentColor}};return this.props.selected&&(styles.label.color=this.getTheme().selectTextColor,styles.select.opacity=1,styles.select.transform="scale(1)"),"right"==this.props.position?styles.root.right="5px":styles.root.left="5px",React.createElement(EnhancedButton,_extends({},other,{style:this.mergeAndPrefix(styles.root),disableFocusRipple:!0,disableTouchRipple:!0,onTouchTap:this._handleTouchTap}),React.createElement("span",{style:this.mergeAndPrefix(styles.select)}),React.createElement("span",{style:this.mergeAndPrefix(styles.label)},this.props.children))}});module.exports=ClockButton;


},{"../enhanced-button":133,"../mixins/style-propable":153,"../styles/transitions":174,"react":404}],199:[function(require,module,exports){
"use strict";function rad2deg(rad){return 57.29577951308232*rad}function getTouchEventOffsetValues(e){var el=e.target,boundingRect=el.getBoundingClientRect(),offset={offsetX:e.clientX-boundingRect.left,offsetY:e.clientY-boundingRect.top};return offset}var React=require("react"),StylePropable=require("../mixins/style-propable"),ClockNumber=require("./clock-number"),ClockPointer=require("./clock-pointer"),ClockHours=React.createClass({displayName:"ClockHours",mixins:[StylePropable],propTypes:{initialHours:React.PropTypes.number,onChange:React.PropTypes.func,format:React.PropTypes.oneOf(["ampm","24hr"])},center:{x:0,y:0},basePoint:{x:0,y:0},isMousePressed:function(e){return"undefined"==typeof e.buttons?e.nativeEvent.which:e.buttons},getDefaultProps:function(){return{initialHours:(new Date).getHours(),onChange:function(){},format:"ampm"}},componentDidMount:function(){var clockElement=React.findDOMNode(this.refs.mask);this.center={x:clockElement.offsetWidth/2,y:clockElement.offsetHeight/2},this.basePoint={x:this.center.x,y:0}},handleUp:function(e){e.preventDefault(),this.setClock(e.nativeEvent,!0)},handleMove:function(e){e.preventDefault(),1==this.isMousePressed(e)&&this.setClock(e.nativeEvent,!1)},handleTouchMove:function(e){e.preventDefault(),this.setClock(e.changedTouches[0],!1)},handleTouchEnd:function(e){e.preventDefault(),this.setClock(e.changedTouches[0],!0)},setClock:function(e,finish){if("undefined"==typeof e.offsetX){var offset=getTouchEventOffsetValues(e);e.offsetX=offset.offsetX,e.offsetY=offset.offsetY}var hours=this.getHours(e.offsetX,e.offsetY);this.props.onChange(hours,finish)},getHours:function(x,y){var step=30;x-=this.center.x,y-=this.center.y;var cx=this.basePoint.x-this.center.x,cy=this.basePoint.y-this.center.y,atan=Math.atan2(cx,cy)-Math.atan2(x,y),deg=rad2deg(atan);deg=Math.round(deg/step)*step,deg%=360;var value=Math.floor(deg/step)||0,delta=Math.pow(x,2)+Math.pow(y,2),distance=Math.sqrt(delta);return value=value||12,"24hr"==this.props.format?90>distance&&(value+=12,value%=24):value%=12,value},_getSelected:function(){var hour=this.props.initialHours;return"ampm"==this.props.format&&(hour%=12,hour=hour||12),hour},_getHourNumbers:function(){for(var style={pointerEvents:"none"},hourSize="ampm"==this.props.format?12:24,hours=[],i=1;hourSize>=i;i++)hours.push(i%24);return hours.map(function(hour){var isSelected=this._getSelected()==hour;return React.createElement(ClockNumber,{style:style,isSelected:isSelected,type:"hour",value:hour})}.bind(this))},render:function(){var styles={root:{height:"100%",width:"100%",borderRadius:"100%",position:"relative",pointerEvents:"none",boxSizing:"border-box"},hitMask:{height:"100%",width:"100%",pointerEvents:"auto"}},hours=this._getSelected(),numbers=this._getHourNumbers();return React.createElement("div",{ref:"clock",style:this.mergeAndPrefix(styles.root)},React.createElement(ClockPointer,{hasSelected:!0,value:hours,type:"hour"}),numbers,React.createElement("div",{ref:"mask",style:this.mergeAndPrefix(styles.hitMask),onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEnd,onMouseUp:this.handleUp,onMouseMove:this.handleMove}))}});module.exports=ClockHours;


},{"../mixins/style-propable":153,"./clock-number":201,"./clock-pointer":202,"react":404}],200:[function(require,module,exports){
"use strict";function rad2deg(rad){return 57.29577951308232*rad}function getTouchEventOffsetValues(e){var el=e.target,boundingRect=el.getBoundingClientRect(),offset={offsetX:e.clientX-boundingRect.left,offsetY:e.clientY-boundingRect.top};return offset}var React=require("react"),StylePropable=require("../mixins/style-propable"),ClockNumber=require("./clock-number"),ClockPointer=require("./clock-pointer"),ClockMinutes=React.createClass({displayName:"ClockMinutes",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{initialMinutes:React.PropTypes.number,onChange:React.PropTypes.func},center:{x:0,y:0},basePoint:{x:0,y:0},isMousePressed:function(e){return"undefined"==typeof e.buttons?e.nativeEvent.which:e.buttons},getDefaultProps:function(){return{initialMinutes:(new Date).getMinutes(),onChange:function(){}}},componentDidMount:function(){var clockElement=React.findDOMNode(this.refs.mask);this.center={x:clockElement.offsetWidth/2,y:clockElement.offsetHeight/2},this.basePoint={x:this.center.x,y:0}},handleUp:function(e){e.preventDefault(),this.setClock(e.nativeEvent,!0)},handleMove:function(e){e.preventDefault(),1==this.isMousePressed(e)&&this.setClock(e.nativeEvent,!1)},handleTouch:function(e){e.preventDefault(),this.setClock(e.changedTouches[0],!1)},setClock:function(e,finish){if("undefined"==typeof e.offsetX){var offset=getTouchEventOffsetValues(e);e.offsetX=offset.offsetX,e.offsetY=offset.offsetY}var minutes=this.getMinutes(e.offsetX,e.offsetY);this.props.onChange(minutes,finish)},getMinutes:function(x,y){var step=6;x-=this.center.x,y-=this.center.y;var cx=this.basePoint.x-this.center.x,cy=this.basePoint.y-this.center.y,atan=Math.atan2(cx,cy)-Math.atan2(x,y),deg=rad2deg(atan);deg=Math.round(deg/step)*step,deg%=360;var value=Math.floor(deg/step)||0;return value},_getMinuteNumbers:function(){for(var minutes=[],i=0;12>i;i++)minutes.push(5*i);var selectedMinutes=this.props.initialMinutes,hasSelected=!1,numbers=minutes.map(function(minute){var isSelected=selectedMinutes==minute;return isSelected&&(hasSelected=!0),React.createElement(ClockNumber,{isSelected:isSelected,type:"minute",value:minute})}.bind(this));return{numbers:numbers,hasSelected:hasSelected,selected:selectedMinutes}},render:function(){var styles={root:{height:"100%",width:"100%",borderRadius:"100%",position:"relative",pointerEvents:"none",boxSizing:"border-box"},hitMask:{height:"100%",width:"100%",pointerEvents:"auto"}},minutes=this._getMinuteNumbers();return React.createElement("div",{ref:"clock",style:this.mergeAndPrefix(styles.root)},React.createElement(ClockPointer,{value:minutes.selected,type:"minute"}),minutes.numbers,React.createElement("div",{ref:"mask",style:this.mergeAndPrefix(styles.hitMask),hasSelected:minutes.hasSelected,onTouchMove:this.handleTouch,onTouchEnd:this.handleTouch,onMouseUp:this.handleUp,onMouseMove:this.handleMove}))}});module.exports=ClockMinutes;


},{"../mixins/style-propable":153,"./clock-number":201,"./clock-pointer":202,"react":404}],201:[function(require,module,exports){
"use strict";function _slicedToArray(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr)){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i["return"]&&_i["return"]()}finally{if(_d)throw _e}}return _arr}throw new TypeError("Invalid attempt to destructure non-iterable instance")}var React=require("react"),StylePropable=require("../mixins/style-propable"),ClockNumber=React.createClass({displayName:"ClockNumber",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{value:React.PropTypes.number,type:React.PropTypes.oneOf(["hour","minute"]),onSelected:React.PropTypes.func,isSelected:React.PropTypes.bool},getDefaultProps:function(){return{value:0,type:"minute",isSelected:!1}},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var pos=this.props.value,inner=!1;"hour"==this.props.type?(inner=1>pos||pos>12,pos%=12):pos/=5;var positions=[[0,5],[54.5,16.6],[94.4,59.5],[109,114],[94.4,168.5],[54.5,208.4],[0,223],[-54.5,208.4],[-94.4,168.5],[-109,114],[-94.4,59.5],[-54.5,19.6]],innerPositions=[[0,40],[36.9,49.9],[64,77],[74,114],[64,151],[37,178],[0,188],[-37,178],[-64,151],[-74,114],[-64,77],[-37,50]],styles={root:{display:"inline-block",position:"absolute",width:"32px",height:"32px",borderRadius:"100%",left:"calc(50% - 16px)",top:"10px",textAlign:"center",paddingTop:"5px",userSelect:"none",fontSize:"1.1em",pointerEvents:"none",boxSizing:"border-box"}};this.props.isSelected&&(styles.root.backgroundColor=this.getTheme().accentColor,styles.root.color=this.getTheme().selectTextColor);var transformPos=positions[pos];inner&&(styles.root.width="28px",styles.root.height="28px",styles.root.left="calc(50% - 14px)",transformPos=innerPositions[pos]);var _transformPos=_slicedToArray(transformPos,2),x=_transformPos[0],y=_transformPos[1];return styles.root.transform="translate("+x+"px, "+y+"px)",React.createElement("span",{style:this.mergeAndPrefix(styles.root)},this.props.value)}});module.exports=ClockNumber;


},{"../mixins/style-propable":153,"react":404}],202:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),ClockPointer=React.createClass({displayName:"ClockPointer",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{value:React.PropTypes.number,type:React.PropTypes.oneOf(["hour","minute"])},getInitialState:function(){return{inner:this.isInner(this.props.value)}},getDefaultProps:function(){return{value:null,type:"minute",hasSelected:!1}},componentWillReceiveProps:function(nextProps){this.setState({inner:this.isInner(nextProps.value)})},isInner:function(value){return"hour"!=this.props.type?!1:1>value||value>12},getAngle:function(){return"hour"==this.props.type?this.calcAngle(this.props.value,12):this.calcAngle(this.props.value,60)},calcAngle:function(value,base){value%=base;var angle=360/base*value;return angle},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){if(null==this.props.value)return React.createElement("span",null);var angle=this.getAngle(),styles={root:{height:"30%",background:this.getTheme().accentColor,width:"2px",left:"calc(50% - 1px)",position:"absolute",bottom:"50%",transformOrigin:"bottom",pointerEvents:"none",transform:"rotateZ("+angle+"deg)"},mark:{background:this.getTheme().selectTextColor,border:"4px solid "+this.getTheme().accentColor,width:"7px",height:"7px",position:"absolute",top:"-5px",left:"-6px",borderRadius:"100%"}};return this.state.inner||(styles.root.height="40%"),this.props.hasSelected&&(styles.mark.display="none"),React.createElement("div",{style:this.mergeAndPrefix(styles.root)},React.createElement("div",{style:styles.mark}))}});module.exports=ClockPointer;


},{"../mixins/style-propable":153,"react":404}],203:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),TimeDisplay=require("./time-display"),ClockButton=require("./clock-button"),ClockHours=require("./clock-hours"),ClockMinutes=require("./clock-minutes"),Clock=React.createClass({displayName:"Clock",mixins:[StylePropable],propTypes:{initialTime:React.PropTypes.object,mode:React.PropTypes.oneOf(["hour","minute"]),format:React.PropTypes.oneOf(["ampm","24hr"]),isActive:React.PropTypes.bool},init:function(){this.setState({mode:"hour"})},getDefaultProps:function(){return{initialTime:new Date}},componentWillReceiveProps:function(nextProps){this.setState({selectedTime:nextProps.initialTime})},getInitialState:function(){return{selectedTime:this.props.initialTime,mode:"hour"}},_setMode:function(mode){setTimeout(function(){this.setState({mode:mode})}.bind(this),100)},_setAffix:function(affix){if(affix!=this._getAffix()){var hours=this.state.selectedTime.getHours();return"am"==affix?void this.handleChangeHours(hours-12):void this.handleChangeHours(hours+12)}},_getAffix:function(){if("ampm"!=this.props.format)return"";var hours=this.state.selectedTime.getHours();return 12>hours?"am":"pm"},_getButtons:function(){var buttons=[],isAM=this._getIsAM();return"ampm"==this.props.format&&(buttons=[React.createElement(ClockButton,{position:"left",onTouchTap:this._setAffix.bind(this,"am"),selected:isAM},"AM"),React.createElement(ClockButton,{position:"right",onTouchTap:this._setAffix.bind(this,"pm"),selected:!isAM},"PM")]),buttons},_getIsAM:function(){return"am"==this._getAffix()},render:function(){var clock=null,buttons=this._getButtons(),styles={root:{},container:{height:"280px",padding:"10px"}};return clock="hour"==this.state.mode?React.createElement(ClockHours,{key:"hours",format:this.props.format,onChange:this.handleChangeHours,initialHours:this.state.selectedTime.getHours()}):React.createElement(ClockMinutes,{key:"minutes",onChange:this.handleChangeMinutes,initialMinutes:this.state.selectedTime.getMinutes()}),React.createElement("div",{style:styles.root},React.createElement(TimeDisplay,{selectedTime:this.state.selectedTime,mode:this.state.mode,format:this.props.format,affix:this._getAffix(),onSelectHour:this._setMode.bind(this,"hour"),onSelectMin:this._setMode.bind(this,"minute")}),React.createElement("div",{style:styles.container},clock),buttons)},handleChangeHours:function(hours,finished){var time=new Date(this.state.selectedTime);time.setHours(hours),this.setState({selectedTime:time}),finished&&setTimeout(function(){this.setState({mode:"minute"})}.bind(this),100)},handleChangeMinutes:function(minutes){var time=new Date(this.state.selectedTime);time.setMinutes(minutes),this.setState({selectedTime:time})},getSelectedTime:function(){return this.state.selectedTime}});module.exports=Clock;


},{"../mixins/style-propable":153,"./clock-button":198,"./clock-hours":199,"./clock-minutes":200,"./time-display":205,"react":404}],204:[function(require,module,exports){
"use strict";module.exports=require("./time-picker");


},{"./time-picker":207}],205:[function(require,module,exports){
"use strict";function _slicedToArray(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr)){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i["return"]&&_i["return"]()}finally{if(_d)throw _e}}return _arr}throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),TimeDisplay=React.createClass({displayName:"TimeDisplay",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{selectedTime:React.PropTypes.object.isRequired,format:React.PropTypes.oneOf(["ampm","24hr"]),mode:React.PropTypes.oneOf(["hour","minute"]),affix:React.PropTypes.oneOf(["","pm","am"])},getInitialState:function(){return{transitionDirection:"up"}},getDefaultProps:function(){return{mode:"hour",affix:""}},componentWillReceiveProps:function(nextProps){var direction;nextProps.selectedTime!==this.props.selectedTime&&(direction=nextProps.selectedTime>this.props.selectedTime?"up":"down",this.setState({transitionDirection:direction}))},sanitizeTime:function(){var hour=this.props.selectedTime.getHours(),min=this.props.selectedTime.getMinutes().toString();return"ampm"==this.props.format&&(hour%=12,hour=hour||12),hour=hour.toString(),hour.length<2&&(hour="0"+hour),min.length<2&&(min="0"+min),[hour,min]},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var _props=this.props,mode=(_props.selectedTime,_props.mode),other=_objectWithoutProperties(_props,["selectedTime","mode"]),styles={root:{textAlign:"center",position:"relative",width:"280px",height:"100%"},time:{margin:"6px 0",lineHeight:"58px",height:"58px",fontSize:"58px"},box:{padding:"16px 0",backgroundColor:this.getTheme().color,color:this.getTheme().textColor},hour:{},minute:{}},_sanitizeTime=this.sanitizeTime(),_sanitizeTime2=_slicedToArray(_sanitizeTime,2),hour=_sanitizeTime2[0],min=_sanitizeTime2[1];return styles[mode].color=this.getTheme().accentColor,React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root)}),React.createElement("div",{style:this.mergeAndPrefix(styles.box)},React.createElement("div",{style:this.mergeAndPrefix(styles.time)},React.createElement("span",{style:this.mergeAndPrefix(styles.hour),onTouchTap:this.props.onSelectHour},hour),React.createElement("span",null,":"),React.createElement("span",{style:this.mergeAndPrefix(styles.minute),onTouchTap:this.props.onSelectMin},min)),React.createElement("span",{key:"affix"},this.props.affix.toUpperCase())))}});module.exports=TimeDisplay;


},{"../mixins/style-propable":153,"react":404}],206:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),WindowListenable=require("../mixins/window-listenable"),KeyCode=require("../utils/key-code"),Clock=require("./clock"),DialogWindow=require("../dialog-window"),FlatButton=require("../flat-button"),TimePickerDialog=React.createClass({displayName:"TimePickerDialog",mixins:[StylePropable,WindowListenable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{initialTime:React.PropTypes.object,onAccept:React.PropTypes.func,onShow:React.PropTypes.func,onDismiss:React.PropTypes.func},windowListeners:{keyup:"_handleWindowKeyUp"},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var _props=this.props,initialTime=_props.initialTime,format=(_props.onAccept,_props.format),other=_objectWithoutProperties(_props,["initialTime","onAccept","format"]),styles={root:{fontSize:"14px",color:this.getTheme().clockColor},dialogContent:{width:"280px"}},actions=[React.createElement(FlatButton,{key:0,label:"Cancel",secondary:!0,onTouchTap:this._handleCancelTouchTap}),React.createElement(FlatButton,{key:1,label:"OK",secondary:!0,onTouchTap:this._handleOKTouchTap})];return React.createElement(DialogWindow,_extends({},other,{ref:"dialogWindow",style:this.mergeAndPrefix(styles.root),actions:actions,contentStyle:styles.dialogContent,onDismiss:this._handleDialogDismiss,onShow:this._handleDialogShow,repositionOnUpdate:!1}),React.createElement(Clock,{ref:"clock",format:format,initialTime:initialTime}))},show:function(){this.refs.dialogWindow.show(),this.refs.clock.init()},dismiss:function(){this.refs.dialogWindow.dismiss()},_handleCancelTouchTap:function(){this.dismiss()},_handleOKTouchTap:function(){this.dismiss(),this.props.onAccept&&this.props.onAccept(this.refs.clock.getSelectedTime())},_handleDialogShow:function(){this.props.onShow&&this.props.onShow()},_handleDialogDismiss:function(){this.props.onDismiss&&this.props.onDismiss()},_handleWindowKeyUp:function(e){if(this.refs.dialogWindow.isOpen())switch(e.keyCode){case KeyCode.ENTER:this._handleOKTouchTap()}}});module.exports=TimePickerDialog;


},{"../dialog-window":129,"../flat-button":136,"../mixins/style-propable":153,"../mixins/window-listenable":155,"../utils/key-code":222,"./clock":203,"react":404}],207:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),WindowListenable=require("../mixins/window-listenable"),TimePickerDialog=require("./time-picker-dialog"),TextField=require("../text-field"),emptyTime=new Date;emptyTime.setHours(0),emptyTime.setMinutes(0);var TimePicker=React.createClass({displayName:"TimePicker",mixins:[StylePropable,WindowListenable],propTypes:{defaultTime:React.PropTypes.object,format:React.PropTypes.oneOf(["ampm","24hr"]),onFocus:React.PropTypes.func,onTouchTap:React.PropTypes.func,onChange:React.PropTypes.func,onShow:React.PropTypes.func,onDismiss:React.PropTypes.func},windowListeners:{keyup:"_handleWindowKeyUp"},getDefaultProps:function(){return{defaultTime:emptyTime,format:"ampm"}},getInitialState:function(){return{time:this.props.defaultTime,dialogTime:new Date}},formatTime:function(date){var hours=date.getHours(),mins=date.getMinutes(),aditional="";if("ampm"==this.props.format){var isAM=12>hours;hours%=12,aditional+=isAM?" am":" pm",hours=hours||12}return hours=hours.toString(),mins=mins.toString(),hours.length<2&&(hours="0"+hours),mins.length<2&&(mins="0"+mins),hours+":"+mins+aditional},render:function(){var defaultInputValue,_props=this.props,format=_props.format,onShow=(_props.onFocus,_props.onTouchTap,_props.onShow),onDismiss=_props.onDismiss,other=_objectWithoutProperties(_props,["format","onFocus","onTouchTap","onShow","onDismiss"]);return this.props.defaultTime&&(defaultInputValue=this.formatTime(this.props.defaultTime)),React.createElement("div",null,React.createElement(TextField,_extends({},other,{ref:"input",defaultValue:defaultInputValue,onFocus:this._handleInputFocus,onTouchTap:this._handleInputTouchTap})),React.createElement(TimePickerDialog,{ref:"dialogWindow",initialTime:this.state.dialogTime,onAccept:this._handleDialogAccept,onShow:onShow,onDismiss:onDismiss,format:format}))},getTime:function(){return this.state.time},setTime:function(t){this.setState({time:t}),this.refs.input.setValue(this.formatTime(t))},_handleDialogAccept:function(t){this.setTime(t),this.props.onChange&&this.props.onChange(null,t)},_handleInputFocus:function(e){e.target.blur(),this.props.onFocus&&this.props.onFocus(e)},_handleInputTouchTap:function(e){e.preventDefault(),this.setState({dialogTime:this.getTime()}),this.refs.dialogWindow.show(),this.props.onTouchTap&&this.props.onTouchTap(e)}});module.exports=TimePicker;


},{"../mixins/style-propable":153,"../mixins/window-listenable":155,"../text-field":196,"./time-picker-dialog":206,"react":404}],208:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),Paper=require("./paper"),EnhancedSwitch=require("./enhanced-switch"),Toggle=React.createClass({displayName:"Toggle",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{elementStyle:React.PropTypes.object,labelStyle:React.PropTypes.object,onToggle:React.PropTypes.func,toggled:React.PropTypes.bool,defaultToggled:React.PropTypes.bool},getInitialState:function(){return{switched:this.props.toggled||this.props.defaultToggled||this.props.valueLink&&this.props.valueLink.value||!1}},getTheme:function(){return this.context.muiTheme.component.toggle},getStyles:function(){var toggleSize=20,toggleTrackWidth=36,styles={icon:{width:36,padding:"4px 0px 6px 2px"},toggleElemet:{width:toggleTrackWidth},track:{transition:Transitions.easeOut(),width:"100%",height:14,borderRadius:30,backgroundColor:this.getTheme().trackOffColor},thumb:{transition:Transitions.easeOut(),position:"absolute",top:1,left:0,width:toggleSize,height:toggleSize,lineHeight:"24px",borderRadius:"50%",backgroundColor:this.getTheme().thumbOffColor},trackWhenSwitched:{backgroundColor:this.getTheme().trackOnColor},thumbWhenSwitched:{backgroundColor:this.getTheme().thumbOnColor,left:"100%"},trackWhenDisabled:{backgroundColor:this.getTheme().trackDisabledColor},thumbWhenDisabled:{backgroundColor:this.getTheme().thumbDisabledColor},label:{color:this.props.disabled?this.getTheme().labelDisabledColor:this.getTheme().labelColor}};return styles},render:function(){var _props=this.props,other=(_props.onToggle,_objectWithoutProperties(_props,["onToggle"])),styles=this.getStyles(),trackStyles=this.mergeAndPrefix(styles.track,this.props.trackStyle,this.state.switched&&styles.trackWhenSwitched,this.props.disabled&&styles.trackWhenDisabled),thumbStyles=this.mergeAndPrefix(styles.thumb,this.props.thumbStyle,this.state.switched&&styles.thumbWhenSwitched,this.props.disabled&&styles.thumbWhenDisabled);this.state.switched&&(thumbStyles.marginLeft="-"+thumbStyles.width);var toggleElemetStyles=this.mergeAndPrefix(styles.toggleElemet,this.props.elementStyle),toggleElement=React.createElement("div",{style:toggleElemetStyles},React.createElement("div",{style:trackStyles}),React.createElement(Paper,{style:thumbStyles,circle:!0,zDepth:1})),customRippleStyle=this.mergeAndPrefix({top:"-10",left:"-10"},this.props.rippleStyle),rippleColor=this.state.switched?this.getTheme().thumbOnColor:this.context.muiTheme.component.textColor,iconStyle=this.mergeAndPrefix(styles.icon,this.props.iconStyle),labelStyle=this.mergeAndPrefix(styles.label,this.props.labelStyle),enhancedSwitchProps={ref:"enhancedSwitch",inputType:"checkbox",switchElement:toggleElement,rippleStyle:customRippleStyle,rippleColor:rippleColor,iconStyle:iconStyle,trackStyle:trackStyles,thumbStyle:thumbStyles,labelStyle:labelStyle,switched:this.state.switched,onSwitch:this._handleToggle,onParentShouldUpdate:this._handleStateChange,defaultSwitched:this.props.defaultToggled,labelPosition:this.props.labelPosition?this.props.labelPosition:"left"};return this.props.hasOwnProperty("toggled")&&(enhancedSwitchProps.checked=this.props.toggled),React.createElement(EnhancedSwitch,_extends({},other,enhancedSwitchProps))},isToggled:function(){return this.refs.enhancedSwitch.isSwitched()},setToggled:function(newToggledValue){this.refs.enhancedSwitch.setSwitched(newToggledValue)},_handleToggle:function(e,isInputChecked){this.props.onToggle&&this.props.onToggle(e,isInputChecked)},_handleStateChange:function(newSwitched){this.setState({switched:newSwitched})}});module.exports=Toggle;


},{"./enhanced-switch":134,"./mixins/style-propable":153,"./paper":157,"./styles/transitions":174,"react":404}],209:[function(require,module,exports){
"use strict";var React=require("react"),Colors=require("../styles/colors"),StylePropable=require("../mixins/style-propable"),ToolbarGroup=React.createClass({displayName:"ToolbarGroup",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,"float":React.PropTypes.string},getDefaultProps:function(){return{"float":"left"}},getTheme:function(){return this.context.muiTheme.component.toolbar},getSpacing:function(){return this.context.muiTheme.spacing.desktopGutter},getStyles:function(){var marginHorizontal=this.getSpacing(),marginVertical=(this.getTheme().height-this.context.muiTheme.component.button.height)/2,styles={root:{position:"relative","float":this.props["float"]},dropDownMenu:{root:{"float":"left",color:Colors.lightBlack,display:"inline-block",marginRight:this.getSpacing()},controlBg:{backgroundColor:this.getTheme().menuHoverColor,borderRadius:0},underline:{display:"none"}},button:{"float":"left",margin:marginVertical+"px "+marginHorizontal+"px",position:"relative"},icon:{root:{"float":"left",cursor:"pointer",color:this.getTheme().iconColor,lineHeight:this.getTheme().height+"px",paddingLeft:this.getSpacing()},hover:{zIndex:1,color:Colors.darkBlack}},span:{"float":"left",color:this.getTheme().iconColor,lineHeight:this.getTheme().height+"px"}};return styles},render:function(){var styles=this.getStyles();this.props.firstChild&&(styles.marginLeft=-24),this.props.lastChild&&(styles.marginRight=-24);var newChildren=React.Children.map(this.props.children,function(currentChild){if(!currentChild)return null;switch(currentChild.type.displayName){case"DropDownMenu":return React.cloneElement(currentChild,{style:styles.dropDownMenu.root,styleControlBg:styles.dropDownMenu.controlBg,styleUnderline:styles.dropDownMenu.underline});case"DropDownIcon":return React.cloneElement(currentChild,{style:{"float":"left"},iconStyle:styles.icon.root,onMouseOver:this._handleMouseOverDropDownMenu,onMouseOut:this._handleMouseOutDropDownMenu});case"RaisedButton":case"FlatButton":return React.cloneElement(currentChild,{style:styles.button});case"FontIcon":return React.cloneElement(currentChild,{style:styles.icon.root,onMouseOver:this._handleMouseOverFontIcon,onMouseOut:this._handleMouseOutFontIcon});case"ToolbarSeparator":case"ToolbarTitle":return React.cloneElement(currentChild,{style:this.mergeStyles(styles.span,currentChild.props.style)});default:return currentChild}},this);return React.createElement("div",{className:this.props.className,style:this.mergeAndPrefix(styles.root,this.props.style)},newChildren)},_handleMouseOverDropDownMenu:function(e){e.target.style.zIndex=this.getStyles().icon.hover.zIndex,e.target.style.color=this.getStyles().icon.hover.color},_handleMouseOutDropDownMenu:function(e){e.target.style.zIndex="auto",e.target.style.color=this.getStyles().icon.root.color},_handleMouseOverFontIcon:function(e){e.target.style.zIndex=this.getStyles().icon.hover.zIndex,e.target.style.color=this.getStyles().icon.hover.color},_handleMouseOutFontIcon:function(e){e.target.style.zIndex="auto",e.target.style.color=this.getStyles().icon.root.color}});module.exports=ToolbarGroup;


},{"../mixins/style-propable":153,"../styles/colors":168,"react":404}],210:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),ToolbarSeparator=React.createClass({displayName:"ToolbarSeparator",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},getTheme:function(){return this.context.muiTheme.component.toolbar},getSpacing:function(){return this.context.muiTheme.spacing},render:function(){var styles=this.mergeAndPrefix({backgroundColor:this.getTheme().separatorColor,display:"inline-block",height:this.getSpacing().desktopGutterMore,marginLeft:this.getSpacing().desktopGutter,position:"relative",top:(this.getTheme().height-this.getSpacing().desktopGutterMore)/2,width:1},this.props.style);return React.createElement("span",{className:this.props.className,style:styles})}});module.exports=ToolbarSeparator;


},{"../mixins/style-propable":153,"react":404}],211:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("../mixins/style-propable"),ToolbarTitle=React.createClass({displayName:"ToolbarTitle",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{text:React.PropTypes.string},getTheme:function(){return this.context.muiTheme.component.toolbar},render:function(){var _props=this.props,style=_props.style,text=_props.text,other=_objectWithoutProperties(_props,["style","text"]),styles=this.mergeAndPrefix({paddingRight:this.context.muiTheme.spacing.desktopGutterLess,lineHeight:this.getTheme().height+"px",fontSize:this.getTheme().titleFontSize+"px",display:"inline-block",position:"relative"},style);return React.createElement("span",_extends({style:styles},other),text)}});module.exports=ToolbarTitle;


},{"../mixins/style-propable":153,"react":404}],212:[function(require,module,exports){
"use strict";var React=require("react"),StylePropable=require("../mixins/style-propable"),Toolbar=React.createClass({displayName:"Toolbar",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,style:React.PropTypes.object},getTheme:function(){return this.context.muiTheme.component.toolbar},getStyles:function(){return this.mergeAndPrefix({boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",backgroundColor:this.getTheme().backgroundColor,height:this.getTheme().height,width:"100%",padding:this.props.noGutter?0:"0px "+this.context.muiTheme.spacing.desktopGutter+"px"},this.props.style)},render:function(){return React.createElement("div",{className:this.props.className,style:this.getStyles()},this.props.children)}});module.exports=Toolbar;


},{"../mixins/style-propable":153,"react":404}],213:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react"),StylePropable=require("./mixins/style-propable"),Transitions=require("./styles/transitions"),Colors=require("./styles/colors"),Tooltip=React.createClass({displayName:"Tooltip",mixins:[StylePropable],contextTypes:{muiTheme:React.PropTypes.object},propTypes:{className:React.PropTypes.string,label:React.PropTypes.string.isRequired,show:React.PropTypes.bool,touch:React.PropTypes.bool},componentDidMount:function(){this._setRippleSize()},componentDidUpdate:function(){this._setRippleSize()},getStyles:function(){var styles={root:{position:"absolute",fontFamily:this.context.muiTheme.contentFontFamily,fontSize:"10px",lineHeight:"22px",padding:"0 8px",color:Colors.white,overflow:"hidden",top:-1e4,borderRadius:2,userSelect:"none",opacity:0,transition:Transitions.easeOut("0ms","top","450ms")+","+Transitions.easeOut("450ms","transform","0ms")+","+Transitions.easeOut("450ms","opacity","0ms")},label:{position:"relative",whiteSpace:"nowrap"},ripple:{position:"absolute",left:"50%",top:0,transform:"translate(-50%, -50%)",borderRadius:"50%",backgroundColor:"transparent",transition:Transitions.easeOut("0ms","width","450ms")+","+Transitions.easeOut("0ms","height","450ms")+","+Transitions.easeOut("450ms","backgroundColor","0ms")},rootWhenShown:{top:-16,opacity:1,transform:"translate3d(0px, 16px, 0px)",transition:Transitions.easeOut("0ms","top","0ms")+","+Transitions.easeOut("450ms","transform","0ms")+","+Transitions.easeOut("450ms","opacity","0ms")},rootWhenTouched:{fontSize:"14px",lineHeight:"44px",padding:"0 16px"},rippleWhenShown:{backgroundColor:Colors.grey600,transition:Transitions.easeOut("450ms","width","0ms")+","+Transitions.easeOut("450ms","height","0ms")+","+Transitions.easeOut("450ms","backgroundColor","0ms")}};return styles},render:function(){var _props=this.props,other=(_props.label,_objectWithoutProperties(_props,["label"])),styles=this.getStyles();return React.createElement("div",_extends({},other,{style:this.mergeAndPrefix(styles.root,this.props.show&&styles.rootWhenShown,this.props.touch&&styles.rootWhenTouched,this.props.style)}),React.createElement("div",{ref:"ripple",style:this.mergeAndPrefix(styles.ripple,this.props.show&&styles.rippleWhenShown)}),React.createElement("span",{style:this.mergeAndPrefix(styles.label)},this.props.label))},_setRippleSize:function(){var ripple=React.findDOMNode(this.refs.ripple),tooltip=window.getComputedStyle(React.findDOMNode(this)),tooltipWidth=parseInt(tooltip.getPropertyValue("width"),10),tooltipHeight=parseInt(tooltip.getPropertyValue("height"),10),rippleDiameter=2*Math.sqrt(Math.pow(tooltipHeight,2)+Math.pow(tooltipWidth/2,2));this.props.show?(ripple.style.height=rippleDiameter+"px",ripple.style.width=rippleDiameter+"px"):(ripple.style.width="0px",ripple.style.height="0px")}});module.exports=Tooltip;


},{"./mixins/style-propable":153,"./styles/colors":168,"./styles/transitions":174,"react":404}],214:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),StylePropable=require("../mixins/style-propable"),AutoPrefix=require("../styles/auto-prefix"),Transitions=require("../styles/transitions"),SlideInChild=React.createClass({displayName:"SlideInChild",mixins:[StylePropable],propTypes:{getLeaveDirection:React.PropTypes.func.isRequired},componentWillEnter:function(callback){var style=React.findDOMNode(this).style,x="left"===this.props.direction?"100%":"right"===this.props.direction?"-100%":"0",y="up"===this.props.direction?"100%":"down"===this.props.direction?"-100%":"0";style.opacity="0",AutoPrefix.set(style,"transform","translate3d("+x+","+y+",0)"),setTimeout(callback,0)},componentDidEnter:function(){var style=React.findDOMNode(this).style;style.opacity="1",AutoPrefix.set(style,"transform","translate3d(0,0,0)")},componentWillLeave:function(callback){var style=React.findDOMNode(this).style,direction=this.props.getLeaveDirection(),x="left"===direction?"-100%":"right"===direction?"100%":"0",y="up"===direction?"-100%":"down"===direction?"100%":"0";style.opacity="0",AutoPrefix.set(style,"transform","translate3d("+x+","+y+",0)"),setTimeout(callback,450)},render:function(){var _props=this.props,styles=_props.styles,other=_objectWithoutProperties(_props,["styles"]);return styles=this.mergeAndPrefix({position:"absolute",height:"100%",width:"100%",top:"0px",left:"0px",transition:Transitions.easeOut()},this.props.style),React.createElement("div",_extends({},other,{style:styles}),this.props.children)}});module.exports=SlideInChild;


},{"../mixins/style-propable":153,"../styles/auto-prefix":167,"../styles/transitions":174,"react/addons":232}],215:[function(require,module,exports){
"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},React=require("react/addons"),ReactTransitionGroup=React.addons.TransitionGroup,StylePropable=require("../mixins/style-propable"),SlideInChild=require("./slide-in-child"),SlideIn=React.createClass({displayName:"SlideIn",mixins:[StylePropable],propTypes:{direction:React.PropTypes.oneOf(["left","right","up","down"])},getDefaultProps:function(){return{direction:"left"}},render:function(){var _props=this.props,other=(_props.direction,_objectWithoutProperties(_props,["direction"])),styles=this.mergeAndPrefix({position:"relative",overflow:"hidden",height:"100%"},this.props.style);return React.createElement(ReactTransitionGroup,_extends({},other,{style:styles,component:"div"}),this._getSlideInChildren())},_getSlideInChildren:function(){return React.Children.map(this.props.children,function(child){return React.createElement(SlideInChild,{key:child.key,direction:this.props.direction,getLeaveDirection:this._getLeaveDirection},child)},this)},_getLeaveDirection:function(){return this.props.direction}});module.exports=SlideIn;


},{"../mixins/style-propable":153,"./slide-in-child":214,"react/addons":232}],216:[function(require,module,exports){
"use strict";module.exports={_luminance:function(color){if(color=this._decomposeColor(color),color.type.indexOf("rgb")>-1){var rgb=color.values.map(function(val){return val/=255,.03928>=val?val/12.92:Math.pow((val+.055)/1.055,2.4)});return.2126*rgb[0]+.7152*rgb[1]+.0722*rgb[2]}var message="Calculating the relative luminance is not available for HSL and HSLA.";return console.error(message),-1},_convertColorToString:function(color,additonalValue){var str=color.type+"("+parseInt(color.values[0])+","+parseInt(color.values[1])+","+parseInt(color.values[2]);return str+=void 0!==additonalValue?","+additonalValue+")":4==color.values.length?","+color.values[3]+")":")"},_convertHexToRGB:function(color){if(4===color.length){for(var extendedColor="#",i=1;i<color.length;i++)extendedColor+=color.charAt(i)+color.charAt(i);color=extendedColor}var values={r:parseInt(color.substr(1,2),16),g:parseInt(color.substr(3,2),16),b:parseInt(color.substr(5,2),16)};return"rgb("+values.r+","+values.g+","+values.b+")"},_decomposeColor:function(color){if("#"===color.charAt(0))return this._decomposeColor(this._convertHexToRGB(color));var marker=color.indexOf("("),type=color.substring(0,marker),values=color.substring(marker+1,color.length-1).split(",");return{type:type,values:values}},fade:function(color,amount){return color=this._decomposeColor(color),("rgb"==color.type||"hsl"==color.type)&&(color.type+="a"),this._convertColorToString(color,amount)},lighten:function(color,amount){if(color=this._decomposeColor(color),color.type.indexOf("hsl")>-1)return color.values[2]+=amount,this._decomposeColor(this._convertColorToString(color));if(color.type.indexOf("rgb")>-1)for(var i=0;3>i;i++)color.values[i]*=1+amount,color.values[i]>255&&(color.values[i]=255);return color.type.indexOf("a")<=-1&&(color.type+="a"),this._convertColorToString(color,"0.15")},darken:function(color,amount){if(color=this._decomposeColor(color),color.type.indexOf("hsl")>-1)return color.values[2]+=amount,this._decomposeColor(this._convertColorToString(color));if(color.type.indexOf("rgb")>-1)for(var i=0;3>i;i++)color.values[i]*=1-amount,color.values[i]<0&&(color.values[i]=0);return this._convertColorToString(color)},contrastRatio:function(background,foreground){var lumA=this._luminance(background),lumB=this._luminance(foreground);return lumA>=lumB?((lumA+.05)/(lumB+.05)).toFixed(2):((lumB+.05)/(lumA+.05)).toFixed(2)},contrastRatioLevel:function(background,foreground){var levels={fail:{range:[0,3],color:"hsl(0, 100%, 40%)"},"aa-large":{range:[3,4.5],color:"hsl(40, 100%, 45%)"},aa:{range:[4.5,7],color:"hsl(80, 60%, 45%)"},aaa:{range:[7,22],color:"hsl(95, 60%, 41%)"}},ratio=this.contrastRatio(background,foreground);for(var level in levels){var range=levels[level].range;if(ratio>=range[0]&&ratio<=range[1])return level}}};


},{}],217:[function(require,module,exports){
"use strict";var Events=require("./events");module.exports={_testSupportedProps:function(props){var i,el=document.createElement("div");for(i in props)if(props.hasOwnProperty(i)&&void 0!==el.style[i])return props[i]},transitionEndEventName:function(){return this._testSupportedProps({transition:"transitionend",OTransition:"otransitionend",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"})},animationEndEventName:function(){return this._testSupportedProps({animation:"animationend","-o-animation":"oAnimationEnd","-moz-animation":"animationend","-webkit-animation":"webkitAnimationEnd"})},onTransitionEnd:function(el,callback){var transitionEnd=this.transitionEndEventName();Events.once(el,transitionEnd,function(){return callback()})},onAnimationEnd:function(el,callback){var animationEnd=this.animationEndEventName();Events.once(el,animationEnd,function(){return callback()})}};


},{"./events":220}],218:[function(require,module,exports){
"use strict";module.exports={addDays:function(d,days){var newDate=this.clone(d);return newDate.setDate(d.getDate()+days),newDate},addMonths:function(d,months){var newDate=this.clone(d);return newDate.setMonth(d.getMonth()+months),newDate},addYears:function(d,years){var newDate=this.clone(d);return newDate.setFullYear(d.getFullYear()+years),newDate},clone:function(d){return new Date(d.getTime())},cloneAsDate:function(d){var clonedDate=this.clone(d);return clonedDate.setHours(0,0,0,0),clonedDate},getDaysInMonth:function(d){var resultDate=this.getFirstDayOfMonth(d);return resultDate.setMonth(resultDate.getMonth()+1),resultDate.setDate(resultDate.getDate()-1),resultDate.getDate()},getFirstDayOfMonth:function(d){return new Date(d.getFullYear(),d.getMonth(),1)},getFullMonth:function(d){var month=d.getMonth();switch(month){case 0:return"January";case 1:return"February";case 2:return"March";case 3:return"April";case 4:return"May";case 5:return"June";case 6:return"July";case 7:return"August";case 8:return"September";case 9:return"October";case 10:return"November";case 11:return"December"}},getShortMonth:function(d){var month=d.getMonth();switch(month){case 0:return"Jan";case 1:return"Feb";case 2:return"Mar";case 3:return"Apr";case 4:return"May";case 5:return"Jun";case 6:return"Jul";case 7:return"Aug";case 8:return"Sep";case 9:return"Oct";case 10:return"Nov";case 11:return"Dec"}},getDayOfWeek:function(d){var dow=d.getDay();switch(dow){case 0:return"Sunday";case 1:return"Monday";case 2:return"Tuesday";case 3:return"Wednesday";case 4:return"Thursday";case 5:return"Friday";case 6:return"Saturday"}},getWeekArray:function(d){for(var daysInWeek,emptyDays,firstDayOfWeek,week,dayArray=[],daysInMonth=this.getDaysInMonth(d),weekArray=[],i=1;daysInMonth>=i;i++)dayArray.push(new Date(d.getFullYear(),d.getMonth(),i));for(;dayArray.length;){firstDayOfWeek=dayArray[0].getDay(),daysInWeek=7-firstDayOfWeek,emptyDays=7-daysInWeek,week=dayArray.splice(0,daysInWeek);for(var i=0;emptyDays>i;i++)week.unshift(null);weekArray.push(week)}return weekArray},format:function(date){var m=date.getMonth()+1,d=date.getDate(),y=date.getFullYear();return m+"/"+d+"/"+y},isEqualDate:function(d1,d2){return d1&&d2&&d1.getFullYear()===d2.getFullYear()&&d1.getMonth()===d2.getMonth()&&d1.getDate()===d2.getDate()},isBeforeDate:function(d1,d2){var date1=this.cloneAsDate(d1),date2=this.cloneAsDate(d2);return date1.getTime()<date2.getTime()},isAfterDate:function(d1,d2){var date1=this.cloneAsDate(d1),date2=this.cloneAsDate(d2);return date1.getTime()>date2.getTime()},isBetweenDates:function(dateToCheck,startDate,endDate){return!this.isBeforeDate(dateToCheck,startDate)&&!this.isAfterDate(dateToCheck,endDate)},monthDiff:function(d1,d2){var m;return m=12*(d1.getFullYear()-d2.getFullYear()),m+=d1.getMonth(),m-=d2.getMonth()},yearDiff:function(d1,d2){return~~(this.monthDiff(d1,d2)/12)}};


},{}],219:[function(require,module,exports){
"use strict";module.exports={isDescendant:function(parent,child){for(var node=child.parentNode;null!=node;){if(node==parent)return!0;node=node.parentNode}return!1},offset:function(el){var rect=el.getBoundingClientRect();return{top:rect.top+document.body.scrollTop,left:rect.left+document.body.scrollLeft}},addClass:function(el,className){el.classList?el.classList.add(className):el.className+=" "+className},removeClass:function(el,className){el.classList?el.classList.remove(className):el.className=el.className.replace(new RegExp("(^|\\b)"+className.split(" ").join("|")+"(\\b|$)","gi")," ")},hasClass:function(el,className){return el.classList?el.classList.contains(className):new RegExp("(^| )"+className+"( |$)","gi").test(el.className)},toggleClass:function(el,className){this.hasClass(el,className)?this.removeClass(el,className):this.addClass(el,className)},forceRedraw:function(el){var originalDisplay=el.style.display;el.style.display="none",el.offsetHeight,el.style.display=originalDisplay},withoutTransition:function(el,callback){el.style.transition="none",callback(),this.forceRedraw(el),el.style.transition=""}};


},{}],220:[function(require,module,exports){
"use strict";module.exports={once:function(el,type,callback){for(var typeArray=type.split(" "),recursiveFunction=function recursiveFunction(e){return e.target.removeEventListener(e.type,recursiveFunction),callback(e)},i=typeArray.length-1;i>=0;i--)this.on(el,typeArray[i],recursiveFunction)},on:function(el,type,callback){el.addEventListener?el.addEventListener(type,callback):el.attachEvent("on"+type,function(){callback.call(el)})},off:function(el,type,callback){el.removeEventListener?el.removeEventListener(type,callback):el.detachEvent("on"+type,callback)}};


},{}],221:[function(require,module,exports){
"use strict";function isObject(obj){return"object"==typeof obj&&null!==obj}var extend=function extend(base,override){var mergedObject={};return Object.keys(base).forEach(function(key){var overrideProp,baseProp=base[key];isObject(override)&&(overrideProp=override[key]),mergedObject[key]=isObject(baseProp)&&!Array.isArray(baseProp)?extend(baseProp,overrideProp):baseProp}),isObject(override)&&Object.keys(override).forEach(function(overrideKey){var overrideProp=override[overrideKey];(!isObject(overrideProp)||Array.isArray(overrideProp))&&(mergedObject[overrideKey]=overrideProp)}),mergedObject};module.exports=extend;


},{}],222:[function(require,module,exports){
"use strict";module.exports={DOWN:40,ESC:27,ENTER:13,LEFT:37,RIGHT:39,SPACE:32,TAB:9,UP:38};


},{}],223:[function(require,module,exports){
"use strict";module.exports={Desktop:{GUTTER:24,GUTTER_LESS:16,INCREMENT:64,MENU_ITEM_HEIGHT:32},getIncrementalDim:function(dim){return Math.ceil(dim/this.Desktop.INCREMENT)*this.Desktop.INCREMENT}};


},{}],224:[function(require,module,exports){
"use strict";module.exports=function(window,document,undefined){function setCss(str){mStyle.cssText=str}function setCssAll(str1,str2){return setCss(prefixes.join(str1+";")+(str2||""))}function is(obj,type){return typeof obj===type}function contains(str,substr){return!!~(""+str).indexOf(substr)}function testProps(props,prefixed){for(var i in props){var prop=props[i];if(!contains(prop,"-")&&mStyle[prop]!==undefined)return"pfx"==prefixed?prop:!0}return!1}function testDOMProps(props,obj,elem){for(var i in props){var item=obj[props[i]];if(item!==undefined)return elem===!1?props[i]:is(item,"function")?item.bind(elem||obj):item}return!1}function testPropsAll(prop,prefixed,elem){var ucProp=prop.charAt(0).toUpperCase()+prop.slice(1),props=(prop+" "+cssomPrefixes.join(ucProp+" ")+ucProp).split(" ");return is(prefixed,"string")||is(prefixed,"undefined")?testProps(props,prefixed):(props=(prop+" "+domPrefixes.join(ucProp+" ")+ucProp).split(" "),testDOMProps(props,prefixed,elem))}var inputElem,featureName,hasOwnProp,version="2.8.3",Modernizr={},docElement=document.documentElement,mod="modernizr",modElem=document.createElement(mod),mStyle=modElem.style,prefixes=({}.toString," -webkit- -moz- -o- -ms- ".split(" ")),omPrefixes="Webkit Moz O ms",cssomPrefixes=omPrefixes.split(" "),domPrefixes=omPrefixes.toLowerCase().split(" "),tests={},classes=[],slice=classes.slice,injectElementWithStyles=function(rule,callback,nodes,testnames){var style,ret,node,docOverflow,div=document.createElement("div"),body=document.body,fakeBody=body||document.createElement("body");if(parseInt(nodes,10))for(;nodes--;)node=document.createElement("div"),node.id=testnames?testnames[nodes]:mod+(nodes+1),div.appendChild(node);return style=["&#173;",'<style id="s',mod,'">',rule,"</style>"].join(""),div.id=mod,(body?div:fakeBody).innerHTML+=style,fakeBody.appendChild(div),body||(fakeBody.style.background="",fakeBody.style.overflow="hidden",docOverflow=docElement.style.overflow,docElement.style.overflow="hidden",docElement.appendChild(fakeBody)),ret=callback(div,rule),body?div.parentNode.removeChild(div):(fakeBody.parentNode.removeChild(fakeBody),docElement.style.overflow=docOverflow),!!ret},_hasOwnProperty={}.hasOwnProperty;hasOwnProp=is(_hasOwnProperty,"undefined")||is(_hasOwnProperty.call,"undefined")?function(object,property){return property in object&&is(object.constructor.prototype[property],"undefined")}:function(object,property){return _hasOwnProperty.call(object,property)},Function.prototype.bind||(Function.prototype.bind=function(that){var target=this;if("function"!=typeof target)throw new TypeError;var args=slice.call(arguments,1),bound=function bound(){if(this instanceof bound){var F=function(){};F.prototype=target.prototype;var self=new F,result=target.apply(self,args.concat(slice.call(arguments)));return Object(result)===result?result:self}return target.apply(that,args.concat(slice.call(arguments)))};return bound}),tests.borderradius=function(){return testPropsAll("borderRadius")},tests.boxshadow=function(){return testPropsAll("boxShadow")},tests.opacity=function(){return setCssAll("opacity:.55"),/^0.55$/.test(mStyle.opacity)},tests.csstransforms=function(){return!!testPropsAll("transform")},tests.csstransforms3d=function(){var ret=!!testPropsAll("perspective");return ret&&"webkitPerspective"in docElement.style&&injectElementWithStyles("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(node,rule){ret=9===node.offsetLeft&&3===node.offsetHeight}),ret},tests.csstransitions=function(){return testPropsAll("transition")};for(var feature in tests)hasOwnProp(tests,feature)&&(featureName=feature.toLowerCase(),Modernizr[featureName]=tests[feature](),classes.push((Modernizr[featureName]?"":"no-")+featureName));return Modernizr.addTest=function(feature,test){if("object"==typeof feature)for(var key in feature)hasOwnProp(feature,key)&&Modernizr.addTest(key,feature[key]);else{if(feature=feature.toLowerCase(),Modernizr[feature]!==undefined)return Modernizr;test="function"==typeof test?test():test,"undefined"!=typeof enableClasses&&enableClasses&&(docElement.className+=" "+(test?"":"no-")+feature),Modernizr[feature]=test}return Modernizr},setCss(""),modElem=inputElem=null,Modernizr._version=version,Modernizr._prefixes=prefixes,Modernizr._domPrefixes=domPrefixes,Modernizr._cssomPrefixes=cssomPrefixes,Modernizr.testProp=function(prop){return testProps([prop])},Modernizr.testAllProps=testPropsAll,Modernizr.testStyles=injectElementWithStyles,Modernizr.prefixed=function(prop,obj,elem){return obj?testPropsAll(prop,obj,elem):testPropsAll(prop,"pfx")},Modernizr}(window,window.document);


},{}],225:[function(require,module,exports){
"use strict";var index=0;module.exports={generate:function(){return"mui-id-"+index++}};


},{}],226:[function(require,module,exports){
function classNames(){for(var arg,classes="",i=0;i<arguments.length;i++)if(arg=arguments[i])if("string"==typeof arg||"number"==typeof arg)classes+=" "+arg;else if("[object Array]"===Object.prototype.toString.call(arg))classes+=" "+classNames.apply(null,arg);else if("object"==typeof arg)for(var key in arg)arg.hasOwnProperty(key)&&arg[key]&&(classes+=" "+key);return classes.substr(1)}"undefined"!=typeof module&&module.exports&&(module.exports=classNames),"undefined"!=typeof define&&define.amd&&define("classnames",[],function(){return classNames});


},{}],227:[function(require,module,exports){
"use strict";function updateBoundState(state,bound){if(!bound)return state;bound=String(bound);var boundTop=!!~bound.indexOf("top"),boundRight=!!~bound.indexOf("right"),boundBottom=!!~bound.indexOf("bottom"),boundLeft=!!~bound.indexOf("left"),boundAll=!!~bound.indexOf("all")||!(boundTop||boundRight||boundBottom||boundLeft),boundBox=!~bound.indexOf("point");return state.boundTop=boundAll||boundTop,state.boundRight=boundAll||boundRight,state.boundBottom=boundAll||boundBottom,state.boundLeft=boundAll||boundLeft,state.boundBox=boundBox,state}function createUIEvent(draggable){return{position:{top:draggable.state.offsetTop,left:draggable.state.offsetLeft}}}function canDragY(draggable){return"both"===draggable.props.axis||"y"===draggable.props.axis}function canDragX(draggable){return"both"===draggable.props.axis||"x"===draggable.props.axis}function isFunction(func){return"function"==typeof func||"[object Function]"===Object.prototype.toString.call(func)}function findInArray(array,callback){for(var i=0,element=(array.length,null);element=array[i];i++)if(callback.apply(callback,[element,i,array]))return element}function matchesSelector(el,selector){var method=findInArray(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],function(method){return isFunction(el[method])});return el[method].call(el,selector)}function getControlPosition(e){var position=e.touches&&e.touches[0]||e;return{clientX:position.clientX,clientY:position.clientY}}function addEvent(el,event,handler){el&&(el.attachEvent?el.attachEvent("on"+event,handler):el.addEventListener?el.addEventListener(event,handler,!0):el["on"+event]=handler)}function removeEvent(el,event,handler){el&&(el.detachEvent?el.detachEvent("on"+event,handler):el.removeEventListener?el.removeEventListener(event,handler,!0):el["on"+event]=null)}var React=require("react/addons"),emptyFunction=function(){},root="undefined"!=typeof window?window:this,bodyElement;"undefined"!=typeof document&&"body"in document&&(bodyElement=document.body);var isTouchDevice="ontouchstart"in root||"onmsgesturechange"in root,dragEventFor=function(){var eventsFor={touch:{start:"touchstart",move:"touchmove",end:"touchend"},mouse:{start:"mousedown",move:"mousemove",end:"mouseup"}};return eventsFor[isTouchDevice?"touch":"mouse"]}();module.exports=React.createClass({displayName:"Draggable",mixins:[React.addons.PureRenderMixin],propTypes:{axis:React.PropTypes.oneOf(["both","x","y"]),handle:React.PropTypes.string,cancel:React.PropTypes.string,bound:React.PropTypes.string,grid:React.PropTypes.arrayOf(React.PropTypes.number),constrain:React.PropTypes.func,start:React.PropTypes.object,zIndex:React.PropTypes.number,useChild:React.PropTypes.bool,onStart:React.PropTypes.func,onDrag:React.PropTypes.func,onStop:React.PropTypes.func,onMouseDown:React.PropTypes.func},getDefaultProps:function(){return{axis:"both",bound:null,handle:null,cancel:null,grid:null,start:{},zIndex:NaN,useChild:!0,onStart:emptyFunction,onDrag:emptyFunction,onStop:emptyFunction,onMouseDown:emptyFunction}},getInitialState:function(){var state={dragging:!1,clientX:0,clientY:0,offsetLeft:this.props.start.x||0,offsetTop:this.props.start.y||0};return updateBoundState(state,this.props.bound),state},componentWillReceiveProps:function(nextProps){var state=updateBoundState({},nextProps.bound);nextProps.start&&(null!=nextProps.start.x&&(state.offsetLeft=nextProps.start.x||0),null!=nextProps.start.y&&(state.offsetTop=nextProps.start.y||0)),this.setState(state)},componentWillUnmount:function(){removeEvent(root,dragEventFor.move,this.handleDrag),removeEvent(root,dragEventFor.end,this.handleDragEnd)},handleDragStart:function(e){if(this.props.onMouseDown(e),!(this.props.handle&&!matchesSelector(e.target,this.props.handle)||this.props.cancel&&matchesSelector(e.target,this.props.cancel))){var dragPoint=getControlPosition(e);this.setState({dragging:!0,clientX:dragPoint.clientX,clientY:dragPoint.clientY}),this.props.onStart(e,createUIEvent(this)),addEvent(root,dragEventFor.move,this.handleDrag),addEvent(root,dragEventFor.end,this.handleDragEnd),bodyElement&&(bodyElement.className+=" react-draggable-dragging")}},handleDragEnd:function(e){if(this.state.dragging&&(this.setState({dragging:!1}),this.props.onStop(e,createUIEvent(this)),removeEvent(root,dragEventFor.move,this.handleDrag),removeEvent(root,dragEventFor.end,this.handleDragEnd),bodyElement)){var className=bodyElement.className;bodyElement.className=className.replace(/(?:^|\s+)react-draggable-dragging\b/," ")}},handleDrag:function(e){var offset,boundingValue,dragPoint=getControlPosition(e),offsetLeft=this._toPixels(this.state.offsetLeft),offsetTop=this._toPixels(this.state.offsetTop),state={offsetLeft:offsetLeft,offsetTop:offsetTop},node=this.getDOMNode(),offsetParent=node.offsetParent;canDragX(this)&&(offset=offsetLeft+dragPoint.clientX-this.state.clientX,this.state.boundLeft&&(boundingValue=state.offsetLeft-node.offsetLeft,boundingValue>offset&&(offset=boundingValue)),this.state.boundRight&&(boundingValue+=offsetParent.clientWidth,this.state.boundBox&&(boundingValue-=node.offsetWidth),offset>boundingValue&&(offset=boundingValue)),state.offsetLeft=offset),canDragY(this)&&(offset=offsetTop+dragPoint.clientY-this.state.clientY,this.state.boundTop&&(boundingValue=state.offsetTop-node.offsetTop,boundingValue>offset&&(offset=boundingValue)),this.state.boundBottom&&(boundingValue+=offsetParent.clientHeight,this.state.boundBox&&(boundingValue-=node.offsetHeight),offset>boundingValue&&(offset=boundingValue)),state.offsetTop=offset);var constrain=this.props.constrain,grid=this.props.grid;if(!constrain&&Array.isArray(grid)){var constrainOffset=function(offset,prev,snap){var delta=offset-prev;return Math.abs(delta)>=snap?prev+parseInt(delta/snap,10)*snap:prev};constrain=function(pos){return{left:constrainOffset(pos.left,pos.prevLeft,grid[0]),top:constrainOffset(pos.top,pos.prevTop,grid[1])}}}var positions;constrain&&(positions=constrain({prevLeft:this.state.offsetLeft,prevTop:this.state.offsetTop,left:state.offsetLeft,top:state.offsetTop}),positions&&("left"in positions&&!isNaN(positions.left)&&(state.offsetLeft=positions.left),"top"in positions&&!isNaN(positions.top)&&(state.offsetTop=positions.top))),state.clientX=this.state.clientX+(state.offsetLeft-offsetLeft),state.clientY=this.state.clientY+(state.offsetTop-offsetTop),this.setState(state),this.props.onDrag(e,createUIEvent(this))},onTouchStart:function(e){return e.preventDefault(),this.handleDragStart.apply(this,arguments)},render:function(){var style={top:this.state.offsetTop,left:this.state.offsetLeft};this.state.dragging&&!isNaN(this.props.zIndex)&&(style.zIndex=this.props.zIndex);var props={style:style,className:"react-draggable",onMouseDown:this.handleDragStart,onTouchStart:this.onTouchStart,onMouseUp:this.handleDragEnd,onTouchEnd:this.handleDragEnd};return this.props.useChild?React.addons.cloneWithProps(React.Children.only(this.props.children),props):React.DOM.div(props,this.props.children)},_toPixels:function(value){if("string"==typeof value&&"%"==value.slice(-1))return parseInt(+value.replace("%","")/100*this.getDOMNode().offsetParent.clientWidth,10)||0;var i=parseInt(value,10);return isNaN(i)||!isFinite(i)?0:i}});


},{"react/addons":232}],228:[function(require,module,exports){
"use strict";function setResponderAndExtractTransfer(topLevelType,topLevelTargetID,nativeEvent){var shouldSetEventType=isStartish(topLevelType)?eventTypes.startShouldSetResponder:isMoveish(topLevelType)?eventTypes.moveShouldSetResponder:eventTypes.scrollShouldSetResponder,bubbleShouldSetFrom=responderID||topLevelTargetID,shouldSetEvent=SyntheticEvent.getPooled(shouldSetEventType,bubbleShouldSetFrom,nativeEvent);EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);var wantsResponderID=executeDispatchesInOrderStopAtTrue(shouldSetEvent);if(shouldSetEvent.isPersistent()||shouldSetEvent.constructor.release(shouldSetEvent),!wantsResponderID||wantsResponderID===responderID)return null;var extracted,grantEvent=SyntheticEvent.getPooled(eventTypes.responderGrant,wantsResponderID,nativeEvent);if(EventPropagators.accumulateDirectDispatches(grantEvent),responderID){var terminationRequestEvent=SyntheticEvent.getPooled(eventTypes.responderTerminationRequest,responderID,nativeEvent);EventPropagators.accumulateDirectDispatches(terminationRequestEvent);var shouldSwitch=!hasDispatches(terminationRequestEvent)||executeDirectDispatch(terminationRequestEvent);if(terminationRequestEvent.isPersistent()||terminationRequestEvent.constructor.release(terminationRequestEvent),shouldSwitch){var terminateType=eventTypes.responderTerminate,terminateEvent=SyntheticEvent.getPooled(terminateType,responderID,nativeEvent);EventPropagators.accumulateDirectDispatches(terminateEvent),extracted=accumulateInto(extracted,[grantEvent,terminateEvent]),responderID=wantsResponderID}else{var rejectEvent=SyntheticEvent.getPooled(eventTypes.responderReject,wantsResponderID,nativeEvent);EventPropagators.accumulateDirectDispatches(rejectEvent),extracted=accumulateInto(extracted,rejectEvent)}}else extracted=accumulateInto(extracted,grantEvent),responderID=wantsResponderID;return extracted}function canTriggerTransfer(topLevelType){return topLevelType===EventConstants.topLevelTypes.topScroll||isStartish(topLevelType)||isPressing&&isMoveish(topLevelType)}var EventConstants=require("react/lib/EventConstants"),EventPluginUtils=require("react/lib/EventPluginUtils"),EventPropagators=require("react/lib/EventPropagators"),SyntheticEvent=require("react/lib/SyntheticEvent"),accumulateInto=require("react/lib/accumulateInto"),keyOf=require("react/lib/keyOf"),isStartish=EventPluginUtils.isStartish,isMoveish=EventPluginUtils.isMoveish,isEndish=EventPluginUtils.isEndish,executeDirectDispatch=EventPluginUtils.executeDirectDispatch,hasDispatches=EventPluginUtils.hasDispatches,executeDispatchesInOrderStopAtTrue=EventPluginUtils.executeDispatchesInOrderStopAtTrue,responderID=null,isPressing=!1,eventTypes={startShouldSetResponder:{phasedRegistrationNames:{bubbled:keyOf({onStartShouldSetResponder:null}),captured:keyOf({onStartShouldSetResponderCapture:null})}},scrollShouldSetResponder:{phasedRegistrationNames:{bubbled:keyOf({onScrollShouldSetResponder:null}),captured:keyOf({onScrollShouldSetResponderCapture:null})}},moveShouldSetResponder:{phasedRegistrationNames:{bubbled:keyOf({onMoveShouldSetResponder:null}),captured:keyOf({onMoveShouldSetResponderCapture:null})}},responderMove:{registrationName:keyOf({onResponderMove:null})},responderRelease:{registrationName:keyOf({onResponderRelease:null})},responderTerminationRequest:{registrationName:keyOf({onResponderTerminationRequest:null})},responderGrant:{registrationName:keyOf({onResponderGrant:null})},responderReject:{registrationName:keyOf({onResponderReject:null})},responderTerminate:{registrationName:keyOf({onResponderTerminate:null})}},ResponderEventPlugin={getResponderID:function(){return responderID},eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var extracted;if(responderID&&isStartish(topLevelType)&&(responderID=null),isStartish(topLevelType)?isPressing=!0:isEndish(topLevelType)&&(isPressing=!1),canTriggerTransfer(topLevelType)){var transfer=setResponderAndExtractTransfer(topLevelType,topLevelTargetID,nativeEvent);transfer&&(extracted=accumulateInto(extracted,transfer))}var type=isMoveish(topLevelType)?eventTypes.responderMove:isEndish(topLevelType)?eventTypes.responderRelease:isStartish(topLevelType)?eventTypes.responderStart:null;if(type){var gesture=SyntheticEvent.getPooled(type,responderID||"",nativeEvent);EventPropagators.accumulateDirectDispatches(gesture),extracted=accumulateInto(extracted,gesture)}return type===eventTypes.responderRelease&&(responderID=null),extracted}};module.exports=ResponderEventPlugin;


},{"react/lib/EventConstants":247,"react/lib/EventPluginUtils":251,"react/lib/EventPropagators":252,"react/lib/SyntheticEvent":340,"react/lib/accumulateInto":350,"react/lib/keyOf":389}],229:[function(require,module,exports){
"use strict";function getAxisCoordOfEvent(axis,nativeEvent){var singleTouch=TouchEventUtils.extractSingleTouch(nativeEvent);return singleTouch?singleTouch[axis.page]:axis.page in nativeEvent?nativeEvent[axis.page]:nativeEvent[axis.client]+ViewportMetrics[axis.envScroll]}function getDistance(coords,nativeEvent){var pageX=getAxisCoordOfEvent(Axis.x,nativeEvent),pageY=getAxisCoordOfEvent(Axis.y,nativeEvent);return Math.pow(Math.pow(pageX-coords.x,2)+Math.pow(pageY-coords.y,2),.5)}var EventConstants=require("react/lib/EventConstants"),EventPluginUtils=require("react/lib/EventPluginUtils"),EventPropagators=require("react/lib/EventPropagators"),SyntheticUIEvent=require("react/lib/SyntheticUIEvent"),TouchEventUtils=require("./TouchEventUtils"),ViewportMetrics=require("react/lib/ViewportMetrics"),keyOf=require("react/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,isStartish=EventPluginUtils.isStartish,isEndish=EventPluginUtils.isEndish,isTouch=function(topLevelType){var touchTypes=[topLevelTypes.topTouchCancel,topLevelTypes.topTouchEnd,topLevelTypes.topTouchStart,topLevelTypes.topTouchMove];return touchTypes.indexOf(topLevelType)>=0},tapMoveThreshold=10,ignoreMouseThreshold=750,startCoords={x:null,y:null},lastTouchEvent=null,Axis={x:{page:"pageX",client:"clientX",envScroll:"currentPageScrollLeft"},y:{page:"pageY",client:"clientY",envScroll:"currentPageScrollTop"}},dependencies=[topLevelTypes.topMouseDown,topLevelTypes.topMouseMove,topLevelTypes.topMouseUp];EventPluginUtils.useTouchEvents&&dependencies.push(topLevelTypes.topTouchEnd,topLevelTypes.topTouchStart,topLevelTypes.topTouchMove);var eventTypes={touchTap:{phasedRegistrationNames:{bubbled:keyOf({onTouchTap:null}),captured:keyOf({onTouchTapCapture:null})},dependencies:dependencies}},now=function(){return Date.now?Date.now():+new Date},TapEventPlugin={tapMoveThreshold:tapMoveThreshold,ignoreMouseThreshold:ignoreMouseThreshold,eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){if(isTouch(topLevelType))lastTouchEvent=now();else if(lastTouchEvent&&now()-lastTouchEvent<ignoreMouseThreshold)return null;if(!isStartish(topLevelType)&&!isEndish(topLevelType))return null;var event=null,distance=getDistance(startCoords,nativeEvent);return isEndish(topLevelType)&&tapMoveThreshold>distance&&(event=SyntheticUIEvent.getPooled(eventTypes.touchTap,topLevelTargetID,nativeEvent)),isStartish(topLevelType)?(startCoords.x=getAxisCoordOfEvent(Axis.x,nativeEvent),startCoords.y=getAxisCoordOfEvent(Axis.y,nativeEvent)):isEndish(topLevelType)&&(startCoords.x=0,startCoords.y=0),EventPropagators.accumulateTwoPhaseDispatches(event),event}};module.exports=TapEventPlugin;


},{"./TouchEventUtils":230,"react/lib/EventConstants":247,"react/lib/EventPluginUtils":251,"react/lib/EventPropagators":252,"react/lib/SyntheticUIEvent":346,"react/lib/ViewportMetrics":349,"react/lib/keyOf":389}],230:[function(require,module,exports){
var TouchEventUtils={extractSingleTouch:function(nativeEvent){var touches=nativeEvent.touches,changedTouches=nativeEvent.changedTouches,hasTouches=touches&&touches.length>0,hasChangedTouches=changedTouches&&changedTouches.length>0;return!hasTouches&&hasChangedTouches?changedTouches[0]:hasTouches?touches[0]:nativeEvent}};module.exports=TouchEventUtils;


},{}],231:[function(require,module,exports){
module.exports=function(){var React=require("react");React.initializeTouchEvents(!0),require("react/lib/EventPluginHub").injection.injectEventPluginsByName({ResponderEventPlugin:require("./ResponderEventPlugin.js"),TapEventPlugin:require("./TapEventPlugin.js")})};


},{"./ResponderEventPlugin.js":228,"./TapEventPlugin.js":229,"react":404,"react/lib/EventPluginHub":249}],232:[function(require,module,exports){
module.exports=require("./lib/ReactWithAddons");


},{"./lib/ReactWithAddons":332}],233:[function(require,module,exports){
"use strict";var focusNode=require("./focusNode"),AutoFocusMixin={componentDidMount:function(){this.props.autoFocus&&focusNode(this.getDOMNode())}};module.exports=AutoFocusMixin;


},{"./focusNode":366}],234:[function(require,module,exports){
"use strict";function isPresto(){var opera=window.opera;return"object"==typeof opera&&"function"==typeof opera.version&&parseInt(opera.version(),10)<=12}function isKeypressCommand(nativeEvent){return(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&!(nativeEvent.ctrlKey&&nativeEvent.altKey)}function getCompositionEventType(topLevelType){switch(topLevelType){case topLevelTypes.topCompositionStart:return eventTypes.compositionStart;case topLevelTypes.topCompositionEnd:return eventTypes.compositionEnd;case topLevelTypes.topCompositionUpdate:return eventTypes.compositionUpdate}}function isFallbackCompositionStart(topLevelType,nativeEvent){return topLevelType===topLevelTypes.topKeyDown&&nativeEvent.keyCode===START_KEYCODE}function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case topLevelTypes.topKeyUp:return-1!==END_KEYCODES.indexOf(nativeEvent.keyCode);case topLevelTypes.topKeyDown:return nativeEvent.keyCode!==START_KEYCODE;case topLevelTypes.topKeyPress:case topLevelTypes.topMouseDown:case topLevelTypes.topBlur:return!0;default:return!1}}function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;return"object"==typeof detail&&"data"in detail?detail.data:null}function extractCompositionEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var eventType,fallbackData;if(canUseCompositionEvent?eventType=getCompositionEventType(topLevelType):currentComposition?isFallbackCompositionEnd(topLevelType,nativeEvent)&&(eventType=eventTypes.compositionEnd):isFallbackCompositionStart(topLevelType,nativeEvent)&&(eventType=eventTypes.compositionStart),!eventType)return null;useFallbackCompositionData&&(currentComposition||eventType!==eventTypes.compositionStart?eventType===eventTypes.compositionEnd&&currentComposition&&(fallbackData=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(topLevelTarget));var event=SyntheticCompositionEvent.getPooled(eventType,topLevelTargetID,nativeEvent);if(fallbackData)event.data=fallbackData;else{var customData=getDataFromCustomEvent(nativeEvent);null!==customData&&(event.data=customData)}return EventPropagators.accumulateTwoPhaseDispatches(event),event}function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case topLevelTypes.topCompositionEnd:return getDataFromCustomEvent(nativeEvent);case topLevelTypes.topKeyPress:var which=nativeEvent.which;return which!==SPACEBAR_CODE?null:(hasSpaceKeypress=!0,SPACEBAR_CHAR);case topLevelTypes.topTextInput:var chars=nativeEvent.data;return chars===SPACEBAR_CHAR&&hasSpaceKeypress?null:chars;default:return null}}function getFallbackBeforeInputChars(topLevelType,nativeEvent){if(currentComposition){if(topLevelType===topLevelTypes.topCompositionEnd||isFallbackCompositionEnd(topLevelType,nativeEvent)){var chars=currentComposition.getData();return FallbackCompositionState.release(currentComposition),currentComposition=null,chars}return null}switch(topLevelType){case topLevelTypes.topPaste:return null;case topLevelTypes.topKeyPress:return nativeEvent.which&&!isKeypressCommand(nativeEvent)?String.fromCharCode(nativeEvent.which):null;case topLevelTypes.topCompositionEnd:return useFallbackCompositionData?null:nativeEvent.data;default:return null}}function extractBeforeInputEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var chars;if(chars=canUseTextInputEvent?getNativeBeforeInputChars(topLevelType,nativeEvent):getFallbackBeforeInputChars(topLevelType,nativeEvent),!chars)return null;var event=SyntheticInputEvent.getPooled(eventTypes.beforeInput,topLevelTargetID,nativeEvent);return event.data=chars,EventPropagators.accumulateTwoPhaseDispatches(event),event}var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("./ExecutionEnvironment"),FallbackCompositionState=require("./FallbackCompositionState"),SyntheticCompositionEvent=require("./SyntheticCompositionEvent"),SyntheticInputEvent=require("./SyntheticInputEvent"),keyOf=require("./keyOf"),END_KEYCODES=[9,13,27,32],START_KEYCODE=229,canUseCompositionEvent=ExecutionEnvironment.canUseDOM&&"CompositionEvent"in window,documentMode=null;ExecutionEnvironment.canUseDOM&&"documentMode"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=ExecutionEnvironment.canUseDOM&&"TextEvent"in window&&!documentMode&&!isPresto(),useFallbackCompositionData=ExecutionEnvironment.canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&11>=documentMode),SPACEBAR_CODE=32,SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE),topLevelTypes=EventConstants.topLevelTypes,eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:keyOf({onBeforeInput:null}),captured:keyOf({onBeforeInputCapture:null})},dependencies:[topLevelTypes.topCompositionEnd,topLevelTypes.topKeyPress,topLevelTypes.topTextInput,topLevelTypes.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:keyOf({onCompositionEnd:null}),captured:keyOf({onCompositionEndCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionEnd,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:keyOf({onCompositionStart:null}),captured:keyOf({onCompositionStartCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionStart,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:keyOf({onCompositionUpdate:null}),captured:keyOf({onCompositionUpdateCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionUpdate,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]}},hasSpaceKeypress=!1,currentComposition=null,BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){return[extractCompositionEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent),extractBeforeInputEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent)]}};module.exports=BeforeInputEventPlugin;


},{"./EventConstants":247,"./EventPropagators":252,"./ExecutionEnvironment":253,"./FallbackCompositionState":254,"./SyntheticCompositionEvent":338,"./SyntheticInputEvent":342,"./keyOf":389}],235:[function(require,module,exports){
(function (process){
var invariant=require("./invariant"),CSSCore={addClass:function(element,className){return"production"!==process.env.NODE_ENV?invariant(!/\s/.test(className),'CSSCore.addClass takes only a single class name. "%s" contains multiple classes.',className):invariant(!/\s/.test(className)),className&&(element.classList?element.classList.add(className):CSSCore.hasClass(element,className)||(element.className=element.className+" "+className)),element},removeClass:function(element,className){return"production"!==process.env.NODE_ENV?invariant(!/\s/.test(className),'CSSCore.removeClass takes only a single class name. "%s" contains multiple classes.',className):invariant(!/\s/.test(className)),className&&(element.classList?element.classList.remove(className):CSSCore.hasClass(element,className)&&(element.className=element.className.replace(new RegExp("(^|\\s)"+className+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,""))),element},conditionClass:function(element,className,bool){return(bool?CSSCore.addClass:CSSCore.removeClass)(element,className)},hasClass:function(element,className){return"production"!==process.env.NODE_ENV?invariant(!/\s/.test(className),"CSS.hasClass takes only a single class name."):invariant(!/\s/.test(className)),element.classList?!!className&&element.classList.contains(className):(" "+element.className+" ").indexOf(" "+className+" ")>-1}};module.exports=CSSCore;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],236:[function(require,module,exports){
"use strict";function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1)}var isUnitlessNumber={boxFlex:!0,boxFlexGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},prefixes=["Webkit","ms","Moz","O"];Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop]})});var shorthandPropertyExpansions={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},CSSProperty={isUnitlessNumber:isUnitlessNumber,shorthandPropertyExpansions:shorthandPropertyExpansions};module.exports=CSSProperty;


},{}],237:[function(require,module,exports){
(function (process){
"use strict";var CSSProperty=require("./CSSProperty"),ExecutionEnvironment=require("./ExecutionEnvironment"),camelizeStyleName=require("./camelizeStyleName"),dangerousStyleValue=require("./dangerousStyleValue"),hyphenateStyleName=require("./hyphenateStyleName"),memoizeStringOnly=require("./memoizeStringOnly"),warning=require("./warning"),processStyleName=memoizeStringOnly(function(styleName){return hyphenateStyleName(styleName)}),styleFloatAccessor="cssFloat";if(ExecutionEnvironment.canUseDOM&&void 0===document.documentElement.style.cssFloat&&(styleFloatAccessor="styleFloat"),"production"!==process.env.NODE_ENV)var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/,badStyleValueWithSemicolonPattern=/;\s*$/,warnedStyleNames={},warnedStyleValues={},warnHyphenatedStyleName=function(name){warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]||(warnedStyleNames[name]=!0,"production"!==process.env.NODE_ENV?warning(!1,"Unsupported style property %s. Did you mean %s?",name,camelizeStyleName(name)):null)},warnBadVendoredStyleName=function(name){warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]||(warnedStyleNames[name]=!0,"production"!==process.env.NODE_ENV?warning(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?",name,name.charAt(0).toUpperCase()+name.slice(1)):null)},warnStyleValueWithSemicolon=function(name,value){warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]||(warnedStyleValues[value]=!0,"production"!==process.env.NODE_ENV?warning(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,"")):null)},warnValidStyle=function(name,value){name.indexOf("-")>-1?warnHyphenatedStyleName(name):badVendoredStyleNamePattern.test(name)?warnBadVendoredStyleName(name):badStyleValueWithSemicolonPattern.test(value)&&warnStyleValueWithSemicolon(name,value)};var CSSPropertyOperations={createMarkupForStyles:function(styles){var serialized="";for(var styleName in styles)if(styles.hasOwnProperty(styleName)){var styleValue=styles[styleName];"production"!==process.env.NODE_ENV&&warnValidStyle(styleName,styleValue),null!=styleValue&&(serialized+=processStyleName(styleName)+":",serialized+=dangerousStyleValue(styleName,styleValue)+";")}return serialized||null},setValueForStyles:function(node,styles){var style=node.style;for(var styleName in styles)if(styles.hasOwnProperty(styleName)){"production"!==process.env.NODE_ENV&&warnValidStyle(styleName,styles[styleName]);var styleValue=dangerousStyleValue(styleName,styles[styleName]);if("float"===styleName&&(styleName=styleFloatAccessor),styleValue)style[styleName]=styleValue;else{var expansion=CSSProperty.shorthandPropertyExpansions[styleName];if(expansion)for(var individualStyleName in expansion)style[individualStyleName]="";else style[styleName]=""}}}};module.exports=CSSPropertyOperations;


}).call(this,require('_process'))

},{"./CSSProperty":236,"./ExecutionEnvironment":253,"./camelizeStyleName":353,"./dangerousStyleValue":360,"./hyphenateStyleName":380,"./memoizeStringOnly":391,"./warning":403,"_process":106}],238:[function(require,module,exports){
(function (process){
"use strict";function CallbackQueue(){this._callbacks=null,this._contexts=null}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),invariant=require("./invariant");assign(CallbackQueue.prototype,{enqueue:function(callback,context){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(callback),this._contexts.push(context)},notifyAll:function(){var callbacks=this._callbacks,contexts=this._contexts;if(callbacks){"production"!==process.env.NODE_ENV?invariant(callbacks.length===contexts.length,"Mismatched list of contexts in callback queue"):invariant(callbacks.length===contexts.length),this._callbacks=null,this._contexts=null;for(var i=0,l=callbacks.length;l>i;i++)callbacks[i].call(contexts[i]);callbacks.length=0,contexts.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),PooledClass.addPoolingTo(CallbackQueue),module.exports=CallbackQueue;


}).call(this,require('_process'))

},{"./Object.assign":260,"./PooledClass":261,"./invariant":382,"_process":106}],239:[function(require,module,exports){
"use strict";function shouldUseChangeEvent(elem){return"SELECT"===elem.nodeName||"INPUT"===elem.nodeName&&"file"===elem.type}function manualDispatchChangeEvent(nativeEvent){var event=SyntheticEvent.getPooled(eventTypes.change,activeElementID,nativeEvent);EventPropagators.accumulateTwoPhaseDispatches(event),ReactUpdates.batchedUpdates(runEventInBatch,event)}function runEventInBatch(event){EventPluginHub.enqueueEvents(event),EventPluginHub.processEventQueue()}function startWatchingForChangeEventIE8(target,targetID){activeElement=target,activeElementID=targetID,activeElement.attachEvent("onchange",manualDispatchChangeEvent)}function stopWatchingForChangeEventIE8(){activeElement&&(activeElement.detachEvent("onchange",manualDispatchChangeEvent),activeElement=null,activeElementID=null)}function getTargetIDForChangeEvent(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType===topLevelTypes.topChange?topLevelTargetID:void 0}function handleEventsForChangeEventIE8(topLevelType,topLevelTarget,topLevelTargetID){topLevelType===topLevelTypes.topFocus?(stopWatchingForChangeEventIE8(),startWatchingForChangeEventIE8(topLevelTarget,topLevelTargetID)):topLevelType===topLevelTypes.topBlur&&stopWatchingForChangeEventIE8()}function startWatchingForValueChange(target,targetID){activeElement=target,activeElementID=targetID,activeElementValue=target.value,activeElementValueProp=Object.getOwnPropertyDescriptor(target.constructor.prototype,"value"),Object.defineProperty(activeElement,"value",newValueProp),activeElement.attachEvent("onpropertychange",handlePropertyChange)}function stopWatchingForValueChange(){activeElement&&(delete activeElement.value,activeElement.detachEvent("onpropertychange",handlePropertyChange),activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null)}function handlePropertyChange(nativeEvent){if("value"===nativeEvent.propertyName){var value=nativeEvent.srcElement.value;value!==activeElementValue&&(activeElementValue=value,manualDispatchChangeEvent(nativeEvent))}}function getTargetIDForInputEvent(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType===topLevelTypes.topInput?topLevelTargetID:void 0}function handleEventsForInputEventIE(topLevelType,topLevelTarget,topLevelTargetID){topLevelType===topLevelTypes.topFocus?(stopWatchingForValueChange(),startWatchingForValueChange(topLevelTarget,topLevelTargetID)):topLevelType===topLevelTypes.topBlur&&stopWatchingForValueChange()}function getTargetIDForInputEventIE(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType!==topLevelTypes.topSelectionChange&&topLevelType!==topLevelTypes.topKeyUp&&topLevelType!==topLevelTypes.topKeyDown||!activeElement||activeElement.value===activeElementValue?void 0:(activeElementValue=activeElement.value,activeElementID)}function shouldUseClickEvent(elem){return"INPUT"===elem.nodeName&&("checkbox"===elem.type||"radio"===elem.type)}function getTargetIDForClickEvent(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType===topLevelTypes.topClick?topLevelTargetID:void 0}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("./ExecutionEnvironment"),ReactUpdates=require("./ReactUpdates"),SyntheticEvent=require("./SyntheticEvent"),isEventSupported=require("./isEventSupported"),isTextInputElement=require("./isTextInputElement"),keyOf=require("./keyOf"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={change:{phasedRegistrationNames:{bubbled:keyOf({onChange:null}),captured:keyOf({onChangeCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topChange,topLevelTypes.topClick,topLevelTypes.topFocus,topLevelTypes.topInput,topLevelTypes.topKeyDown,topLevelTypes.topKeyUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null,doesChangeEventBubble=!1;ExecutionEnvironment.canUseDOM&&(doesChangeEventBubble=isEventSupported("change")&&(!("documentMode"in document)||document.documentMode>8));var isInputEventSupported=!1;ExecutionEnvironment.canUseDOM&&(isInputEventSupported=isEventSupported("input")&&(!("documentMode"in document)||document.documentMode>9));var newValueProp={get:function(){return activeElementValueProp.get.call(this)},set:function(val){activeElementValue=""+val,activeElementValueProp.set.call(this,val)}},ChangeEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var getTargetIDFunc,handleEventFunc;if(shouldUseChangeEvent(topLevelTarget)?doesChangeEventBubble?getTargetIDFunc=getTargetIDForChangeEvent:handleEventFunc=handleEventsForChangeEventIE8:isTextInputElement(topLevelTarget)?isInputEventSupported?getTargetIDFunc=getTargetIDForInputEvent:(getTargetIDFunc=getTargetIDForInputEventIE,handleEventFunc=handleEventsForInputEventIE):shouldUseClickEvent(topLevelTarget)&&(getTargetIDFunc=getTargetIDForClickEvent),getTargetIDFunc){var targetID=getTargetIDFunc(topLevelType,topLevelTarget,topLevelTargetID);if(targetID){var event=SyntheticEvent.getPooled(eventTypes.change,targetID,nativeEvent);return EventPropagators.accumulateTwoPhaseDispatches(event),event}}handleEventFunc&&handleEventFunc(topLevelType,topLevelTarget,topLevelTargetID)}};module.exports=ChangeEventPlugin;


},{"./EventConstants":247,"./EventPluginHub":249,"./EventPropagators":252,"./ExecutionEnvironment":253,"./ReactUpdates":331,"./SyntheticEvent":340,"./isEventSupported":383,"./isTextInputElement":385,"./keyOf":389}],240:[function(require,module,exports){
"use strict";var nextReactRootIndex=0,ClientReactRootIndex={createReactRootIndex:function(){return nextReactRootIndex++}};module.exports=ClientReactRootIndex;


},{}],241:[function(require,module,exports){
(function (process){
"use strict";function insertChildAt(parentNode,childNode,index){parentNode.insertBefore(childNode,parentNode.childNodes[index]||null)}var Danger=require("./Danger"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),setTextContent=require("./setTextContent"),invariant=require("./invariant"),DOMChildrenOperations={dangerouslyReplaceNodeWithMarkup:Danger.dangerouslyReplaceNodeWithMarkup,updateTextContent:setTextContent,processUpdates:function(updates,markupList){for(var update,initialChildren=null,updatedChildren=null,i=0;i<updates.length;i++)if(update=updates[i],update.type===ReactMultiChildUpdateTypes.MOVE_EXISTING||update.type===ReactMultiChildUpdateTypes.REMOVE_NODE){var updatedIndex=update.fromIndex,updatedChild=update.parentNode.childNodes[updatedIndex],parentID=update.parentID;"production"!==process.env.NODE_ENV?invariant(updatedChild,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",updatedIndex,parentID):invariant(updatedChild),initialChildren=initialChildren||{},initialChildren[parentID]=initialChildren[parentID]||[],initialChildren[parentID][updatedIndex]=updatedChild,updatedChildren=updatedChildren||[],updatedChildren.push(updatedChild)}var renderedMarkup=Danger.dangerouslyRenderMarkup(markupList);if(updatedChildren)for(var j=0;j<updatedChildren.length;j++)updatedChildren[j].parentNode.removeChild(updatedChildren[j]);for(var k=0;k<updates.length;k++)switch(update=updates[k],update.type){case ReactMultiChildUpdateTypes.INSERT_MARKUP:insertChildAt(update.parentNode,renderedMarkup[update.markupIndex],update.toIndex);break;case ReactMultiChildUpdateTypes.MOVE_EXISTING:insertChildAt(update.parentNode,initialChildren[update.parentID][update.fromIndex],update.toIndex);break;case ReactMultiChildUpdateTypes.TEXT_CONTENT:setTextContent(update.parentNode,update.textContent);break;case ReactMultiChildUpdateTypes.REMOVE_NODE:}}};module.exports=DOMChildrenOperations;


}).call(this,require('_process'))

},{"./Danger":244,"./ReactMultiChildUpdateTypes":310,"./invariant":382,"./setTextContent":397,"_process":106}],242:[function(require,module,exports){
(function (process){
"use strict";function checkMask(value,bitmask){return(value&bitmask)===bitmask}var invariant=require("./invariant"),DOMPropertyInjection={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(domPropertyConfig){var Properties=domPropertyConfig.Properties||{},DOMAttributeNames=domPropertyConfig.DOMAttributeNames||{},DOMPropertyNames=domPropertyConfig.DOMPropertyNames||{},DOMMutationMethods=domPropertyConfig.DOMMutationMethods||{};domPropertyConfig.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);for(var propName in Properties){"production"!==process.env.NODE_ENV?invariant(!DOMProperty.isStandardName.hasOwnProperty(propName),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",propName):invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)),DOMProperty.isStandardName[propName]=!0;var lowerCased=propName.toLowerCase();if(DOMProperty.getPossibleStandardName[lowerCased]=propName,DOMAttributeNames.hasOwnProperty(propName)){var attributeName=DOMAttributeNames[propName];DOMProperty.getPossibleStandardName[attributeName]=propName,DOMProperty.getAttributeName[propName]=attributeName}else DOMProperty.getAttributeName[propName]=lowerCased;DOMProperty.getPropertyName[propName]=DOMPropertyNames.hasOwnProperty(propName)?DOMPropertyNames[propName]:propName,DOMMutationMethods.hasOwnProperty(propName)?DOMProperty.getMutationMethod[propName]=DOMMutationMethods[propName]:DOMProperty.getMutationMethod[propName]=null;var propConfig=Properties[propName];DOMProperty.mustUseAttribute[propName]=checkMask(propConfig,DOMPropertyInjection.MUST_USE_ATTRIBUTE),DOMProperty.mustUseProperty[propName]=checkMask(propConfig,DOMPropertyInjection.MUST_USE_PROPERTY),DOMProperty.hasSideEffects[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_SIDE_EFFECTS),DOMProperty.hasBooleanValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_BOOLEAN_VALUE),DOMProperty.hasNumericValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_NUMERIC_VALUE),DOMProperty.hasPositiveNumericValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE),DOMProperty.hasOverloadedBooleanValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE),"production"!==process.env.NODE_ENV?invariant(!DOMProperty.mustUseAttribute[propName]||!DOMProperty.mustUseProperty[propName],"DOMProperty: Cannot require using both attribute and property: %s",propName):invariant(!DOMProperty.mustUseAttribute[propName]||!DOMProperty.mustUseProperty[propName]),"production"!==process.env.NODE_ENV?invariant(DOMProperty.mustUseProperty[propName]||!DOMProperty.hasSideEffects[propName],"DOMProperty: Properties that have side effects must use property: %s",propName):invariant(DOMProperty.mustUseProperty[propName]||!DOMProperty.hasSideEffects[propName]),"production"!==process.env.NODE_ENV?invariant(!!DOMProperty.hasBooleanValue[propName]+!!DOMProperty.hasNumericValue[propName]+!!DOMProperty.hasOverloadedBooleanValue[propName]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",propName):invariant(!!DOMProperty.hasBooleanValue[propName]+!!DOMProperty.hasNumericValue[propName]+!!DOMProperty.hasOverloadedBooleanValue[propName]<=1)}}},defaultValueCache={},DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(attributeName){for(var i=0;i<DOMProperty._isCustomAttributeFunctions.length;i++){var isCustomAttributeFn=DOMProperty._isCustomAttributeFunctions[i];if(isCustomAttributeFn(attributeName))return!0}return!1},getDefaultValueForProperty:function(nodeName,prop){var testElement,nodeDefaults=defaultValueCache[nodeName];return nodeDefaults||(defaultValueCache[nodeName]=nodeDefaults={}),prop in nodeDefaults||(testElement=document.createElement(nodeName),nodeDefaults[prop]=testElement[prop]),nodeDefaults[prop]},injection:DOMPropertyInjection};module.exports=DOMProperty;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],243:[function(require,module,exports){
(function (process){
"use strict";function shouldIgnoreValue(name,value){return null==value||DOMProperty.hasBooleanValue[name]&&!value||DOMProperty.hasNumericValue[name]&&isNaN(value)||DOMProperty.hasPositiveNumericValue[name]&&1>value||DOMProperty.hasOverloadedBooleanValue[name]&&value===!1}var DOMProperty=require("./DOMProperty"),quoteAttributeValueForBrowser=require("./quoteAttributeValueForBrowser"),warning=require("./warning");if("production"!==process.env.NODE_ENV)var reactProps={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},warnedProperties={},warnUnknownProperty=function(name){if(!(reactProps.hasOwnProperty(name)&&reactProps[name]||warnedProperties.hasOwnProperty(name)&&warnedProperties[name])){warnedProperties[name]=!0;var lowerCasedName=name.toLowerCase(),standardName=DOMProperty.isCustomAttribute(lowerCasedName)?lowerCasedName:DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName)?DOMProperty.getPossibleStandardName[lowerCasedName]:null;"production"!==process.env.NODE_ENV?warning(null==standardName,"Unknown DOM property %s. Did you mean %s?",name,standardName):null}};var DOMPropertyOperations={createMarkupForID:function(id){return DOMProperty.ID_ATTRIBUTE_NAME+"="+quoteAttributeValueForBrowser(id)},createMarkupForProperty:function(name,value){if(DOMProperty.isStandardName.hasOwnProperty(name)&&DOMProperty.isStandardName[name]){if(shouldIgnoreValue(name,value))return"";var attributeName=DOMProperty.getAttributeName[name];return DOMProperty.hasBooleanValue[name]||DOMProperty.hasOverloadedBooleanValue[name]&&value===!0?attributeName:attributeName+"="+quoteAttributeValueForBrowser(value)}return DOMProperty.isCustomAttribute(name)?null==value?"":name+"="+quoteAttributeValueForBrowser(value):("production"!==process.env.NODE_ENV&&warnUnknownProperty(name),null)},setValueForProperty:function(node,name,value){if(DOMProperty.isStandardName.hasOwnProperty(name)&&DOMProperty.isStandardName[name]){var mutationMethod=DOMProperty.getMutationMethod[name];if(mutationMethod)mutationMethod(node,value);else if(shouldIgnoreValue(name,value))this.deleteValueForProperty(node,name);else if(DOMProperty.mustUseAttribute[name])node.setAttribute(DOMProperty.getAttributeName[name],""+value);else{var propName=DOMProperty.getPropertyName[name];DOMProperty.hasSideEffects[name]&&""+node[propName]==""+value||(node[propName]=value)}}else DOMProperty.isCustomAttribute(name)?null==value?node.removeAttribute(name):node.setAttribute(name,""+value):"production"!==process.env.NODE_ENV&&warnUnknownProperty(name)},deleteValueForProperty:function(node,name){if(DOMProperty.isStandardName.hasOwnProperty(name)&&DOMProperty.isStandardName[name]){var mutationMethod=DOMProperty.getMutationMethod[name];if(mutationMethod)mutationMethod(node,void 0);else if(DOMProperty.mustUseAttribute[name])node.removeAttribute(DOMProperty.getAttributeName[name]);else{var propName=DOMProperty.getPropertyName[name],defaultValue=DOMProperty.getDefaultValueForProperty(node.nodeName,propName);DOMProperty.hasSideEffects[name]&&""+node[propName]===defaultValue||(node[propName]=defaultValue)}}else DOMProperty.isCustomAttribute(name)?node.removeAttribute(name):"production"!==process.env.NODE_ENV&&warnUnknownProperty(name)}};module.exports=DOMPropertyOperations;


}).call(this,require('_process'))

},{"./DOMProperty":242,"./quoteAttributeValueForBrowser":395,"./warning":403,"_process":106}],244:[function(require,module,exports){
(function (process){
"use strict";function getNodeName(markup){return markup.substring(1,markup.indexOf(" "))}var ExecutionEnvironment=require("./ExecutionEnvironment"),createNodesFromMarkup=require("./createNodesFromMarkup"),emptyFunction=require("./emptyFunction"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),OPEN_TAG_NAME_EXP=/^(<[^ \/>]+)/,RESULT_INDEX_ATTR="data-danger-index",Danger={dangerouslyRenderMarkup:function(markupList){"production"!==process.env.NODE_ENV?invariant(ExecutionEnvironment.canUseDOM,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):invariant(ExecutionEnvironment.canUseDOM);for(var nodeName,markupByNodeName={},i=0;i<markupList.length;i++)"production"!==process.env.NODE_ENV?invariant(markupList[i],"dangerouslyRenderMarkup(...): Missing markup."):invariant(markupList[i]),nodeName=getNodeName(markupList[i]),nodeName=getMarkupWrap(nodeName)?nodeName:"*",markupByNodeName[nodeName]=markupByNodeName[nodeName]||[],markupByNodeName[nodeName][i]=markupList[i];var resultList=[],resultListAssignmentCount=0;for(nodeName in markupByNodeName)if(markupByNodeName.hasOwnProperty(nodeName)){var resultIndex,markupListByNodeName=markupByNodeName[nodeName];for(resultIndex in markupListByNodeName)if(markupListByNodeName.hasOwnProperty(resultIndex)){var markup=markupListByNodeName[resultIndex];markupListByNodeName[resultIndex]=markup.replace(OPEN_TAG_NAME_EXP,"$1 "+RESULT_INDEX_ATTR+'="'+resultIndex+'" ')}for(var renderNodes=createNodesFromMarkup(markupListByNodeName.join(""),emptyFunction),j=0;j<renderNodes.length;++j){var renderNode=renderNodes[j];renderNode.hasAttribute&&renderNode.hasAttribute(RESULT_INDEX_ATTR)?(resultIndex=+renderNode.getAttribute(RESULT_INDEX_ATTR),renderNode.removeAttribute(RESULT_INDEX_ATTR),"production"!==process.env.NODE_ENV?invariant(!resultList.hasOwnProperty(resultIndex),"Danger: Assigning to an already-occupied result index."):invariant(!resultList.hasOwnProperty(resultIndex)),resultList[resultIndex]=renderNode,resultListAssignmentCount+=1):"production"!==process.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",renderNode)}}return"production"!==process.env.NODE_ENV?invariant(resultListAssignmentCount===resultList.length,"Danger: Did not assign to every index of resultList."):invariant(resultListAssignmentCount===resultList.length),"production"!==process.env.NODE_ENV?invariant(resultList.length===markupList.length,"Danger: Expected markup to render %s nodes, but rendered %s.",markupList.length,resultList.length):invariant(resultList.length===markupList.length),resultList},dangerouslyReplaceNodeWithMarkup:function(oldChild,markup){"production"!==process.env.NODE_ENV?invariant(ExecutionEnvironment.canUseDOM,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):invariant(ExecutionEnvironment.canUseDOM),"production"!==process.env.NODE_ENV?invariant(markup,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):invariant(markup),"production"!==process.env.NODE_ENV?invariant("html"!==oldChild.tagName.toLowerCase(),"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See React.renderToString()."):invariant("html"!==oldChild.tagName.toLowerCase());var newChild=createNodesFromMarkup(markup,emptyFunction)[0];oldChild.parentNode.replaceChild(newChild,oldChild)}};module.exports=Danger;


}).call(this,require('_process'))

},{"./ExecutionEnvironment":253,"./createNodesFromMarkup":358,"./emptyFunction":361,"./getMarkupWrap":374,"./invariant":382,"_process":106}],245:[function(require,module,exports){
"use strict";var keyOf=require("./keyOf"),DefaultEventPluginOrder=[keyOf({ResponderEventPlugin:null}),keyOf({SimpleEventPlugin:null}),keyOf({TapEventPlugin:null}),keyOf({EnterLeaveEventPlugin:null}),keyOf({ChangeEventPlugin:null}),keyOf({SelectEventPlugin:null}),keyOf({BeforeInputEventPlugin:null}),keyOf({AnalyticsEventPlugin:null}),keyOf({MobileSafariClickEventPlugin:null})];module.exports=DefaultEventPluginOrder;


},{"./keyOf":389}],246:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),ReactMount=require("./ReactMount"),keyOf=require("./keyOf"),topLevelTypes=EventConstants.topLevelTypes,getFirstReactDOM=ReactMount.getFirstReactDOM,eventTypes={mouseEnter:{registrationName:keyOf({onMouseEnter:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]},mouseLeave:{registrationName:keyOf({onMouseLeave:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]}},extractedEvents=[null,null],EnterLeaveEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){if(topLevelType===topLevelTypes.topMouseOver&&(nativeEvent.relatedTarget||nativeEvent.fromElement))return null;if(topLevelType!==topLevelTypes.topMouseOut&&topLevelType!==topLevelTypes.topMouseOver)return null;var win;if(topLevelTarget.window===topLevelTarget)win=topLevelTarget;else{var doc=topLevelTarget.ownerDocument;win=doc?doc.defaultView||doc.parentWindow:window}var from,to;if(topLevelType===topLevelTypes.topMouseOut?(from=topLevelTarget,to=getFirstReactDOM(nativeEvent.relatedTarget||nativeEvent.toElement)||win):(from=win,to=topLevelTarget),from===to)return null;var fromID=from?ReactMount.getID(from):"",toID=to?ReactMount.getID(to):"",leave=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,fromID,nativeEvent);leave.type="mouseleave",leave.target=from,leave.relatedTarget=to;var enter=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,toID,nativeEvent);return enter.type="mouseenter",enter.target=to,enter.relatedTarget=from,EventPropagators.accumulateEnterLeaveDispatches(leave,enter,fromID,toID),extractedEvents[0]=leave,extractedEvents[1]=enter,extractedEvents}};module.exports=EnterLeaveEventPlugin;


},{"./EventConstants":247,"./EventPropagators":252,"./ReactMount":308,"./SyntheticMouseEvent":344,"./keyOf":389}],247:[function(require,module,exports){
"use strict";var keyMirror=require("./keyMirror"),PropagationPhases=keyMirror({bubbled:null,captured:null}),topLevelTypes=keyMirror({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),EventConstants={topLevelTypes:topLevelTypes,PropagationPhases:PropagationPhases};module.exports=EventConstants;


},{"./keyMirror":388}],248:[function(require,module,exports){
(function (process){
var emptyFunction=require("./emptyFunction"),EventListener={listen:function(target,eventType,callback){return target.addEventListener?(target.addEventListener(eventType,callback,!1),{remove:function(){target.removeEventListener(eventType,callback,!1)}}):target.attachEvent?(target.attachEvent("on"+eventType,callback),{remove:function(){target.detachEvent("on"+eventType,callback)}}):void 0},capture:function(target,eventType,callback){return target.addEventListener?(target.addEventListener(eventType,callback,!0),{remove:function(){target.removeEventListener(eventType,callback,!0)}}):("production"!==process.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:emptyFunction})},registerDefault:function(){}};module.exports=EventListener;


}).call(this,require('_process'))

},{"./emptyFunction":361,"_process":106}],249:[function(require,module,exports){
(function (process){
"use strict";function validateInstanceHandle(){var valid=InstanceHandle&&InstanceHandle.traverseTwoPhase&&InstanceHandle.traverseEnterLeave;"production"!==process.env.NODE_ENV?invariant(valid,"InstanceHandle not injected before use!"):invariant(valid)}var EventPluginRegistry=require("./EventPluginRegistry"),EventPluginUtils=require("./EventPluginUtils"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("./invariant"),listenerBank={},eventQueue=null,executeDispatchesAndRelease=function(event){if(event){var executeDispatch=EventPluginUtils.executeDispatch,PluginModule=EventPluginRegistry.getPluginModuleForEvent(event);PluginModule&&PluginModule.executeDispatch&&(executeDispatch=PluginModule.executeDispatch),EventPluginUtils.executeDispatchesInOrder(event,executeDispatch),event.isPersistent()||event.constructor.release(event)}},InstanceHandle=null,EventPluginHub={injection:{injectMount:EventPluginUtils.injection.injectMount,injectInstanceHandle:function(InjectedInstanceHandle){InstanceHandle=InjectedInstanceHandle,"production"!==process.env.NODE_ENV&&validateInstanceHandle()},getInstanceHandle:function(){return"production"!==process.env.NODE_ENV&&validateInstanceHandle(),InstanceHandle},injectEventPluginOrder:EventPluginRegistry.injectEventPluginOrder,injectEventPluginsByName:EventPluginRegistry.injectEventPluginsByName},eventNameDispatchConfigs:EventPluginRegistry.eventNameDispatchConfigs,registrationNameModules:EventPluginRegistry.registrationNameModules,putListener:function(id,registrationName,listener){"production"!==process.env.NODE_ENV?invariant(!listener||"function"==typeof listener,"Expected %s listener to be a function, instead got type %s",registrationName,typeof listener):invariant(!listener||"function"==typeof listener);var bankForRegistrationName=listenerBank[registrationName]||(listenerBank[registrationName]={});bankForRegistrationName[id]=listener},getListener:function(id,registrationName){var bankForRegistrationName=listenerBank[registrationName];return bankForRegistrationName&&bankForRegistrationName[id]},deleteListener:function(id,registrationName){var bankForRegistrationName=listenerBank[registrationName];bankForRegistrationName&&delete bankForRegistrationName[id]},deleteAllListeners:function(id){for(var registrationName in listenerBank)delete listenerBank[registrationName][id]},extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){for(var events,plugins=EventPluginRegistry.plugins,i=0,l=plugins.length;l>i;i++){var possiblePlugin=plugins[i];if(possiblePlugin){var extractedEvents=possiblePlugin.extractEvents(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent);extractedEvents&&(events=accumulateInto(events,extractedEvents))}}return events},enqueueEvents:function(events){events&&(eventQueue=accumulateInto(eventQueue,events))},processEventQueue:function(){var processingEventQueue=eventQueue;eventQueue=null,forEachAccumulated(processingEventQueue,executeDispatchesAndRelease),"production"!==process.env.NODE_ENV?invariant(!eventQueue,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):invariant(!eventQueue)},__purge:function(){listenerBank={}},__getListenerBank:function(){return listenerBank}};module.exports=EventPluginHub;


}).call(this,require('_process'))

},{"./EventPluginRegistry":250,"./EventPluginUtils":251,"./accumulateInto":350,"./forEachAccumulated":367,"./invariant":382,"_process":106}],250:[function(require,module,exports){
(function (process){
"use strict";function recomputePluginOrdering(){if(EventPluginOrder)for(var pluginName in namesToPlugins){var PluginModule=namesToPlugins[pluginName],pluginIndex=EventPluginOrder.indexOf(pluginName);if("production"!==process.env.NODE_ENV?invariant(pluginIndex>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",pluginName):invariant(pluginIndex>-1),!EventPluginRegistry.plugins[pluginIndex]){"production"!==process.env.NODE_ENV?invariant(PluginModule.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",pluginName):invariant(PluginModule.extractEvents),EventPluginRegistry.plugins[pluginIndex]=PluginModule;var publishedEvents=PluginModule.eventTypes;for(var eventName in publishedEvents)"production"!==process.env.NODE_ENV?invariant(publishEventForPlugin(publishedEvents[eventName],PluginModule,eventName),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",eventName,pluginName):invariant(publishEventForPlugin(publishedEvents[eventName],PluginModule,eventName))}}}function publishEventForPlugin(dispatchConfig,PluginModule,eventName){"production"!==process.env.NODE_ENV?invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",eventName):invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)),EventPluginRegistry.eventNameDispatchConfigs[eventName]=dispatchConfig;var phasedRegistrationNames=dispatchConfig.phasedRegistrationNames;if(phasedRegistrationNames){for(var phaseName in phasedRegistrationNames)if(phasedRegistrationNames.hasOwnProperty(phaseName)){var phasedRegistrationName=phasedRegistrationNames[phaseName];publishRegistrationName(phasedRegistrationName,PluginModule,eventName)}return!0}return dispatchConfig.registrationName?(publishRegistrationName(dispatchConfig.registrationName,PluginModule,eventName),!0):!1}function publishRegistrationName(registrationName,PluginModule,eventName){"production"!==process.env.NODE_ENV?invariant(!EventPluginRegistry.registrationNameModules[registrationName],"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",registrationName):invariant(!EventPluginRegistry.registrationNameModules[registrationName]),EventPluginRegistry.registrationNameModules[registrationName]=PluginModule,EventPluginRegistry.registrationNameDependencies[registrationName]=PluginModule.eventTypes[eventName].dependencies}var invariant=require("./invariant"),EventPluginOrder=null,namesToPlugins={},EventPluginRegistry={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(InjectedEventPluginOrder){"production"!==process.env.NODE_ENV?invariant(!EventPluginOrder,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):invariant(!EventPluginOrder),EventPluginOrder=Array.prototype.slice.call(InjectedEventPluginOrder),recomputePluginOrdering()},injectEventPluginsByName:function(injectedNamesToPlugins){var isOrderingDirty=!1;for(var pluginName in injectedNamesToPlugins)if(injectedNamesToPlugins.hasOwnProperty(pluginName)){var PluginModule=injectedNamesToPlugins[pluginName];namesToPlugins.hasOwnProperty(pluginName)&&namesToPlugins[pluginName]===PluginModule||("production"!==process.env.NODE_ENV?invariant(!namesToPlugins[pluginName],"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",pluginName):invariant(!namesToPlugins[pluginName]),namesToPlugins[pluginName]=PluginModule,isOrderingDirty=!0)}isOrderingDirty&&recomputePluginOrdering()},getPluginModuleForEvent:function(event){var dispatchConfig=event.dispatchConfig;if(dispatchConfig.registrationName)return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName]||null;for(var phase in dispatchConfig.phasedRegistrationNames)if(dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)){var PluginModule=EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];if(PluginModule)return PluginModule}return null},_resetEventPlugins:function(){EventPluginOrder=null;for(var pluginName in namesToPlugins)namesToPlugins.hasOwnProperty(pluginName)&&delete namesToPlugins[pluginName];EventPluginRegistry.plugins.length=0;var eventNameDispatchConfigs=EventPluginRegistry.eventNameDispatchConfigs;for(var eventName in eventNameDispatchConfigs)eventNameDispatchConfigs.hasOwnProperty(eventName)&&delete eventNameDispatchConfigs[eventName];var registrationNameModules=EventPluginRegistry.registrationNameModules;for(var registrationName in registrationNameModules)registrationNameModules.hasOwnProperty(registrationName)&&delete registrationNameModules[registrationName]}};module.exports=EventPluginRegistry;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],251:[function(require,module,exports){
(function (process){
"use strict";function isEndish(topLevelType){return topLevelType===topLevelTypes.topMouseUp||topLevelType===topLevelTypes.topTouchEnd||topLevelType===topLevelTypes.topTouchCancel}function isMoveish(topLevelType){return topLevelType===topLevelTypes.topMouseMove||topLevelType===topLevelTypes.topTouchMove}function isStartish(topLevelType){return topLevelType===topLevelTypes.topMouseDown||topLevelType===topLevelTypes.topTouchStart}function forEachEventDispatch(event,cb){var dispatchListeners=event._dispatchListeners,dispatchIDs=event._dispatchIDs;if("production"!==process.env.NODE_ENV&&validateEventDispatches(event),Array.isArray(dispatchListeners))for(var i=0;i<dispatchListeners.length&&!event.isPropagationStopped();i++)cb(event,dispatchListeners[i],dispatchIDs[i]);else dispatchListeners&&cb(event,dispatchListeners,dispatchIDs)}function executeDispatch(event,listener,domID){event.currentTarget=injection.Mount.getNode(domID);var returnValue=listener(event,domID);return event.currentTarget=null,returnValue}function executeDispatchesInOrder(event,cb){forEachEventDispatch(event,cb),event._dispatchListeners=null,event._dispatchIDs=null}function executeDispatchesInOrderStopAtTrueImpl(event){var dispatchListeners=event._dispatchListeners,dispatchIDs=event._dispatchIDs;if("production"!==process.env.NODE_ENV&&validateEventDispatches(event),Array.isArray(dispatchListeners)){for(var i=0;i<dispatchListeners.length&&!event.isPropagationStopped();i++)if(dispatchListeners[i](event,dispatchIDs[i]))return dispatchIDs[i]}else if(dispatchListeners&&dispatchListeners(event,dispatchIDs))return dispatchIDs;return null}function executeDispatchesInOrderStopAtTrue(event){var ret=executeDispatchesInOrderStopAtTrueImpl(event);return event._dispatchIDs=null,event._dispatchListeners=null,ret}function executeDirectDispatch(event){"production"!==process.env.NODE_ENV&&validateEventDispatches(event);var dispatchListener=event._dispatchListeners,dispatchID=event._dispatchIDs;"production"!==process.env.NODE_ENV?invariant(!Array.isArray(dispatchListener),"executeDirectDispatch(...): Invalid `event`."):invariant(!Array.isArray(dispatchListener));var res=dispatchListener?dispatchListener(event,dispatchID):null;return event._dispatchListeners=null,event._dispatchIDs=null,res}function hasDispatches(event){return!!event._dispatchListeners}var EventConstants=require("./EventConstants"),invariant=require("./invariant"),injection={Mount:null,injectMount:function(InjectedMount){injection.Mount=InjectedMount,"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?invariant(InjectedMount&&InjectedMount.getNode,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode."):invariant(InjectedMount&&InjectedMount.getNode))}},topLevelTypes=EventConstants.topLevelTypes,validateEventDispatches;"production"!==process.env.NODE_ENV&&(validateEventDispatches=function(event){var dispatchListeners=event._dispatchListeners,dispatchIDs=event._dispatchIDs,listenersIsArr=Array.isArray(dispatchListeners),idsIsArr=Array.isArray(dispatchIDs),IDsLen=idsIsArr?dispatchIDs.length:dispatchIDs?1:0,listenersLen=listenersIsArr?dispatchListeners.length:dispatchListeners?1:0;"production"!==process.env.NODE_ENV?invariant(idsIsArr===listenersIsArr&&IDsLen===listenersLen,"EventPluginUtils: Invalid `event`."):invariant(idsIsArr===listenersIsArr&&IDsLen===listenersLen)});var EventPluginUtils={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatch:executeDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,injection:injection,useTouchEvents:!1};module.exports=EventPluginUtils;


}).call(this,require('_process'))

},{"./EventConstants":247,"./invariant":382,"_process":106}],252:[function(require,module,exports){
(function (process){
"use strict";function listenerAtPhase(id,event,propagationPhase){var registrationName=event.dispatchConfig.phasedRegistrationNames[propagationPhase];return getListener(id,registrationName)}function accumulateDirectionalDispatches(domID,upwards,event){if("production"!==process.env.NODE_ENV&&!domID)throw new Error("Dispatching id must not be null");var phase=upwards?PropagationPhases.bubbled:PropagationPhases.captured,listener=listenerAtPhase(domID,event,phase);listener&&(event._dispatchListeners=accumulateInto(event._dispatchListeners,listener),event._dispatchIDs=accumulateInto(event._dispatchIDs,domID))}function accumulateTwoPhaseDispatchesSingle(event){event&&event.dispatchConfig.phasedRegistrationNames&&EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker,accumulateDirectionalDispatches,event)}function accumulateDispatches(id,ignoredDirection,event){if(event&&event.dispatchConfig.registrationName){var registrationName=event.dispatchConfig.registrationName,listener=getListener(id,registrationName);listener&&(event._dispatchListeners=accumulateInto(event._dispatchListeners,listener),event._dispatchIDs=accumulateInto(event._dispatchIDs,id))}}function accumulateDirectDispatchesSingle(event){event&&event.dispatchConfig.registrationName&&accumulateDispatches(event.dispatchMarker,null,event)}function accumulateTwoPhaseDispatches(events){forEachAccumulated(events,accumulateTwoPhaseDispatchesSingle)}function accumulateEnterLeaveDispatches(leave,enter,fromID,toID){EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID,toID,accumulateDispatches,leave,enter)}function accumulateDirectDispatches(events){forEachAccumulated(events,accumulateDirectDispatchesSingle)}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),PropagationPhases=EventConstants.PropagationPhases,getListener=EventPluginHub.getListener,EventPropagators={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches};module.exports=EventPropagators;


}).call(this,require('_process'))

},{"./EventConstants":247,"./EventPluginHub":249,"./accumulateInto":350,"./forEachAccumulated":367,"_process":106}],253:[function(require,module,exports){
"use strict";var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:canUseDOM&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:canUseDOM&&!!window.screen,isInWorker:!canUseDOM};module.exports=ExecutionEnvironment;


},{}],254:[function(require,module,exports){
"use strict";function FallbackCompositionState(root){this._root=root,this._startText=this.getText(),this._fallbackText=null}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),getTextContentAccessor=require("./getTextContentAccessor");assign(FallbackCompositionState.prototype,{getText:function(){return"value"in this._root?this._root.value:this._root[getTextContentAccessor()]},getData:function(){if(this._fallbackText)return this._fallbackText;var start,end,startValue=this._startText,startLength=startValue.length,endValue=this.getText(),endLength=endValue.length;for(start=0;startLength>start&&startValue[start]===endValue[start];start++);var minEnd=startLength-start;for(end=1;minEnd>=end&&startValue[startLength-end]===endValue[endLength-end];end++);var sliceTail=end>1?1-end:void 0;return this._fallbackText=endValue.slice(start,sliceTail),this._fallbackText}}),PooledClass.addPoolingTo(FallbackCompositionState),module.exports=FallbackCompositionState;


},{"./Object.assign":260,"./PooledClass":261,"./getTextContentAccessor":377}],255:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),ExecutionEnvironment=require("./ExecutionEnvironment"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,MUST_USE_PROPERTY=DOMProperty.injection.MUST_USE_PROPERTY,HAS_BOOLEAN_VALUE=DOMProperty.injection.HAS_BOOLEAN_VALUE,HAS_SIDE_EFFECTS=DOMProperty.injection.HAS_SIDE_EFFECTS,HAS_NUMERIC_VALUE=DOMProperty.injection.HAS_NUMERIC_VALUE,HAS_POSITIVE_NUMERIC_VALUE=DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE,HAS_OVERLOADED_BOOLEAN_VALUE=DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE,hasSVG;if(ExecutionEnvironment.canUseDOM){var implementation=document.implementation;hasSVG=implementation&&implementation.hasFeature&&implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var HTMLDOMPropertyConfig={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,allowTransparency:MUST_USE_ATTRIBUTE,alt:null,async:HAS_BOOLEAN_VALUE,autoComplete:null,autoPlay:HAS_BOOLEAN_VALUE,cellPadding:null,cellSpacing:null,charSet:MUST_USE_ATTRIBUTE,checked:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,classID:MUST_USE_ATTRIBUTE,className:hasSVG?MUST_USE_ATTRIBUTE:MUST_USE_PROPERTY,cols:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,colSpan:null,content:null,contentEditable:null,contextMenu:MUST_USE_ATTRIBUTE,controls:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,coords:null,crossOrigin:null,data:null,dateTime:MUST_USE_ATTRIBUTE,defer:HAS_BOOLEAN_VALUE,dir:null,disabled:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,download:HAS_OVERLOADED_BOOLEAN_VALUE,draggable:null,encType:null,form:MUST_USE_ATTRIBUTE,formAction:MUST_USE_ATTRIBUTE,formEncType:MUST_USE_ATTRIBUTE,formMethod:MUST_USE_ATTRIBUTE,formNoValidate:HAS_BOOLEAN_VALUE,formTarget:MUST_USE_ATTRIBUTE,frameBorder:MUST_USE_ATTRIBUTE,headers:null,height:MUST_USE_ATTRIBUTE,hidden:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:MUST_USE_PROPERTY,label:null,lang:null,list:MUST_USE_ATTRIBUTE,loop:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,low:null,manifest:MUST_USE_ATTRIBUTE,marginHeight:null,marginWidth:null,max:null,maxLength:MUST_USE_ATTRIBUTE,media:MUST_USE_ATTRIBUTE,mediaGroup:null,method:null,min:null,multiple:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,muted:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,name:null,noValidate:HAS_BOOLEAN_VALUE,open:HAS_BOOLEAN_VALUE,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,rel:null,required:HAS_BOOLEAN_VALUE,role:MUST_USE_ATTRIBUTE,rows:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,rowSpan:null,sandbox:null,scope:null,scoped:HAS_BOOLEAN_VALUE,scrolling:null,seamless:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,selected:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,shape:null,size:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,sizes:MUST_USE_ATTRIBUTE,span:HAS_POSITIVE_NUMERIC_VALUE,spellCheck:null,src:null,srcDoc:MUST_USE_PROPERTY,srcSet:MUST_USE_ATTRIBUTE,start:HAS_NUMERIC_VALUE,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:MUST_USE_PROPERTY|HAS_SIDE_EFFECTS,width:MUST_USE_ATTRIBUTE,wmode:MUST_USE_ATTRIBUTE,autoCapitalize:null,autoCorrect:null,itemProp:MUST_USE_ATTRIBUTE,itemScope:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,itemType:MUST_USE_ATTRIBUTE,itemID:MUST_USE_ATTRIBUTE,itemRef:MUST_USE_ATTRIBUTE,property:null,unselectable:MUST_USE_ATTRIBUTE},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};module.exports=HTMLDOMPropertyConfig;


},{"./DOMProperty":242,"./ExecutionEnvironment":253}],256:[function(require,module,exports){
"use strict";var ReactLink=require("./ReactLink"),ReactStateSetters=require("./ReactStateSetters"),LinkedStateMixin={linkState:function(key){return new ReactLink(this.state[key],ReactStateSetters.createStateKeySetter(this,key))}};module.exports=LinkedStateMixin;


},{"./ReactLink":306,"./ReactStateSetters":325}],257:[function(require,module,exports){
(function (process){
"use strict";function _assertSingleLink(input){"production"!==process.env.NODE_ENV?invariant(null==input.props.checkedLink||null==input.props.valueLink,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):invariant(null==input.props.checkedLink||null==input.props.valueLink)}function _assertValueLink(input){_assertSingleLink(input),"production"!==process.env.NODE_ENV?invariant(null==input.props.value&&null==input.props.onChange,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):invariant(null==input.props.value&&null==input.props.onChange)}function _assertCheckedLink(input){_assertSingleLink(input),"production"!==process.env.NODE_ENV?invariant(null==input.props.checked&&null==input.props.onChange,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):invariant(null==input.props.checked&&null==input.props.onChange)}function _handleLinkedValueChange(e){this.props.valueLink.requestChange(e.target.value)}function _handleLinkedCheckChange(e){this.props.checkedLink.requestChange(e.target.checked)}var ReactPropTypes=require("./ReactPropTypes"),invariant=require("./invariant"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},LinkedValueUtils={Mixin:{propTypes:{value:function(props,propName,componentName){return!props[propName]||hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(props,propName,componentName){return!props[propName]||props.onChange||props.readOnly||props.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:ReactPropTypes.func}},getValue:function(input){return input.props.valueLink?(_assertValueLink(input),input.props.valueLink.value):input.props.value},getChecked:function(input){return input.props.checkedLink?(_assertCheckedLink(input),input.props.checkedLink.value):input.props.checked},getOnChange:function(input){return input.props.valueLink?(_assertValueLink(input),_handleLinkedValueChange):input.props.checkedLink?(_assertCheckedLink(input),_handleLinkedCheckChange):input.props.onChange}};module.exports=LinkedValueUtils;


}).call(this,require('_process'))

},{"./ReactPropTypes":317,"./invariant":382,"_process":106}],258:[function(require,module,exports){
(function (process){
"use strict";function remove(event){event.remove()}var ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("./invariant"),LocalEventTrapMixin={trapBubbledEvent:function(topLevelType,handlerBaseName){"production"!==process.env.NODE_ENV?invariant(this.isMounted(),"Must be mounted to trap events"):invariant(this.isMounted());var node=this.getDOMNode();"production"!==process.env.NODE_ENV?invariant(node,"LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered."):invariant(node);var listener=ReactBrowserEventEmitter.trapBubbledEvent(topLevelType,handlerBaseName,node);this._localEventListeners=accumulateInto(this._localEventListeners,listener)},componentWillUnmount:function(){this._localEventListeners&&forEachAccumulated(this._localEventListeners,remove)}};module.exports=LocalEventTrapMixin;


}).call(this,require('_process'))

},{"./ReactBrowserEventEmitter":264,"./accumulateInto":350,"./forEachAccumulated":367,"./invariant":382,"_process":106}],259:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),emptyFunction=require("./emptyFunction"),topLevelTypes=EventConstants.topLevelTypes,MobileSafariClickEventPlugin={eventTypes:null,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){if(topLevelType===topLevelTypes.topTouchStart){var target=nativeEvent.target;target&&!target.onclick&&(target.onclick=emptyFunction)}}};module.exports=MobileSafariClickEventPlugin;


},{"./EventConstants":247,"./emptyFunction":361}],260:[function(require,module,exports){
"use strict";function assign(target,sources){if(null==target)throw new TypeError("Object.assign target cannot be null or undefined");for(var to=Object(target),hasOwnProperty=Object.prototype.hasOwnProperty,nextIndex=1;nextIndex<arguments.length;nextIndex++){var nextSource=arguments[nextIndex];if(null!=nextSource){var from=Object(nextSource);for(var key in from)hasOwnProperty.call(from,key)&&(to[key]=from[key])}}return to}module.exports=assign;


},{}],261:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),oneArgumentPooler=function(copyFieldsFrom){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,copyFieldsFrom),instance}return new Klass(copyFieldsFrom)},twoArgumentPooler=function(a1,a2){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,a1,a2),instance}return new Klass(a1,a2)},threeArgumentPooler=function(a1,a2,a3){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,a1,a2,a3),instance}return new Klass(a1,a2,a3)},fiveArgumentPooler=function(a1,a2,a3,a4,a5){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,a1,a2,a3,a4,a5),instance}return new Klass(a1,a2,a3,a4,a5)},standardReleaser=function(instance){var Klass=this;"production"!==process.env.NODE_ENV?invariant(instance instanceof Klass,"Trying to release an instance into a pool of a different type."):invariant(instance instanceof Klass),instance.destructor&&instance.destructor(),Klass.instancePool.length<Klass.poolSize&&Klass.instancePool.push(instance)},DEFAULT_POOL_SIZE=10,DEFAULT_POOLER=oneArgumentPooler,addPoolingTo=function(CopyConstructor,pooler){var NewKlass=CopyConstructor;return NewKlass.instancePool=[],NewKlass.getPooled=pooler||DEFAULT_POOLER,NewKlass.poolSize||(NewKlass.poolSize=DEFAULT_POOL_SIZE),NewKlass.release=standardReleaser,NewKlass},PooledClass={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fiveArgumentPooler:fiveArgumentPooler};module.exports=PooledClass;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],262:[function(require,module,exports){
(function (process){
"use strict";var EventPluginUtils=require("./EventPluginUtils"),ReactChildren=require("./ReactChildren"),ReactComponent=require("./ReactComponent"),ReactClass=require("./ReactClass"),ReactContext=require("./ReactContext"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactDOM=require("./ReactDOM"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactDefaultInjection=require("./ReactDefaultInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),ReactPropTypes=require("./ReactPropTypes"),ReactReconciler=require("./ReactReconciler"),ReactServerRendering=require("./ReactServerRendering"),assign=require("./Object.assign"),findDOMNode=require("./findDOMNode"),onlyChild=require("./onlyChild");ReactDefaultInjection.inject();var createElement=ReactElement.createElement,createFactory=ReactElement.createFactory,cloneElement=ReactElement.cloneElement;"production"!==process.env.NODE_ENV&&(createElement=ReactElementValidator.createElement,createFactory=ReactElementValidator.createFactory,cloneElement=ReactElementValidator.cloneElement);var render=ReactPerf.measure("React","render",ReactMount.render),React={Children:{map:ReactChildren.map,forEach:ReactChildren.forEach,count:ReactChildren.count,only:onlyChild},Component:ReactComponent,DOM:ReactDOM,PropTypes:ReactPropTypes,initializeTouchEvents:function(shouldUseTouch){EventPluginUtils.useTouchEvents=shouldUseTouch},createClass:ReactClass.createClass,createElement:createElement,cloneElement:cloneElement,createFactory:createFactory,createMixin:function(mixin){return mixin},constructAndRenderComponent:ReactMount.constructAndRenderComponent,constructAndRenderComponentByID:ReactMount.constructAndRenderComponentByID,findDOMNode:findDOMNode,render:render,renderToString:ReactServerRendering.renderToString,renderToStaticMarkup:ReactServerRendering.renderToStaticMarkup,unmountComponentAtNode:ReactMount.unmountComponentAtNode,isValidElement:ReactElement.isValidElement,withContext:ReactContext.withContext,__spread:assign};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:ReactCurrentOwner,InstanceHandles:ReactInstanceHandles,Mount:ReactMount,Reconciler:ReactReconciler,TextComponent:ReactDOMTextComponent}),"production"!==process.env.NODE_ENV){var ExecutionEnvironment=require("./ExecutionEnvironment");if(ExecutionEnvironment.canUseDOM&&window.top===window.self){navigator.userAgent.indexOf("Chrome")>-1&&"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&console.debug("Download the React DevTools for a better development experience: https://fb.me/react-devtools");for(var expectedFeatures=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],i=0;i<expectedFeatures.length;i++)if(!expectedFeatures[i]){console.error("One or more ES5 shim/shams expected by React are not available: https://fb.me/react-warning-polyfills");break}}}React.version="0.13.3",module.exports=React;


}).call(this,require('_process'))

},{"./EventPluginUtils":251,"./ExecutionEnvironment":253,"./Object.assign":260,"./ReactChildren":268,"./ReactClass":269,"./ReactComponent":270,"./ReactContext":275,"./ReactCurrentOwner":276,"./ReactDOM":277,"./ReactDOMTextComponent":288,"./ReactDefaultInjection":291,"./ReactElement":294,"./ReactElementValidator":295,"./ReactInstanceHandles":303,"./ReactMount":308,"./ReactPerf":313,"./ReactPropTypes":317,"./ReactReconciler":320,"./ReactServerRendering":323,"./findDOMNode":364,"./onlyChild":392,"_process":106}],263:[function(require,module,exports){
"use strict";var findDOMNode=require("./findDOMNode"),ReactBrowserComponentMixin={getDOMNode:function(){return findDOMNode(this)}};module.exports=ReactBrowserComponentMixin;


},{"./findDOMNode":364}],264:[function(require,module,exports){
"use strict";function getListeningForDocument(mountAt){return Object.prototype.hasOwnProperty.call(mountAt,topListenersIDKey)||(mountAt[topListenersIDKey]=reactTopListenersCounter++,alreadyListeningTo[mountAt[topListenersIDKey]]={}),alreadyListeningTo[mountAt[topListenersIDKey]]}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPluginRegistry=require("./EventPluginRegistry"),ReactEventEmitterMixin=require("./ReactEventEmitterMixin"),ViewportMetrics=require("./ViewportMetrics"),assign=require("./Object.assign"),isEventSupported=require("./isEventSupported"),alreadyListeningTo={},isMonitoringScrollValue=!1,reactTopListenersCounter=0,topEventMapping={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},topListenersIDKey="_reactListenersID"+String(Math.random()).slice(2),ReactBrowserEventEmitter=assign({},ReactEventEmitterMixin,{ReactEventListener:null,injection:{injectReactEventListener:function(ReactEventListener){ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel),ReactBrowserEventEmitter.ReactEventListener=ReactEventListener}},setEnabled:function(enabled){ReactBrowserEventEmitter.ReactEventListener&&ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled)},isEnabled:function(){return!(!ReactBrowserEventEmitter.ReactEventListener||!ReactBrowserEventEmitter.ReactEventListener.isEnabled())},listenTo:function(registrationName,contentDocumentHandle){for(var mountAt=contentDocumentHandle,isListening=getListeningForDocument(mountAt),dependencies=EventPluginRegistry.registrationNameDependencies[registrationName],topLevelTypes=EventConstants.topLevelTypes,i=0,l=dependencies.length;l>i;i++){var dependency=dependencies[i];isListening.hasOwnProperty(dependency)&&isListening[dependency]||(dependency===topLevelTypes.topWheel?isEventSupported("wheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"wheel",mountAt):isEventSupported("mousewheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"mousewheel",mountAt):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"DOMMouseScroll",mountAt):dependency===topLevelTypes.topScroll?isEventSupported("scroll",!0)?ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll,"scroll",mountAt):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll,"scroll",ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE):dependency===topLevelTypes.topFocus||dependency===topLevelTypes.topBlur?(isEventSupported("focus",!0)?(ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus,"focus",mountAt),ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur,"blur",mountAt)):isEventSupported("focusin")&&(ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus,"focusin",mountAt),ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur,"focusout",mountAt)),isListening[topLevelTypes.topBlur]=!0,isListening[topLevelTypes.topFocus]=!0):topEventMapping.hasOwnProperty(dependency)&&ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency,topEventMapping[dependency],mountAt),isListening[dependency]=!0)}},trapBubbledEvent:function(topLevelType,handlerBaseName,handle){return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType,handlerBaseName,handle)},trapCapturedEvent:function(topLevelType,handlerBaseName,handle){return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType,handlerBaseName,handle)},ensureScrollValueMonitoring:function(){if(!isMonitoringScrollValue){var refresh=ViewportMetrics.refreshScrollValues;ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh),isMonitoringScrollValue=!0}},eventNameDispatchConfigs:EventPluginHub.eventNameDispatchConfigs,registrationNameModules:EventPluginHub.registrationNameModules,putListener:EventPluginHub.putListener,getListener:EventPluginHub.getListener,deleteListener:EventPluginHub.deleteListener,deleteAllListeners:EventPluginHub.deleteAllListeners});module.exports=ReactBrowserEventEmitter;


},{"./EventConstants":247,"./EventPluginHub":249,"./EventPluginRegistry":250,"./Object.assign":260,"./ReactEventEmitterMixin":298,"./ViewportMetrics":349,"./isEventSupported":383}],265:[function(require,module,exports){
"use strict";var React=require("./React"),assign=require("./Object.assign"),ReactTransitionGroup=React.createFactory(require("./ReactTransitionGroup")),ReactCSSTransitionGroupChild=React.createFactory(require("./ReactCSSTransitionGroupChild")),ReactCSSTransitionGroup=React.createClass({displayName:"ReactCSSTransitionGroup",propTypes:{transitionName:React.PropTypes.string.isRequired,transitionAppear:React.PropTypes.bool,transitionEnter:React.PropTypes.bool,transitionLeave:React.PropTypes.bool},getDefaultProps:function(){return{transitionAppear:!1,transitionEnter:!0,transitionLeave:!0}},_wrapChild:function(child){return ReactCSSTransitionGroupChild({name:this.props.transitionName,appear:this.props.transitionAppear,enter:this.props.transitionEnter,leave:this.props.transitionLeave},child)},render:function(){return ReactTransitionGroup(assign({},this.props,{childFactory:this._wrapChild}))}});module.exports=ReactCSSTransitionGroup;


},{"./Object.assign":260,"./React":262,"./ReactCSSTransitionGroupChild":266,"./ReactTransitionGroup":329}],266:[function(require,module,exports){
(function (process){
"use strict";var React=require("./React"),CSSCore=require("./CSSCore"),ReactTransitionEvents=require("./ReactTransitionEvents"),onlyChild=require("./onlyChild"),warning=require("./warning"),TICK=17,NO_EVENT_TIMEOUT=5e3,noEventListener=null;"production"!==process.env.NODE_ENV&&(noEventListener=function(){"production"!==process.env.NODE_ENV?warning(!1,"transition(): tried to perform an animation without an animationend or transitionend event after timeout (%sms). You should either disable this transition in JS or add a CSS animation/transition.",NO_EVENT_TIMEOUT):null});var ReactCSSTransitionGroupChild=React.createClass({displayName:"ReactCSSTransitionGroupChild",transition:function(animationType,finishCallback){var node=this.getDOMNode(),className=this.props.name+"-"+animationType,activeClassName=className+"-active",noEventTimeout=null,endListener=function(e){e&&e.target!==node||("production"!==process.env.NODE_ENV&&clearTimeout(noEventTimeout),CSSCore.removeClass(node,className),CSSCore.removeClass(node,activeClassName),ReactTransitionEvents.removeEndEventListener(node,endListener),finishCallback&&finishCallback())};ReactTransitionEvents.addEndEventListener(node,endListener),CSSCore.addClass(node,className),this.queueClass(activeClassName),"production"!==process.env.NODE_ENV&&(noEventTimeout=setTimeout(noEventListener,NO_EVENT_TIMEOUT))},queueClass:function(className){this.classNameQueue.push(className),this.timeout||(this.timeout=setTimeout(this.flushClassNameQueue,TICK))},flushClassNameQueue:function(){this.isMounted()&&this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore,this.getDOMNode())),this.classNameQueue.length=0,this.timeout=null},componentWillMount:function(){this.classNameQueue=[]},componentWillUnmount:function(){this.timeout&&clearTimeout(this.timeout)},componentWillAppear:function(done){this.props.appear?this.transition("appear",done):done()},componentWillEnter:function(done){this.props.enter?this.transition("enter",done):done()},componentWillLeave:function(done){this.props.leave?this.transition("leave",done):done()},render:function(){return onlyChild(this.props.children)}});module.exports=ReactCSSTransitionGroupChild;


}).call(this,require('_process'))

},{"./CSSCore":235,"./React":262,"./ReactTransitionEvents":328,"./onlyChild":392,"./warning":403,"_process":106}],267:[function(require,module,exports){
"use strict";var ReactReconciler=require("./ReactReconciler"),flattenChildren=require("./flattenChildren"),instantiateReactComponent=require("./instantiateReactComponent"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),ReactChildReconciler={instantiateChildren:function(nestedChildNodes,transaction,context){var children=flattenChildren(nestedChildNodes);for(var name in children)if(children.hasOwnProperty(name)){var child=children[name],childInstance=instantiateReactComponent(child,null);children[name]=childInstance}return children},updateChildren:function(prevChildren,nextNestedChildNodes,transaction,context){var nextChildren=flattenChildren(nextNestedChildNodes);if(!nextChildren&&!prevChildren)return null;var name;for(name in nextChildren)if(nextChildren.hasOwnProperty(name)){var prevChild=prevChildren&&prevChildren[name],prevElement=prevChild&&prevChild._currentElement,nextElement=nextChildren[name];if(shouldUpdateReactComponent(prevElement,nextElement))ReactReconciler.receiveComponent(prevChild,nextElement,transaction,context),nextChildren[name]=prevChild;else{prevChild&&ReactReconciler.unmountComponent(prevChild,name);var nextChildInstance=instantiateReactComponent(nextElement,null);nextChildren[name]=nextChildInstance}}for(name in prevChildren)!prevChildren.hasOwnProperty(name)||nextChildren&&nextChildren.hasOwnProperty(name)||ReactReconciler.unmountComponent(prevChildren[name]);return nextChildren},unmountChildren:function(renderedChildren){for(var name in renderedChildren){var renderedChild=renderedChildren[name];ReactReconciler.unmountComponent(renderedChild)}}};module.exports=ReactChildReconciler;


},{"./ReactReconciler":320,"./flattenChildren":365,"./instantiateReactComponent":381,"./shouldUpdateReactComponent":399}],268:[function(require,module,exports){
(function (process){
"use strict";function ForEachBookKeeping(forEachFunction,forEachContext){this.forEachFunction=forEachFunction,this.forEachContext=forEachContext}function forEachSingleChild(traverseContext,child,name,i){var forEachBookKeeping=traverseContext;forEachBookKeeping.forEachFunction.call(forEachBookKeeping.forEachContext,child,i)}function forEachChildren(children,forEachFunc,forEachContext){if(null==children)return children;var traverseContext=ForEachBookKeeping.getPooled(forEachFunc,forEachContext);traverseAllChildren(children,forEachSingleChild,traverseContext),ForEachBookKeeping.release(traverseContext)}function MapBookKeeping(mapResult,mapFunction,mapContext){this.mapResult=mapResult,this.mapFunction=mapFunction,this.mapContext=mapContext}function mapSingleChildIntoContext(traverseContext,child,name,i){var mapBookKeeping=traverseContext,mapResult=mapBookKeeping.mapResult,keyUnique=!mapResult.hasOwnProperty(name);if("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(keyUnique,"ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",name):null),keyUnique){var mappedChild=mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext,child,i);mapResult[name]=mappedChild}}function mapChildren(children,func,context){if(null==children)return children;var mapResult={},traverseContext=MapBookKeeping.getPooled(mapResult,func,context);return traverseAllChildren(children,mapSingleChildIntoContext,traverseContext),MapBookKeeping.release(traverseContext),ReactFragment.create(mapResult)}function forEachSingleChildDummy(traverseContext,child,name,i){return null}function countChildren(children,context){return traverseAllChildren(children,forEachSingleChildDummy,null)}var PooledClass=require("./PooledClass"),ReactFragment=require("./ReactFragment"),traverseAllChildren=require("./traverseAllChildren"),warning=require("./warning"),twoArgumentPooler=PooledClass.twoArgumentPooler,threeArgumentPooler=PooledClass.threeArgumentPooler;PooledClass.addPoolingTo(ForEachBookKeeping,twoArgumentPooler),PooledClass.addPoolingTo(MapBookKeeping,threeArgumentPooler);var ReactChildren={forEach:forEachChildren,map:mapChildren,count:countChildren};module.exports=ReactChildren;


}).call(this,require('_process'))

},{"./PooledClass":261,"./ReactFragment":300,"./traverseAllChildren":401,"./warning":403,"_process":106}],269:[function(require,module,exports){
(function (process){
"use strict";function validateTypeDef(Constructor,typeDef,location){for(var propName in typeDef)typeDef.hasOwnProperty(propName)&&("production"!==process.env.NODE_ENV?warning("function"==typeof typeDef[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",Constructor.displayName||"ReactClass",ReactPropTypeLocationNames[location],propName):null)}function validateMethodOverride(proto,name){var specPolicy=ReactClassInterface.hasOwnProperty(name)?ReactClassInterface[name]:null;ReactClassMixin.hasOwnProperty(name)&&("production"!==process.env.NODE_ENV?invariant(specPolicy===SpecPolicy.OVERRIDE_BASE,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",name):invariant(specPolicy===SpecPolicy.OVERRIDE_BASE)),proto.hasOwnProperty(name)&&("production"!==process.env.NODE_ENV?invariant(specPolicy===SpecPolicy.DEFINE_MANY||specPolicy===SpecPolicy.DEFINE_MANY_MERGED,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name):invariant(specPolicy===SpecPolicy.DEFINE_MANY||specPolicy===SpecPolicy.DEFINE_MANY_MERGED))}function mixSpecIntoComponent(Constructor,spec){if(spec){"production"!==process.env.NODE_ENV?invariant("function"!=typeof spec,"ReactClass: You're attempting to use a component class as a mixin. Instead, just use a regular object."):invariant("function"!=typeof spec),"production"!==process.env.NODE_ENV?invariant(!ReactElement.isValidElement(spec),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."):invariant(!ReactElement.isValidElement(spec));var proto=Constructor.prototype;spec.hasOwnProperty(MIXINS_KEY)&&RESERVED_SPEC_KEYS.mixins(Constructor,spec.mixins);for(var name in spec)if(spec.hasOwnProperty(name)&&name!==MIXINS_KEY){var property=spec[name];if(validateMethodOverride(proto,name),RESERVED_SPEC_KEYS.hasOwnProperty(name))RESERVED_SPEC_KEYS[name](Constructor,property);else{var isReactClassMethod=ReactClassInterface.hasOwnProperty(name),isAlreadyDefined=proto.hasOwnProperty(name),markedDontBind=property&&property.__reactDontBind,isFunction="function"==typeof property,shouldAutoBind=isFunction&&!isReactClassMethod&&!isAlreadyDefined&&!markedDontBind;if(shouldAutoBind)proto.__reactAutoBindMap||(proto.__reactAutoBindMap={}),proto.__reactAutoBindMap[name]=property,proto[name]=property;else if(isAlreadyDefined){var specPolicy=ReactClassInterface[name];"production"!==process.env.NODE_ENV?invariant(isReactClassMethod&&(specPolicy===SpecPolicy.DEFINE_MANY_MERGED||specPolicy===SpecPolicy.DEFINE_MANY),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",specPolicy,name):invariant(isReactClassMethod&&(specPolicy===SpecPolicy.DEFINE_MANY_MERGED||specPolicy===SpecPolicy.DEFINE_MANY)),specPolicy===SpecPolicy.DEFINE_MANY_MERGED?proto[name]=createMergedResultFunction(proto[name],property):specPolicy===SpecPolicy.DEFINE_MANY&&(proto[name]=createChainedFunction(proto[name],property))}else proto[name]=property,"production"!==process.env.NODE_ENV&&"function"==typeof property&&spec.displayName&&(proto[name].displayName=spec.displayName+"_"+name)}}}}function mixStaticSpecIntoComponent(Constructor,statics){if(statics)for(var name in statics){var property=statics[name];if(statics.hasOwnProperty(name)){var isReserved=name in RESERVED_SPEC_KEYS;"production"!==process.env.NODE_ENV?invariant(!isReserved,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',name):invariant(!isReserved);var isInherited=name in Constructor;"production"!==process.env.NODE_ENV?invariant(!isInherited,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name):invariant(!isInherited),Constructor[name]=property}}}function mergeIntoWithNoDuplicateKeys(one,two){"production"!==process.env.NODE_ENV?invariant(one&&two&&"object"==typeof one&&"object"==typeof two,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."):invariant(one&&two&&"object"==typeof one&&"object"==typeof two);for(var key in two)two.hasOwnProperty(key)&&("production"!==process.env.NODE_ENV?invariant(void 0===one[key],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",key):invariant(void 0===one[key]),one[key]=two[key]);return one}function createMergedResultFunction(one,two){return function(){var a=one.apply(this,arguments),b=two.apply(this,arguments);if(null==a)return b;if(null==b)return a;var c={};return mergeIntoWithNoDuplicateKeys(c,a),mergeIntoWithNoDuplicateKeys(c,b),c}}function createChainedFunction(one,two){return function(){one.apply(this,arguments),two.apply(this,arguments)}}function bindAutoBindMethod(component,method){var boundMethod=method.bind(component);if("production"!==process.env.NODE_ENV){boundMethod.__reactBoundContext=component,boundMethod.__reactBoundMethod=method,boundMethod.__reactBoundArguments=null;var componentName=component.constructor.displayName,_bind=boundMethod.bind;boundMethod.bind=function(newThis){for(var args=[],$__0=1,$__1=arguments.length;$__1>$__0;$__0++)args.push(arguments[$__0]);if(newThis!==component&&null!==newThis)"production"!==process.env.NODE_ENV?warning(!1,"bind(): React component methods may only be bound to the component instance. See %s",componentName):null;else if(!args.length)return"production"!==process.env.NODE_ENV?warning(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",componentName):null,boundMethod;var reboundMethod=_bind.apply(boundMethod,arguments);return reboundMethod.__reactBoundContext=component,reboundMethod.__reactBoundMethod=method,reboundMethod.__reactBoundArguments=args,reboundMethod}}return boundMethod}function bindAutoBindMethods(component){for(var autoBindKey in component.__reactAutoBindMap)if(component.__reactAutoBindMap.hasOwnProperty(autoBindKey)){var method=component.__reactAutoBindMap[autoBindKey];component[autoBindKey]=bindAutoBindMethod(component,ReactErrorUtils.guard(method,component.constructor.displayName+"."+autoBindKey))}}var ReactComponent=require("./ReactComponent"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactErrorUtils=require("./ReactErrorUtils"),ReactInstanceMap=require("./ReactInstanceMap"),ReactLifeCycle=require("./ReactLifeCycle"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactUpdateQueue=require("./ReactUpdateQueue"),assign=require("./Object.assign"),invariant=require("./invariant"),keyMirror=require("./keyMirror"),keyOf=require("./keyOf"),warning=require("./warning"),MIXINS_KEY=keyOf({mixins:null}),SpecPolicy=keyMirror({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),injectedMixins=[],ReactClassInterface={mixins:SpecPolicy.DEFINE_MANY,statics:SpecPolicy.DEFINE_MANY,propTypes:SpecPolicy.DEFINE_MANY,contextTypes:SpecPolicy.DEFINE_MANY,childContextTypes:SpecPolicy.DEFINE_MANY,getDefaultProps:SpecPolicy.DEFINE_MANY_MERGED,getInitialState:SpecPolicy.DEFINE_MANY_MERGED,getChildContext:SpecPolicy.DEFINE_MANY_MERGED,render:SpecPolicy.DEFINE_ONCE,componentWillMount:SpecPolicy.DEFINE_MANY,componentDidMount:SpecPolicy.DEFINE_MANY,componentWillReceiveProps:SpecPolicy.DEFINE_MANY,shouldComponentUpdate:SpecPolicy.DEFINE_ONCE,componentWillUpdate:SpecPolicy.DEFINE_MANY,componentDidUpdate:SpecPolicy.DEFINE_MANY,componentWillUnmount:SpecPolicy.DEFINE_MANY,updateComponent:SpecPolicy.OVERRIDE_BASE},RESERVED_SPEC_KEYS={displayName:function(Constructor,displayName){Constructor.displayName=displayName},mixins:function(Constructor,mixins){if(mixins)for(var i=0;i<mixins.length;i++)mixSpecIntoComponent(Constructor,mixins[i])},childContextTypes:function(Constructor,childContextTypes){"production"!==process.env.NODE_ENV&&validateTypeDef(Constructor,childContextTypes,ReactPropTypeLocations.childContext),Constructor.childContextTypes=assign({},Constructor.childContextTypes,childContextTypes)},contextTypes:function(Constructor,contextTypes){"production"!==process.env.NODE_ENV&&validateTypeDef(Constructor,contextTypes,ReactPropTypeLocations.context),Constructor.contextTypes=assign({},Constructor.contextTypes,contextTypes)},getDefaultProps:function(Constructor,getDefaultProps){Constructor.getDefaultProps?Constructor.getDefaultProps=createMergedResultFunction(Constructor.getDefaultProps,getDefaultProps):Constructor.getDefaultProps=getDefaultProps},propTypes:function(Constructor,propTypes){"production"!==process.env.NODE_ENV&&validateTypeDef(Constructor,propTypes,ReactPropTypeLocations.prop),Constructor.propTypes=assign({},Constructor.propTypes,propTypes)},statics:function(Constructor,statics){mixStaticSpecIntoComponent(Constructor,statics)}},typeDeprecationDescriptor={enumerable:!1,get:function(){var displayName=this.displayName||this.name||"Component";return"production"!==process.env.NODE_ENV?warning(!1,"%s.type is deprecated. Use %s directly to access the class.",displayName,displayName):null,Object.defineProperty(this,"type",{value:this}),this}},ReactClassMixin={replaceState:function(newState,callback){ReactUpdateQueue.enqueueReplaceState(this,newState),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},isMounted:function(){if("production"!==process.env.NODE_ENV){var owner=ReactCurrentOwner.current;null!==owner&&("production"!==process.env.NODE_ENV?warning(owner._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",owner.getName()||"A component"):null,owner._warnedAboutRefsInRender=!0)}var internalInstance=ReactInstanceMap.get(this);return internalInstance&&internalInstance!==ReactLifeCycle.currentlyMountingInstance},setProps:function(partialProps,callback){ReactUpdateQueue.enqueueSetProps(this,partialProps),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},replaceProps:function(newProps,callback){ReactUpdateQueue.enqueueReplaceProps(this,newProps),callback&&ReactUpdateQueue.enqueueCallback(this,callback)}},ReactClassComponent=function(){};assign(ReactClassComponent.prototype,ReactComponent.prototype,ReactClassMixin);var ReactClass={createClass:function(spec){var Constructor=function(props,context){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(this instanceof Constructor,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"):null),this.__reactAutoBindMap&&bindAutoBindMethods(this),this.props=props,this.context=context,this.state=null;var initialState=this.getInitialState?this.getInitialState():null;"production"!==process.env.NODE_ENV&&"undefined"==typeof initialState&&this.getInitialState._isMockFunction&&(initialState=null),"production"!==process.env.NODE_ENV?invariant("object"==typeof initialState&&!Array.isArray(initialState),"%s.getInitialState(): must return an object or null",Constructor.displayName||"ReactCompositeComponent"):invariant("object"==typeof initialState&&!Array.isArray(initialState)),this.state=initialState};Constructor.prototype=new ReactClassComponent,Constructor.prototype.constructor=Constructor,injectedMixins.forEach(mixSpecIntoComponent.bind(null,Constructor)),mixSpecIntoComponent(Constructor,spec),Constructor.getDefaultProps&&(Constructor.defaultProps=Constructor.getDefaultProps()),"production"!==process.env.NODE_ENV&&(Constructor.getDefaultProps&&(Constructor.getDefaultProps.isReactClassApproved={}),Constructor.prototype.getInitialState&&(Constructor.prototype.getInitialState.isReactClassApproved={})),"production"!==process.env.NODE_ENV?invariant(Constructor.prototype.render,"createClass(...): Class specification must implement a `render` method."):invariant(Constructor.prototype.render),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!Constructor.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",spec.displayName||"A component"):null);for(var methodName in ReactClassInterface)Constructor.prototype[methodName]||(Constructor.prototype[methodName]=null);if(Constructor.type=Constructor,"production"!==process.env.NODE_ENV)try{Object.defineProperty(Constructor,"type",typeDeprecationDescriptor)}catch(x){}return Constructor},injection:{injectMixin:function(mixin){injectedMixins.push(mixin)}}};module.exports=ReactClass;


}).call(this,require('_process'))

},{"./Object.assign":260,"./ReactComponent":270,"./ReactCurrentOwner":276,"./ReactElement":294,"./ReactErrorUtils":297,"./ReactInstanceMap":304,"./ReactLifeCycle":305,"./ReactPropTypeLocationNames":315,"./ReactPropTypeLocations":316,"./ReactUpdateQueue":330,"./invariant":382,"./keyMirror":388,"./keyOf":389,"./warning":403,"_process":106}],270:[function(require,module,exports){
(function (process){
"use strict";function ReactComponent(props,context){this.props=props,this.context=context}var ReactUpdateQueue=require("./ReactUpdateQueue"),invariant=require("./invariant"),warning=require("./warning");if(ReactComponent.prototype.setState=function(partialState,callback){"production"!==process.env.NODE_ENV?invariant("object"==typeof partialState||"function"==typeof partialState||null==partialState,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):invariant("object"==typeof partialState||"function"==typeof partialState||null==partialState),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null!=partialState,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):null),ReactUpdateQueue.enqueueSetState(this,partialState),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},ReactComponent.prototype.forceUpdate=function(callback){ReactUpdateQueue.enqueueForceUpdate(this),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},"production"!==process.env.NODE_ENV){var deprecatedAPIs={getDOMNode:["getDOMNode","Use React.findDOMNode(component) instead."],isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceProps:["replaceProps","Instead, call React.render again at the top level."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."],setProps:["setProps","Instead, call React.render again at the top level."]},defineDeprecationWarning=function(methodName,info){try{Object.defineProperty(ReactComponent.prototype,methodName,{get:function(){return void("production"!==process.env.NODE_ENV?warning(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",info[0],info[1]):null)}})}catch(x){}};for(var fnName in deprecatedAPIs)deprecatedAPIs.hasOwnProperty(fnName)&&defineDeprecationWarning(fnName,deprecatedAPIs[fnName])}module.exports=ReactComponent;


}).call(this,require('_process'))

},{"./ReactUpdateQueue":330,"./invariant":382,"./warning":403,"_process":106}],271:[function(require,module,exports){
"use strict";var ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactMount=require("./ReactMount"),ReactComponentBrowserEnvironment={processChildrenUpdates:ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(rootNodeID){ReactMount.purgeID(rootNodeID)}};module.exports=ReactComponentBrowserEnvironment;


},{"./ReactDOMIDOperations":281,"./ReactMount":308}],272:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),injected=!1,ReactComponentEnvironment={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(environment){"production"!==process.env.NODE_ENV?invariant(!injected,"ReactCompositeComponent: injectEnvironment() can only be called once."):invariant(!injected),ReactComponentEnvironment.unmountIDFromEnvironment=environment.unmountIDFromEnvironment,ReactComponentEnvironment.replaceNodeWithMarkupByID=environment.replaceNodeWithMarkupByID,ReactComponentEnvironment.processChildrenUpdates=environment.processChildrenUpdates,injected=!0}}};module.exports=ReactComponentEnvironment;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],273:[function(require,module,exports){
"use strict";var shallowEqual=require("./shallowEqual"),ReactComponentWithPureRenderMixin={shouldComponentUpdate:function(nextProps,nextState){return!shallowEqual(this.props,nextProps)||!shallowEqual(this.state,nextState)}};module.exports=ReactComponentWithPureRenderMixin;


},{"./shallowEqual":398}],274:[function(require,module,exports){
(function (process){
"use strict";function getDeclarationErrorAddendum(component){var owner=component._currentElement._owner||null;if(owner){var name=owner.getName();if(name)return" Check the render method of `"+name+"`."}return""}var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactContext=require("./ReactContext"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactInstanceMap=require("./ReactInstanceMap"),ReactLifeCycle=require("./ReactLifeCycle"),ReactNativeComponent=require("./ReactNativeComponent"),ReactPerf=require("./ReactPerf"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactReconciler=require("./ReactReconciler"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),emptyObject=require("./emptyObject"),invariant=require("./invariant"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("./warning"),nextMountID=1,ReactCompositeComponentMixin={construct:function(element){this._currentElement=element,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._isTopLevel=!1,this._pendingCallbacks=null},mountComponent:function(rootID,transaction,context){this._context=context,this._mountOrder=nextMountID++,this._rootNodeID=rootID;var publicProps=this._processProps(this._currentElement.props),publicContext=this._processContext(this._currentElement._context),Component=ReactNativeComponent.getComponentClassForElement(this._currentElement),inst=new Component(publicProps,publicContext);"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null!=inst.render,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render` in your component or you may have accidentally tried to render an element whose type is a function that isn't a React component.",Component.displayName||Component.name||"Component"):null),inst.props=publicProps,inst.context=publicContext,inst.refs=emptyObject,this._instance=inst,ReactInstanceMap.set(inst,this),"production"!==process.env.NODE_ENV&&this._warnIfContextsDiffer(this._currentElement._context,context),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!inst.getInitialState||inst.getInitialState.isReactClassApproved,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning(!inst.getDefaultProps||inst.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning(!inst.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning(!inst.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning("function"!=typeof inst.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"):null);var initialState=inst.state;void 0===initialState&&(inst.state=initialState=null),"production"!==process.env.NODE_ENV?invariant("object"==typeof initialState&&!Array.isArray(initialState),"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):invariant("object"==typeof initialState&&!Array.isArray(initialState)),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var childContext,renderedElement,previouslyMounting=ReactLifeCycle.currentlyMountingInstance;ReactLifeCycle.currentlyMountingInstance=this;try{inst.componentWillMount&&(inst.componentWillMount(),this._pendingStateQueue&&(inst.state=this._processPendingState(inst.props,inst.context))),childContext=this._getValidatedChildContext(context),renderedElement=this._renderValidatedComponent(childContext)}finally{ReactLifeCycle.currentlyMountingInstance=previouslyMounting}this._renderedComponent=this._instantiateReactComponent(renderedElement,this._currentElement.type);var markup=ReactReconciler.mountComponent(this._renderedComponent,rootID,transaction,this._mergeChildContext(context,childContext));return inst.componentDidMount&&transaction.getReactMountReady().enqueue(inst.componentDidMount,inst),markup},unmountComponent:function(){var inst=this._instance;if(inst.componentWillUnmount){var previouslyUnmounting=ReactLifeCycle.currentlyUnmountingInstance;ReactLifeCycle.currentlyUnmountingInstance=this;try{inst.componentWillUnmount()}finally{ReactLifeCycle.currentlyUnmountingInstance=previouslyUnmounting}}ReactReconciler.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,ReactInstanceMap.remove(inst)},_setPropsInternal:function(partialProps,callback){var element=this._pendingElement||this._currentElement;this._pendingElement=ReactElement.cloneAndReplaceProps(element,assign({},element.props,partialProps)),ReactUpdates.enqueueUpdate(this,callback)},_maskContext:function(context){var maskedContext=null;if("string"==typeof this._currentElement.type)return emptyObject;var contextTypes=this._currentElement.type.contextTypes;if(!contextTypes)return emptyObject;maskedContext={};for(var contextName in contextTypes)maskedContext[contextName]=context[contextName];return maskedContext},_processContext:function(context){var maskedContext=this._maskContext(context);if("production"!==process.env.NODE_ENV){var Component=ReactNativeComponent.getComponentClassForElement(this._currentElement);Component.contextTypes&&this._checkPropTypes(Component.contextTypes,maskedContext,ReactPropTypeLocations.context)}return maskedContext},_getValidatedChildContext:function(currentContext){var inst=this._instance,childContext=inst.getChildContext&&inst.getChildContext();if(childContext){"production"!==process.env.NODE_ENV?invariant("object"==typeof inst.constructor.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):invariant("object"==typeof inst.constructor.childContextTypes),"production"!==process.env.NODE_ENV&&this._checkPropTypes(inst.constructor.childContextTypes,childContext,ReactPropTypeLocations.childContext);for(var name in childContext)"production"!==process.env.NODE_ENV?invariant(name in inst.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",name):invariant(name in inst.constructor.childContextTypes);return childContext}return null},_mergeChildContext:function(currentContext,childContext){return childContext?assign({},currentContext,childContext):currentContext},_processProps:function(newProps){if("production"!==process.env.NODE_ENV){var Component=ReactNativeComponent.getComponentClassForElement(this._currentElement);Component.propTypes&&this._checkPropTypes(Component.propTypes,newProps,ReactPropTypeLocations.prop)}return newProps},_checkPropTypes:function(propTypes,props,location){var componentName=this.getName();for(var propName in propTypes)if(propTypes.hasOwnProperty(propName)){var error;try{"production"!==process.env.NODE_ENV?invariant("function"==typeof propTypes[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",componentName||"React class",ReactPropTypeLocationNames[location],propName):invariant("function"==typeof propTypes[propName]),error=propTypes[propName](props,propName,componentName,location)}catch(ex){error=ex}if(error instanceof Error){var addendum=getDeclarationErrorAddendum(this);location===ReactPropTypeLocations.prop?"production"!==process.env.NODE_ENV?warning(!1,"Failed Composite propType: %s%s",error.message,addendum):null:"production"!==process.env.NODE_ENV?warning(!1,"Failed Context Types: %s%s",error.message,addendum):null}}},receiveComponent:function(nextElement,transaction,nextContext){var prevElement=this._currentElement,prevContext=this._context;this._pendingElement=null,this.updateComponent(transaction,prevElement,nextElement,prevContext,nextContext)},performUpdateIfNecessary:function(transaction){null!=this._pendingElement&&ReactReconciler.receiveComponent(this,this._pendingElement||this._currentElement,transaction,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&("production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(this._currentElement),this.updateComponent(transaction,this._currentElement,this._currentElement,this._context,this._context))},_warnIfContextsDiffer:function(ownerBasedContext,parentBasedContext){ownerBasedContext=this._maskContext(ownerBasedContext),parentBasedContext=this._maskContext(parentBasedContext);for(var parentKeys=Object.keys(parentBasedContext).sort(),displayName=this.getName()||"ReactCompositeComponent",i=0;i<parentKeys.length;i++){var key=parentKeys[i];"production"!==process.env.NODE_ENV?warning(ownerBasedContext[key]===parentBasedContext[key],"owner-based and parent-based contexts differ (values: `%s` vs `%s`) for key (%s) while mounting %s (see: http://fb.me/react-context-by-parent)",ownerBasedContext[key],parentBasedContext[key],key,displayName):null}},updateComponent:function(transaction,prevParentElement,nextParentElement,prevUnmaskedContext,nextUnmaskedContext){var inst=this._instance,nextContext=inst.context,nextProps=inst.props;prevParentElement!==nextParentElement&&(nextContext=this._processContext(nextParentElement._context),nextProps=this._processProps(nextParentElement.props),"production"!==process.env.NODE_ENV&&null!=nextUnmaskedContext&&this._warnIfContextsDiffer(nextParentElement._context,nextUnmaskedContext),inst.componentWillReceiveProps&&inst.componentWillReceiveProps(nextProps,nextContext));var nextState=this._processPendingState(nextProps,nextContext),shouldUpdate=this._pendingForceUpdate||!inst.shouldComponentUpdate||inst.shouldComponentUpdate(nextProps,nextState,nextContext);"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning("undefined"!=typeof shouldUpdate,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"):null),shouldUpdate?(this._pendingForceUpdate=!1,this._performComponentUpdate(nextParentElement,nextProps,nextState,nextContext,transaction,nextUnmaskedContext)):(this._currentElement=nextParentElement,this._context=nextUnmaskedContext,inst.props=nextProps,inst.state=nextState,inst.context=nextContext)},_processPendingState:function(props,context){var inst=this._instance,queue=this._pendingStateQueue,replace=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!queue)return inst.state;if(replace&&1===queue.length)return queue[0];for(var nextState=assign({},replace?queue[0]:inst.state),i=replace?1:0;i<queue.length;i++){var partial=queue[i];assign(nextState,"function"==typeof partial?partial.call(inst,nextState,props,context):partial)}return nextState},_performComponentUpdate:function(nextElement,nextProps,nextState,nextContext,transaction,unmaskedContext){var inst=this._instance,prevProps=inst.props,prevState=inst.state,prevContext=inst.context;inst.componentWillUpdate&&inst.componentWillUpdate(nextProps,nextState,nextContext),this._currentElement=nextElement,this._context=unmaskedContext,inst.props=nextProps,inst.state=nextState,inst.context=nextContext,this._updateRenderedComponent(transaction,unmaskedContext),inst.componentDidUpdate&&transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst,prevProps,prevState,prevContext),inst)},_updateRenderedComponent:function(transaction,context){var prevComponentInstance=this._renderedComponent,prevRenderedElement=prevComponentInstance._currentElement,childContext=this._getValidatedChildContext(),nextRenderedElement=this._renderValidatedComponent(childContext);if(shouldUpdateReactComponent(prevRenderedElement,nextRenderedElement))ReactReconciler.receiveComponent(prevComponentInstance,nextRenderedElement,transaction,this._mergeChildContext(context,childContext));else{var thisID=this._rootNodeID,prevComponentID=prevComponentInstance._rootNodeID;ReactReconciler.unmountComponent(prevComponentInstance),this._renderedComponent=this._instantiateReactComponent(nextRenderedElement,this._currentElement.type);var nextMarkup=ReactReconciler.mountComponent(this._renderedComponent,thisID,transaction,this._mergeChildContext(context,childContext));this._replaceNodeWithMarkupByID(prevComponentID,nextMarkup)}},_replaceNodeWithMarkupByID:function(prevComponentID,nextMarkup){ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID,nextMarkup)},_renderValidatedComponentWithoutOwnerOrContext:function(){var inst=this._instance,renderedComponent=inst.render();return"production"!==process.env.NODE_ENV&&"undefined"==typeof renderedComponent&&inst.render._isMockFunction&&(renderedComponent=null),renderedComponent},_renderValidatedComponent:function(childContext){var renderedComponent,previousContext=ReactContext.current;ReactContext.current=this._mergeChildContext(this._currentElement._context,childContext),ReactCurrentOwner.current=this;try{renderedComponent=this._renderValidatedComponentWithoutOwnerOrContext()}finally{ReactContext.current=previousContext,ReactCurrentOwner.current=null}return"production"!==process.env.NODE_ENV?invariant(null===renderedComponent||renderedComponent===!1||ReactElement.isValidElement(renderedComponent),"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):invariant(null===renderedComponent||renderedComponent===!1||ReactElement.isValidElement(renderedComponent)),renderedComponent},attachRef:function(ref,component){var inst=this.getPublicInstance(),refs=inst.refs===emptyObject?inst.refs={}:inst.refs;refs[ref]=component.getPublicInstance()},detachRef:function(ref){var refs=this.getPublicInstance().refs;delete refs[ref]},getName:function(){var type=this._currentElement.type,constructor=this._instance&&this._instance.constructor;return type.displayName||constructor&&constructor.displayName||type.name||constructor&&constructor.name||null},getPublicInstance:function(){return this._instance},_instantiateReactComponent:null};ReactPerf.measureMethods(ReactCompositeComponentMixin,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var ReactCompositeComponent={Mixin:ReactCompositeComponentMixin};module.exports=ReactCompositeComponent;


}).call(this,require('_process'))

},{"./Object.assign":260,"./ReactComponentEnvironment":272,"./ReactContext":275,"./ReactCurrentOwner":276,"./ReactElement":294,"./ReactElementValidator":295,"./ReactInstanceMap":304,"./ReactLifeCycle":305,"./ReactNativeComponent":311,"./ReactPerf":313,"./ReactPropTypeLocationNames":315,"./ReactPropTypeLocations":316,"./ReactReconciler":320,"./ReactUpdates":331,"./emptyObject":362,"./invariant":382,"./shouldUpdateReactComponent":399,"./warning":403,"_process":106}],275:[function(require,module,exports){
(function (process){
"use strict";var assign=require("./Object.assign"),emptyObject=require("./emptyObject"),warning=require("./warning"),didWarn=!1,ReactContext={current:emptyObject,withContext:function(newContext,scopedCallback){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(didWarn,"withContext is deprecated and will be removed in a future version. Use a wrapper component with getChildContext instead."):null,didWarn=!0);var result,previousContext=ReactContext.current;ReactContext.current=assign({},previousContext,newContext);try{result=scopedCallback()}finally{ReactContext.current=previousContext}return result}};module.exports=ReactContext;


}).call(this,require('_process'))

},{"./Object.assign":260,"./emptyObject":362,"./warning":403,"_process":106}],276:[function(require,module,exports){
"use strict";var ReactCurrentOwner={current:null};module.exports=ReactCurrentOwner;


},{}],277:[function(require,module,exports){
(function (process){
"use strict";function createDOMFactory(tag){return"production"!==process.env.NODE_ENV?ReactElementValidator.createFactory(tag):ReactElement.createFactory(tag)}var ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),mapObject=require("./mapObject"),ReactDOM=mapObject({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},createDOMFactory);module.exports=ReactDOM;


}).call(this,require('_process'))

},{"./ReactElement":294,"./ReactElementValidator":295,"./mapObject":390,"_process":106}],278:[function(require,module,exports){
"use strict";var AutoFocusMixin=require("./AutoFocusMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),keyMirror=require("./keyMirror"),button=ReactElement.createFactory("button"),mouseListenerNames=keyMirror({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),ReactDOMButton=ReactClass.createClass({displayName:"ReactDOMButton",tagName:"BUTTON",mixins:[AutoFocusMixin,ReactBrowserComponentMixin],render:function(){var props={};for(var key in this.props)!this.props.hasOwnProperty(key)||this.props.disabled&&mouseListenerNames[key]||(props[key]=this.props[key]);return button(props,this.props.children)}});module.exports=ReactDOMButton;


},{"./AutoFocusMixin":233,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294,"./keyMirror":388}],279:[function(require,module,exports){
(function (process){
"use strict";function assertValidProps(props){props&&(null!=props.dangerouslySetInnerHTML&&("production"!==process.env.NODE_ENV?invariant(null==props.children,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):invariant(null==props.children),"production"!==process.env.NODE_ENV?invariant("object"==typeof props.dangerouslySetInnerHTML&&"__html"in props.dangerouslySetInnerHTML,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):invariant("object"==typeof props.dangerouslySetInnerHTML&&"__html"in props.dangerouslySetInnerHTML)),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null==props.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."):null,"production"!==process.env.NODE_ENV?warning(!props.contentEditable||null==props.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."):null),"production"!==process.env.NODE_ENV?invariant(null==props.style||"object"==typeof props.style,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."):invariant(null==props.style||"object"==typeof props.style))}function putListener(id,registrationName,listener,transaction){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning("onScroll"!==registrationName||isEventSupported("scroll",!0),"This browser doesn't support the `onScroll` event"):null);var container=ReactMount.findReactContainerForID(id);if(container){var doc=container.nodeType===ELEMENT_NODE_TYPE?container.ownerDocument:container;listenTo(registrationName,doc)}transaction.getPutListenerQueue().enqueuePutListener(id,registrationName,listener)}function validateDangerousTag(tag){hasOwnProperty.call(validatedTagCache,tag)||("production"!==process.env.NODE_ENV?invariant(VALID_TAG_REGEX.test(tag),"Invalid tag: %s",tag):invariant(VALID_TAG_REGEX.test(tag)),validatedTagCache[tag]=!0)}function ReactDOMComponent(tag){validateDangerousTag(tag),this._tag=tag,this._renderedChildren=null,this._previousStyleCopy=null,this._rootNodeID=null}var CSSPropertyOperations=require("./CSSPropertyOperations"),DOMProperty=require("./DOMProperty"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactMount=require("./ReactMount"),ReactMultiChild=require("./ReactMultiChild"),ReactPerf=require("./ReactPerf"),assign=require("./Object.assign"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),invariant=require("./invariant"),isEventSupported=require("./isEventSupported"),keyOf=require("./keyOf"),warning=require("./warning"),deleteListener=ReactBrowserEventEmitter.deleteListener,listenTo=ReactBrowserEventEmitter.listenTo,registrationNameModules=ReactBrowserEventEmitter.registrationNameModules,CONTENT_TYPES={string:!0,number:!0},STYLE=keyOf({style:null}),ELEMENT_NODE_TYPE=1,BackendIDOperations=null,omittedCloseTags={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},VALID_TAG_REGEX=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,validatedTagCache={},hasOwnProperty={}.hasOwnProperty;ReactDOMComponent.displayName="ReactDOMComponent",ReactDOMComponent.Mixin={construct:function(element){this._currentElement=element},mountComponent:function(rootID,transaction,context){this._rootNodeID=rootID,assertValidProps(this._currentElement.props);var closeTag=omittedCloseTags[this._tag]?"":"</"+this._tag+">";return this._createOpenTagMarkupAndPutListeners(transaction)+this._createContentMarkup(transaction,context)+closeTag},_createOpenTagMarkupAndPutListeners:function(transaction){var props=this._currentElement.props,ret="<"+this._tag;for(var propKey in props)if(props.hasOwnProperty(propKey)){var propValue=props[propKey];if(null!=propValue)if(registrationNameModules.hasOwnProperty(propKey))putListener(this._rootNodeID,propKey,propValue,transaction);else{propKey===STYLE&&(propValue&&(propValue=this._previousStyleCopy=assign({},props.style)),propValue=CSSPropertyOperations.createMarkupForStyles(propValue));var markup=DOMPropertyOperations.createMarkupForProperty(propKey,propValue);markup&&(ret+=" "+markup)}}if(transaction.renderToStaticMarkup)return ret+">";var markupForID=DOMPropertyOperations.createMarkupForID(this._rootNodeID);return ret+" "+markupForID+">"},_createContentMarkup:function(transaction,context){var prefix="";("listing"===this._tag||"pre"===this._tag||"textarea"===this._tag)&&(prefix="\n");var props=this._currentElement.props,innerHTML=props.dangerouslySetInnerHTML;if(null!=innerHTML){if(null!=innerHTML.__html)return prefix+innerHTML.__html}else{var contentToUse=CONTENT_TYPES[typeof props.children]?props.children:null,childrenToUse=null!=contentToUse?null:props.children;if(null!=contentToUse)return prefix+escapeTextContentForBrowser(contentToUse);if(null!=childrenToUse){var mountImages=this.mountChildren(childrenToUse,transaction,context);return prefix+mountImages.join("")}}return prefix},receiveComponent:function(nextElement,transaction,context){var prevElement=this._currentElement;this._currentElement=nextElement,this.updateComponent(transaction,prevElement,nextElement,context)},updateComponent:function(transaction,prevElement,nextElement,context){assertValidProps(this._currentElement.props),this._updateDOMProperties(prevElement.props,transaction),this._updateDOMChildren(prevElement.props,transaction,context)},_updateDOMProperties:function(lastProps,transaction){var propKey,styleName,styleUpdates,nextProps=this._currentElement.props;for(propKey in lastProps)if(!nextProps.hasOwnProperty(propKey)&&lastProps.hasOwnProperty(propKey))if(propKey===STYLE){var lastStyle=this._previousStyleCopy;for(styleName in lastStyle)lastStyle.hasOwnProperty(styleName)&&(styleUpdates=styleUpdates||{},styleUpdates[styleName]="");this._previousStyleCopy=null}else registrationNameModules.hasOwnProperty(propKey)?deleteListener(this._rootNodeID,propKey):(DOMProperty.isStandardName[propKey]||DOMProperty.isCustomAttribute(propKey))&&BackendIDOperations.deletePropertyByID(this._rootNodeID,propKey);for(propKey in nextProps){var nextProp=nextProps[propKey],lastProp=propKey===STYLE?this._previousStyleCopy:lastProps[propKey];if(nextProps.hasOwnProperty(propKey)&&nextProp!==lastProp)if(propKey===STYLE)if(nextProp?nextProp=this._previousStyleCopy=assign({},nextProp):this._previousStyleCopy=null,lastProp){for(styleName in lastProp)!lastProp.hasOwnProperty(styleName)||nextProp&&nextProp.hasOwnProperty(styleName)||(styleUpdates=styleUpdates||{},styleUpdates[styleName]="");for(styleName in nextProp)nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]&&(styleUpdates=styleUpdates||{},styleUpdates[styleName]=nextProp[styleName])}else styleUpdates=nextProp;else registrationNameModules.hasOwnProperty(propKey)?putListener(this._rootNodeID,propKey,nextProp,transaction):(DOMProperty.isStandardName[propKey]||DOMProperty.isCustomAttribute(propKey))&&BackendIDOperations.updatePropertyByID(this._rootNodeID,propKey,nextProp)}styleUpdates&&BackendIDOperations.updateStylesByID(this._rootNodeID,styleUpdates)},_updateDOMChildren:function(lastProps,transaction,context){var nextProps=this._currentElement.props,lastContent=CONTENT_TYPES[typeof lastProps.children]?lastProps.children:null,nextContent=CONTENT_TYPES[typeof nextProps.children]?nextProps.children:null,lastHtml=lastProps.dangerouslySetInnerHTML&&lastProps.dangerouslySetInnerHTML.__html,nextHtml=nextProps.dangerouslySetInnerHTML&&nextProps.dangerouslySetInnerHTML.__html,lastChildren=null!=lastContent?null:lastProps.children,nextChildren=null!=nextContent?null:nextProps.children,lastHasContentOrHtml=null!=lastContent||null!=lastHtml,nextHasContentOrHtml=null!=nextContent||null!=nextHtml;null!=lastChildren&&null==nextChildren?this.updateChildren(null,transaction,context):lastHasContentOrHtml&&!nextHasContentOrHtml&&this.updateTextContent(""),null!=nextContent?lastContent!==nextContent&&this.updateTextContent(""+nextContent):null!=nextHtml?lastHtml!==nextHtml&&BackendIDOperations.updateInnerHTMLByID(this._rootNodeID,nextHtml):null!=nextChildren&&this.updateChildren(nextChildren,transaction,context)},unmountComponent:function(){this.unmountChildren(),ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID),ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null}},ReactPerf.measureMethods(ReactDOMComponent,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),assign(ReactDOMComponent.prototype,ReactDOMComponent.Mixin,ReactMultiChild.Mixin),ReactDOMComponent.injection={injectIDOperations:function(IDOperations){ReactDOMComponent.BackendIDOperations=BackendIDOperations=IDOperations}},module.exports=ReactDOMComponent;


}).call(this,require('_process'))

},{"./CSSPropertyOperations":237,"./DOMProperty":242,"./DOMPropertyOperations":243,"./Object.assign":260,"./ReactBrowserEventEmitter":264,"./ReactComponentBrowserEnvironment":271,"./ReactMount":308,"./ReactMultiChild":309,"./ReactPerf":313,"./escapeTextContentForBrowser":363,"./invariant":382,"./isEventSupported":383,"./keyOf":389,"./warning":403,"_process":106}],280:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),LocalEventTrapMixin=require("./LocalEventTrapMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),form=ReactElement.createFactory("form"),ReactDOMForm=ReactClass.createClass({displayName:"ReactDOMForm",tagName:"FORM",mixins:[ReactBrowserComponentMixin,LocalEventTrapMixin],render:function(){return form(this.props)},componentDidMount:function(){this.trapBubbledEvent(EventConstants.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit,"submit")}});module.exports=ReactDOMForm;


},{"./EventConstants":247,"./LocalEventTrapMixin":258,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294}],281:[function(require,module,exports){
(function (process){
"use strict";var CSSPropertyOperations=require("./CSSPropertyOperations"),DOMChildrenOperations=require("./DOMChildrenOperations"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),invariant=require("./invariant"),setInnerHTML=require("./setInnerHTML"),INVALID_PROPERTY_ERRORS={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},ReactDOMIDOperations={updatePropertyByID:function(id,name,value){var node=ReactMount.getNode(id);"production"!==process.env.NODE_ENV?invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),"updatePropertyByID(...): %s",INVALID_PROPERTY_ERRORS[name]):invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)),null!=value?DOMPropertyOperations.setValueForProperty(node,name,value):DOMPropertyOperations.deleteValueForProperty(node,name)},deletePropertyByID:function(id,name,value){var node=ReactMount.getNode(id);"production"!==process.env.NODE_ENV?invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),"updatePropertyByID(...): %s",INVALID_PROPERTY_ERRORS[name]):invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)),DOMPropertyOperations.deleteValueForProperty(node,name,value)},updateStylesByID:function(id,styles){var node=ReactMount.getNode(id);CSSPropertyOperations.setValueForStyles(node,styles)},updateInnerHTMLByID:function(id,html){var node=ReactMount.getNode(id);setInnerHTML(node,html)},updateTextContentByID:function(id,content){var node=ReactMount.getNode(id);DOMChildrenOperations.updateTextContent(node,content)},dangerouslyReplaceNodeWithMarkupByID:function(id,markup){var node=ReactMount.getNode(id);DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node,markup)},dangerouslyProcessChildrenUpdates:function(updates,markup){for(var i=0;i<updates.length;i++)updates[i].parentNode=ReactMount.getNode(updates[i].parentID);DOMChildrenOperations.processUpdates(updates,markup)}};ReactPerf.measureMethods(ReactDOMIDOperations,"ReactDOMIDOperations",{updatePropertyByID:"updatePropertyByID",deletePropertyByID:"deletePropertyByID",updateStylesByID:"updateStylesByID",updateInnerHTMLByID:"updateInnerHTMLByID",updateTextContentByID:"updateTextContentByID",dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),module.exports=ReactDOMIDOperations;


}).call(this,require('_process'))

},{"./CSSPropertyOperations":237,"./DOMChildrenOperations":241,"./DOMPropertyOperations":243,"./ReactMount":308,"./ReactPerf":313,"./invariant":382,"./setInnerHTML":396,"_process":106}],282:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),LocalEventTrapMixin=require("./LocalEventTrapMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),iframe=ReactElement.createFactory("iframe"),ReactDOMIframe=ReactClass.createClass({displayName:"ReactDOMIframe",tagName:"IFRAME",mixins:[ReactBrowserComponentMixin,LocalEventTrapMixin],render:function(){return iframe(this.props)},componentDidMount:function(){this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load")}});module.exports=ReactDOMIframe;


},{"./EventConstants":247,"./LocalEventTrapMixin":258,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294}],283:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),LocalEventTrapMixin=require("./LocalEventTrapMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),img=ReactElement.createFactory("img"),ReactDOMImg=ReactClass.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[ReactBrowserComponentMixin,LocalEventTrapMixin],render:function(){return img(this.props)},componentDidMount:function(){this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(EventConstants.topLevelTypes.topError,"error")}});module.exports=ReactDOMImg;


},{"./EventConstants":247,"./LocalEventTrapMixin":258,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294}],284:[function(require,module,exports){
(function (process){
"use strict";function forceUpdateIfMounted(){this.isMounted()&&this.forceUpdate()}var AutoFocusMixin=require("./AutoFocusMixin"),DOMPropertyOperations=require("./DOMPropertyOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("./invariant"),input=ReactElement.createFactory("input"),instancesByReactID={},ReactDOMInput=ReactClass.createClass({displayName:"ReactDOMInput",tagName:"INPUT",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],getInitialState:function(){var defaultValue=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=defaultValue?defaultValue:null}},render:function(){var props=assign({},this.props);props.defaultChecked=null,props.defaultValue=null;var value=LinkedValueUtils.getValue(this);props.value=null!=value?value:this.state.initialValue;var checked=LinkedValueUtils.getChecked(this);return props.checked=null!=checked?checked:this.state.initialChecked,props.onChange=this._handleChange,input(props,this.props.children)},componentDidMount:function(){var id=ReactMount.getID(this.getDOMNode());instancesByReactID[id]=this},componentWillUnmount:function(){var rootNode=this.getDOMNode(),id=ReactMount.getID(rootNode);delete instancesByReactID[id]},componentDidUpdate:function(prevProps,prevState,prevContext){var rootNode=this.getDOMNode();null!=this.props.checked&&DOMPropertyOperations.setValueForProperty(rootNode,"checked",this.props.checked||!1);var value=LinkedValueUtils.getValue(this);null!=value&&DOMPropertyOperations.setValueForProperty(rootNode,"value",""+value)},_handleChange:function(event){var returnValue,onChange=LinkedValueUtils.getOnChange(this);onChange&&(returnValue=onChange.call(this,event)),ReactUpdates.asap(forceUpdateIfMounted,this);var name=this.props.name;if("radio"===this.props.type&&null!=name){for(var rootNode=this.getDOMNode(),queryRoot=rootNode;queryRoot.parentNode;)queryRoot=queryRoot.parentNode;for(var group=queryRoot.querySelectorAll("input[name="+JSON.stringify(""+name)+'][type="radio"]'),i=0,groupLen=group.length;groupLen>i;i++){var otherNode=group[i];if(otherNode!==rootNode&&otherNode.form===rootNode.form){var otherID=ReactMount.getID(otherNode);"production"!==process.env.NODE_ENV?invariant(otherID,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):invariant(otherID);var otherInstance=instancesByReactID[otherID];"production"!==process.env.NODE_ENV?invariant(otherInstance,"ReactDOMInput: Unknown radio button ID %s.",otherID):invariant(otherInstance),ReactUpdates.asap(forceUpdateIfMounted,otherInstance)}}}return returnValue}});module.exports=ReactDOMInput;


}).call(this,require('_process'))

},{"./AutoFocusMixin":233,"./DOMPropertyOperations":243,"./LinkedValueUtils":257,"./Object.assign":260,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294,"./ReactMount":308,"./ReactUpdates":331,"./invariant":382,"_process":106}],285:[function(require,module,exports){
(function (process){
"use strict";var ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),warning=require("./warning"),option=ReactElement.createFactory("option"),ReactDOMOption=ReactClass.createClass({displayName:"ReactDOMOption",tagName:"OPTION",mixins:[ReactBrowserComponentMixin],componentWillMount:function(){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null==this.props.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):null)},render:function(){return option(this.props,this.props.children)}});module.exports=ReactDOMOption;


}).call(this,require('_process'))

},{"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294,"./warning":403,"_process":106}],286:[function(require,module,exports){
"use strict";function updateOptionsIfPendingUpdateAndMounted(){if(this._pendingUpdate){this._pendingUpdate=!1;var value=LinkedValueUtils.getValue(this);null!=value&&this.isMounted()&&updateOptions(this,value)}}function selectValueType(props,propName,componentName){if(null==props[propName])return null;if(props.multiple){if(!Array.isArray(props[propName]))return new Error("The `"+propName+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(props[propName]))return new Error("The `"+propName+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function updateOptions(component,propValue){var selectedValue,i,l,options=component.getDOMNode().options;if(component.props.multiple){for(selectedValue={},i=0,l=propValue.length;l>i;i++)selectedValue[""+propValue[i]]=!0;for(i=0,l=options.length;l>i;i++){var selected=selectedValue.hasOwnProperty(options[i].value);options[i].selected!==selected&&(options[i].selected=selected)}}else{for(selectedValue=""+propValue,i=0,l=options.length;l>i;i++)if(options[i].value===selectedValue)return void(options[i].selected=!0);options.length&&(options[0].selected=!0)}}var AutoFocusMixin=require("./AutoFocusMixin"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),select=ReactElement.createFactory("select"),ReactDOMSelect=ReactClass.createClass({displayName:"ReactDOMSelect",tagName:"SELECT",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],propTypes:{defaultValue:selectValueType,value:selectValueType},render:function(){var props=assign({},this.props);return props.onChange=this._handleChange,props.value=null,select(props,this.props.children)},componentWillMount:function(){this._pendingUpdate=!1},componentDidMount:function(){var value=LinkedValueUtils.getValue(this);null!=value?updateOptions(this,value):null!=this.props.defaultValue&&updateOptions(this,this.props.defaultValue)},componentDidUpdate:function(prevProps){var value=LinkedValueUtils.getValue(this);null!=value?(this._pendingUpdate=!1,updateOptions(this,value)):!prevProps.multiple!=!this.props.multiple&&(null!=this.props.defaultValue?updateOptions(this,this.props.defaultValue):updateOptions(this,this.props.multiple?[]:""))},_handleChange:function(event){var returnValue,onChange=LinkedValueUtils.getOnChange(this);return onChange&&(returnValue=onChange.call(this,event)),this._pendingUpdate=!0,ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted,this),returnValue}});module.exports=ReactDOMSelect;


},{"./AutoFocusMixin":233,"./LinkedValueUtils":257,"./Object.assign":260,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294,"./ReactUpdates":331}],287:[function(require,module,exports){
"use strict";function isCollapsed(anchorNode,anchorOffset,focusNode,focusOffset){return anchorNode===focusNode&&anchorOffset===focusOffset}function getIEOffsets(node){var selection=document.selection,selectedRange=selection.createRange(),selectedLength=selectedRange.text.length,fromStart=selectedRange.duplicate();fromStart.moveToElementText(node),fromStart.setEndPoint("EndToStart",selectedRange);var startOffset=fromStart.text.length,endOffset=startOffset+selectedLength;return{start:startOffset,end:endOffset}}function getModernOffsets(node){var selection=window.getSelection&&window.getSelection();if(!selection||0===selection.rangeCount)return null;var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset,currentRange=selection.getRangeAt(0),isSelectionCollapsed=isCollapsed(selection.anchorNode,selection.anchorOffset,selection.focusNode,selection.focusOffset),rangeLength=isSelectionCollapsed?0:currentRange.toString().length,tempRange=currentRange.cloneRange();tempRange.selectNodeContents(node),tempRange.setEnd(currentRange.startContainer,currentRange.startOffset);var isTempRangeCollapsed=isCollapsed(tempRange.startContainer,tempRange.startOffset,tempRange.endContainer,tempRange.endOffset),start=isTempRangeCollapsed?0:tempRange.toString().length,end=start+rangeLength,detectionRange=document.createRange();detectionRange.setStart(anchorNode,anchorOffset),detectionRange.setEnd(focusNode,focusOffset);var isBackward=detectionRange.collapsed;return{start:isBackward?end:start,end:isBackward?start:end}}function setIEOffsets(node,offsets){var start,end,range=document.selection.createRange().duplicate();"undefined"==typeof offsets.end?(start=offsets.start,end=start):offsets.start>offsets.end?(start=offsets.end,end=offsets.start):(start=offsets.start,end=offsets.end),range.moveToElementText(node),range.moveStart("character",start),range.setEndPoint("EndToStart",range),range.moveEnd("character",end-start),range.select()}function setModernOffsets(node,offsets){if(window.getSelection){var selection=window.getSelection(),length=node[getTextContentAccessor()].length,start=Math.min(offsets.start,length),end="undefined"==typeof offsets.end?start:Math.min(offsets.end,length);if(!selection.extend&&start>end){var temp=end;end=start,start=temp}var startMarker=getNodeForCharacterOffset(node,start),endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){var range=document.createRange();range.setStart(startMarker.node,startMarker.offset),selection.removeAllRanges(),start>end?(selection.addRange(range),selection.extend(endMarker.node,endMarker.offset)):(range.setEnd(endMarker.node,endMarker.offset),selection.addRange(range))}}}var ExecutionEnvironment=require("./ExecutionEnvironment"),getNodeForCharacterOffset=require("./getNodeForCharacterOffset"),getTextContentAccessor=require("./getTextContentAccessor"),useIEOffsets=ExecutionEnvironment.canUseDOM&&"selection"in document&&!("getSelection"in window),ReactDOMSelection={getOffsets:useIEOffsets?getIEOffsets:getModernOffsets,setOffsets:useIEOffsets?setIEOffsets:setModernOffsets};module.exports=ReactDOMSelection;


},{"./ExecutionEnvironment":253,"./getNodeForCharacterOffset":375,"./getTextContentAccessor":377}],288:[function(require,module,exports){
"use strict";var DOMPropertyOperations=require("./DOMPropertyOperations"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDOMComponent=require("./ReactDOMComponent"),assign=require("./Object.assign"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),ReactDOMTextComponent=function(props){};assign(ReactDOMTextComponent.prototype,{construct:function(text){this._currentElement=text,this._stringText=""+text,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(rootID,transaction,context){this._rootNodeID=rootID;var escapedText=escapeTextContentForBrowser(this._stringText);return transaction.renderToStaticMarkup?escapedText:"<span "+DOMPropertyOperations.createMarkupForID(rootID)+">"+escapedText+"</span>"},receiveComponent:function(nextText,transaction){if(nextText!==this._currentElement){this._currentElement=nextText;var nextStringText=""+nextText;nextStringText!==this._stringText&&(this._stringText=nextStringText,ReactDOMComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID,nextStringText))}},unmountComponent:function(){ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID)}}),module.exports=ReactDOMTextComponent;


},{"./DOMPropertyOperations":243,"./Object.assign":260,"./ReactComponentBrowserEnvironment":271,"./ReactDOMComponent":279,"./escapeTextContentForBrowser":363}],289:[function(require,module,exports){
(function (process){
"use strict";function forceUpdateIfMounted(){this.isMounted()&&this.forceUpdate()}var AutoFocusMixin=require("./AutoFocusMixin"),DOMPropertyOperations=require("./DOMPropertyOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),textarea=ReactElement.createFactory("textarea"),ReactDOMTextarea=ReactClass.createClass({displayName:"ReactDOMTextarea",tagName:"TEXTAREA",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],getInitialState:function(){var defaultValue=this.props.defaultValue,children=this.props.children;null!=children&&("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):null),"production"!==process.env.NODE_ENV?invariant(null==defaultValue,"If you supply `defaultValue` on a <textarea>, do not pass children."):invariant(null==defaultValue),Array.isArray(children)&&("production"!==process.env.NODE_ENV?invariant(children.length<=1,"<textarea> can only have at most one child."):invariant(children.length<=1),children=children[0]),defaultValue=""+children),null==defaultValue&&(defaultValue="");var value=LinkedValueUtils.getValue(this);return{initialValue:""+(null!=value?value:defaultValue)}},render:function(){var props=assign({},this.props);return"production"!==process.env.NODE_ENV?invariant(null==props.dangerouslySetInnerHTML,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):invariant(null==props.dangerouslySetInnerHTML),props.defaultValue=null,props.value=null,props.onChange=this._handleChange,textarea(props,this.state.initialValue)},componentDidUpdate:function(prevProps,prevState,prevContext){var value=LinkedValueUtils.getValue(this);if(null!=value){var rootNode=this.getDOMNode();DOMPropertyOperations.setValueForProperty(rootNode,"value",""+value)}},_handleChange:function(event){var returnValue,onChange=LinkedValueUtils.getOnChange(this);return onChange&&(returnValue=onChange.call(this,event)),ReactUpdates.asap(forceUpdateIfMounted,this),returnValue}});module.exports=ReactDOMTextarea;


}).call(this,require('_process'))

},{"./AutoFocusMixin":233,"./DOMPropertyOperations":243,"./LinkedValueUtils":257,"./Object.assign":260,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactElement":294,"./ReactUpdates":331,"./invariant":382,"./warning":403,"_process":106}],290:[function(require,module,exports){
"use strict";function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}var ReactUpdates=require("./ReactUpdates"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),RESET_BATCHED_UPDATES={initialize:emptyFunction,close:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=!1}},FLUSH_BATCHED_UPDATES={initialize:emptyFunction,close:ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)},TRANSACTION_WRAPPERS=[FLUSH_BATCHED_UPDATES,RESET_BATCHED_UPDATES];assign(ReactDefaultBatchingStrategyTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(callback,a,b,c,d){var alreadyBatchingUpdates=ReactDefaultBatchingStrategy.isBatchingUpdates;ReactDefaultBatchingStrategy.isBatchingUpdates=!0,alreadyBatchingUpdates?callback(a,b,c,d):transaction.perform(callback,null,a,b,c,d)}};module.exports=ReactDefaultBatchingStrategy;


},{"./Object.assign":260,"./ReactUpdates":331,"./Transaction":348,"./emptyFunction":361}],291:[function(require,module,exports){
(function (process){
"use strict";function autoGenerateWrapperClass(type){return ReactClass.createClass({tagName:type.toUpperCase(),render:function(){return new ReactElement(type,null,null,null,null,this.props)}})}function inject(){if(ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener),ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder),ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles),ReactInjection.EventPluginHub.injectMount(ReactMount),ReactInjection.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,MobileSafariClickEventPlugin:MobileSafariClickEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin}),ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent),ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent),ReactInjection.NativeComponent.injectAutoWrapper(autoGenerateWrapperClass),ReactInjection.Class.injectMixin(ReactBrowserComponentMixin),ReactInjection.NativeComponent.injectComponentClasses({button:ReactDOMButton,form:ReactDOMForm,iframe:ReactDOMIframe,img:ReactDOMImg,input:ReactDOMInput,option:ReactDOMOption,select:ReactDOMSelect,textarea:ReactDOMTextarea,html:createFullPageComponent("html"),head:createFullPageComponent("head"),body:createFullPageComponent("body")}),ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig),ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig),ReactInjection.EmptyComponent.injectEmptyComponent("noscript"),ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction),ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy),ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM?ClientReactRootIndex.createReactRootIndex:ServerReactRootIndex.createReactRootIndex),ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment),ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations),"production"!==process.env.NODE_ENV){var url=ExecutionEnvironment.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(url)){var ReactDefaultPerf=require("./ReactDefaultPerf");ReactDefaultPerf.start()}}}var BeforeInputEventPlugin=require("./BeforeInputEventPlugin"),ChangeEventPlugin=require("./ChangeEventPlugin"),ClientReactRootIndex=require("./ClientReactRootIndex"),DefaultEventPluginOrder=require("./DefaultEventPluginOrder"),EnterLeaveEventPlugin=require("./EnterLeaveEventPlugin"),ExecutionEnvironment=require("./ExecutionEnvironment"),HTMLDOMPropertyConfig=require("./HTMLDOMPropertyConfig"),MobileSafariClickEventPlugin=require("./MobileSafariClickEventPlugin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactDOMComponent=require("./ReactDOMComponent"),ReactDOMButton=require("./ReactDOMButton"),ReactDOMForm=require("./ReactDOMForm"),ReactDOMImg=require("./ReactDOMImg"),ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactDOMIframe=require("./ReactDOMIframe"),ReactDOMInput=require("./ReactDOMInput"),ReactDOMOption=require("./ReactDOMOption"),ReactDOMSelect=require("./ReactDOMSelect"),ReactDOMTextarea=require("./ReactDOMTextarea"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactElement=require("./ReactElement"),ReactEventListener=require("./ReactEventListener"),ReactInjection=require("./ReactInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactReconcileTransaction=require("./ReactReconcileTransaction"),SelectEventPlugin=require("./SelectEventPlugin"),ServerReactRootIndex=require("./ServerReactRootIndex"),SimpleEventPlugin=require("./SimpleEventPlugin"),SVGDOMPropertyConfig=require("./SVGDOMPropertyConfig"),createFullPageComponent=require("./createFullPageComponent");module.exports={inject:inject};


}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":234,"./ChangeEventPlugin":239,"./ClientReactRootIndex":240,"./DefaultEventPluginOrder":245,"./EnterLeaveEventPlugin":246,"./ExecutionEnvironment":253,"./HTMLDOMPropertyConfig":255,"./MobileSafariClickEventPlugin":259,"./ReactBrowserComponentMixin":263,"./ReactClass":269,"./ReactComponentBrowserEnvironment":271,"./ReactDOMButton":278,"./ReactDOMComponent":279,"./ReactDOMForm":280,"./ReactDOMIDOperations":281,"./ReactDOMIframe":282,"./ReactDOMImg":283,"./ReactDOMInput":284,"./ReactDOMOption":285,"./ReactDOMSelect":286,"./ReactDOMTextComponent":288,"./ReactDOMTextarea":289,"./ReactDefaultBatchingStrategy":290,"./ReactDefaultPerf":292,"./ReactElement":294,"./ReactEventListener":299,"./ReactInjection":301,"./ReactInstanceHandles":303,"./ReactMount":308,"./ReactReconcileTransaction":319,"./SVGDOMPropertyConfig":333,"./SelectEventPlugin":334,"./ServerReactRootIndex":335,"./SimpleEventPlugin":336,"./createFullPageComponent":357,"_process":106}],292:[function(require,module,exports){
"use strict";function roundFloat(val){return Math.floor(100*val)/100}function addValue(obj,key,val){obj[key]=(obj[key]||0)+val}var DOMProperty=require("./DOMProperty"),ReactDefaultPerfAnalysis=require("./ReactDefaultPerfAnalysis"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),performanceNow=require("./performanceNow"),ReactDefaultPerf={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){ReactDefaultPerf._injected||ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure),ReactDefaultPerf._allMeasurements.length=0,ReactPerf.enableMeasure=!0},stop:function(){ReactPerf.enableMeasure=!1},getLastMeasurements:function(){return ReactDefaultPerf._allMeasurements},printExclusive:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements;var summary=ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);console.table(summary.map(function(item){return{"Component class name":item.componentName,"Total inclusive time (ms)":roundFloat(item.inclusive),"Exclusive mount time (ms)":roundFloat(item.exclusive),"Exclusive render time (ms)":roundFloat(item.render),"Mount time per instance (ms)":roundFloat(item.exclusive/item.count),"Render time per instance (ms)":roundFloat(item.render/item.count),Instances:item.count}}))},printInclusive:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements;var summary=ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);console.table(summary.map(function(item){return{"Owner > component":item.componentName,"Inclusive time (ms)":roundFloat(item.time),Instances:item.count}})),console.log("Total time:",ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(measurements){var summary=ReactDefaultPerfAnalysis.getInclusiveSummary(measurements,!0);return summary.map(function(item){return{"Owner > component":item.componentName,"Wasted time (ms)":item.time,Instances:item.count}})},printWasted:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements,console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements)),console.log("Total time:",ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2)+" ms")},printDOM:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements;var summary=ReactDefaultPerfAnalysis.getDOMSummary(measurements);console.table(summary.map(function(item){var result={};return result[DOMProperty.ID_ATTRIBUTE_NAME]=item.id,result.type=item.type,result.args=JSON.stringify(item.args),result})),console.log("Total time:",ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2)+" ms")},_recordWrite:function(id,fnName,totalTime,args){var writes=ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length-1].writes;writes[id]=writes[id]||[],writes[id].push({type:fnName,time:totalTime,args:args})},measure:function(moduleName,fnName,func){return function(){for(var args=[],$__0=0,$__1=arguments.length;$__1>$__0;$__0++)args.push(arguments[$__0]);var totalTime,rv,start;if("_renderNewRootComponent"===fnName||"flushBatchedUpdates"===fnName)return ReactDefaultPerf._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0}),start=performanceNow(),rv=func.apply(this,args),ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length-1].totalTime=performanceNow()-start,rv;if("_mountImageIntoNode"===fnName||"ReactDOMIDOperations"===moduleName){if(start=performanceNow(),rv=func.apply(this,args),totalTime=performanceNow()-start,"_mountImageIntoNode"===fnName){var mountID=ReactMount.getID(args[1]);ReactDefaultPerf._recordWrite(mountID,fnName,totalTime,args[0])}else"dangerouslyProcessChildrenUpdates"===fnName?args[0].forEach(function(update){var writeArgs={};null!==update.fromIndex&&(writeArgs.fromIndex=update.fromIndex),null!==update.toIndex&&(writeArgs.toIndex=update.toIndex),null!==update.textContent&&(writeArgs.textContent=update.textContent),null!==update.markupIndex&&(writeArgs.markup=args[1][update.markupIndex]),ReactDefaultPerf._recordWrite(update.parentID,update.type,totalTime,writeArgs)}):ReactDefaultPerf._recordWrite(args[0],fnName,totalTime,Array.prototype.slice.call(args,1));return rv}if("ReactCompositeComponent"!==moduleName||"mountComponent"!==fnName&&"updateComponent"!==fnName&&"_renderValidatedComponent"!==fnName)return func.apply(this,args);if("string"==typeof this._currentElement.type)return func.apply(this,args);var rootNodeID="mountComponent"===fnName?args[0]:this._rootNodeID,isRender="_renderValidatedComponent"===fnName,isMount="mountComponent"===fnName,mountStack=ReactDefaultPerf._mountStack,entry=ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length-1];if(isRender?addValue(entry.counts,rootNodeID,1):isMount&&mountStack.push(0),start=performanceNow(),rv=func.apply(this,args),totalTime=performanceNow()-start,isRender)addValue(entry.render,rootNodeID,totalTime);else if(isMount){var subMountTime=mountStack.pop();mountStack[mountStack.length-1]+=totalTime,addValue(entry.exclusive,rootNodeID,totalTime-subMountTime),addValue(entry.inclusive,rootNodeID,totalTime)}else addValue(entry.inclusive,rootNodeID,totalTime);return entry.displayNames[rootNodeID]={current:this.getName(),owner:this._currentElement._owner?this._currentElement._owner.getName():"<root>"},rv}}};module.exports=ReactDefaultPerf;


},{"./DOMProperty":242,"./ReactDefaultPerfAnalysis":293,"./ReactMount":308,"./ReactPerf":313,"./performanceNow":394}],293:[function(require,module,exports){
function getTotalTime(measurements){for(var totalTime=0,i=0;i<measurements.length;i++){var measurement=measurements[i];totalTime+=measurement.totalTime}return totalTime}function getDOMSummary(measurements){for(var items=[],i=0;i<measurements.length;i++){var id,measurement=measurements[i];for(id in measurement.writes)measurement.writes[id].forEach(function(write){items.push({id:id,type:DOM_OPERATION_TYPES[write.type]||write.type,args:write.args})})}return items}function getExclusiveSummary(measurements){for(var displayName,candidates={},i=0;i<measurements.length;i++){var measurement=measurements[i],allIDs=assign({},measurement.exclusive,measurement.inclusive);for(var id in allIDs)displayName=measurement.displayNames[id].current,candidates[displayName]=candidates[displayName]||{componentName:displayName,inclusive:0,exclusive:0,render:0,count:0},measurement.render[id]&&(candidates[displayName].render+=measurement.render[id]),measurement.exclusive[id]&&(candidates[displayName].exclusive+=measurement.exclusive[id]),measurement.inclusive[id]&&(candidates[displayName].inclusive+=measurement.inclusive[id]),measurement.counts[id]&&(candidates[displayName].count+=measurement.counts[id])}var arr=[];for(displayName in candidates)candidates[displayName].exclusive>=DONT_CARE_THRESHOLD&&arr.push(candidates[displayName]);return arr.sort(function(a,b){return b.exclusive-a.exclusive}),arr}function getInclusiveSummary(measurements,onlyClean){for(var inclusiveKey,candidates={},i=0;i<measurements.length;i++){var cleanComponents,measurement=measurements[i],allIDs=assign({},measurement.exclusive,measurement.inclusive);onlyClean&&(cleanComponents=getUnchangedComponents(measurement));for(var id in allIDs)if(!onlyClean||cleanComponents[id]){var displayName=measurement.displayNames[id];inclusiveKey=displayName.owner+" > "+displayName.current,candidates[inclusiveKey]=candidates[inclusiveKey]||{componentName:inclusiveKey,time:0,count:0},measurement.inclusive[id]&&(candidates[inclusiveKey].time+=measurement.inclusive[id]),measurement.counts[id]&&(candidates[inclusiveKey].count+=measurement.counts[id])}}var arr=[];for(inclusiveKey in candidates)candidates[inclusiveKey].time>=DONT_CARE_THRESHOLD&&arr.push(candidates[inclusiveKey]);return arr.sort(function(a,b){return b.time-a.time}),arr}function getUnchangedComponents(measurement){var cleanComponents={},dirtyLeafIDs=Object.keys(measurement.writes),allIDs=assign({},measurement.exclusive,measurement.inclusive);for(var id in allIDs){for(var isDirty=!1,i=0;i<dirtyLeafIDs.length;i++)if(0===dirtyLeafIDs[i].indexOf(id)){isDirty=!0;break}!isDirty&&measurement.counts[id]>0&&(cleanComponents[id]=!0)}return cleanComponents}var assign=require("./Object.assign"),DONT_CARE_THRESHOLD=1.2,DOM_OPERATION_TYPES={_mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",TEXT_CONTENT:"set textContent",updatePropertyByID:"update attribute",deletePropertyByID:"delete attribute",updateStylesByID:"update styles",updateInnerHTMLByID:"set innerHTML",dangerouslyReplaceNodeWithMarkupByID:"replace"},ReactDefaultPerfAnalysis={getExclusiveSummary:getExclusiveSummary,getInclusiveSummary:getInclusiveSummary,getDOMSummary:getDOMSummary,getTotalTime:getTotalTime};module.exports=ReactDefaultPerfAnalysis;


},{"./Object.assign":260}],294:[function(require,module,exports){
(function (process){
"use strict";function defineWarningProperty(object,key){Object.defineProperty(object,key,{configurable:!1,enumerable:!0,get:function(){return this._store?this._store[key]:null},set:function(value){"production"!==process.env.NODE_ENV?warning(!1,"Don't set the %s property of the React element. Instead, specify the correct value when initially creating the element.",key):null,this._store[key]=value}})}function defineMutationMembrane(prototype){try{var pseudoFrozenProperties={props:!0};for(var key in pseudoFrozenProperties)defineWarningProperty(prototype,key);useMutationMembrane=!0}catch(x){}}var ReactContext=require("./ReactContext"),ReactCurrentOwner=require("./ReactCurrentOwner"),assign=require("./Object.assign"),warning=require("./warning"),RESERVED_PROPS={key:!0,ref:!0},useMutationMembrane=!1,ReactElement=function(type,key,ref,owner,context,props){if(this.type=type,this.key=key,this.ref=ref,this._owner=owner,this._context=context,"production"!==process.env.NODE_ENV){this._store={props:props,originalProps:assign({},props)};try{Object.defineProperty(this._store,"validated",{configurable:!1,enumerable:!1,writable:!0})}catch(x){}if(this._store.validated=!1,useMutationMembrane)return void Object.freeze(this)}this.props=props};ReactElement.prototype={_isReactElement:!0},"production"!==process.env.NODE_ENV&&defineMutationMembrane(ReactElement.prototype),ReactElement.createElement=function(type,config,children){var propName,props={},key=null,ref=null;if(null!=config){ref=void 0===config.ref?null:config.ref,key=void 0===config.key?null:""+config.key;for(propName in config)config.hasOwnProperty(propName)&&!RESERVED_PROPS.hasOwnProperty(propName)&&(props[propName]=config[propName])}var childrenLength=arguments.length-2;if(1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=Array(childrenLength),i=0;childrenLength>i;i++)childArray[i]=arguments[i+2];props.children=childArray}if(type&&type.defaultProps){var defaultProps=type.defaultProps;for(propName in defaultProps)"undefined"==typeof props[propName]&&(props[propName]=defaultProps[propName])}return new ReactElement(type,key,ref,ReactCurrentOwner.current,ReactContext.current,props)},ReactElement.createFactory=function(type){var factory=ReactElement.createElement.bind(null,type);return factory.type=type,factory},ReactElement.cloneAndReplaceProps=function(oldElement,newProps){var newElement=new ReactElement(oldElement.type,oldElement.key,oldElement.ref,oldElement._owner,oldElement._context,newProps);return"production"!==process.env.NODE_ENV&&(newElement._store.validated=oldElement._store.validated),newElement},ReactElement.cloneElement=function(element,config,children){var propName,props=assign({},element.props),key=element.key,ref=element.ref,owner=element._owner;if(null!=config){void 0!==config.ref&&(ref=config.ref,owner=ReactCurrentOwner.current),void 0!==config.key&&(key=""+config.key);for(propName in config)config.hasOwnProperty(propName)&&!RESERVED_PROPS.hasOwnProperty(propName)&&(props[propName]=config[propName])}var childrenLength=arguments.length-2;if(1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=Array(childrenLength),i=0;childrenLength>i;i++)childArray[i]=arguments[i+2];props.children=childArray}return new ReactElement(element.type,key,ref,owner,element._context,props)},ReactElement.isValidElement=function(object){var isElement=!(!object||!object._isReactElement);return isElement},module.exports=ReactElement;


}).call(this,require('_process'))

},{"./Object.assign":260,"./ReactContext":275,"./ReactCurrentOwner":276,"./warning":403,"_process":106}],295:[function(require,module,exports){
(function (process){
"use strict";function getDeclarationErrorAddendum(){if(ReactCurrentOwner.current){var name=ReactCurrentOwner.current.getName();if(name)return" Check the render method of `"+name+"`."}return""}function getName(instance){var publicInstance=instance&&instance.getPublicInstance();if(!publicInstance)return void 0;var constructor=publicInstance.constructor;return constructor?constructor.displayName||constructor.name||void 0:void 0}function getCurrentOwnerDisplayName(){var current=ReactCurrentOwner.current;return current&&getName(current)||void 0}function validateExplicitKey(element,parentType){element._store.validated||null!=element.key||(element._store.validated=!0,warnAndMonitorForKeyUse('Each child in an array or iterator should have a unique "key" prop.',element,parentType))}function validatePropertyKey(name,element,parentType){NUMERIC_PROPERTY_REGEX.test(name)&&warnAndMonitorForKeyUse("Child objects should have non-numeric keys so ordering is preserved.",element,parentType)}function warnAndMonitorForKeyUse(message,element,parentType){var ownerName=getCurrentOwnerDisplayName(),parentName="string"==typeof parentType?parentType:parentType.displayName||parentType.name,useName=ownerName||parentName,memoizer=ownerHasKeyUseWarning[message]||(ownerHasKeyUseWarning[message]={});if(!memoizer.hasOwnProperty(useName)){memoizer[useName]=!0;var parentOrOwnerAddendum=ownerName?" Check the render method of "+ownerName+".":parentName?" Check the React.render call using <"+parentName+">.":"",childOwnerAddendum="";if(element&&element._owner&&element._owner!==ReactCurrentOwner.current){var childOwnerName=getName(element._owner);childOwnerAddendum=" It was passed a child from "+childOwnerName+"."}"production"!==process.env.NODE_ENV?warning(!1,message+"%s%s See https://fb.me/react-warning-keys for more information.",parentOrOwnerAddendum,childOwnerAddendum):null}}function validateChildKeys(node,parentType){if(Array.isArray(node))for(var i=0;i<node.length;i++){var child=node[i];ReactElement.isValidElement(child)&&validateExplicitKey(child,parentType)}else if(ReactElement.isValidElement(node))node._store.validated=!0;else if(node){var iteratorFn=getIteratorFn(node);if(iteratorFn){if(iteratorFn!==node.entries)for(var step,iterator=iteratorFn.call(node);!(step=iterator.next()).done;)ReactElement.isValidElement(step.value)&&validateExplicitKey(step.value,parentType)}else if("object"==typeof node){var fragment=ReactFragment.extractIfFragment(node);for(var key in fragment)fragment.hasOwnProperty(key)&&validatePropertyKey(key,fragment[key],parentType)}}}function checkPropTypes(componentName,propTypes,props,location){for(var propName in propTypes)if(propTypes.hasOwnProperty(propName)){var error;try{"production"!==process.env.NODE_ENV?invariant("function"==typeof propTypes[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",componentName||"React class",ReactPropTypeLocationNames[location],propName):invariant("function"==typeof propTypes[propName]),error=propTypes[propName](props,propName,componentName,location)}catch(ex){error=ex}if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=!0;var addendum=getDeclarationErrorAddendum(this);"production"!==process.env.NODE_ENV?warning(!1,"Failed propType: %s%s",error.message,addendum):null}}}function warnForPropsMutation(propName,element){var type=element.type,elementName="string"==typeof type?type:type.displayName,ownerName=element._owner?element._owner.getPublicInstance().constructor.displayName:null,warningKey=propName+"|"+elementName+"|"+ownerName;if(!warnedPropsMutations.hasOwnProperty(warningKey)){warnedPropsMutations[warningKey]=!0;var elementInfo="";elementName&&(elementInfo=" <"+elementName+" />");var ownerInfo="";ownerName&&(ownerInfo=" The element was created by "+ownerName+"."),"production"!==process.env.NODE_ENV?warning(!1,"Don't set .props.%s of the React component%s. Instead, specify the correct value when initially creating the element or use React.cloneElement to make a new element with updated props.%s",propName,elementInfo,ownerInfo):null}}function is(a,b){return a!==a?b!==b:0===a&&0===b?1/a===1/b:a===b}function checkAndWarnForMutatedProps(element){if(element._store){var originalProps=element._store.originalProps,props=element.props;for(var propName in props)props.hasOwnProperty(propName)&&(originalProps.hasOwnProperty(propName)&&is(originalProps[propName],props[propName])||(warnForPropsMutation(propName,element),originalProps[propName]=props[propName]))}}function validatePropTypes(element){if(null!=element.type){var componentClass=ReactNativeComponent.getComponentClassForElement(element),name=componentClass.displayName||componentClass.name;componentClass.propTypes&&checkPropTypes(name,componentClass.propTypes,element.props,ReactPropTypeLocations.prop),"function"==typeof componentClass.getDefaultProps&&("production"!==process.env.NODE_ENV?warning(componentClass.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."):null)}}var ReactElement=require("./ReactElement"),ReactFragment=require("./ReactFragment"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactNativeComponent=require("./ReactNativeComponent"),getIteratorFn=require("./getIteratorFn"),invariant=require("./invariant"),warning=require("./warning"),ownerHasKeyUseWarning={},loggedTypeFailures={},NUMERIC_PROPERTY_REGEX=/^\d+$/,warnedPropsMutations={},ReactElementValidator={checkAndWarnForMutatedProps:checkAndWarnForMutatedProps,createElement:function(type,props,children){"production"!==process.env.NODE_ENV?warning(null!=type,"React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components)."):null;var element=ReactElement.createElement.apply(this,arguments);if(null==element)return element;for(var i=2;i<arguments.length;i++)validateChildKeys(arguments[i],type);return validatePropTypes(element),element},createFactory:function(type){var validatedFactory=ReactElementValidator.createElement.bind(null,type);if(validatedFactory.type=type,"production"!==process.env.NODE_ENV)try{Object.defineProperty(validatedFactory,"type",{enumerable:!1,get:function(){return"production"!==process.env.NODE_ENV?warning(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."):null,Object.defineProperty(this,"type",{value:type}),type}})}catch(x){}return validatedFactory},cloneElement:function(element,props,children){for(var newElement=ReactElement.cloneElement.apply(this,arguments),i=2;i<arguments.length;i++)validateChildKeys(arguments[i],newElement.type);return validatePropTypes(newElement),newElement}};module.exports=ReactElementValidator;


}).call(this,require('_process'))

},{"./ReactCurrentOwner":276,"./ReactElement":294,"./ReactFragment":300,"./ReactNativeComponent":311,"./ReactPropTypeLocationNames":315,"./ReactPropTypeLocations":316,"./getIteratorFn":373,"./invariant":382,"./warning":403,"_process":106}],296:[function(require,module,exports){
(function (process){
"use strict";function registerNullComponentID(id){nullComponentIDsRegistry[id]=!0}function deregisterNullComponentID(id){delete nullComponentIDsRegistry[id]}function isNullComponentID(id){return!!nullComponentIDsRegistry[id]}var ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),invariant=require("./invariant"),component,nullComponentIDsRegistry={},ReactEmptyComponentInjection={injectEmptyComponent:function(emptyComponent){component=ReactElement.createFactory(emptyComponent)}},ReactEmptyComponentType=function(){};ReactEmptyComponentType.prototype.componentDidMount=function(){var internalInstance=ReactInstanceMap.get(this);internalInstance&&registerNullComponentID(internalInstance._rootNodeID)},ReactEmptyComponentType.prototype.componentWillUnmount=function(){var internalInstance=ReactInstanceMap.get(this);internalInstance&&deregisterNullComponentID(internalInstance._rootNodeID)},ReactEmptyComponentType.prototype.render=function(){return"production"!==process.env.NODE_ENV?invariant(component,"Trying to return null from a render, but no null placeholder component was injected."):invariant(component),component()};var emptyElement=ReactElement.createElement(ReactEmptyComponentType),ReactEmptyComponent={emptyElement:emptyElement,injection:ReactEmptyComponentInjection,isNullComponentID:isNullComponentID};module.exports=ReactEmptyComponent;


}).call(this,require('_process'))

},{"./ReactElement":294,"./ReactInstanceMap":304,"./invariant":382,"_process":106}],297:[function(require,module,exports){
"use strict";var ReactErrorUtils={guard:function(func,name){return func}};module.exports=ReactErrorUtils;


},{}],298:[function(require,module,exports){
"use strict";function runEventQueueInBatch(events){EventPluginHub.enqueueEvents(events),EventPluginHub.processEventQueue()}var EventPluginHub=require("./EventPluginHub"),ReactEventEmitterMixin={handleTopLevel:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var events=EventPluginHub.extractEvents(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent);runEventQueueInBatch(events)}};module.exports=ReactEventEmitterMixin;


},{"./EventPluginHub":249}],299:[function(require,module,exports){
"use strict";function findParent(node){var nodeID=ReactMount.getID(node),rootID=ReactInstanceHandles.getReactRootIDFromNodeID(nodeID),container=ReactMount.findReactContainerForID(rootID),parent=ReactMount.getFirstReactDOM(container);return parent}function TopLevelCallbackBookKeeping(topLevelType,nativeEvent){this.topLevelType=topLevelType,this.nativeEvent=nativeEvent,this.ancestors=[]}function handleTopLevelImpl(bookKeeping){for(var topLevelTarget=ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent))||window,ancestor=topLevelTarget;ancestor;)bookKeeping.ancestors.push(ancestor),ancestor=findParent(ancestor);for(var i=0,l=bookKeeping.ancestors.length;l>i;i++){topLevelTarget=bookKeeping.ancestors[i];var topLevelTargetID=ReactMount.getID(topLevelTarget)||"";ReactEventListener._handleTopLevel(bookKeeping.topLevelType,topLevelTarget,topLevelTargetID,bookKeeping.nativeEvent)}}function scrollValueMonitor(cb){var scrollPosition=getUnboundedScrollPosition(window);cb(scrollPosition)}var EventListener=require("./EventListener"),ExecutionEnvironment=require("./ExecutionEnvironment"),PooledClass=require("./PooledClass"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),getEventTarget=require("./getEventTarget"),getUnboundedScrollPosition=require("./getUnboundedScrollPosition");assign(TopLevelCallbackBookKeeping.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),PooledClass.addPoolingTo(TopLevelCallbackBookKeeping,PooledClass.twoArgumentPooler);var ReactEventListener={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:ExecutionEnvironment.canUseDOM?window:null,setHandleTopLevel:function(handleTopLevel){ReactEventListener._handleTopLevel=handleTopLevel},setEnabled:function(enabled){ReactEventListener._enabled=!!enabled},isEnabled:function(){return ReactEventListener._enabled},trapBubbledEvent:function(topLevelType,handlerBaseName,handle){var element=handle;return element?EventListener.listen(element,handlerBaseName,ReactEventListener.dispatchEvent.bind(null,topLevelType)):null},trapCapturedEvent:function(topLevelType,handlerBaseName,handle){var element=handle;return element?EventListener.capture(element,handlerBaseName,ReactEventListener.dispatchEvent.bind(null,topLevelType)):null},monitorScrollValue:function(refresh){var callback=scrollValueMonitor.bind(null,refresh);EventListener.listen(window,"scroll",callback)},dispatchEvent:function(topLevelType,nativeEvent){if(ReactEventListener._enabled){var bookKeeping=TopLevelCallbackBookKeeping.getPooled(topLevelType,nativeEvent);try{ReactUpdates.batchedUpdates(handleTopLevelImpl,bookKeeping)}finally{TopLevelCallbackBookKeeping.release(bookKeeping)}}}};module.exports=ReactEventListener;


},{"./EventListener":248,"./ExecutionEnvironment":253,"./Object.assign":260,"./PooledClass":261,"./ReactInstanceHandles":303,"./ReactMount":308,"./ReactUpdates":331,"./getEventTarget":372,"./getUnboundedScrollPosition":378}],300:[function(require,module,exports){
(function (process){
"use strict";var ReactElement=require("./ReactElement"),warning=require("./warning");if("production"!==process.env.NODE_ENV){var fragmentKey="_reactFragment",didWarnKey="_reactDidWarn",canWarnForReactFragment=!1;try{var dummy=function(){return 1};Object.defineProperty({},fragmentKey,{enumerable:!1,value:!0}),Object.defineProperty({},"key",{enumerable:!0,get:dummy}),canWarnForReactFragment=!0}catch(x){}var proxyPropertyAccessWithWarning=function(obj,key){Object.defineProperty(obj,key,{enumerable:!0,get:function(){return"production"!==process.env.NODE_ENV?warning(this[didWarnKey],"A ReactFragment is an opaque type. Accessing any of its properties is deprecated. Pass it to one of the React.Children helpers."):null,this[didWarnKey]=!0,this[fragmentKey][key]},set:function(value){"production"!==process.env.NODE_ENV?warning(this[didWarnKey],"A ReactFragment is an immutable opaque type. Mutating its properties is deprecated."):null,this[didWarnKey]=!0,this[fragmentKey][key]=value}})},issuedWarnings={},didWarnForFragment=function(fragment){var fragmentCacheKey="";for(var key in fragment)fragmentCacheKey+=key+":"+typeof fragment[key]+",";var alreadyWarnedOnce=!!issuedWarnings[fragmentCacheKey];return issuedWarnings[fragmentCacheKey]=!0,alreadyWarnedOnce}}var ReactFragment={create:function(object){if("production"!==process.env.NODE_ENV){if("object"!=typeof object||!object||Array.isArray(object))return"production"!==process.env.NODE_ENV?warning(!1,"React.addons.createFragment only accepts a single object.",object):null,object;if(ReactElement.isValidElement(object))return"production"!==process.env.NODE_ENV?warning(!1,"React.addons.createFragment does not accept a ReactElement without a wrapper object."):null,object;if(canWarnForReactFragment){var proxy={};Object.defineProperty(proxy,fragmentKey,{enumerable:!1,value:object}),Object.defineProperty(proxy,didWarnKey,{writable:!0,enumerable:!1,value:!1});for(var key in object)proxyPropertyAccessWithWarning(proxy,key);return Object.preventExtensions(proxy),proxy}}return object},extract:function(fragment){return"production"!==process.env.NODE_ENV&&canWarnForReactFragment?fragment[fragmentKey]?fragment[fragmentKey]:("production"!==process.env.NODE_ENV?warning(didWarnForFragment(fragment),"Any use of a keyed object should be wrapped in React.addons.createFragment(object) before being passed as a child."):null,fragment):fragment},extractIfFragment:function(fragment){if("production"!==process.env.NODE_ENV&&canWarnForReactFragment){if(fragment[fragmentKey])return fragment[fragmentKey];for(var key in fragment)if(fragment.hasOwnProperty(key)&&ReactElement.isValidElement(fragment[key]))return ReactFragment.extract(fragment)}return fragment}};module.exports=ReactFragment;


}).call(this,require('_process'))

},{"./ReactElement":294,"./warning":403,"_process":106}],301:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),EventPluginHub=require("./EventPluginHub"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactClass=require("./ReactClass"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactNativeComponent=require("./ReactNativeComponent"),ReactDOMComponent=require("./ReactDOMComponent"),ReactPerf=require("./ReactPerf"),ReactRootIndex=require("./ReactRootIndex"),ReactUpdates=require("./ReactUpdates"),ReactInjection={Component:ReactComponentEnvironment.injection,Class:ReactClass.injection,DOMComponent:ReactDOMComponent.injection,DOMProperty:DOMProperty.injection,EmptyComponent:ReactEmptyComponent.injection,EventPluginHub:EventPluginHub.injection,EventEmitter:ReactBrowserEventEmitter.injection,NativeComponent:ReactNativeComponent.injection,Perf:ReactPerf.injection,RootIndex:ReactRootIndex.injection,Updates:ReactUpdates.injection};module.exports=ReactInjection;


},{"./DOMProperty":242,"./EventPluginHub":249,"./ReactBrowserEventEmitter":264,"./ReactClass":269,"./ReactComponentEnvironment":272,"./ReactDOMComponent":279,"./ReactEmptyComponent":296,"./ReactNativeComponent":311,"./ReactPerf":313,"./ReactRootIndex":322,"./ReactUpdates":331}],302:[function(require,module,exports){
"use strict";function isInDocument(node){return containsNode(document.documentElement,node)}var ReactDOMSelection=require("./ReactDOMSelection"),containsNode=require("./containsNode"),focusNode=require("./focusNode"),getActiveElement=require("./getActiveElement"),ReactInputSelection={hasSelectionCapabilities:function(elem){return elem&&("INPUT"===elem.nodeName&&"text"===elem.type||"TEXTAREA"===elem.nodeName||"true"===elem.contentEditable)},getSelectionInformation:function(){var focusedElem=getActiveElement();return{focusedElem:focusedElem,selectionRange:ReactInputSelection.hasSelectionCapabilities(focusedElem)?ReactInputSelection.getSelection(focusedElem):null}},restoreSelection:function(priorSelectionInformation){var curFocusedElem=getActiveElement(),priorFocusedElem=priorSelectionInformation.focusedElem,priorSelectionRange=priorSelectionInformation.selectionRange;curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)&&(ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)&&ReactInputSelection.setSelection(priorFocusedElem,priorSelectionRange),focusNode(priorFocusedElem))},getSelection:function(input){var selection;if("selectionStart"in input)selection={start:input.selectionStart,end:input.selectionEnd};else if(document.selection&&"INPUT"===input.nodeName){var range=document.selection.createRange();range.parentElement()===input&&(selection={start:-range.moveStart("character",-input.value.length),end:-range.moveEnd("character",-input.value.length)})}else selection=ReactDOMSelection.getOffsets(input);return selection||{start:0,end:0}},setSelection:function(input,offsets){var start=offsets.start,end=offsets.end;if("undefined"==typeof end&&(end=start),"selectionStart"in input)input.selectionStart=start,input.selectionEnd=Math.min(end,input.value.length);else if(document.selection&&"INPUT"===input.nodeName){var range=input.createTextRange();range.collapse(!0),range.moveStart("character",start),range.moveEnd("character",end-start),range.select()}else ReactDOMSelection.setOffsets(input,offsets)}};module.exports=ReactInputSelection;


},{"./ReactDOMSelection":287,"./containsNode":355,"./focusNode":366,"./getActiveElement":368}],303:[function(require,module,exports){
(function (process){
"use strict";function getReactRootIDString(index){return SEPARATOR+index.toString(36)}function isBoundary(id,index){return id.charAt(index)===SEPARATOR||index===id.length}function isValidID(id){return""===id||id.charAt(0)===SEPARATOR&&id.charAt(id.length-1)!==SEPARATOR}function isAncestorIDOf(ancestorID,descendantID){return 0===descendantID.indexOf(ancestorID)&&isBoundary(descendantID,ancestorID.length)}function getParentID(id){return id?id.substr(0,id.lastIndexOf(SEPARATOR)):""}function getNextDescendantID(ancestorID,destinationID){if("production"!==process.env.NODE_ENV?invariant(isValidID(ancestorID)&&isValidID(destinationID),"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",ancestorID,destinationID):invariant(isValidID(ancestorID)&&isValidID(destinationID)),"production"!==process.env.NODE_ENV?invariant(isAncestorIDOf(ancestorID,destinationID),"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",ancestorID,destinationID):invariant(isAncestorIDOf(ancestorID,destinationID)),ancestorID===destinationID)return ancestorID;var i,start=ancestorID.length+SEPARATOR_LENGTH;for(i=start;i<destinationID.length&&!isBoundary(destinationID,i);i++);return destinationID.substr(0,i)}function getFirstCommonAncestorID(oneID,twoID){var minLength=Math.min(oneID.length,twoID.length);if(0===minLength)return"";for(var lastCommonMarkerIndex=0,i=0;minLength>=i;i++)if(isBoundary(oneID,i)&&isBoundary(twoID,i))lastCommonMarkerIndex=i;else if(oneID.charAt(i)!==twoID.charAt(i))break;var longestCommonID=oneID.substr(0,lastCommonMarkerIndex);return"production"!==process.env.NODE_ENV?invariant(isValidID(longestCommonID),"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",oneID,twoID,longestCommonID):invariant(isValidID(longestCommonID)),longestCommonID}function traverseParentPath(start,stop,cb,arg,skipFirst,skipLast){start=start||"",stop=stop||"","production"!==process.env.NODE_ENV?invariant(start!==stop,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",start):invariant(start!==stop);var traverseUp=isAncestorIDOf(stop,start);"production"!==process.env.NODE_ENV?invariant(traverseUp||isAncestorIDOf(start,stop),"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",start,stop):invariant(traverseUp||isAncestorIDOf(start,stop));for(var depth=0,traverse=traverseUp?getParentID:getNextDescendantID,id=start;;id=traverse(id,stop)){var ret;if(skipFirst&&id===start||skipLast&&id===stop||(ret=cb(id,traverseUp,arg)),ret===!1||id===stop)break;"production"!==process.env.NODE_ENV?invariant(depth++<MAX_TREE_DEPTH,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",start,stop):invariant(depth++<MAX_TREE_DEPTH)}}var ReactRootIndex=require("./ReactRootIndex"),invariant=require("./invariant"),SEPARATOR=".",SEPARATOR_LENGTH=SEPARATOR.length,MAX_TREE_DEPTH=100,ReactInstanceHandles={createReactRootID:function(){return getReactRootIDString(ReactRootIndex.createReactRootIndex())},createReactID:function(rootID,name){return rootID+name},getReactRootIDFromNodeID:function(id){if(id&&id.charAt(0)===SEPARATOR&&id.length>1){var index=id.indexOf(SEPARATOR,1);return index>-1?id.substr(0,index):id}return null},traverseEnterLeave:function(leaveID,enterID,cb,upArg,downArg){var ancestorID=getFirstCommonAncestorID(leaveID,enterID);ancestorID!==leaveID&&traverseParentPath(leaveID,ancestorID,cb,upArg,!1,!0),ancestorID!==enterID&&traverseParentPath(ancestorID,enterID,cb,downArg,!0,!1)},traverseTwoPhase:function(targetID,cb,arg){targetID&&(traverseParentPath("",targetID,cb,arg,!0,!1),traverseParentPath(targetID,"",cb,arg,!1,!0))},traverseAncestors:function(targetID,cb,arg){traverseParentPath("",targetID,cb,arg,!0,!1)},_getFirstCommonAncestorID:getFirstCommonAncestorID,_getNextDescendantID:getNextDescendantID,isAncestorIDOf:isAncestorIDOf,SEPARATOR:SEPARATOR};module.exports=ReactInstanceHandles;


}).call(this,require('_process'))

},{"./ReactRootIndex":322,"./invariant":382,"_process":106}],304:[function(require,module,exports){
"use strict";var ReactInstanceMap={remove:function(key){key._reactInternalInstance=void 0},get:function(key){return key._reactInternalInstance},has:function(key){return void 0!==key._reactInternalInstance},set:function(key,value){key._reactInternalInstance=value}};module.exports=ReactInstanceMap;


},{}],305:[function(require,module,exports){
"use strict";var ReactLifeCycle={currentlyMountingInstance:null,currentlyUnmountingInstance:null};module.exports=ReactLifeCycle;


},{}],306:[function(require,module,exports){
"use strict";function ReactLink(value,requestChange){this.value=value,this.requestChange=requestChange}function createLinkTypeChecker(linkType){var shapes={value:"undefined"==typeof linkType?React.PropTypes.any.isRequired:linkType.isRequired,requestChange:React.PropTypes.func.isRequired};return React.PropTypes.shape(shapes)}var React=require("./React");ReactLink.PropTypes={link:createLinkTypeChecker},module.exports=ReactLink;


},{"./React":262}],307:[function(require,module,exports){
"use strict";var adler32=require("./adler32"),ReactMarkupChecksum={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(markup){var checksum=adler32(markup);return markup.replace(">"," "+ReactMarkupChecksum.CHECKSUM_ATTR_NAME+'="'+checksum+'">')},canReuseMarkup:function(markup,element){var existingChecksum=element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);existingChecksum=existingChecksum&&parseInt(existingChecksum,10);var markupChecksum=adler32(markup);return markupChecksum===existingChecksum}};module.exports=ReactMarkupChecksum;


},{"./adler32":351}],308:[function(require,module,exports){
(function (process){
"use strict";function firstDifferenceIndex(string1,string2){for(var minLen=Math.min(string1.length,string2.length),i=0;minLen>i;i++)if(string1.charAt(i)!==string2.charAt(i))return i;return string1.length===string2.length?-1:minLen}function getReactRootID(container){var rootElement=getReactRootElementInContainer(container);return rootElement&&ReactMount.getID(rootElement)}function getID(node){var id=internalGetID(node);if(id)if(nodeCache.hasOwnProperty(id)){var cached=nodeCache[id];cached!==node&&("production"!==process.env.NODE_ENV?invariant(!isValid(cached,id),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",ATTR_NAME,id):invariant(!isValid(cached,id)),nodeCache[id]=node)}else nodeCache[id]=node;return id}function internalGetID(node){return node&&node.getAttribute&&node.getAttribute(ATTR_NAME)||""}function setID(node,id){var oldID=internalGetID(node);oldID!==id&&delete nodeCache[oldID],node.setAttribute(ATTR_NAME,id),nodeCache[id]=node}function getNode(id){return nodeCache.hasOwnProperty(id)&&isValid(nodeCache[id],id)||(nodeCache[id]=ReactMount.findReactNodeByID(id)),nodeCache[id]}function getNodeFromInstance(instance){var id=ReactInstanceMap.get(instance)._rootNodeID;return ReactEmptyComponent.isNullComponentID(id)?null:(nodeCache.hasOwnProperty(id)&&isValid(nodeCache[id],id)||(nodeCache[id]=ReactMount.findReactNodeByID(id)),nodeCache[id])}function isValid(node,id){if(node){"production"!==process.env.NODE_ENV?invariant(internalGetID(node)===id,"ReactMount: Unexpected modification of `%s`",ATTR_NAME):invariant(internalGetID(node)===id);var container=ReactMount.findReactContainerForID(id);if(container&&containsNode(container,node))return!0}return!1}function purgeID(id){delete nodeCache[id]}function findDeepestCachedAncestorImpl(ancestorID){var ancestor=nodeCache[ancestorID];return ancestor&&isValid(ancestor,ancestorID)?void(deepestNodeSoFar=ancestor):!1}function findDeepestCachedAncestor(targetID){deepestNodeSoFar=null,ReactInstanceHandles.traverseAncestors(targetID,findDeepestCachedAncestorImpl);var foundNode=deepestNodeSoFar;return deepestNodeSoFar=null,foundNode}function mountComponentIntoNode(componentInstance,rootID,container,transaction,shouldReuseMarkup){var markup=ReactReconciler.mountComponent(componentInstance,rootID,transaction,emptyObject);componentInstance._isTopLevel=!0,ReactMount._mountImageIntoNode(markup,container,shouldReuseMarkup)}function batchedMountComponentIntoNode(componentInstance,rootID,container,shouldReuseMarkup){var transaction=ReactUpdates.ReactReconcileTransaction.getPooled();transaction.perform(mountComponentIntoNode,null,componentInstance,rootID,container,transaction,shouldReuseMarkup),ReactUpdates.ReactReconcileTransaction.release(transaction)}var DOMProperty=require("./DOMProperty"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),ReactUpdates=require("./ReactUpdates"),emptyObject=require("./emptyObject"),containsNode=require("./containsNode"),getReactRootElementInContainer=require("./getReactRootElementInContainer"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("./invariant"),setInnerHTML=require("./setInnerHTML"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("./warning"),SEPARATOR=ReactInstanceHandles.SEPARATOR,ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,nodeCache={},ELEMENT_NODE_TYPE=1,DOC_NODE_TYPE=9,instancesByReactRootID={},containersByReactRootID={};if("production"!==process.env.NODE_ENV)var rootElementsByReactRootID={};var findComponentRootReusableArray=[],deepestNodeSoFar=null,ReactMount={_instancesByReactRootID:instancesByReactRootID,scrollMonitor:function(container,renderCallback){renderCallback()},_updateRootComponent:function(prevComponent,nextElement,container,callback){return"production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(nextElement),ReactMount.scrollMonitor(container,function(){ReactUpdateQueue.enqueueElementInternal(prevComponent,nextElement),callback&&ReactUpdateQueue.enqueueCallbackInternal(prevComponent,callback)}),"production"!==process.env.NODE_ENV&&(rootElementsByReactRootID[getReactRootID(container)]=getReactRootElementInContainer(container)),prevComponent},_registerComponent:function(nextComponent,container){"production"!==process.env.NODE_ENV?invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE),"_registerComponent(...): Target container is not a DOM element."):invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE)),ReactBrowserEventEmitter.ensureScrollValueMonitoring();var reactRootID=ReactMount.registerContainer(container);return instancesByReactRootID[reactRootID]=nextComponent,reactRootID},_renderNewRootComponent:function(nextElement,container,shouldReuseMarkup){"production"!==process.env.NODE_ENV?warning(null==ReactCurrentOwner.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var componentInstance=instantiateReactComponent(nextElement,null),reactRootID=ReactMount._registerComponent(componentInstance,container);return ReactUpdates.batchedUpdates(batchedMountComponentIntoNode,componentInstance,reactRootID,container,shouldReuseMarkup),"production"!==process.env.NODE_ENV&&(rootElementsByReactRootID[reactRootID]=getReactRootElementInContainer(container)),componentInstance},render:function(nextElement,container,callback){"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(nextElement),"React.render(): Invalid component element.%s","string"==typeof nextElement?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":"function"==typeof nextElement?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":null!=nextElement&&void 0!==nextElement.props?" This may be caused by unintentionally loading two independent copies of React.":""):invariant(ReactElement.isValidElement(nextElement));var prevComponent=instancesByReactRootID[getReactRootID(container)];if(prevComponent){var prevElement=prevComponent._currentElement;if(shouldUpdateReactComponent(prevElement,nextElement))return ReactMount._updateRootComponent(prevComponent,nextElement,container,callback).getPublicInstance();ReactMount.unmountComponentAtNode(container)}var reactRootElement=getReactRootElementInContainer(container),containerHasReactMarkup=reactRootElement&&ReactMount.isRenderedByReact(reactRootElement);if("production"!==process.env.NODE_ENV&&(!containerHasReactMarkup||reactRootElement.nextSibling))for(var rootElementSibling=reactRootElement;rootElementSibling;){if(ReactMount.isRenderedByReact(rootElementSibling)){"production"!==process.env.NODE_ENV?warning(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."):null;break}rootElementSibling=rootElementSibling.nextSibling}var shouldReuseMarkup=containerHasReactMarkup&&!prevComponent,component=ReactMount._renderNewRootComponent(nextElement,container,shouldReuseMarkup).getPublicInstance();return callback&&callback.call(component),component},constructAndRenderComponent:function(constructor,props,container){var element=ReactElement.createElement(constructor,props);return ReactMount.render(element,container)},constructAndRenderComponentByID:function(constructor,props,id){var domNode=document.getElementById(id);return"production"!==process.env.NODE_ENV?invariant(domNode,'Tried to get element with id of "%s" but it is not present on the page.',id):invariant(domNode),ReactMount.constructAndRenderComponent(constructor,props,domNode)},registerContainer:function(container){var reactRootID=getReactRootID(container);return reactRootID&&(reactRootID=ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID)),reactRootID||(reactRootID=ReactInstanceHandles.createReactRootID()),containersByReactRootID[reactRootID]=container,reactRootID},unmountComponentAtNode:function(container){"production"!==process.env.NODE_ENV?warning(null==ReactCurrentOwner.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,"production"!==process.env.NODE_ENV?invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE),"unmountComponentAtNode(...): Target container is not a DOM element."):invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE));var reactRootID=getReactRootID(container),component=instancesByReactRootID[reactRootID];return component?(ReactMount.unmountComponentFromNode(component,container),delete instancesByReactRootID[reactRootID],delete containersByReactRootID[reactRootID],"production"!==process.env.NODE_ENV&&delete rootElementsByReactRootID[reactRootID],!0):!1},unmountComponentFromNode:function(instance,container){for(ReactReconciler.unmountComponent(instance),container.nodeType===DOC_NODE_TYPE&&(container=container.documentElement);container.lastChild;)container.removeChild(container.lastChild)},findReactContainerForID:function(id){var reactRootID=ReactInstanceHandles.getReactRootIDFromNodeID(id),container=containersByReactRootID[reactRootID];if("production"!==process.env.NODE_ENV){var rootElement=rootElementsByReactRootID[reactRootID];if(rootElement&&rootElement.parentNode!==container){"production"!==process.env.NODE_ENV?invariant(internalGetID(rootElement)===reactRootID,"ReactMount: Root element ID differed from reactRootID."):invariant(internalGetID(rootElement)===reactRootID);var containerChild=container.firstChild;containerChild&&reactRootID===internalGetID(containerChild)?rootElementsByReactRootID[reactRootID]=containerChild:"production"!==process.env.NODE_ENV?warning(!1,"ReactMount: Root element has been removed from its original container. New container:",rootElement.parentNode):null}}return container},findReactNodeByID:function(id){var reactRoot=ReactMount.findReactContainerForID(id);return ReactMount.findComponentRoot(reactRoot,id)},isRenderedByReact:function(node){if(1!==node.nodeType)return!1;var id=ReactMount.getID(node);return id?id.charAt(0)===SEPARATOR:!1},getFirstReactDOM:function(node){for(var current=node;current&&current.parentNode!==current;){if(ReactMount.isRenderedByReact(current))return current;current=current.parentNode}return null},findComponentRoot:function(ancestorNode,targetID){var firstChildren=findComponentRootReusableArray,childIndex=0,deepestAncestor=findDeepestCachedAncestor(targetID)||ancestorNode;for(firstChildren[0]=deepestAncestor.firstChild,firstChildren.length=1;childIndex<firstChildren.length;){for(var targetChild,child=firstChildren[childIndex++];child;){var childID=ReactMount.getID(child);childID?targetID===childID?targetChild=child:ReactInstanceHandles.isAncestorIDOf(childID,targetID)&&(firstChildren.length=childIndex=0,firstChildren.push(child.firstChild)):firstChildren.push(child.firstChild),child=child.nextSibling}if(targetChild)return firstChildren.length=0,targetChild}firstChildren.length=0,"production"!==process.env.NODE_ENV?invariant(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",targetID,ReactMount.getID(ancestorNode)):invariant(!1)},_mountImageIntoNode:function(markup,container,shouldReuseMarkup){if("production"!==process.env.NODE_ENV?invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE),"mountComponentIntoNode(...): Target container is not valid."):invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE)),shouldReuseMarkup){var rootElement=getReactRootElementInContainer(container);if(ReactMarkupChecksum.canReuseMarkup(markup,rootElement))return;var checksum=rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);var rootMarkup=rootElement.outerHTML;rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME,checksum);var diffIndex=firstDifferenceIndex(markup,rootMarkup),difference=" (client) "+markup.substring(diffIndex-20,diffIndex+20)+"\n (server) "+rootMarkup.substring(diffIndex-20,diffIndex+20);"production"!==process.env.NODE_ENV?invariant(container.nodeType!==DOC_NODE_TYPE,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",difference):invariant(container.nodeType!==DOC_NODE_TYPE),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",difference):null)}"production"!==process.env.NODE_ENV?invariant(container.nodeType!==DOC_NODE_TYPE,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See React.renderToString() for server rendering."):invariant(container.nodeType!==DOC_NODE_TYPE),setInnerHTML(container,markup)},getReactRootID:getReactRootID,getID:getID,setID:setID,getNode:getNode,getNodeFromInstance:getNodeFromInstance,purgeID:purgeID};ReactPerf.measureMethods(ReactMount,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),module.exports=ReactMount;


}).call(this,require('_process'))

},{"./DOMProperty":242,"./ReactBrowserEventEmitter":264,"./ReactCurrentOwner":276,"./ReactElement":294,"./ReactElementValidator":295,"./ReactEmptyComponent":296,"./ReactInstanceHandles":303,"./ReactInstanceMap":304,"./ReactMarkupChecksum":307,"./ReactPerf":313,"./ReactReconciler":320,"./ReactUpdateQueue":330,"./ReactUpdates":331,"./containsNode":355,"./emptyObject":362,"./getReactRootElementInContainer":376,"./instantiateReactComponent":381,"./invariant":382,"./setInnerHTML":396,"./shouldUpdateReactComponent":399,"./warning":403,"_process":106}],309:[function(require,module,exports){
"use strict";function enqueueMarkup(parentID,markup,toIndex){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.INSERT_MARKUP,markupIndex:markupQueue.push(markup)-1,textContent:null,fromIndex:null,toIndex:toIndex})}function enqueueMove(parentID,fromIndex,toIndex){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:fromIndex,toIndex:toIndex})}function enqueueRemove(parentID,fromIndex){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:fromIndex,toIndex:null})}function enqueueTextContent(parentID,textContent){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.TEXT_CONTENT,markupIndex:null,textContent:textContent,fromIndex:null,toIndex:null})}function processQueue(){updateQueue.length&&(ReactComponentEnvironment.processChildrenUpdates(updateQueue,markupQueue),clearQueue())}function clearQueue(){updateQueue.length=0,markupQueue.length=0}var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),ReactReconciler=require("./ReactReconciler"),ReactChildReconciler=require("./ReactChildReconciler"),updateDepth=0,updateQueue=[],markupQueue=[],ReactMultiChild={Mixin:{mountChildren:function(nestedChildren,transaction,context){var children=ReactChildReconciler.instantiateChildren(nestedChildren,transaction,context);this._renderedChildren=children;var mountImages=[],index=0;for(var name in children)if(children.hasOwnProperty(name)){var child=children[name],rootID=this._rootNodeID+name,mountImage=ReactReconciler.mountComponent(child,rootID,transaction,context);child._mountIndex=index,mountImages.push(mountImage),index++}return mountImages},updateTextContent:function(nextContent){updateDepth++;var errorThrown=!0;try{var prevChildren=this._renderedChildren;ReactChildReconciler.unmountChildren(prevChildren);for(var name in prevChildren)prevChildren.hasOwnProperty(name)&&this._unmountChildByName(prevChildren[name],name);this.setTextContent(nextContent),errorThrown=!1}finally{updateDepth--,updateDepth||(errorThrown?clearQueue():processQueue())}},updateChildren:function(nextNestedChildren,transaction,context){updateDepth++;var errorThrown=!0;try{this._updateChildren(nextNestedChildren,transaction,context),errorThrown=!1}finally{updateDepth--,updateDepth||(errorThrown?clearQueue():processQueue())}},_updateChildren:function(nextNestedChildren,transaction,context){var prevChildren=this._renderedChildren,nextChildren=ReactChildReconciler.updateChildren(prevChildren,nextNestedChildren,transaction,context);if(this._renderedChildren=nextChildren,nextChildren||prevChildren){var name,lastIndex=0,nextIndex=0;for(name in nextChildren)if(nextChildren.hasOwnProperty(name)){var prevChild=prevChildren&&prevChildren[name],nextChild=nextChildren[name];prevChild===nextChild?(this.moveChild(prevChild,nextIndex,lastIndex),lastIndex=Math.max(prevChild._mountIndex,lastIndex),prevChild._mountIndex=nextIndex):(prevChild&&(lastIndex=Math.max(prevChild._mountIndex,lastIndex),this._unmountChildByName(prevChild,name)),this._mountChildByNameAtIndex(nextChild,name,nextIndex,transaction,context)),nextIndex++}for(name in prevChildren)!prevChildren.hasOwnProperty(name)||nextChildren&&nextChildren.hasOwnProperty(name)||this._unmountChildByName(prevChildren[name],name)}},unmountChildren:function(){var renderedChildren=this._renderedChildren;ReactChildReconciler.unmountChildren(renderedChildren),this._renderedChildren=null},moveChild:function(child,toIndex,lastIndex){child._mountIndex<lastIndex&&enqueueMove(this._rootNodeID,child._mountIndex,toIndex)},createChild:function(child,mountImage){enqueueMarkup(this._rootNodeID,mountImage,child._mountIndex)},removeChild:function(child){enqueueRemove(this._rootNodeID,child._mountIndex)},setTextContent:function(textContent){enqueueTextContent(this._rootNodeID,textContent)},_mountChildByNameAtIndex:function(child,name,index,transaction,context){var rootID=this._rootNodeID+name,mountImage=ReactReconciler.mountComponent(child,rootID,transaction,context);child._mountIndex=index,this.createChild(child,mountImage)},_unmountChildByName:function(child,name){this.removeChild(child),child._mountIndex=null}}};module.exports=ReactMultiChild;


},{"./ReactChildReconciler":267,"./ReactComponentEnvironment":272,"./ReactMultiChildUpdateTypes":310,"./ReactReconciler":320}],310:[function(require,module,exports){
"use strict";var keyMirror=require("./keyMirror"),ReactMultiChildUpdateTypes=keyMirror({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});module.exports=ReactMultiChildUpdateTypes;


},{"./keyMirror":388}],311:[function(require,module,exports){
(function (process){
"use strict";function getComponentClassForElement(element){if("function"==typeof element.type)return element.type;var tag=element.type,componentClass=tagToComponentClass[tag];return null==componentClass&&(tagToComponentClass[tag]=componentClass=autoGenerateWrapperClass(tag)),componentClass}function createInternalComponent(element){return"production"!==process.env.NODE_ENV?invariant(genericComponentClass,"There is no registered component for the tag %s",element.type):invariant(genericComponentClass),new genericComponentClass(element.type,element.props)}function createInstanceForText(text){return new textComponentClass(text)}function isTextComponent(component){return component instanceof textComponentClass}var assign=require("./Object.assign"),invariant=require("./invariant"),autoGenerateWrapperClass=null,genericComponentClass=null,tagToComponentClass={},textComponentClass=null,ReactNativeComponentInjection={injectGenericComponentClass:function(componentClass){genericComponentClass=componentClass},injectTextComponentClass:function(componentClass){textComponentClass=componentClass},injectComponentClasses:function(componentClasses){assign(tagToComponentClass,componentClasses)},injectAutoWrapper:function(wrapperFactory){autoGenerateWrapperClass=wrapperFactory}},ReactNativeComponent={getComponentClassForElement:getComponentClassForElement,createInternalComponent:createInternalComponent,createInstanceForText:createInstanceForText,isTextComponent:isTextComponent,injection:ReactNativeComponentInjection};module.exports=ReactNativeComponent;


}).call(this,require('_process'))

},{"./Object.assign":260,"./invariant":382,"_process":106}],312:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),ReactOwner={isValidOwner:function(object){return!(!object||"function"!=typeof object.attachRef||"function"!=typeof object.detachRef)},addComponentAsRefTo:function(component,ref,owner){"production"!==process.env.NODE_ENV?invariant(ReactOwner.isValidOwner(owner),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):invariant(ReactOwner.isValidOwner(owner)),owner.attachRef(ref,component)},removeComponentAsRefFrom:function(component,ref,owner){"production"!==process.env.NODE_ENV?invariant(ReactOwner.isValidOwner(owner),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):invariant(ReactOwner.isValidOwner(owner)),owner.getPublicInstance().refs[ref]===component.getPublicInstance()&&owner.detachRef(ref)}};module.exports=ReactOwner;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],313:[function(require,module,exports){
(function (process){
"use strict";function _noMeasure(objName,fnName,func){return func}var ReactPerf={enableMeasure:!1,storedMeasure:_noMeasure,measureMethods:function(object,objectName,methodNames){if("production"!==process.env.NODE_ENV)for(var key in methodNames)methodNames.hasOwnProperty(key)&&(object[key]=ReactPerf.measure(objectName,methodNames[key],object[key]))},measure:function(objName,fnName,func){if("production"!==process.env.NODE_ENV){var measuredFunc=null,wrapper=function(){return ReactPerf.enableMeasure?(measuredFunc||(measuredFunc=ReactPerf.storedMeasure(objName,fnName,func)),measuredFunc.apply(this,arguments)):func.apply(this,arguments)};return wrapper.displayName=objName+"_"+fnName,wrapper}return func},injection:{injectMeasure:function(measure){ReactPerf.storedMeasure=measure}}};module.exports=ReactPerf;


}).call(this,require('_process'))

},{"_process":106}],314:[function(require,module,exports){
"use strict";function createTransferStrategy(mergeStrategy){return function(props,key,value){props.hasOwnProperty(key)?props[key]=mergeStrategy(props[key],value):props[key]=value}}function transferInto(props,newProps){for(var thisKey in newProps)if(newProps.hasOwnProperty(thisKey)){var transferStrategy=TransferStrategies[thisKey];transferStrategy&&TransferStrategies.hasOwnProperty(thisKey)?transferStrategy(props,thisKey,newProps[thisKey]):props.hasOwnProperty(thisKey)||(props[thisKey]=newProps[thisKey])}return props}var assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),joinClasses=require("./joinClasses"),transferStrategyMerge=createTransferStrategy(function(a,b){return assign({},b,a)}),TransferStrategies={children:emptyFunction,className:createTransferStrategy(joinClasses),style:transferStrategyMerge},ReactPropTransferer={mergeProps:function(oldProps,newProps){return transferInto(assign({},oldProps),newProps)}};module.exports=ReactPropTransferer;


},{"./Object.assign":260,"./emptyFunction":361,"./joinClasses":387}],315:[function(require,module,exports){
(function (process){
"use strict";var ReactPropTypeLocationNames={};"production"!==process.env.NODE_ENV&&(ReactPropTypeLocationNames={prop:"prop",context:"context",childContext:"child context"}),module.exports=ReactPropTypeLocationNames;


}).call(this,require('_process'))

},{"_process":106}],316:[function(require,module,exports){
"use strict";var keyMirror=require("./keyMirror"),ReactPropTypeLocations=keyMirror({prop:null,context:null,childContext:null});module.exports=ReactPropTypeLocations;


},{"./keyMirror":388}],317:[function(require,module,exports){
"use strict";function createChainableTypeChecker(validate){function checkType(isRequired,props,propName,componentName,location){if(componentName=componentName||ANONYMOUS,null==props[propName]){var locationName=ReactPropTypeLocationNames[location];return isRequired?new Error("Required "+locationName+" `"+propName+"` was not specified in "+("`"+componentName+"`.")):null}return validate(props,propName,componentName,location)}var chainedCheckType=checkType.bind(null,!1);return chainedCheckType.isRequired=checkType.bind(null,!0),chainedCheckType}function createPrimitiveTypeChecker(expectedType){function validate(props,propName,componentName,location){var propValue=props[propName],propType=getPropType(propValue);if(propType!==expectedType){var locationName=ReactPropTypeLocationNames[location],preciseType=getPreciseType(propValue);return new Error("Invalid "+locationName+" `"+propName+"` of type `"+preciseType+"` "+("supplied to `"+componentName+"`, expected `"+expectedType+"`."))}return null}return createChainableTypeChecker(validate)}function createAnyTypeChecker(){return createChainableTypeChecker(emptyFunction.thatReturns(null))}function createArrayOfTypeChecker(typeChecker){function validate(props,propName,componentName,location){var propValue=props[propName];if(!Array.isArray(propValue)){var locationName=ReactPropTypeLocationNames[location],propType=getPropType(propValue);return new Error("Invalid "+locationName+" `"+propName+"` of type "+("`"+propType+"` supplied to `"+componentName+"`, expected an array."))}for(var i=0;i<propValue.length;i++){var error=typeChecker(propValue,i,componentName,location);if(error instanceof Error)return error}return null}return createChainableTypeChecker(validate)}function createElementTypeChecker(){function validate(props,propName,componentName,location){if(!ReactElement.isValidElement(props[propName])){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`, expected a ReactElement."))}return null}return createChainableTypeChecker(validate)}function createInstanceTypeChecker(expectedClass){function validate(props,propName,componentName,location){if(!(props[propName]instanceof expectedClass)){var locationName=ReactPropTypeLocationNames[location],expectedClassName=expectedClass.name||ANONYMOUS;return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`, expected instance of `"+expectedClassName+"`."))}return null}return createChainableTypeChecker(validate)}function createEnumTypeChecker(expectedValues){function validate(props,propName,componentName,location){for(var propValue=props[propName],i=0;i<expectedValues.length;i++)if(propValue===expectedValues[i])return null;var locationName=ReactPropTypeLocationNames[location],valuesString=JSON.stringify(expectedValues);return new Error("Invalid "+locationName+" `"+propName+"` of value `"+propValue+"` "+("supplied to `"+componentName+"`, expected one of "+valuesString+"."))}return createChainableTypeChecker(validate)}function createObjectOfTypeChecker(typeChecker){function validate(props,propName,componentName,location){var propValue=props[propName],propType=getPropType(propValue);if("object"!==propType){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` of type "+("`"+propType+"` supplied to `"+componentName+"`, expected an object."))}for(var key in propValue)if(propValue.hasOwnProperty(key)){var error=typeChecker(propValue,key,componentName,location);if(error instanceof Error)return error}return null}return createChainableTypeChecker(validate)}function createUnionTypeChecker(arrayOfTypeCheckers){function validate(props,propName,componentName,location){for(var i=0;i<arrayOfTypeCheckers.length;i++){var checker=arrayOfTypeCheckers[i];if(null==checker(props,propName,componentName,location))return null}var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`."))}return createChainableTypeChecker(validate)}function createNodeChecker(){function validate(props,propName,componentName,location){if(!isNode(props[propName])){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`, expected a ReactNode."))}return null}return createChainableTypeChecker(validate)}function createShapeTypeChecker(shapeTypes){function validate(props,propName,componentName,location){var propValue=props[propName],propType=getPropType(propValue);if("object"!==propType){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` of type `"+propType+"` "+("supplied to `"+componentName+"`, expected `object`."))}for(var key in shapeTypes){var checker=shapeTypes[key];if(checker){var error=checker(propValue,key,componentName,location);if(error)return error}}return null}return createChainableTypeChecker(validate)}function isNode(propValue){switch(typeof propValue){case"number":case"string":case"undefined":return!0;case"boolean":return!propValue;case"object":if(Array.isArray(propValue))return propValue.every(isNode);if(null===propValue||ReactElement.isValidElement(propValue))return!0;propValue=ReactFragment.extractIfFragment(propValue);for(var k in propValue)if(!isNode(propValue[k]))return!1;return!0;default:return!1}}function getPropType(propValue){var propType=typeof propValue;return Array.isArray(propValue)?"array":propValue instanceof RegExp?"object":propType}function getPreciseType(propValue){var propType=getPropType(propValue);if("object"===propType){if(propValue instanceof Date)return"date";if(propValue instanceof RegExp)return"regexp"}return propType}var ReactElement=require("./ReactElement"),ReactFragment=require("./ReactFragment"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),emptyFunction=require("./emptyFunction"),ANONYMOUS="<<anonymous>>",elementTypeChecker=createElementTypeChecker(),nodeTypeChecker=createNodeChecker(),ReactPropTypes={array:createPrimitiveTypeChecker("array"),bool:createPrimitiveTypeChecker("boolean"),func:createPrimitiveTypeChecker("function"),number:createPrimitiveTypeChecker("number"),object:createPrimitiveTypeChecker("object"),string:createPrimitiveTypeChecker("string"),any:createAnyTypeChecker(),arrayOf:createArrayOfTypeChecker,element:elementTypeChecker,instanceOf:createInstanceTypeChecker,node:nodeTypeChecker,objectOf:createObjectOfTypeChecker,oneOf:createEnumTypeChecker,oneOfType:createUnionTypeChecker,shape:createShapeTypeChecker};module.exports=ReactPropTypes;


},{"./ReactElement":294,"./ReactFragment":300,"./ReactPropTypeLocationNames":315,"./emptyFunction":361}],318:[function(require,module,exports){
"use strict";function ReactPutListenerQueue(){this.listenersToPut=[]}var PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),assign=require("./Object.assign");assign(ReactPutListenerQueue.prototype,{enqueuePutListener:function(rootNodeID,propKey,propValue){this.listenersToPut.push({rootNodeID:rootNodeID,propKey:propKey,propValue:propValue})},putListeners:function(){for(var i=0;i<this.listenersToPut.length;i++){var listenerToPut=this.listenersToPut[i];ReactBrowserEventEmitter.putListener(listenerToPut.rootNodeID,listenerToPut.propKey,listenerToPut.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),PooledClass.addPoolingTo(ReactPutListenerQueue),module.exports=ReactPutListenerQueue;


},{"./Object.assign":260,"./PooledClass":261,"./ReactBrowserEventEmitter":264}],319:[function(require,module,exports){
"use strict";function ReactReconcileTransaction(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=CallbackQueue.getPooled(null),this.putListenerQueue=ReactPutListenerQueue.getPooled()}var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactInputSelection=require("./ReactInputSelection"),ReactPutListenerQueue=require("./ReactPutListenerQueue"),Transaction=require("./Transaction"),assign=require("./Object.assign"),SELECTION_RESTORATION={initialize:ReactInputSelection.getSelectionInformation,close:ReactInputSelection.restoreSelection},EVENT_SUPPRESSION={initialize:function(){var currentlyEnabled=ReactBrowserEventEmitter.isEnabled();return ReactBrowserEventEmitter.setEnabled(!1),currentlyEnabled},close:function(previouslyEnabled){ReactBrowserEventEmitter.setEnabled(previouslyEnabled)}},ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},PUT_LISTENER_QUEUEING={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},TRANSACTION_WRAPPERS=[PUT_LISTENER_QUEUEING,SELECTION_RESTORATION,EVENT_SUPPRESSION,ON_DOM_READY_QUEUEING],Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null,ReactPutListenerQueue.release(this.putListenerQueue),this.putListenerQueue=null}};assign(ReactReconcileTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactReconcileTransaction),module.exports=ReactReconcileTransaction;


},{"./CallbackQueue":238,"./Object.assign":260,"./PooledClass":261,"./ReactBrowserEventEmitter":264,"./ReactInputSelection":302,"./ReactPutListenerQueue":318,"./Transaction":348}],320:[function(require,module,exports){
(function (process){
"use strict";function attachRefs(){ReactRef.attachRefs(this,this._currentElement)}var ReactRef=require("./ReactRef"),ReactElementValidator=require("./ReactElementValidator"),ReactReconciler={mountComponent:function(internalInstance,rootID,transaction,context){var markup=internalInstance.mountComponent(rootID,transaction,context);return"production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(internalInstance._currentElement),transaction.getReactMountReady().enqueue(attachRefs,internalInstance),markup},unmountComponent:function(internalInstance){ReactRef.detachRefs(internalInstance,internalInstance._currentElement),internalInstance.unmountComponent()},receiveComponent:function(internalInstance,nextElement,transaction,context){var prevElement=internalInstance._currentElement;if(nextElement!==prevElement||null==nextElement._owner){"production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(nextElement);var refsChanged=ReactRef.shouldUpdateRefs(prevElement,nextElement);refsChanged&&ReactRef.detachRefs(internalInstance,prevElement),internalInstance.receiveComponent(nextElement,transaction,context),refsChanged&&transaction.getReactMountReady().enqueue(attachRefs,internalInstance)}},performUpdateIfNecessary:function(internalInstance,transaction){internalInstance.performUpdateIfNecessary(transaction)}};module.exports=ReactReconciler;


}).call(this,require('_process'))

},{"./ReactElementValidator":295,"./ReactRef":321,"_process":106}],321:[function(require,module,exports){
"use strict";function attachRef(ref,component,owner){"function"==typeof ref?ref(component.getPublicInstance()):ReactOwner.addComponentAsRefTo(component,ref,owner)}function detachRef(ref,component,owner){"function"==typeof ref?ref(null):ReactOwner.removeComponentAsRefFrom(component,ref,owner)}var ReactOwner=require("./ReactOwner"),ReactRef={};ReactRef.attachRefs=function(instance,element){var ref=element.ref;null!=ref&&attachRef(ref,instance,element._owner)},ReactRef.shouldUpdateRefs=function(prevElement,nextElement){return nextElement._owner!==prevElement._owner||nextElement.ref!==prevElement.ref},ReactRef.detachRefs=function(instance,element){var ref=element.ref;null!=ref&&detachRef(ref,instance,element._owner)},module.exports=ReactRef;


},{"./ReactOwner":312}],322:[function(require,module,exports){
"use strict";var ReactRootIndexInjection={injectCreateReactRootIndex:function(_createReactRootIndex){ReactRootIndex.createReactRootIndex=_createReactRootIndex}},ReactRootIndex={createReactRootIndex:null,injection:ReactRootIndexInjection};module.exports=ReactRootIndex;


},{}],323:[function(require,module,exports){
(function (process){
"use strict";function renderToString(element){"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(element),"renderToString(): You must pass a valid ReactElement."):invariant(ReactElement.isValidElement(element));var transaction;try{var id=ReactInstanceHandles.createReactRootID();return transaction=ReactServerRenderingTransaction.getPooled(!1),transaction.perform(function(){var componentInstance=instantiateReactComponent(element,null),markup=componentInstance.mountComponent(id,transaction,emptyObject);return ReactMarkupChecksum.addChecksumToMarkup(markup)},null)}finally{ReactServerRenderingTransaction.release(transaction)}}function renderToStaticMarkup(element){"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(element),"renderToStaticMarkup(): You must pass a valid ReactElement."):invariant(ReactElement.isValidElement(element));var transaction;try{var id=ReactInstanceHandles.createReactRootID();return transaction=ReactServerRenderingTransaction.getPooled(!0),transaction.perform(function(){var componentInstance=instantiateReactComponent(element,null);return componentInstance.mountComponent(id,transaction,emptyObject)},null)}finally{ReactServerRenderingTransaction.release(transaction)}}var ReactElement=require("./ReactElement"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactServerRenderingTransaction=require("./ReactServerRenderingTransaction"),emptyObject=require("./emptyObject"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("./invariant");module.exports={renderToString:renderToString,renderToStaticMarkup:renderToStaticMarkup};


}).call(this,require('_process'))

},{"./ReactElement":294,"./ReactInstanceHandles":303,"./ReactMarkupChecksum":307,"./ReactServerRenderingTransaction":324,"./emptyObject":362,"./instantiateReactComponent":381,"./invariant":382,"_process":106}],324:[function(require,module,exports){
"use strict";function ReactServerRenderingTransaction(renderToStaticMarkup){this.reinitializeTransaction(),this.renderToStaticMarkup=renderToStaticMarkup,this.reactMountReady=CallbackQueue.getPooled(null),this.putListenerQueue=ReactPutListenerQueue.getPooled()}var PooledClass=require("./PooledClass"),CallbackQueue=require("./CallbackQueue"),ReactPutListenerQueue=require("./ReactPutListenerQueue"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:emptyFunction},PUT_LISTENER_QUEUEING={initialize:function(){this.putListenerQueue.reset()},close:emptyFunction},TRANSACTION_WRAPPERS=[PUT_LISTENER_QUEUEING,ON_DOM_READY_QUEUEING],Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null,ReactPutListenerQueue.release(this.putListenerQueue),this.putListenerQueue=null}};assign(ReactServerRenderingTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactServerRenderingTransaction),module.exports=ReactServerRenderingTransaction;


},{"./CallbackQueue":238,"./Object.assign":260,"./PooledClass":261,"./ReactPutListenerQueue":318,"./Transaction":348,"./emptyFunction":361}],325:[function(require,module,exports){
"use strict";function createStateKeySetter(component,key){var partialState={};return function(value){partialState[key]=value,component.setState(partialState)}}var ReactStateSetters={createStateSetter:function(component,funcReturningState){return function(a,b,c,d,e,f){var partialState=funcReturningState.call(component,a,b,c,d,e,f);partialState&&component.setState(partialState)}},createStateKeySetter:function(component,key){var cache=component.__keySetters||(component.__keySetters={});return cache[key]||(cache[key]=createStateKeySetter(component,key))}};ReactStateSetters.Mixin={createStateSetter:function(funcReturningState){return ReactStateSetters.createStateSetter(this,funcReturningState)},createStateKeySetter:function(key){return ReactStateSetters.createStateKeySetter(this,key)}},module.exports=ReactStateSetters;


},{}],326:[function(require,module,exports){
"use strict";function Event(suffix){}function makeSimulator(eventType){return function(domComponentOrNode,eventData){var node;ReactTestUtils.isDOMComponent(domComponentOrNode)?node=domComponentOrNode.getDOMNode():domComponentOrNode.tagName&&(node=domComponentOrNode);var fakeNativeEvent=new Event;fakeNativeEvent.target=node;var event=new SyntheticEvent(ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],ReactMount.getID(node),fakeNativeEvent);assign(event,eventData),EventPropagators.accumulateTwoPhaseDispatches(event),ReactUpdates.batchedUpdates(function(){EventPluginHub.enqueueEvents(event),EventPluginHub.processEventQueue()})}}function buildSimulators(){ReactTestUtils.Simulate={};var eventType;for(eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs)ReactTestUtils.Simulate[eventType]=makeSimulator(eventType)}function makeNativeSimulator(eventType){return function(domComponentOrNode,nativeEventData){var fakeNativeEvent=new Event(eventType);assign(fakeNativeEvent,nativeEventData),ReactTestUtils.isDOMComponent(domComponentOrNode)?ReactTestUtils.simulateNativeEventOnDOMComponent(eventType,domComponentOrNode,fakeNativeEvent):domComponentOrNode.tagName&&ReactTestUtils.simulateNativeEventOnNode(eventType,domComponentOrNode,fakeNativeEvent)}}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPropagators=require("./EventPropagators"),React=require("./React"),ReactElement=require("./ReactElement"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactCompositeComponent=require("./ReactCompositeComponent"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),SyntheticEvent=require("./SyntheticEvent"),assign=require("./Object.assign"),emptyObject=require("./emptyObject"),topLevelTypes=EventConstants.topLevelTypes,ReactTestUtils={renderIntoDocument:function(instance){var div=document.createElement("div");return React.render(instance,div)},isElement:function(element){return ReactElement.isValidElement(element)},isElementOfType:function(inst,convenienceConstructor){return ReactElement.isValidElement(inst)&&inst.type===convenienceConstructor},isDOMComponent:function(inst){return!!(inst&&inst.tagName&&inst.getDOMNode)},isDOMComponentElement:function(inst){return!!(inst&&ReactElement.isValidElement(inst)&&inst.tagName)},isCompositeComponent:function(inst){return"function"==typeof inst.render&&"function"==typeof inst.setState},isCompositeComponentWithType:function(inst,type){return!(!ReactTestUtils.isCompositeComponent(inst)||inst.constructor!==type)},isCompositeComponentElement:function(inst){if(!ReactElement.isValidElement(inst))return!1;var prototype=inst.type.prototype;return"function"==typeof prototype.render&&"function"==typeof prototype.setState},isCompositeComponentElementWithType:function(inst,type){return!(!ReactTestUtils.isCompositeComponentElement(inst)||inst.constructor!==type)},getRenderedChildOfCompositeComponent:function(inst){if(!ReactTestUtils.isCompositeComponent(inst))return null;var internalInstance=ReactInstanceMap.get(inst);return internalInstance._renderedComponent.getPublicInstance()},findAllInRenderedTree:function(inst,test){if(!inst)return[];var ret=test(inst)?[inst]:[];if(ReactTestUtils.isDOMComponent(inst)){var key,internalInstance=ReactInstanceMap.get(inst),renderedChildren=internalInstance._renderedComponent._renderedChildren;for(key in renderedChildren)renderedChildren.hasOwnProperty(key)&&renderedChildren[key].getPublicInstance&&(ret=ret.concat(ReactTestUtils.findAllInRenderedTree(renderedChildren[key].getPublicInstance(),test)))}else ReactTestUtils.isCompositeComponent(inst)&&(ret=ret.concat(ReactTestUtils.findAllInRenderedTree(ReactTestUtils.getRenderedChildOfCompositeComponent(inst),test)));return ret},scryRenderedDOMComponentsWithClass:function(root,className){return ReactTestUtils.findAllInRenderedTree(root,function(inst){var instClassName=inst.props.className;return ReactTestUtils.isDOMComponent(inst)&&instClassName&&-1!==(" "+instClassName+" ").indexOf(" "+className+" ")})},findRenderedDOMComponentWithClass:function(root,className){var all=ReactTestUtils.scryRenderedDOMComponentsWithClass(root,className);if(1!==all.length)throw new Error("Did not find exactly one match (found: "+all.length+") for class:"+className);return all[0]},scryRenderedDOMComponentsWithTag:function(root,tagName){return ReactTestUtils.findAllInRenderedTree(root,function(inst){return ReactTestUtils.isDOMComponent(inst)&&inst.tagName===tagName.toUpperCase()})},findRenderedDOMComponentWithTag:function(root,tagName){var all=ReactTestUtils.scryRenderedDOMComponentsWithTag(root,tagName);if(1!==all.length)throw new Error("Did not find exactly one match for tag:"+tagName);return all[0]},scryRenderedComponentsWithType:function(root,componentType){return ReactTestUtils.findAllInRenderedTree(root,function(inst){return ReactTestUtils.isCompositeComponentWithType(inst,componentType)})},findRenderedComponentWithType:function(root,componentType){var all=ReactTestUtils.scryRenderedComponentsWithType(root,componentType);if(1!==all.length)throw new Error("Did not find exactly one match for componentType:"+componentType);return all[0]},mockComponent:function(module,mockTagName){return mockTagName=mockTagName||module.mockTagName||"div",module.prototype.render.mockImplementation(function(){return React.createElement(mockTagName,null,this.props.children)}),this},simulateNativeEventOnNode:function(topLevelType,node,fakeNativeEvent){fakeNativeEvent.target=node,ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType,fakeNativeEvent)},simulateNativeEventOnDOMComponent:function(topLevelType,comp,fakeNativeEvent){ReactTestUtils.simulateNativeEventOnNode(topLevelType,comp.getDOMNode(),fakeNativeEvent)},nativeTouchData:function(x,y){return{touches:[{pageX:x,pageY:y}]}},createRenderer:function(){return new ReactShallowRenderer},Simulate:null,SimulateNative:{}},ReactShallowRenderer=function(){this._instance=null};ReactShallowRenderer.prototype.getRenderOutput=function(){return this._instance&&this._instance._renderedComponent&&this._instance._renderedComponent._renderedOutput||null};var NoopInternalComponent=function(element){this._renderedOutput=element,this._currentElement=null===element||element===!1?ReactEmptyComponent.emptyElement:element};NoopInternalComponent.prototype={mountComponent:function(){},receiveComponent:function(element){this._renderedOutput=element,this._currentElement=null===element||element===!1?ReactEmptyComponent.emptyElement:element},unmountComponent:function(){}};var ShallowComponentWrapper=function(){};assign(ShallowComponentWrapper.prototype,ReactCompositeComponent.Mixin,{_instantiateReactComponent:function(element){return new NoopInternalComponent(element)},_replaceNodeWithMarkupByID:function(){},_renderValidatedComponent:ReactCompositeComponent.Mixin._renderValidatedComponentWithoutOwnerOrContext}),ReactShallowRenderer.prototype.render=function(element,context){context||(context=emptyObject);var transaction=ReactUpdates.ReactReconcileTransaction.getPooled();this._render(element,transaction,context),ReactUpdates.ReactReconcileTransaction.release(transaction)},ReactShallowRenderer.prototype.unmount=function(){this._instance&&this._instance.unmountComponent()},ReactShallowRenderer.prototype._render=function(element,transaction,context){if(this._instance)this._instance.receiveComponent(element,transaction,context);else{var rootID=ReactInstanceHandles.createReactRootID(),instance=new ShallowComponentWrapper(element.type);instance.construct(element),instance.mountComponent(rootID,transaction,context),this._instance=instance}};var oldInjectEventPluginOrder=EventPluginHub.injection.injectEventPluginOrder;EventPluginHub.injection.injectEventPluginOrder=function(){oldInjectEventPluginOrder.apply(this,arguments),buildSimulators()};var oldInjectEventPlugins=EventPluginHub.injection.injectEventPluginsByName;EventPluginHub.injection.injectEventPluginsByName=function(){oldInjectEventPlugins.apply(this,arguments),buildSimulators()},buildSimulators();var eventType;for(eventType in topLevelTypes){var convenienceName=0===eventType.indexOf("top")?eventType.charAt(3).toLowerCase()+eventType.substr(4):eventType;ReactTestUtils.SimulateNative[convenienceName]=makeNativeSimulator(eventType)}module.exports=ReactTestUtils;


},{"./EventConstants":247,"./EventPluginHub":249,"./EventPropagators":252,"./Object.assign":260,"./React":262,"./ReactBrowserEventEmitter":264,"./ReactCompositeComponent":274,"./ReactElement":294,"./ReactEmptyComponent":296,"./ReactInstanceHandles":303,"./ReactInstanceMap":304,"./ReactMount":308,"./ReactUpdates":331,"./SyntheticEvent":340,"./emptyObject":362}],327:[function(require,module,exports){
"use strict";var ReactChildren=require("./ReactChildren"),ReactFragment=require("./ReactFragment"),ReactTransitionChildMapping={getChildMapping:function(children){return children?ReactFragment.extract(ReactChildren.map(children,function(child){return child})):children},mergeChildMappings:function(prev,next){function getValueForKey(key){return next.hasOwnProperty(key)?next[key]:prev[key]}prev=prev||{},next=next||{};var nextKeysPending={},pendingKeys=[];for(var prevKey in prev)next.hasOwnProperty(prevKey)?pendingKeys.length&&(nextKeysPending[prevKey]=pendingKeys,pendingKeys=[]):pendingKeys.push(prevKey);var i,childMapping={};for(var nextKey in next){if(nextKeysPending.hasOwnProperty(nextKey))for(i=0;i<nextKeysPending[nextKey].length;i++){var pendingNextKey=nextKeysPending[nextKey][i];childMapping[nextKeysPending[nextKey][i]]=getValueForKey(pendingNextKey)}childMapping[nextKey]=getValueForKey(nextKey)}for(i=0;i<pendingKeys.length;i++)childMapping[pendingKeys[i]]=getValueForKey(pendingKeys[i]);return childMapping}};module.exports=ReactTransitionChildMapping;


},{"./ReactChildren":268,"./ReactFragment":300}],328:[function(require,module,exports){
"use strict";function detectEvents(){var testEl=document.createElement("div"),style=testEl.style;"AnimationEvent"in window||delete EVENT_NAME_MAP.animationend.animation,"TransitionEvent"in window||delete EVENT_NAME_MAP.transitionend.transition;for(var baseEventName in EVENT_NAME_MAP){var baseEvents=EVENT_NAME_MAP[baseEventName];for(var styleName in baseEvents)if(styleName in style){endEvents.push(baseEvents[styleName]);break}}}function addEventListener(node,eventName,eventListener){node.addEventListener(eventName,eventListener,!1)}function removeEventListener(node,eventName,eventListener){node.removeEventListener(eventName,eventListener,!1)}var ExecutionEnvironment=require("./ExecutionEnvironment"),EVENT_NAME_MAP={transitionend:{transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"mozTransitionEnd",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd"},animationend:{animation:"animationend",WebkitAnimation:"webkitAnimationEnd",MozAnimation:"mozAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd"}},endEvents=[];ExecutionEnvironment.canUseDOM&&detectEvents();var ReactTransitionEvents={addEndEventListener:function(node,eventListener){return 0===endEvents.length?void window.setTimeout(eventListener,0):void endEvents.forEach(function(endEvent){addEventListener(node,endEvent,eventListener)})},removeEndEventListener:function(node,eventListener){0!==endEvents.length&&endEvents.forEach(function(endEvent){removeEventListener(node,endEvent,eventListener)})}};module.exports=ReactTransitionEvents;


},{"./ExecutionEnvironment":253}],329:[function(require,module,exports){
"use strict";var React=require("./React"),ReactTransitionChildMapping=require("./ReactTransitionChildMapping"),assign=require("./Object.assign"),cloneWithProps=require("./cloneWithProps"),emptyFunction=require("./emptyFunction"),ReactTransitionGroup=React.createClass({displayName:"ReactTransitionGroup",propTypes:{component:React.PropTypes.any,childFactory:React.PropTypes.func},getDefaultProps:function(){return{component:"span",childFactory:emptyFunction.thatReturnsArgument}},getInitialState:function(){return{children:ReactTransitionChildMapping.getChildMapping(this.props.children)}},componentWillMount:function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},componentDidMount:function(){var initialChildMapping=this.state.children;for(var key in initialChildMapping)initialChildMapping[key]&&this.performAppear(key)},componentWillReceiveProps:function(nextProps){var nextChildMapping=ReactTransitionChildMapping.getChildMapping(nextProps.children),prevChildMapping=this.state.children;this.setState({children:ReactTransitionChildMapping.mergeChildMappings(prevChildMapping,nextChildMapping)});var key;for(key in nextChildMapping){var hasPrev=prevChildMapping&&prevChildMapping.hasOwnProperty(key);!nextChildMapping[key]||hasPrev||this.currentlyTransitioningKeys[key]||this.keysToEnter.push(key)}for(key in prevChildMapping){var hasNext=nextChildMapping&&nextChildMapping.hasOwnProperty(key);!prevChildMapping[key]||hasNext||this.currentlyTransitioningKeys[key]||this.keysToLeave.push(key)}},componentDidUpdate:function(){var keysToEnter=this.keysToEnter;this.keysToEnter=[],keysToEnter.forEach(this.performEnter);var keysToLeave=this.keysToLeave;this.keysToLeave=[],keysToLeave.forEach(this.performLeave)},performAppear:function(key){this.currentlyTransitioningKeys[key]=!0;var component=this.refs[key];component.componentWillAppear?component.componentWillAppear(this._handleDoneAppearing.bind(this,key)):this._handleDoneAppearing(key)},_handleDoneAppearing:function(key){var component=this.refs[key];component.componentDidAppear&&component.componentDidAppear(),delete this.currentlyTransitioningKeys[key];var currentChildMapping=ReactTransitionChildMapping.getChildMapping(this.props.children);currentChildMapping&&currentChildMapping.hasOwnProperty(key)||this.performLeave(key)},performEnter:function(key){this.currentlyTransitioningKeys[key]=!0;var component=this.refs[key];component.componentWillEnter?component.componentWillEnter(this._handleDoneEntering.bind(this,key)):this._handleDoneEntering(key)},_handleDoneEntering:function(key){var component=this.refs[key];component.componentDidEnter&&component.componentDidEnter(),delete this.currentlyTransitioningKeys[key];var currentChildMapping=ReactTransitionChildMapping.getChildMapping(this.props.children);currentChildMapping&&currentChildMapping.hasOwnProperty(key)||this.performLeave(key)},performLeave:function(key){this.currentlyTransitioningKeys[key]=!0;var component=this.refs[key];component.componentWillLeave?component.componentWillLeave(this._handleDoneLeaving.bind(this,key)):this._handleDoneLeaving(key)},_handleDoneLeaving:function(key){var component=this.refs[key];component.componentDidLeave&&component.componentDidLeave(),delete this.currentlyTransitioningKeys[key];var currentChildMapping=ReactTransitionChildMapping.getChildMapping(this.props.children);if(currentChildMapping&&currentChildMapping.hasOwnProperty(key))this.performEnter(key);else{var newChildren=assign({},this.state.children);delete newChildren[key],this.setState({children:newChildren})}},render:function(){var childrenToRender=[];for(var key in this.state.children){var child=this.state.children[key];child&&childrenToRender.push(cloneWithProps(this.props.childFactory(child),{ref:key,key:key}))}return React.createElement(this.props.component,this.props,childrenToRender)}});module.exports=ReactTransitionGroup;


},{"./Object.assign":260,"./React":262,"./ReactTransitionChildMapping":327,"./cloneWithProps":354,"./emptyFunction":361}],330:[function(require,module,exports){
(function (process){
"use strict";function enqueueUpdate(internalInstance){internalInstance!==ReactLifeCycle.currentlyMountingInstance&&ReactUpdates.enqueueUpdate(internalInstance)}function getInternalInstanceReadyForUpdate(publicInstance,callerName){"production"!==process.env.NODE_ENV?invariant(null==ReactCurrentOwner.current,"%s(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.",callerName):invariant(null==ReactCurrentOwner.current);var internalInstance=ReactInstanceMap.get(publicInstance);return internalInstance?internalInstance===ReactLifeCycle.currentlyUnmountingInstance?null:internalInstance:("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!callerName,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op.",callerName,callerName):null),null)}var ReactLifeCycle=require("./ReactLifeCycle"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),ReactUpdateQueue={enqueueCallback:function(publicInstance,callback){"production"!==process.env.NODE_ENV?invariant("function"==typeof callback,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):invariant("function"==typeof callback);var internalInstance=getInternalInstanceReadyForUpdate(publicInstance);return internalInstance&&internalInstance!==ReactLifeCycle.currentlyMountingInstance?(internalInstance._pendingCallbacks?internalInstance._pendingCallbacks.push(callback):internalInstance._pendingCallbacks=[callback],void enqueueUpdate(internalInstance)):null},enqueueCallbackInternal:function(internalInstance,callback){"production"!==process.env.NODE_ENV?invariant("function"==typeof callback,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):invariant("function"==typeof callback),internalInstance._pendingCallbacks?internalInstance._pendingCallbacks.push(callback):internalInstance._pendingCallbacks=[callback],enqueueUpdate(internalInstance)},enqueueForceUpdate:function(publicInstance){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"forceUpdate");internalInstance&&(internalInstance._pendingForceUpdate=!0,enqueueUpdate(internalInstance))},enqueueReplaceState:function(publicInstance,completeState){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"replaceState");internalInstance&&(internalInstance._pendingStateQueue=[completeState],internalInstance._pendingReplaceState=!0,enqueueUpdate(internalInstance))},enqueueSetState:function(publicInstance,partialState){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"setState");if(internalInstance){var queue=internalInstance._pendingStateQueue||(internalInstance._pendingStateQueue=[]);queue.push(partialState),enqueueUpdate(internalInstance)}},enqueueSetProps:function(publicInstance,partialProps){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"setProps");if(internalInstance){"production"!==process.env.NODE_ENV?invariant(internalInstance._isTopLevel,"setProps(...): You called `setProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):invariant(internalInstance._isTopLevel);var element=internalInstance._pendingElement||internalInstance._currentElement,props=assign({},element.props,partialProps);internalInstance._pendingElement=ReactElement.cloneAndReplaceProps(element,props),enqueueUpdate(internalInstance)}},enqueueReplaceProps:function(publicInstance,props){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"replaceProps");if(internalInstance){"production"!==process.env.NODE_ENV?invariant(internalInstance._isTopLevel,"replaceProps(...): You called `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):invariant(internalInstance._isTopLevel);var element=internalInstance._pendingElement||internalInstance._currentElement;internalInstance._pendingElement=ReactElement.cloneAndReplaceProps(element,props),enqueueUpdate(internalInstance)}},enqueueElementInternal:function(internalInstance,newElement){internalInstance._pendingElement=newElement,enqueueUpdate(internalInstance)}};module.exports=ReactUpdateQueue;


}).call(this,require('_process'))

},{"./Object.assign":260,"./ReactCurrentOwner":276,"./ReactElement":294,"./ReactInstanceMap":304,"./ReactLifeCycle":305,"./ReactUpdates":331,"./invariant":382,"./warning":403,"_process":106}],331:[function(require,module,exports){
(function (process){
"use strict";function ensureInjected(){"production"!==process.env.NODE_ENV?invariant(ReactUpdates.ReactReconcileTransaction&&batchingStrategy,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):invariant(ReactUpdates.ReactReconcileTransaction&&batchingStrategy)}function ReactUpdatesFlushTransaction(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=CallbackQueue.getPooled(),this.reconcileTransaction=ReactUpdates.ReactReconcileTransaction.getPooled()}function batchedUpdates(callback,a,b,c,d){ensureInjected(),batchingStrategy.batchedUpdates(callback,a,b,c,d)}function mountOrderComparator(c1,c2){return c1._mountOrder-c2._mountOrder}function runBatchedUpdates(transaction){var len=transaction.dirtyComponentsLength;"production"!==process.env.NODE_ENV?invariant(len===dirtyComponents.length,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",len,dirtyComponents.length):invariant(len===dirtyComponents.length),dirtyComponents.sort(mountOrderComparator);for(var i=0;len>i;i++){var component=dirtyComponents[i],callbacks=component._pendingCallbacks;if(component._pendingCallbacks=null,ReactReconciler.performUpdateIfNecessary(component,transaction.reconcileTransaction),callbacks)for(var j=0;j<callbacks.length;j++)transaction.callbackQueue.enqueue(callbacks[j],component.getPublicInstance())}}function enqueueUpdate(component){return ensureInjected(),"production"!==process.env.NODE_ENV?warning(null==ReactCurrentOwner.current,"enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,batchingStrategy.isBatchingUpdates?void dirtyComponents.push(component):void batchingStrategy.batchedUpdates(enqueueUpdate,component)}function asap(callback,context){"production"!==process.env.NODE_ENV?invariant(batchingStrategy.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):invariant(batchingStrategy.isBatchingUpdates),asapCallbackQueue.enqueue(callback,context),asapEnqueued=!0}var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),Transaction=require("./Transaction"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),dirtyComponents=[],asapCallbackQueue=CallbackQueue.getPooled(),asapEnqueued=!1,batchingStrategy=null,NESTED_UPDATES={initialize:function(){this.dirtyComponentsLength=dirtyComponents.length},close:function(){this.dirtyComponentsLength!==dirtyComponents.length?(dirtyComponents.splice(0,this.dirtyComponentsLength),flushBatchedUpdates()):dirtyComponents.length=0}},UPDATE_QUEUEING={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},TRANSACTION_WRAPPERS=[NESTED_UPDATES,UPDATE_QUEUEING];assign(ReactUpdatesFlushTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},destructor:function(){this.dirtyComponentsLength=null,CallbackQueue.release(this.callbackQueue),this.callbackQueue=null,ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(method,scope,a){return Transaction.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,method,scope,a)}}),PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);var flushBatchedUpdates=function(){for(;dirtyComponents.length||asapEnqueued;){if(dirtyComponents.length){var transaction=ReactUpdatesFlushTransaction.getPooled();transaction.perform(runBatchedUpdates,null,transaction),ReactUpdatesFlushTransaction.release(transaction)}if(asapEnqueued){asapEnqueued=!1;var queue=asapCallbackQueue;asapCallbackQueue=CallbackQueue.getPooled(),queue.notifyAll(),CallbackQueue.release(queue)}}};flushBatchedUpdates=ReactPerf.measure("ReactUpdates","flushBatchedUpdates",flushBatchedUpdates);var ReactUpdatesInjection={injectReconcileTransaction:function(ReconcileTransaction){"production"!==process.env.NODE_ENV?invariant(ReconcileTransaction,"ReactUpdates: must provide a reconcile transaction class"):invariant(ReconcileTransaction),ReactUpdates.ReactReconcileTransaction=ReconcileTransaction},injectBatchingStrategy:function(_batchingStrategy){"production"!==process.env.NODE_ENV?invariant(_batchingStrategy,"ReactUpdates: must provide a batching strategy"):invariant(_batchingStrategy),"production"!==process.env.NODE_ENV?invariant("function"==typeof _batchingStrategy.batchedUpdates,"ReactUpdates: must provide a batchedUpdates() function"):invariant("function"==typeof _batchingStrategy.batchedUpdates),"production"!==process.env.NODE_ENV?invariant("boolean"==typeof _batchingStrategy.isBatchingUpdates,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):invariant("boolean"==typeof _batchingStrategy.isBatchingUpdates),batchingStrategy=_batchingStrategy}},ReactUpdates={ReactReconcileTransaction:null,batchedUpdates:batchedUpdates,enqueueUpdate:enqueueUpdate,flushBatchedUpdates:flushBatchedUpdates,injection:ReactUpdatesInjection,asap:asap};module.exports=ReactUpdates;


}).call(this,require('_process'))

},{"./CallbackQueue":238,"./Object.assign":260,"./PooledClass":261,"./ReactCurrentOwner":276,"./ReactPerf":313,"./ReactReconciler":320,"./Transaction":348,"./invariant":382,"./warning":403,"_process":106}],332:[function(require,module,exports){
(function (process){
"use strict";var LinkedStateMixin=require("./LinkedStateMixin"),React=require("./React"),ReactComponentWithPureRenderMixin=require("./ReactComponentWithPureRenderMixin"),ReactCSSTransitionGroup=require("./ReactCSSTransitionGroup"),ReactFragment=require("./ReactFragment"),ReactTransitionGroup=require("./ReactTransitionGroup"),ReactUpdates=require("./ReactUpdates"),cx=require("./cx"),cloneWithProps=require("./cloneWithProps"),update=require("./update");React.addons={CSSTransitionGroup:ReactCSSTransitionGroup,LinkedStateMixin:LinkedStateMixin,PureRenderMixin:ReactComponentWithPureRenderMixin,TransitionGroup:ReactTransitionGroup,batchedUpdates:ReactUpdates.batchedUpdates,classSet:cx,cloneWithProps:cloneWithProps,createFragment:ReactFragment.create,update:update},"production"!==process.env.NODE_ENV&&(React.addons.Perf=require("./ReactDefaultPerf"),React.addons.TestUtils=require("./ReactTestUtils")),module.exports=React;


}).call(this,require('_process'))

},{"./LinkedStateMixin":256,"./React":262,"./ReactCSSTransitionGroup":265,"./ReactComponentWithPureRenderMixin":273,"./ReactDefaultPerf":292,"./ReactFragment":300,"./ReactTestUtils":326,"./ReactTransitionGroup":329,"./ReactUpdates":331,"./cloneWithProps":354,"./cx":359,"./update":402,"_process":106}],333:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,SVGDOMPropertyConfig={Properties:{clipPath:MUST_USE_ATTRIBUTE,cx:MUST_USE_ATTRIBUTE,cy:MUST_USE_ATTRIBUTE,d:MUST_USE_ATTRIBUTE,dx:MUST_USE_ATTRIBUTE,dy:MUST_USE_ATTRIBUTE,fill:MUST_USE_ATTRIBUTE,fillOpacity:MUST_USE_ATTRIBUTE,fontFamily:MUST_USE_ATTRIBUTE,fontSize:MUST_USE_ATTRIBUTE,fx:MUST_USE_ATTRIBUTE,fy:MUST_USE_ATTRIBUTE,gradientTransform:MUST_USE_ATTRIBUTE,gradientUnits:MUST_USE_ATTRIBUTE,markerEnd:MUST_USE_ATTRIBUTE,markerMid:MUST_USE_ATTRIBUTE,markerStart:MUST_USE_ATTRIBUTE,offset:MUST_USE_ATTRIBUTE,opacity:MUST_USE_ATTRIBUTE,patternContentUnits:MUST_USE_ATTRIBUTE,patternUnits:MUST_USE_ATTRIBUTE,points:MUST_USE_ATTRIBUTE,preserveAspectRatio:MUST_USE_ATTRIBUTE,r:MUST_USE_ATTRIBUTE,rx:MUST_USE_ATTRIBUTE,ry:MUST_USE_ATTRIBUTE,spreadMethod:MUST_USE_ATTRIBUTE,stopColor:MUST_USE_ATTRIBUTE,stopOpacity:MUST_USE_ATTRIBUTE,stroke:MUST_USE_ATTRIBUTE,strokeDasharray:MUST_USE_ATTRIBUTE,strokeLinecap:MUST_USE_ATTRIBUTE,strokeOpacity:MUST_USE_ATTRIBUTE,strokeWidth:MUST_USE_ATTRIBUTE,textAnchor:MUST_USE_ATTRIBUTE,transform:MUST_USE_ATTRIBUTE,version:MUST_USE_ATTRIBUTE,viewBox:MUST_USE_ATTRIBUTE,x1:MUST_USE_ATTRIBUTE,x2:MUST_USE_ATTRIBUTE,x:MUST_USE_ATTRIBUTE,y1:MUST_USE_ATTRIBUTE,y2:MUST_USE_ATTRIBUTE,y:MUST_USE_ATTRIBUTE},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};module.exports=SVGDOMPropertyConfig;


},{"./DOMProperty":242}],334:[function(require,module,exports){
"use strict";function getSelection(node){if("selectionStart"in node&&ReactInputSelection.hasSelectionCapabilities(node))return{start:node.selectionStart,end:node.selectionEnd};if(window.getSelection){var selection=window.getSelection();return{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset}}if(document.selection){var range=document.selection.createRange();return{parentElement:range.parentElement(),text:range.text,top:range.boundingTop,left:range.boundingLeft}}}function constructSelectEvent(nativeEvent){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var currentSelection=getSelection(activeElement);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var syntheticEvent=SyntheticEvent.getPooled(eventTypes.select,activeElementID,nativeEvent);return syntheticEvent.type="select",syntheticEvent.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent),syntheticEvent}}var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ReactInputSelection=require("./ReactInputSelection"),SyntheticEvent=require("./SyntheticEvent"),getActiveElement=require("./getActiveElement"),isTextInputElement=require("./isTextInputElement"),keyOf=require("./keyOf"),shallowEqual=require("./shallowEqual"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={select:{phasedRegistrationNames:{bubbled:keyOf({onSelect:null}),captured:keyOf({onSelectCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topContextMenu,topLevelTypes.topFocus,topLevelTypes.topKeyDown,topLevelTypes.topMouseDown,topLevelTypes.topMouseUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,lastSelection=null,mouseDown=!1,SelectEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){switch(topLevelType){case topLevelTypes.topFocus:(isTextInputElement(topLevelTarget)||"true"===topLevelTarget.contentEditable)&&(activeElement=topLevelTarget,activeElementID=topLevelTargetID,lastSelection=null);break;case topLevelTypes.topBlur:activeElement=null,activeElementID=null,lastSelection=null;break;case topLevelTypes.topMouseDown:mouseDown=!0;break;case topLevelTypes.topContextMenu:case topLevelTypes.topMouseUp:return mouseDown=!1,constructSelectEvent(nativeEvent);case topLevelTypes.topSelectionChange:case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:return constructSelectEvent(nativeEvent)}}};module.exports=SelectEventPlugin;


},{"./EventConstants":247,"./EventPropagators":252,"./ReactInputSelection":302,"./SyntheticEvent":340,"./getActiveElement":368,"./isTextInputElement":385,"./keyOf":389,"./shallowEqual":398}],335:[function(require,module,exports){
"use strict";var GLOBAL_MOUNT_POINT_MAX=Math.pow(2,53),ServerReactRootIndex={createReactRootIndex:function(){return Math.ceil(Math.random()*GLOBAL_MOUNT_POINT_MAX)}};module.exports=ServerReactRootIndex;


},{}],336:[function(require,module,exports){
(function (process){
"use strict";var EventConstants=require("./EventConstants"),EventPluginUtils=require("./EventPluginUtils"),EventPropagators=require("./EventPropagators"),SyntheticClipboardEvent=require("./SyntheticClipboardEvent"),SyntheticEvent=require("./SyntheticEvent"),SyntheticFocusEvent=require("./SyntheticFocusEvent"),SyntheticKeyboardEvent=require("./SyntheticKeyboardEvent"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),SyntheticDragEvent=require("./SyntheticDragEvent"),SyntheticTouchEvent=require("./SyntheticTouchEvent"),SyntheticUIEvent=require("./SyntheticUIEvent"),SyntheticWheelEvent=require("./SyntheticWheelEvent"),getEventCharCode=require("./getEventCharCode"),invariant=require("./invariant"),keyOf=require("./keyOf"),warning=require("./warning"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={blur:{phasedRegistrationNames:{bubbled:keyOf({onBlur:!0}),captured:keyOf({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:keyOf({onClick:!0}),captured:keyOf({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:keyOf({onContextMenu:!0}),captured:keyOf({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:keyOf({onCopy:!0}),captured:keyOf({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:keyOf({onCut:!0}),captured:keyOf({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:keyOf({onDoubleClick:!0}),captured:keyOf({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:keyOf({onDrag:!0}),captured:keyOf({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:keyOf({onDragEnd:!0}),captured:keyOf({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:keyOf({onDragEnter:!0}),captured:keyOf({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:keyOf({onDragExit:!0}),captured:keyOf({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:keyOf({onDragLeave:!0}),captured:keyOf({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:keyOf({onDragOver:!0}),captured:keyOf({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:keyOf({onDragStart:!0}),captured:keyOf({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:keyOf({onDrop:!0}),captured:keyOf({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:keyOf({onFocus:!0}),captured:keyOf({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:keyOf({onInput:!0}),captured:keyOf({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:keyOf({onKeyDown:!0}),captured:keyOf({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:keyOf({onKeyPress:!0}),captured:keyOf({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:keyOf({onKeyUp:!0}),captured:keyOf({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:keyOf({onLoad:!0}),captured:keyOf({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:keyOf({onError:!0}),captured:keyOf({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:keyOf({onMouseDown:!0}),captured:keyOf({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:keyOf({onMouseMove:!0}),captured:keyOf({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:keyOf({onMouseOut:!0}),captured:keyOf({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:keyOf({onMouseOver:!0}),captured:keyOf({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:keyOf({onMouseUp:!0}),captured:keyOf({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:keyOf({onPaste:!0}),captured:keyOf({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:keyOf({onReset:!0}),captured:keyOf({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:keyOf({onScroll:!0}),captured:keyOf({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:keyOf({onSubmit:!0}),captured:keyOf({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:keyOf({onTouchCancel:!0}),captured:keyOf({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:keyOf({onTouchEnd:!0}),captured:keyOf({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:keyOf({onTouchMove:!0}),captured:keyOf({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:keyOf({onTouchStart:!0}),captured:keyOf({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:keyOf({onWheel:!0}),captured:keyOf({onWheelCapture:!0})}}},topLevelEventsToDispatchConfig={topBlur:eventTypes.blur,topClick:eventTypes.click,topContextMenu:eventTypes.contextMenu,topCopy:eventTypes.copy,topCut:eventTypes.cut,topDoubleClick:eventTypes.doubleClick,topDrag:eventTypes.drag,topDragEnd:eventTypes.dragEnd,topDragEnter:eventTypes.dragEnter,topDragExit:eventTypes.dragExit,topDragLeave:eventTypes.dragLeave,topDragOver:eventTypes.dragOver,topDragStart:eventTypes.dragStart,topDrop:eventTypes.drop,topError:eventTypes.error,topFocus:eventTypes.focus,topInput:eventTypes.input,topKeyDown:eventTypes.keyDown,topKeyPress:eventTypes.keyPress,topKeyUp:eventTypes.keyUp,topLoad:eventTypes.load,topMouseDown:eventTypes.mouseDown,topMouseMove:eventTypes.mouseMove,topMouseOut:eventTypes.mouseOut,topMouseOver:eventTypes.mouseOver,topMouseUp:eventTypes.mouseUp,topPaste:eventTypes.paste,topReset:eventTypes.reset,topScroll:eventTypes.scroll,topSubmit:eventTypes.submit,topTouchCancel:eventTypes.touchCancel,topTouchEnd:eventTypes.touchEnd,topTouchMove:eventTypes.touchMove,topTouchStart:eventTypes.touchStart,topWheel:eventTypes.wheel};for(var type in topLevelEventsToDispatchConfig)topLevelEventsToDispatchConfig[type].dependencies=[type];var SimpleEventPlugin={eventTypes:eventTypes,executeDispatch:function(event,listener,domID){var returnValue=EventPluginUtils.executeDispatch(event,listener,domID);"production"!==process.env.NODE_ENV?warning("boolean"!=typeof returnValue,"Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate."):null,returnValue===!1&&(event.stopPropagation(),event.preventDefault())},extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var dispatchConfig=topLevelEventsToDispatchConfig[topLevelType];if(!dispatchConfig)return null;var EventConstructor;switch(topLevelType){case topLevelTypes.topInput:case topLevelTypes.topLoad:case topLevelTypes.topError:case topLevelTypes.topReset:case topLevelTypes.topSubmit:EventConstructor=SyntheticEvent;break;case topLevelTypes.topKeyPress:if(0===getEventCharCode(nativeEvent))return null;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:EventConstructor=SyntheticKeyboardEvent;break;case topLevelTypes.topBlur:case topLevelTypes.topFocus:EventConstructor=SyntheticFocusEvent;break;case topLevelTypes.topClick:if(2===nativeEvent.button)return null;case topLevelTypes.topContextMenu:case topLevelTypes.topDoubleClick:case topLevelTypes.topMouseDown:case topLevelTypes.topMouseMove:case topLevelTypes.topMouseOut:case topLevelTypes.topMouseOver:case topLevelTypes.topMouseUp:EventConstructor=SyntheticMouseEvent;break;case topLevelTypes.topDrag:case topLevelTypes.topDragEnd:case topLevelTypes.topDragEnter:case topLevelTypes.topDragExit:case topLevelTypes.topDragLeave:case topLevelTypes.topDragOver:case topLevelTypes.topDragStart:case topLevelTypes.topDrop:EventConstructor=SyntheticDragEvent;break;case topLevelTypes.topTouchCancel:case topLevelTypes.topTouchEnd:case topLevelTypes.topTouchMove:case topLevelTypes.topTouchStart:EventConstructor=SyntheticTouchEvent;break;case topLevelTypes.topScroll:EventConstructor=SyntheticUIEvent;break;case topLevelTypes.topWheel:EventConstructor=SyntheticWheelEvent;break;case topLevelTypes.topCopy:case topLevelTypes.topCut:case topLevelTypes.topPaste:EventConstructor=SyntheticClipboardEvent}"production"!==process.env.NODE_ENV?invariant(EventConstructor,"SimpleEventPlugin: Unhandled event type, `%s`.",topLevelType):invariant(EventConstructor);var event=EventConstructor.getPooled(dispatchConfig,topLevelTargetID,nativeEvent);return EventPropagators.accumulateTwoPhaseDispatches(event),event}};module.exports=SimpleEventPlugin;


}).call(this,require('_process'))

},{"./EventConstants":247,"./EventPluginUtils":251,"./EventPropagators":252,"./SyntheticClipboardEvent":337,"./SyntheticDragEvent":339,"./SyntheticEvent":340,"./SyntheticFocusEvent":341,"./SyntheticKeyboardEvent":343,"./SyntheticMouseEvent":344,"./SyntheticTouchEvent":345,"./SyntheticUIEvent":346,"./SyntheticWheelEvent":347,"./getEventCharCode":369,"./invariant":382,"./keyOf":389,"./warning":403,"_process":106}],337:[function(require,module,exports){
"use strict";function SyntheticClipboardEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),ClipboardEventInterface={clipboardData:function(event){return"clipboardData"in event?event.clipboardData:window.clipboardData}};SyntheticEvent.augmentClass(SyntheticClipboardEvent,ClipboardEventInterface),module.exports=SyntheticClipboardEvent;


},{"./SyntheticEvent":340}],338:[function(require,module,exports){
"use strict";function SyntheticCompositionEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),CompositionEventInterface={data:null};SyntheticEvent.augmentClass(SyntheticCompositionEvent,CompositionEventInterface),module.exports=SyntheticCompositionEvent;


},{"./SyntheticEvent":340}],339:[function(require,module,exports){
"use strict";function SyntheticDragEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticMouseEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticMouseEvent=require("./SyntheticMouseEvent"),DragEventInterface={dataTransfer:null};SyntheticMouseEvent.augmentClass(SyntheticDragEvent,DragEventInterface),module.exports=SyntheticDragEvent;


},{"./SyntheticMouseEvent":344}],340:[function(require,module,exports){
"use strict";function SyntheticEvent(dispatchConfig,dispatchMarker,nativeEvent){this.dispatchConfig=dispatchConfig,this.dispatchMarker=dispatchMarker,this.nativeEvent=nativeEvent;var Interface=this.constructor.Interface;for(var propName in Interface)if(Interface.hasOwnProperty(propName)){var normalize=Interface[propName];normalize?this[propName]=normalize(nativeEvent):this[propName]=nativeEvent[propName]}var defaultPrevented=null!=nativeEvent.defaultPrevented?nativeEvent.defaultPrevented:nativeEvent.returnValue===!1;defaultPrevented?this.isDefaultPrevented=emptyFunction.thatReturnsTrue:this.isDefaultPrevented=emptyFunction.thatReturnsFalse,this.isPropagationStopped=emptyFunction.thatReturnsFalse}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),getEventTarget=require("./getEventTarget"),EventInterface={type:null,target:getEventTarget,currentTarget:emptyFunction.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(event){return event.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};assign(SyntheticEvent.prototype,{preventDefault:function(){this.defaultPrevented=!0;var event=this.nativeEvent;event.preventDefault?event.preventDefault():event.returnValue=!1,this.isDefaultPrevented=emptyFunction.thatReturnsTrue},stopPropagation:function(){var event=this.nativeEvent;event.stopPropagation?event.stopPropagation():event.cancelBubble=!0,this.isPropagationStopped=emptyFunction.thatReturnsTrue},persist:function(){this.isPersistent=emptyFunction.thatReturnsTrue},isPersistent:emptyFunction.thatReturnsFalse,destructor:function(){var Interface=this.constructor.Interface;for(var propName in Interface)this[propName]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),SyntheticEvent.Interface=EventInterface,SyntheticEvent.augmentClass=function(Class,Interface){var Super=this,prototype=Object.create(Super.prototype);assign(prototype,Class.prototype),Class.prototype=prototype,Class.prototype.constructor=Class,Class.Interface=assign({},Super.Interface,Interface),Class.augmentClass=Super.augmentClass,PooledClass.addPoolingTo(Class,PooledClass.threeArgumentPooler)},PooledClass.addPoolingTo(SyntheticEvent,PooledClass.threeArgumentPooler),module.exports=SyntheticEvent;


},{"./Object.assign":260,"./PooledClass":261,"./emptyFunction":361,"./getEventTarget":372}],341:[function(require,module,exports){
"use strict";function SyntheticFocusEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),FocusEventInterface={relatedTarget:null};SyntheticUIEvent.augmentClass(SyntheticFocusEvent,FocusEventInterface),module.exports=SyntheticFocusEvent;


},{"./SyntheticUIEvent":346}],342:[function(require,module,exports){
"use strict";function SyntheticInputEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),InputEventInterface={data:null};SyntheticEvent.augmentClass(SyntheticInputEvent,InputEventInterface),module.exports=SyntheticInputEvent;


},{"./SyntheticEvent":340}],343:[function(require,module,exports){
"use strict";function SyntheticKeyboardEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventCharCode=require("./getEventCharCode"),getEventKey=require("./getEventKey"),getEventModifierState=require("./getEventModifierState"),KeyboardEventInterface={key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,charCode:function(event){return"keypress"===event.type?getEventCharCode(event):0},keyCode:function(event){return"keydown"===event.type||"keyup"===event.type?event.keyCode:0},which:function(event){return"keypress"===event.type?getEventCharCode(event):"keydown"===event.type||"keyup"===event.type?event.keyCode:0}};SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent,KeyboardEventInterface),module.exports=SyntheticKeyboardEvent;


},{"./SyntheticUIEvent":346,"./getEventCharCode":369,"./getEventKey":370,"./getEventModifierState":371}],344:[function(require,module,exports){
"use strict";function SyntheticMouseEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),ViewportMetrics=require("./ViewportMetrics"),getEventModifierState=require("./getEventModifierState"),MouseEventInterface={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:function(event){var button=event.button;return"which"in event?button:2===button?2:4===button?1:0},buttons:null,relatedTarget:function(event){return event.relatedTarget||(event.fromElement===event.srcElement?event.toElement:event.fromElement)},pageX:function(event){return"pageX"in event?event.pageX:event.clientX+ViewportMetrics.currentScrollLeft},pageY:function(event){return"pageY"in event?event.pageY:event.clientY+ViewportMetrics.currentScrollTop}};SyntheticUIEvent.augmentClass(SyntheticMouseEvent,MouseEventInterface),module.exports=SyntheticMouseEvent;


},{"./SyntheticUIEvent":346,"./ViewportMetrics":349,"./getEventModifierState":371}],345:[function(require,module,exports){
"use strict";function SyntheticTouchEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventModifierState=require("./getEventModifierState"),TouchEventInterface={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState};SyntheticUIEvent.augmentClass(SyntheticTouchEvent,TouchEventInterface),module.exports=SyntheticTouchEvent;


},{"./SyntheticUIEvent":346,"./getEventModifierState":371}],346:[function(require,module,exports){
"use strict";function SyntheticUIEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),UIEventInterface={view:function(event){if(event.view)return event.view;var target=getEventTarget(event);if(null!=target&&target.window===target)return target;var doc=target.ownerDocument;return doc?doc.defaultView||doc.parentWindow:window},detail:function(event){return event.detail||0}};SyntheticEvent.augmentClass(SyntheticUIEvent,UIEventInterface),module.exports=SyntheticUIEvent;


},{"./SyntheticEvent":340,"./getEventTarget":372}],347:[function(require,module,exports){
"use strict";function SyntheticWheelEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticMouseEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticMouseEvent=require("./SyntheticMouseEvent"),WheelEventInterface={deltaX:function(event){return"deltaX"in event?event.deltaX:"wheelDeltaX"in event?-event.wheelDeltaX:0},deltaY:function(event){return"deltaY"in event?event.deltaY:"wheelDeltaY"in event?-event.wheelDeltaY:"wheelDelta"in event?-event.wheelDelta:0},deltaZ:null,deltaMode:null};SyntheticMouseEvent.augmentClass(SyntheticWheelEvent,WheelEventInterface),module.exports=SyntheticWheelEvent;


},{"./SyntheticMouseEvent":344}],348:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),Mixin={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(method,scope,a,b,c,d,e,f){"production"!==process.env.NODE_ENV?invariant(!this.isInTransaction(),"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):invariant(!this.isInTransaction());var errorThrown,ret;try{this._isInTransaction=!0,errorThrown=!0,this.initializeAll(0),ret=method.call(scope,a,b,c,d,e,f),errorThrown=!1}finally{try{if(errorThrown)try{this.closeAll(0)}catch(err){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return ret},initializeAll:function(startIndex){for(var transactionWrappers=this.transactionWrappers,i=startIndex;i<transactionWrappers.length;i++){var wrapper=transactionWrappers[i];try{this.wrapperInitData[i]=Transaction.OBSERVED_ERROR,this.wrapperInitData[i]=wrapper.initialize?wrapper.initialize.call(this):null}finally{if(this.wrapperInitData[i]===Transaction.OBSERVED_ERROR)try{this.initializeAll(i+1)}catch(err){}}}},closeAll:function(startIndex){"production"!==process.env.NODE_ENV?invariant(this.isInTransaction(),"Transaction.closeAll(): Cannot close transaction when none are open."):invariant(this.isInTransaction());for(var transactionWrappers=this.transactionWrappers,i=startIndex;i<transactionWrappers.length;i++){var errorThrown,wrapper=transactionWrappers[i],initData=this.wrapperInitData[i];try{errorThrown=!0,initData!==Transaction.OBSERVED_ERROR&&wrapper.close&&wrapper.close.call(this,initData),errorThrown=!1}finally{if(errorThrown)try{this.closeAll(i+1)}catch(e){}}}this.wrapperInitData.length=0}},Transaction={Mixin:Mixin,OBSERVED_ERROR:{}};module.exports=Transaction;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],349:[function(require,module,exports){
"use strict";var ViewportMetrics={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(scrollPosition){ViewportMetrics.currentScrollLeft=scrollPosition.x,ViewportMetrics.currentScrollTop=scrollPosition.y}};module.exports=ViewportMetrics;


},{}],350:[function(require,module,exports){
(function (process){
"use strict";function accumulateInto(current,next){if("production"!==process.env.NODE_ENV?invariant(null!=next,"accumulateInto(...): Accumulated items must not be null or undefined."):invariant(null!=next),null==current)return next;var currentIsArray=Array.isArray(current),nextIsArray=Array.isArray(next);return currentIsArray&&nextIsArray?(current.push.apply(current,next),current):currentIsArray?(current.push(next),current):nextIsArray?[current].concat(next):[current,next]}var invariant=require("./invariant");module.exports=accumulateInto;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],351:[function(require,module,exports){
"use strict";function adler32(data){for(var a=1,b=0,i=0;i<data.length;i++)a=(a+data.charCodeAt(i))%MOD,b=(b+a)%MOD;return a|b<<16}var MOD=65521;module.exports=adler32;


},{}],352:[function(require,module,exports){
function camelize(string){return string.replace(_hyphenPattern,function(_,character){return character.toUpperCase()})}var _hyphenPattern=/-(.)/g;module.exports=camelize;


},{}],353:[function(require,module,exports){
"use strict";function camelizeStyleName(string){return camelize(string.replace(msPattern,"ms-"))}var camelize=require("./camelize"),msPattern=/^-ms-/;module.exports=camelizeStyleName;


},{"./camelize":352}],354:[function(require,module,exports){
(function (process){
"use strict";function cloneWithProps(child,props){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!child.ref,"You are calling cloneWithProps() on a child with a ref. This is dangerous because you're creating a new child which will not be added as a ref to its parent."):null);var newProps=ReactPropTransferer.mergeProps(props,child.props);return!newProps.hasOwnProperty(CHILDREN_PROP)&&child.props.hasOwnProperty(CHILDREN_PROP)&&(newProps.children=child.props.children),ReactElement.createElement(child.type,newProps)}var ReactElement=require("./ReactElement"),ReactPropTransferer=require("./ReactPropTransferer"),keyOf=require("./keyOf"),warning=require("./warning"),CHILDREN_PROP=keyOf({children:null});module.exports=cloneWithProps;


}).call(this,require('_process'))

},{"./ReactElement":294,"./ReactPropTransferer":314,"./keyOf":389,"./warning":403,"_process":106}],355:[function(require,module,exports){
function containsNode(outerNode,innerNode){return outerNode&&innerNode?outerNode===innerNode?!0:isTextNode(outerNode)?!1:isTextNode(innerNode)?containsNode(outerNode,innerNode.parentNode):outerNode.contains?outerNode.contains(innerNode):outerNode.compareDocumentPosition?!!(16&outerNode.compareDocumentPosition(innerNode)):!1:!1}var isTextNode=require("./isTextNode");module.exports=containsNode;


},{"./isTextNode":386}],356:[function(require,module,exports){
function hasArrayNature(obj){return!!obj&&("object"==typeof obj||"function"==typeof obj)&&"length"in obj&&!("setInterval"in obj)&&"number"!=typeof obj.nodeType&&(Array.isArray(obj)||"callee"in obj||"item"in obj)}function createArrayFromMixed(obj){return hasArrayNature(obj)?Array.isArray(obj)?obj.slice():toArray(obj):[obj]}var toArray=require("./toArray");module.exports=createArrayFromMixed;


},{"./toArray":400}],357:[function(require,module,exports){
(function (process){
"use strict";function createFullPageComponent(tag){var elementFactory=ReactElement.createFactory(tag),FullPageComponent=ReactClass.createClass({tagName:tag.toUpperCase(),displayName:"ReactFullPageComponent"+tag,componentWillUnmount:function(){"production"!==process.env.NODE_ENV?invariant(!1,"%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this.constructor.displayName):invariant(!1)},render:function(){return elementFactory(this.props)}});return FullPageComponent}var ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),invariant=require("./invariant");module.exports=createFullPageComponent;


}).call(this,require('_process'))

},{"./ReactClass":269,"./ReactElement":294,"./invariant":382,"_process":106}],358:[function(require,module,exports){
(function (process){
function getNodeName(markup){var nodeNameMatch=markup.match(nodeNamePattern);return nodeNameMatch&&nodeNameMatch[1].toLowerCase()}function createNodesFromMarkup(markup,handleScript){var node=dummyNode;"production"!==process.env.NODE_ENV?invariant(!!dummyNode,"createNodesFromMarkup dummy not initialized"):invariant(!!dummyNode);var nodeName=getNodeName(markup),wrap=nodeName&&getMarkupWrap(nodeName);if(wrap){node.innerHTML=wrap[1]+markup+wrap[2];for(var wrapDepth=wrap[0];wrapDepth--;)node=node.lastChild}else node.innerHTML=markup;var scripts=node.getElementsByTagName("script");scripts.length&&("production"!==process.env.NODE_ENV?invariant(handleScript,"createNodesFromMarkup(...): Unexpected <script> element rendered."):invariant(handleScript),createArrayFromMixed(scripts).forEach(handleScript));for(var nodes=createArrayFromMixed(node.childNodes);node.lastChild;)node.removeChild(node.lastChild);return nodes}var ExecutionEnvironment=require("./ExecutionEnvironment"),createArrayFromMixed=require("./createArrayFromMixed"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,nodeNamePattern=/^\s*<(\w+)/;module.exports=createNodesFromMarkup;


}).call(this,require('_process'))

},{"./ExecutionEnvironment":253,"./createArrayFromMixed":356,"./getMarkupWrap":374,"./invariant":382,"_process":106}],359:[function(require,module,exports){
(function (process){
"use strict";function cx(classNames){return"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(warned,"React.addons.classSet will be deprecated in a future version. See http://fb.me/react-addons-classset"):null,warned=!0),"object"==typeof classNames?Object.keys(classNames).filter(function(className){return classNames[className]}).join(" "):Array.prototype.join.call(arguments," ")}var warning=require("./warning"),warned=!1;module.exports=cx;


}).call(this,require('_process'))

},{"./warning":403,"_process":106}],360:[function(require,module,exports){
"use strict";function dangerousStyleValue(name,value){var isEmpty=null==value||"boolean"==typeof value||""===value;if(isEmpty)return"";var isNonNumeric=isNaN(value);return isNonNumeric||0===value||isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name]?""+value:("string"==typeof value&&(value=value.trim()),value+"px")}var CSSProperty=require("./CSSProperty"),isUnitlessNumber=CSSProperty.isUnitlessNumber;module.exports=dangerousStyleValue;


},{"./CSSProperty":236}],361:[function(require,module,exports){
function makeEmptyFunction(arg){return function(){return arg}}function emptyFunction(){}emptyFunction.thatReturns=makeEmptyFunction,emptyFunction.thatReturnsFalse=makeEmptyFunction(!1),emptyFunction.thatReturnsTrue=makeEmptyFunction(!0),emptyFunction.thatReturnsNull=makeEmptyFunction(null),emptyFunction.thatReturnsThis=function(){return this},emptyFunction.thatReturnsArgument=function(arg){return arg},module.exports=emptyFunction;


},{}],362:[function(require,module,exports){
(function (process){
"use strict";var emptyObject={};"production"!==process.env.NODE_ENV&&Object.freeze(emptyObject),module.exports=emptyObject;


}).call(this,require('_process'))

},{"_process":106}],363:[function(require,module,exports){
"use strict";function escaper(match){return ESCAPE_LOOKUP[match]}function escapeTextContentForBrowser(text){return(""+text).replace(ESCAPE_REGEX,escaper)}var ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},ESCAPE_REGEX=/[&><"']/g;module.exports=escapeTextContentForBrowser;


},{}],364:[function(require,module,exports){
(function (process){
"use strict";function findDOMNode(componentOrElement){if("production"!==process.env.NODE_ENV){var owner=ReactCurrentOwner.current;null!==owner&&("production"!==process.env.NODE_ENV?warning(owner._warnedAboutRefsInRender,"%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",owner.getName()||"A component"):null,owner._warnedAboutRefsInRender=!0)}return null==componentOrElement?null:isNode(componentOrElement)?componentOrElement:ReactInstanceMap.has(componentOrElement)?ReactMount.getNodeFromInstance(componentOrElement):("production"!==process.env.NODE_ENV?invariant(null==componentOrElement.render||"function"!=typeof componentOrElement.render,"Component (with keys: %s) contains `render` method but is not mounted in the DOM",Object.keys(componentOrElement)):invariant(null==componentOrElement.render||"function"!=typeof componentOrElement.render),void("production"!==process.env.NODE_ENV?invariant(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(componentOrElement)):invariant(!1)))}var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMount=require("./ReactMount"),invariant=require("./invariant"),isNode=require("./isNode"),warning=require("./warning");module.exports=findDOMNode;


}).call(this,require('_process'))

},{"./ReactCurrentOwner":276,"./ReactInstanceMap":304,"./ReactMount":308,"./invariant":382,"./isNode":384,"./warning":403,"_process":106}],365:[function(require,module,exports){
(function (process){
"use strict";function flattenSingleChildIntoContext(traverseContext,child,name){var result=traverseContext,keyUnique=!result.hasOwnProperty(name);"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(keyUnique,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",name):null),keyUnique&&null!=child&&(result[name]=child)}function flattenChildren(children){if(null==children)return children;var result={};return traverseAllChildren(children,flattenSingleChildIntoContext,result),result}var traverseAllChildren=require("./traverseAllChildren"),warning=require("./warning");module.exports=flattenChildren;


}).call(this,require('_process'))

},{"./traverseAllChildren":401,"./warning":403,"_process":106}],366:[function(require,module,exports){
"use strict";function focusNode(node){try{node.focus()}catch(e){}}module.exports=focusNode;


},{}],367:[function(require,module,exports){
"use strict";var forEachAccumulated=function(arr,cb,scope){Array.isArray(arr)?arr.forEach(cb,scope):arr&&cb.call(scope,arr)};module.exports=forEachAccumulated;


},{}],368:[function(require,module,exports){
function getActiveElement(){try{return document.activeElement||document.body}catch(e){return document.body}}module.exports=getActiveElement;


},{}],369:[function(require,module,exports){
"use strict";function getEventCharCode(nativeEvent){var charCode,keyCode=nativeEvent.keyCode;return"charCode"in nativeEvent?(charCode=nativeEvent.charCode,0===charCode&&13===keyCode&&(charCode=13)):charCode=keyCode,charCode>=32||13===charCode?charCode:0}module.exports=getEventCharCode;


},{}],370:[function(require,module,exports){
"use strict";function getEventKey(nativeEvent){if(nativeEvent.key){var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if("Unidentified"!==key)return key}if("keypress"===nativeEvent.type){var charCode=getEventCharCode(nativeEvent);return 13===charCode?"Enter":String.fromCharCode(charCode)}return"keydown"===nativeEvent.type||"keyup"===nativeEvent.type?translateToKey[nativeEvent.keyCode]||"Unidentified":""}var getEventCharCode=require("./getEventCharCode"),normalizeKey={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},translateToKey={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};module.exports=getEventKey;


},{"./getEventCharCode":369}],371:[function(require,module,exports){
"use strict";function modifierStateGetter(keyArg){var syntheticEvent=this,nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState)return nativeEvent.getModifierState(keyArg);var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:!1}function getEventModifierState(nativeEvent){return modifierStateGetter}var modifierKeyToProp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};module.exports=getEventModifierState;


},{}],372:[function(require,module,exports){
"use strict";function getEventTarget(nativeEvent){var target=nativeEvent.target||nativeEvent.srcElement||window;return 3===target.nodeType?target.parentNode:target}module.exports=getEventTarget;


},{}],373:[function(require,module,exports){
"use strict";function getIteratorFn(maybeIterable){var iteratorFn=maybeIterable&&(ITERATOR_SYMBOL&&maybeIterable[ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL]);return"function"==typeof iteratorFn?iteratorFn:void 0}var ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator";module.exports=getIteratorFn;


},{}],374:[function(require,module,exports){
(function (process){
function getMarkupWrap(nodeName){return"production"!==process.env.NODE_ENV?invariant(!!dummyNode,"Markup wrapping node not initialized"):invariant(!!dummyNode),markupWrap.hasOwnProperty(nodeName)||(nodeName="*"),shouldWrap.hasOwnProperty(nodeName)||("*"===nodeName?dummyNode.innerHTML="<link />":dummyNode.innerHTML="<"+nodeName+"></"+nodeName+">",shouldWrap[nodeName]=!dummyNode.firstChild),shouldWrap[nodeName]?markupWrap[nodeName]:null}var ExecutionEnvironment=require("./ExecutionEnvironment"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,shouldWrap={circle:!0,clipPath:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},selectWrap=[1,'<select multiple="true">',"</select>"],tableWrap=[1,"<table>","</table>"],trWrap=[3,"<table><tbody><tr>","</tr></tbody></table>"],svgWrap=[1,"<svg>","</svg>"],markupWrap={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:selectWrap,option:selectWrap,caption:tableWrap,colgroup:tableWrap,tbody:tableWrap,tfoot:tableWrap,thead:tableWrap,td:trWrap,th:trWrap,circle:svgWrap,clipPath:svgWrap,defs:svgWrap,ellipse:svgWrap,g:svgWrap,line:svgWrap,linearGradient:svgWrap,path:svgWrap,polygon:svgWrap,polyline:svgWrap,radialGradient:svgWrap,rect:svgWrap,stop:svgWrap,text:svgWrap};module.exports=getMarkupWrap;


}).call(this,require('_process'))

},{"./ExecutionEnvironment":253,"./invariant":382,"_process":106}],375:[function(require,module,exports){
"use strict";function getLeafNode(node){for(;node&&node.firstChild;)node=node.firstChild;return node}function getSiblingNode(node){for(;node;){if(node.nextSibling)return node.nextSibling;node=node.parentNode}}function getNodeForCharacterOffset(root,offset){for(var node=getLeafNode(root),nodeStart=0,nodeEnd=0;node;){if(3===node.nodeType){if(nodeEnd=nodeStart+node.textContent.length,offset>=nodeStart&&nodeEnd>=offset)return{node:node,offset:offset-nodeStart};nodeStart=nodeEnd}node=getLeafNode(getSiblingNode(node))}}module.exports=getNodeForCharacterOffset;


},{}],376:[function(require,module,exports){
"use strict";function getReactRootElementInContainer(container){return container?container.nodeType===DOC_NODE_TYPE?container.documentElement:container.firstChild:null}var DOC_NODE_TYPE=9;module.exports=getReactRootElementInContainer;


},{}],377:[function(require,module,exports){
"use strict";function getTextContentAccessor(){return!contentKey&&ExecutionEnvironment.canUseDOM&&(contentKey="textContent"in document.documentElement?"textContent":"innerText"),contentKey}var ExecutionEnvironment=require("./ExecutionEnvironment"),contentKey=null;module.exports=getTextContentAccessor;


},{"./ExecutionEnvironment":253}],378:[function(require,module,exports){
"use strict";function getUnboundedScrollPosition(scrollable){return scrollable===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:scrollable.scrollLeft,y:scrollable.scrollTop}}module.exports=getUnboundedScrollPosition;


},{}],379:[function(require,module,exports){
function hyphenate(string){return string.replace(_uppercasePattern,"-$1").toLowerCase()}var _uppercasePattern=/([A-Z])/g;module.exports=hyphenate;


},{}],380:[function(require,module,exports){
"use strict";function hyphenateStyleName(string){return hyphenate(string).replace(msPattern,"-ms-")}var hyphenate=require("./hyphenate"),msPattern=/^ms-/;module.exports=hyphenateStyleName;


},{"./hyphenate":379}],381:[function(require,module,exports){
(function (process){
"use strict";function isInternalComponentType(type){return"function"==typeof type&&"undefined"!=typeof type.prototype&&"function"==typeof type.prototype.mountComponent&&"function"==typeof type.prototype.receiveComponent}function instantiateReactComponent(node,parentCompositeType){var instance;if((null===node||node===!1)&&(node=ReactEmptyComponent.emptyElement),"object"==typeof node){var element=node;"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(element&&("function"==typeof element.type||"string"==typeof element.type),"Only functions or strings can be mounted as React components."):null),instance=parentCompositeType===element.type&&"string"==typeof element.type?ReactNativeComponent.createInternalComponent(element):isInternalComponentType(element.type)?new element.type(element):new ReactCompositeComponentWrapper}else"string"==typeof node||"number"==typeof node?instance=ReactNativeComponent.createInstanceForText(node):"production"!==process.env.NODE_ENV?invariant(!1,"Encountered invalid React node of type %s",typeof node):invariant(!1);return"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning("function"==typeof instance.construct&&"function"==typeof instance.mountComponent&&"function"==typeof instance.receiveComponent&&"function"==typeof instance.unmountComponent,"Only React Components can be mounted."):null),instance.construct(node),instance._mountIndex=0,instance._mountImage=null,"production"!==process.env.NODE_ENV&&(instance._isOwnerNecessary=!1,instance._warnedAboutRefsInRender=!1),"production"!==process.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(instance),instance}var ReactCompositeComponent=require("./ReactCompositeComponent"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactNativeComponent=require("./ReactNativeComponent"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),ReactCompositeComponentWrapper=function(){};assign(ReactCompositeComponentWrapper.prototype,ReactCompositeComponent.Mixin,{_instantiateReactComponent:instantiateReactComponent}),module.exports=instantiateReactComponent;


}).call(this,require('_process'))

},{"./Object.assign":260,"./ReactCompositeComponent":274,"./ReactEmptyComponent":296,"./ReactNativeComponent":311,"./invariant":382,"./warning":403,"_process":106}],382:[function(require,module,exports){
(function (process){
"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if("production"!==process.env.NODE_ENV&&void 0===format)throw new Error("invariant requires an error message argument");if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant;


}).call(this,require('_process'))

},{"_process":106}],383:[function(require,module,exports){
"use strict";function isEventSupported(eventNameSuffix,capture){if(!ExecutionEnvironment.canUseDOM||capture&&!("addEventListener"in document))return!1;var eventName="on"+eventNameSuffix,isSupported=eventName in document;if(!isSupported){var element=document.createElement("div");element.setAttribute(eventName,"return;"),isSupported="function"==typeof element[eventName]}return!isSupported&&useHasFeature&&"wheel"===eventNameSuffix&&(isSupported=document.implementation.hasFeature("Events.wheel","3.0")),isSupported}var ExecutionEnvironment=require("./ExecutionEnvironment"),useHasFeature;ExecutionEnvironment.canUseDOM&&(useHasFeature=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),module.exports=isEventSupported;


},{"./ExecutionEnvironment":253}],384:[function(require,module,exports){
function isNode(object){return!(!object||!("function"==typeof Node?object instanceof Node:"object"==typeof object&&"number"==typeof object.nodeType&&"string"==typeof object.nodeName))}module.exports=isNode;


},{}],385:[function(require,module,exports){
"use strict";function isTextInputElement(elem){return elem&&("INPUT"===elem.nodeName&&supportedInputTypes[elem.type]||"TEXTAREA"===elem.nodeName)}var supportedInputTypes={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};module.exports=isTextInputElement;


},{}],386:[function(require,module,exports){
function isTextNode(object){return isNode(object)&&3==object.nodeType}var isNode=require("./isNode");module.exports=isTextNode;


},{"./isNode":384}],387:[function(require,module,exports){
"use strict";function joinClasses(className){className||(className="");var nextClass,argLength=arguments.length;if(argLength>1)for(var ii=1;argLength>ii;ii++)nextClass=arguments[ii],nextClass&&(className=(className?className+" ":"")+nextClass);return className}module.exports=joinClasses;


},{}],388:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),keyMirror=function(obj){var key,ret={};"production"!==process.env.NODE_ENV?invariant(obj instanceof Object&&!Array.isArray(obj),"keyMirror(...): Argument must be an object."):invariant(obj instanceof Object&&!Array.isArray(obj));for(key in obj)obj.hasOwnProperty(key)&&(ret[key]=key);return ret};module.exports=keyMirror;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],389:[function(require,module,exports){
var keyOf=function(oneKeyObj){var key;for(key in oneKeyObj)if(oneKeyObj.hasOwnProperty(key))return key;return null};module.exports=keyOf;


},{}],390:[function(require,module,exports){
"use strict";function mapObject(object,callback,context){if(!object)return null;var result={};for(var name in object)hasOwnProperty.call(object,name)&&(result[name]=callback.call(context,object[name],name,object));return result}var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=mapObject;


},{}],391:[function(require,module,exports){
"use strict";function memoizeStringOnly(callback){var cache={};return function(string){return cache.hasOwnProperty(string)||(cache[string]=callback.call(this,string)),cache[string]}}module.exports=memoizeStringOnly;


},{}],392:[function(require,module,exports){
(function (process){
"use strict";function onlyChild(children){return"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(children),"onlyChild must be passed a children with exactly one child."):invariant(ReactElement.isValidElement(children)),children}var ReactElement=require("./ReactElement"),invariant=require("./invariant");module.exports=onlyChild;


}).call(this,require('_process'))

},{"./ReactElement":294,"./invariant":382,"_process":106}],393:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),performance;ExecutionEnvironment.canUseDOM&&(performance=window.performance||window.msPerformance||window.webkitPerformance),module.exports=performance||{};


},{"./ExecutionEnvironment":253}],394:[function(require,module,exports){
var performance=require("./performance");performance&&performance.now||(performance=Date);var performanceNow=performance.now.bind(performance);module.exports=performanceNow;


},{"./performance":393}],395:[function(require,module,exports){
"use strict";function quoteAttributeValueForBrowser(value){return'"'+escapeTextContentForBrowser(value)+'"'}var escapeTextContentForBrowser=require("./escapeTextContentForBrowser");module.exports=quoteAttributeValueForBrowser;


},{"./escapeTextContentForBrowser":363}],396:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),WHITESPACE_TEST=/^[ \r\n\t\f]/,NONVISIBLE_TEST=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,setInnerHTML=function(node,html){node.innerHTML=html};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(setInnerHTML=function(node,html){MSApp.execUnsafeLocalFunction(function(){node.innerHTML=html})}),ExecutionEnvironment.canUseDOM){var testElement=document.createElement("div");testElement.innerHTML=" ",""===testElement.innerHTML&&(setInnerHTML=function(node,html){if(node.parentNode&&node.parentNode.replaceChild(node,node),WHITESPACE_TEST.test(html)||"<"===html[0]&&NONVISIBLE_TEST.test(html)){node.innerHTML="\ufeff"+html;var textNode=node.firstChild;1===textNode.data.length?node.removeChild(textNode):textNode.deleteData(0,1)}else node.innerHTML=html})}module.exports=setInnerHTML;


},{"./ExecutionEnvironment":253}],397:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setInnerHTML=require("./setInnerHTML"),setTextContent=function(node,text){node.textContent=text};ExecutionEnvironment.canUseDOM&&("textContent"in document.documentElement||(setTextContent=function(node,text){setInnerHTML(node,escapeTextContentForBrowser(text))})),module.exports=setTextContent;


},{"./ExecutionEnvironment":253,"./escapeTextContentForBrowser":363,"./setInnerHTML":396}],398:[function(require,module,exports){
"use strict";function shallowEqual(objA,objB){if(objA===objB)return!0;var key;for(key in objA)if(objA.hasOwnProperty(key)&&(!objB.hasOwnProperty(key)||objA[key]!==objB[key]))return!1;for(key in objB)if(objB.hasOwnProperty(key)&&!objA.hasOwnProperty(key))return!1;return!0}module.exports=shallowEqual;


},{}],399:[function(require,module,exports){
(function (process){
"use strict";function shouldUpdateReactComponent(prevElement,nextElement){if(null!=prevElement&&null!=nextElement){var prevType=typeof prevElement,nextType=typeof nextElement;if("string"===prevType||"number"===prevType)return"string"===nextType||"number"===nextType;if("object"===nextType&&prevElement.type===nextElement.type&&prevElement.key===nextElement.key){var ownersMatch=prevElement._owner===nextElement._owner,prevName=null,nextName=null,nextDisplayName=null;return"production"!==process.env.NODE_ENV&&(ownersMatch||(null!=prevElement._owner&&null!=prevElement._owner.getPublicInstance()&&null!=prevElement._owner.getPublicInstance().constructor&&(prevName=prevElement._owner.getPublicInstance().constructor.displayName),null!=nextElement._owner&&null!=nextElement._owner.getPublicInstance()&&null!=nextElement._owner.getPublicInstance().constructor&&(nextName=nextElement._owner.getPublicInstance().constructor.displayName),null!=nextElement.type&&null!=nextElement.type.displayName&&(nextDisplayName=nextElement.type.displayName),null!=nextElement.type&&"string"==typeof nextElement.type&&(nextDisplayName=nextElement.type),("string"!=typeof nextElement.type||"input"===nextElement.type||"textarea"===nextElement.type)&&(null!=prevElement._owner&&prevElement._owner._isOwnerNecessary===!1||null!=nextElement._owner&&nextElement._owner._isOwnerNecessary===!1)&&(null!=prevElement._owner&&(prevElement._owner._isOwnerNecessary=!0),null!=nextElement._owner&&(nextElement._owner._isOwnerNecessary=!0),"production"!==process.env.NODE_ENV?warning(!1,"<%s /> is being rendered by both %s and %s using the same key (%s) in the same place. Currently, this means that they don't preserve state. This behavior should be very rare so we're considering deprecating it. Please contact the React team and explain your use case so that we can take that into consideration.",nextDisplayName||"Unknown Component",prevName||"[Unknown]",nextName||"[Unknown]",prevElement.key):null))),ownersMatch}}return!1}var warning=require("./warning");module.exports=shouldUpdateReactComponent;


}).call(this,require('_process'))

},{"./warning":403,"_process":106}],400:[function(require,module,exports){
(function (process){
function toArray(obj){var length=obj.length;if("production"!==process.env.NODE_ENV?invariant(!Array.isArray(obj)&&("object"==typeof obj||"function"==typeof obj),"toArray: Array-like object expected"):invariant(!Array.isArray(obj)&&("object"==typeof obj||"function"==typeof obj)),"production"!==process.env.NODE_ENV?invariant("number"==typeof length,"toArray: Object needs a length property"):invariant("number"==typeof length),"production"!==process.env.NODE_ENV?invariant(0===length||length-1 in obj,"toArray: Object should have keys for indices"):invariant(0===length||length-1 in obj),obj.hasOwnProperty)try{return Array.prototype.slice.call(obj)}catch(e){}for(var ret=Array(length),ii=0;length>ii;ii++)ret[ii]=obj[ii];return ret}var invariant=require("./invariant");module.exports=toArray;


}).call(this,require('_process'))

},{"./invariant":382,"_process":106}],401:[function(require,module,exports){
(function (process){
"use strict";function userProvidedKeyEscaper(match){return userProvidedKeyEscaperLookup[match]}function getComponentKey(component,index){return component&&null!=component.key?wrapUserProvidedKey(component.key):index.toString(36)}function escapeUserProvidedKey(text){return(""+text).replace(userProvidedKeyEscapeRegex,userProvidedKeyEscaper)}function wrapUserProvidedKey(key){return"$"+escapeUserProvidedKey(key)}function traverseAllChildrenImpl(children,nameSoFar,indexSoFar,callback,traverseContext){var type=typeof children;if(("undefined"===type||"boolean"===type)&&(children=null),null===children||"string"===type||"number"===type||ReactElement.isValidElement(children))return callback(traverseContext,children,""===nameSoFar?SEPARATOR+getComponentKey(children,0):nameSoFar,indexSoFar),1;var child,nextName,nextIndex,subtreeCount=0;if(Array.isArray(children))for(var i=0;i<children.length;i++)child=children[i],nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+getComponentKey(child,i),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext);else{var iteratorFn=getIteratorFn(children);if(iteratorFn){var step,iterator=iteratorFn.call(children);if(iteratorFn!==children.entries)for(var ii=0;!(step=iterator.next()).done;)child=step.value,nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+getComponentKey(child,ii++),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext);else for("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(didWarnAboutMaps,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead."):null,didWarnAboutMaps=!0);!(step=iterator.next()).done;){var entry=step.value;entry&&(child=entry[1],nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+wrapUserProvidedKey(entry[0])+SUBSEPARATOR+getComponentKey(child,0),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext))}}else if("object"===type){"production"!==process.env.NODE_ENV?invariant(1!==children.nodeType,"traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components."):invariant(1!==children.nodeType);var fragment=ReactFragment.extract(children);for(var key in fragment)fragment.hasOwnProperty(key)&&(child=fragment[key],nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+wrapUserProvidedKey(key)+SUBSEPARATOR+getComponentKey(child,0),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext))}}return subtreeCount}function traverseAllChildren(children,callback,traverseContext){return null==children?0:traverseAllChildrenImpl(children,"",0,callback,traverseContext)}var ReactElement=require("./ReactElement"),ReactFragment=require("./ReactFragment"),ReactInstanceHandles=require("./ReactInstanceHandles"),getIteratorFn=require("./getIteratorFn"),invariant=require("./invariant"),warning=require("./warning"),SEPARATOR=ReactInstanceHandles.SEPARATOR,SUBSEPARATOR=":",userProvidedKeyEscaperLookup={"=":"=0",".":"=1",":":"=2"},userProvidedKeyEscapeRegex=/[=.:]/g,didWarnAboutMaps=!1;module.exports=traverseAllChildren;


}).call(this,require('_process'))

},{"./ReactElement":294,"./ReactFragment":300,"./ReactInstanceHandles":303,"./getIteratorFn":373,"./invariant":382,"./warning":403,"_process":106}],402:[function(require,module,exports){
(function (process){
"use strict";function shallowCopy(x){return Array.isArray(x)?x.concat():x&&"object"==typeof x?assign(new x.constructor,x):x}function invariantArrayCase(value,spec,command){"production"!==process.env.NODE_ENV?invariant(Array.isArray(value),"update(): expected target of %s to be an array; got %s.",command,value):invariant(Array.isArray(value));var specValue=spec[command];"production"!==process.env.NODE_ENV?invariant(Array.isArray(specValue),"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",command,specValue):invariant(Array.isArray(specValue))}function update(value,spec){if("production"!==process.env.NODE_ENV?invariant("object"==typeof spec,"update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?",ALL_COMMANDS_LIST.join(", "),COMMAND_SET):invariant("object"==typeof spec),hasOwnProperty.call(spec,COMMAND_SET))return"production"!==process.env.NODE_ENV?invariant(1===Object.keys(spec).length,"Cannot have more than one key in an object with %s",COMMAND_SET):invariant(1===Object.keys(spec).length),spec[COMMAND_SET];var nextValue=shallowCopy(value);if(hasOwnProperty.call(spec,COMMAND_MERGE)){var mergeObj=spec[COMMAND_MERGE];"production"!==process.env.NODE_ENV?invariant(mergeObj&&"object"==typeof mergeObj,"update(): %s expects a spec of type 'object'; got %s",COMMAND_MERGE,mergeObj):invariant(mergeObj&&"object"==typeof mergeObj),"production"!==process.env.NODE_ENV?invariant(nextValue&&"object"==typeof nextValue,"update(): %s expects a target of type 'object'; got %s",COMMAND_MERGE,nextValue):invariant(nextValue&&"object"==typeof nextValue),assign(nextValue,spec[COMMAND_MERGE])}hasOwnProperty.call(spec,COMMAND_PUSH)&&(invariantArrayCase(value,spec,COMMAND_PUSH),spec[COMMAND_PUSH].forEach(function(item){nextValue.push(item)})),hasOwnProperty.call(spec,COMMAND_UNSHIFT)&&(invariantArrayCase(value,spec,COMMAND_UNSHIFT),spec[COMMAND_UNSHIFT].forEach(function(item){nextValue.unshift(item)})),hasOwnProperty.call(spec,COMMAND_SPLICE)&&("production"!==process.env.NODE_ENV?invariant(Array.isArray(value),"Expected %s target to be an array; got %s",COMMAND_SPLICE,value):invariant(Array.isArray(value)),"production"!==process.env.NODE_ENV?invariant(Array.isArray(spec[COMMAND_SPLICE]),"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",COMMAND_SPLICE,spec[COMMAND_SPLICE]):invariant(Array.isArray(spec[COMMAND_SPLICE])),spec[COMMAND_SPLICE].forEach(function(args){"production"!==process.env.NODE_ENV?invariant(Array.isArray(args),"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",COMMAND_SPLICE,spec[COMMAND_SPLICE]):invariant(Array.isArray(args)),nextValue.splice.apply(nextValue,args)})),hasOwnProperty.call(spec,COMMAND_APPLY)&&("production"!==process.env.NODE_ENV?invariant("function"==typeof spec[COMMAND_APPLY],"update(): expected spec of %s to be a function; got %s.",COMMAND_APPLY,spec[COMMAND_APPLY]):invariant("function"==typeof spec[COMMAND_APPLY]),nextValue=spec[COMMAND_APPLY](nextValue));for(var k in spec)ALL_COMMANDS_SET.hasOwnProperty(k)&&ALL_COMMANDS_SET[k]||(nextValue[k]=update(value[k],spec[k]));return nextValue}var assign=require("./Object.assign"),keyOf=require("./keyOf"),invariant=require("./invariant"),hasOwnProperty={}.hasOwnProperty,COMMAND_PUSH=keyOf({$push:null}),COMMAND_UNSHIFT=keyOf({$unshift:null}),COMMAND_SPLICE=keyOf({$splice:null}),COMMAND_SET=keyOf({$set:null}),COMMAND_MERGE=keyOf({$merge:null}),COMMAND_APPLY=keyOf({$apply:null}),ALL_COMMANDS_LIST=[COMMAND_PUSH,COMMAND_UNSHIFT,COMMAND_SPLICE,COMMAND_SET,COMMAND_MERGE,COMMAND_APPLY],ALL_COMMANDS_SET={};ALL_COMMANDS_LIST.forEach(function(command){ALL_COMMANDS_SET[command]=!0}),module.exports=update;


}).call(this,require('_process'))

},{"./Object.assign":260,"./invariant":382,"./keyOf":389,"_process":106}],403:[function(require,module,exports){
(function (process){
"use strict";var emptyFunction=require("./emptyFunction"),warning=emptyFunction;"production"!==process.env.NODE_ENV&&(warning=function(condition,format){for(var args=[],$__0=2,$__1=arguments.length;$__1>$__0;$__0++)args.push(arguments[$__0]);if(void 0===format)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(format.length<10||/^[s\W]*$/.test(format))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+format);if(0!==format.indexOf("Failed Composite propType: ")&&!condition){var argIndex=0,message="Warning: "+format.replace(/%s/g,function(){return args[argIndex++]});console.warn(message);try{throw new Error(message)}catch(x){}}}),module.exports=warning;


}).call(this,require('_process'))

},{"./emptyFunction":361,"_process":106}],404:[function(require,module,exports){
module.exports=require("./lib/React");


},{"./lib/React":262}],405:[function(require,module,exports){
module.exports=require("./src");


},{"./src":419}],406:[function(require,module,exports){
"use strict";function EE(fn,context,once){this.fn=fn,this.context=context,this.once=once||!1}function EventEmitter(){}EventEmitter.prototype._events=void 0,EventEmitter.prototype.listeners=function(event){if(!this._events||!this._events[event])return[];if(this._events[event].fn)return[this._events[event].fn];for(var i=0,l=this._events[event].length,ee=new Array(l);l>i;i++)ee[i]=this._events[event][i].fn;return ee},EventEmitter.prototype.emit=function(event,a1,a2,a3,a4,a5){if(!this._events||!this._events[event])return!1;var args,i,listeners=this._events[event],len=arguments.length;if("function"==typeof listeners.fn){switch(listeners.once&&this.removeListener(event,listeners.fn,!0),len){case 1:return listeners.fn.call(listeners.context),!0;case 2:return listeners.fn.call(listeners.context,a1),!0;case 3:return listeners.fn.call(listeners.context,a1,a2),!0;case 4:return listeners.fn.call(listeners.context,a1,a2,a3),!0;case 5:return listeners.fn.call(listeners.context,a1,a2,a3,a4),!0;case 6:return listeners.fn.call(listeners.context,a1,a2,a3,a4,a5),!0}for(i=1,args=new Array(len-1);len>i;i++)args[i-1]=arguments[i];listeners.fn.apply(listeners.context,args)}else{var j,length=listeners.length;for(i=0;length>i;i++)switch(listeners[i].once&&this.removeListener(event,listeners[i].fn,!0),len){case 1:listeners[i].fn.call(listeners[i].context);break;case 2:listeners[i].fn.call(listeners[i].context,a1);break;case 3:listeners[i].fn.call(listeners[i].context,a1,a2);break;default:if(!args)for(j=1,args=new Array(len-1);len>j;j++)args[j-1]=arguments[j];listeners[i].fn.apply(listeners[i].context,args)}}return!0},EventEmitter.prototype.on=function(event,fn,context){var listener=new EE(fn,context||this);return this._events||(this._events={}),this._events[event]?this._events[event].fn?this._events[event]=[this._events[event],listener]:this._events[event].push(listener):this._events[event]=listener,this},EventEmitter.prototype.once=function(event,fn,context){var listener=new EE(fn,context||this,!0);return this._events||(this._events={}),this._events[event]?this._events[event].fn?this._events[event]=[this._events[event],listener]:this._events[event].push(listener):this._events[event]=listener,this},EventEmitter.prototype.removeListener=function(event,fn,once){if(!this._events||!this._events[event])return this;var listeners=this._events[event],events=[];if(fn&&(listeners.fn&&(listeners.fn!==fn||once&&!listeners.once)&&events.push(listeners),!listeners.fn))for(var i=0,length=listeners.length;length>i;i++)(listeners[i].fn!==fn||once&&!listeners[i].once)&&events.push(listeners[i]);return events.length?this._events[event]=1===events.length?events[0]:events:delete this._events[event],this},EventEmitter.prototype.removeAllListeners=function(event){return this._events?(event?delete this._events[event]:this._events={},this):this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.addListener=EventEmitter.prototype.on,EventEmitter.prototype.setMaxListeners=function(){return this},EventEmitter.EventEmitter=EventEmitter,EventEmitter.EventEmitter2=EventEmitter,EventEmitter.EventEmitter3=EventEmitter,module.exports=EventEmitter;


},{}],407:[function(require,module,exports){
(function (global){
!function(t,n,e){n[t]=n[t]||e(),"undefined"!=typeof module&&module.exports?module.exports=n[t]:"function"==typeof define&&define.amd&&define(function(){return n[t]})}("Promise","undefined"!=typeof global?global:this,function(){"use strict";function t(t,n){l.add(t,n),h||(h=y(l.drain))}function n(t){var n,e=typeof t;return null==t||"object"!=e&&"function"!=e||(n=t.then),"function"==typeof n?n:!1}function e(){for(var t=0;t<this.chain.length;t++)o(this,1===this.state?this.chain[t].success:this.chain[t].failure,this.chain[t]);this.chain.length=0}function o(t,e,o){var r,i;try{e===!1?o.reject(t.msg):(r=e===!0?t.msg:e.call(void 0,t.msg),r===o.promise?o.reject(TypeError("Promise-chain cycle")):(i=n(r))?i.call(r,o.resolve,o.reject):o.resolve(r))}catch(c){o.reject(c)}}function r(o){var c,u,a=this;if(!a.triggered){a.triggered=!0,a.def&&(a=a.def);try{(c=n(o))?(u=new f(a),c.call(o,function(){r.apply(u,arguments)},function(){i.apply(u,arguments)})):(a.msg=o,a.state=1,a.chain.length>0&&t(e,a))}catch(s){i.call(u||new f(a),s)}}}function i(n){var o=this;o.triggered||(o.triggered=!0,o.def&&(o=o.def),o.msg=n,o.state=2,o.chain.length>0&&t(e,o))}function c(t,n,e,o){for(var r=0;r<n.length;r++)!function(r){t.resolve(n[r]).then(function(t){e(r,t)},o)}(r)}function f(t){this.def=t,this.triggered=!1}function u(t){this.promise=t,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function a(n){if("function"!=typeof n)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var o=new u(this);this.then=function(n,r){var i={success:"function"==typeof n?n:!0,failure:"function"==typeof r?r:!1};return i.promise=new this.constructor(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");i.resolve=t,i.reject=n}),o.chain.push(i),0!==o.state&&t(e,o),i.promise},this["catch"]=function(t){return this.then(void 0,t)};try{n.call(void 0,function(t){r.call(o,t)},function(t){i.call(o,t)})}catch(c){i.call(o,c)}}var s,h,l,p=Object.prototype.toString,y="undefined"!=typeof setImmediate?function(t){return setImmediate(t)}:setTimeout;try{Object.defineProperty({},"x",{}),s=function(t,n,e,o){return Object.defineProperty(t,n,{value:e,writable:!0,configurable:o!==!1})}}catch(d){s=function(t,n,e){return t[n]=e,t}}l=function(){function t(t,n){this.fn=t,this.self=n,this.next=void 0}var n,e,o;return{add:function(r,i){o=new t(r,i),e?e.next=o:n=o,e=o,o=void 0},drain:function(){var t=n;for(n=e=h=void 0;t;)t.fn.call(t.self),t=t.next}}}();var g=s({},"constructor",a,!1);return a.prototype=g,s(g,"__NPO__",0,!1),s(a,"resolve",function(t){var n=this;return t&&"object"==typeof t&&1===t.__NPO__?t:new n(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");n(t)})}),s(a,"reject",function(t){return new this(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");e(t)})}),s(a,"all",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):0===t.length?n.resolve([]):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");var r=t.length,i=Array(r),f=0;c(n,t,function(t,n){i[t]=n,++f===r&&e(i)},o)})}),s(a,"race",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");c(n,t,function(t,n){e(n)},o)})}),a});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],408:[function(require,module,exports){
module.exports={};


},{}],409:[function(require,module,exports){
exports.createdStores=[],exports.createdActions=[],exports.reset=function(){for(;exports.createdStores.length;)exports.createdStores.pop();for(;exports.createdActions.length;)exports.createdActions.pop()};


},{}],410:[function(require,module,exports){
var _=require("./utils"),maker=require("./joins").instanceJoinCreator,mapChildListenables=function(listenable){for(var childName,i=0,children={};i<(listenable.children||[]).length;++i)childName=listenable.children[i],listenable[childName]&&(children[childName]=listenable[childName]);return children},flattenListenables=function(listenables){var flattened={};for(var key in listenables){var listenable=listenables[key],childMap=mapChildListenables(listenable),children=flattenListenables(childMap);flattened[key]=listenable;for(var childKey in children){var childListenable=children[childKey];flattened[key+_.capitalize(childKey)]=childListenable}}return flattened};module.exports={hasListener:function(listenable){for(var j,listener,listenables,i=0;i<(this.subscriptions||[]).length;++i)for(listenables=[].concat(this.subscriptions[i].listenable),j=0;j<listenables.length;j++)if(listener=listenables[j],listener===listenable||listener.hasListener&&listener.hasListener(listenable))return!0;return!1},listenToMany:function(listenables){var allListenables=flattenListenables(listenables);for(var key in allListenables){var cbname=_.callbackName(key),localname=this[cbname]?cbname:this[key]?key:void 0;localname&&this.listenTo(allListenables[key],localname,this[cbname+"Default"]||this[localname+"Default"]||localname)}},validateListening:function(listenable){return listenable===this?"Listener is not able to listen to itself":_.isFunction(listenable.listen)?listenable.hasListener&&listenable.hasListener(this)?"Listener cannot listen to this listenable because of circular loop":void 0:listenable+" is missing a listen method"},listenTo:function(listenable,callback,defaultCallback){var desub,unsubscriber,subscriptionobj,subs=this.subscriptions=this.subscriptions||[];return _.throwIf(this.validateListening(listenable)),this.fetchInitialState(listenable,defaultCallback),desub=listenable.listen(this[callback]||callback,this),unsubscriber=function(){var index=subs.indexOf(subscriptionobj);_.throwIf(-1===index,"Tried to remove listen already gone from subscriptions list!"),subs.splice(index,1),desub()},subscriptionobj={stop:unsubscriber,listenable:listenable},subs.push(subscriptionobj),subscriptionobj},stopListeningTo:function(listenable){for(var sub,i=0,subs=this.subscriptions||[];i<subs.length;i++)if(sub=subs[i],sub.listenable===listenable)return sub.stop(),_.throwIf(-1!==subs.indexOf(sub),"Failed to remove listen from subscriptions list!"),!0;return!1},stopListeningToAll:function(){for(var remaining,subs=this.subscriptions||[];remaining=subs.length;)subs[0].stop(),_.throwIf(subs.length!==remaining-1,"Failed to remove listen from subscriptions list!")},fetchInitialState:function(listenable,defaultCallback){defaultCallback=defaultCallback&&this[defaultCallback]||defaultCallback;var me=this;if(_.isFunction(defaultCallback)&&_.isFunction(listenable.getInitialState)){var data=listenable.getInitialState();data&&_.isFunction(data.then)?data.then(function(){defaultCallback.apply(me,arguments)}):defaultCallback.call(this,data)}},joinTrailing:maker("last"),joinLeading:maker("first"),joinConcat:maker("all"),joinStrict:maker("strict")};


},{"./joins":420,"./utils":424}],411:[function(require,module,exports){
var _=require("./utils"),ListenerMethods=require("./ListenerMethods");module.exports=_.extend({componentWillUnmount:ListenerMethods.stopListeningToAll},ListenerMethods);


},{"./ListenerMethods":410,"./utils":424}],412:[function(require,module,exports){
var _=require("./utils");module.exports={preEmit:function(){},shouldEmit:function(){return!0},listen:function(callback,bindContext){bindContext=bindContext||this;var eventHandler=function(args){aborted||callback.apply(bindContext,args)},me=this,aborted=!1;return this.emitter.addListener(this.eventLabel,eventHandler),function(){aborted=!0,me.emitter.removeListener(me.eventLabel,eventHandler)}},promise:function(promise){var me=this,canHandlePromise=this.children.indexOf("completed")>=0&&this.children.indexOf("failed")>=0;if(!canHandlePromise)throw new Error('Publisher must have "completed" and "failed" child publishers');promise.then(function(response){return me.completed(response)},function(error){return me.failed(error)})},listenAndPromise:function(callback,bindContext){var me=this;bindContext=bindContext||this,this.willCallPromise=(this.willCallPromise||0)+1;var removeListen=this.listen(function(){if(!callback)throw new Error("Expected a function returning a promise but got "+callback);var args=arguments,promise=callback.apply(bindContext,args);return me.promise.call(me,promise)},bindContext);return function(){me.willCallPromise--,removeListen.call(me)}},trigger:function(){var args=arguments,pre=this.preEmit.apply(this,args);args=void 0===pre?args:_.isArguments(pre)?pre:[].concat(pre),this.shouldEmit.apply(this,args)&&this.emitter.emit(this.eventLabel,args)},triggerAsync:function(){var args=arguments,me=this;_.nextTick(function(){me.trigger.apply(me,args)})},triggerPromise:function(){var me=this,args=arguments,canHandlePromise=this.children.indexOf("completed")>=0&&this.children.indexOf("failed")>=0,promise=_.createPromise(function(resolve,reject){if(me.willCallPromise)return void _.nextTick(function(){var old_promise_method=me.promise;me.promise=function(promise){return promise.then(resolve,reject),me.promise=old_promise_method,me.promise.apply(me,arguments)},me.trigger.apply(me,args)});if(canHandlePromise)var removeSuccess=me.completed.listen(function(args){removeSuccess(),removeFailed(),resolve(args)}),removeFailed=me.failed.listen(function(args){removeSuccess(),removeFailed(),reject(args)});me.triggerAsync.apply(me,args),canHandlePromise||resolve()});return promise}};


},{"./utils":424}],413:[function(require,module,exports){
module.exports={};


},{}],414:[function(require,module,exports){
module.exports=function(store,definition){for(var name in definition)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var propertyDescriptor=Object.getOwnPropertyDescriptor(definition,name);if(!propertyDescriptor.value||"function"!=typeof propertyDescriptor.value||!definition.hasOwnProperty(name))continue;store[name]=definition[name].bind(store)}else{var property=definition[name];if("function"!=typeof property||!definition.hasOwnProperty(name))continue;store[name]=property.bind(store)}return store};


},{}],415:[function(require,module,exports){
var Reflux=require("./index"),_=require("./utils");module.exports=function(listenable,key){return{getInitialState:function(){return _.isFunction(listenable.getInitialState)?void 0===key?listenable.getInitialState():_.object([key],[listenable.getInitialState()]):{}},componentDidMount:function(){_.extend(this,Reflux.ListenerMethods);var me=this,cb=void 0===key?this.setState:function(v){("undefined"==typeof me.isMounted||me.isMounted()===!0)&&me.setState(_.object([key],[v]))};this.listenTo(listenable,cb)},componentWillUnmount:Reflux.ListenerMixin.componentWillUnmount}};


},{"./index":419,"./utils":424}],416:[function(require,module,exports){
var Reflux=require("./index"),_=require("./utils");module.exports=function(listenable,key,filterFunc){return filterFunc=_.isFunction(key)?key:filterFunc,{getInitialState:function(){if(_.isFunction(listenable.getInitialState)){if(_.isFunction(key))return filterFunc.call(this,listenable.getInitialState());var result=filterFunc.call(this,listenable.getInitialState());return result?_.object([key],[result]):{}}return{}},componentDidMount:function(){_.extend(this,Reflux.ListenerMethods);var me=this,cb=function(value){if(_.isFunction(key))me.setState(filterFunc.call(me,value));else{var result=filterFunc.call(me,value);me.setState(_.object([key],[result]))}};this.listenTo(listenable,cb)},componentWillUnmount:Reflux.ListenerMixin.componentWillUnmount}};


},{"./index":419,"./utils":424}],417:[function(require,module,exports){
var _=require("./utils"),Reflux=require("./index"),Keep=require("./Keep"),allowed={preEmit:1,shouldEmit:1},createAction=function(definition){definition=definition||{},_.isObject(definition)||(definition={actionName:definition});for(var a in Reflux.ActionMethods)if(!allowed[a]&&Reflux.PublisherMethods[a])throw new Error("Cannot override API method "+a+" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.");for(var d in definition)if(!allowed[d]&&Reflux.PublisherMethods[d])throw new Error("Cannot override API method "+d+" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.");definition.children=definition.children||[],definition.asyncResult&&(definition.children=definition.children.concat(["completed","failed"]));for(var i=0,childActions={};i<definition.children.length;i++){var name=definition.children[i];childActions[name]=createAction(name)}var context=_.extend({eventLabel:"action",emitter:new _.EventEmitter,_isAction:!0},Reflux.PublisherMethods,Reflux.ActionMethods,definition),functor=function(){return functor[functor.sync?"trigger":"triggerPromise"].apply(functor,arguments)};return _.extend(functor,childActions,context),Keep.createdActions.push(functor),functor};module.exports=createAction;


},{"./Keep":409,"./index":419,"./utils":424}],418:[function(require,module,exports){
var _=require("./utils"),Reflux=require("./index"),Keep=require("./Keep"),mixer=require("./mixer"),allowed={preEmit:1,shouldEmit:1},bindMethods=require("./bindMethods");module.exports=function(definition){function Store(){var arr,i=0;if(this.subscriptions=[],this.emitter=new _.EventEmitter,this.eventLabel="change",bindMethods(this,definition),this.init&&_.isFunction(this.init)&&this.init(),this.listenables)for(arr=[].concat(this.listenables);i<arr.length;i++)this.listenToMany(arr[i])}definition=definition||{};for(var a in Reflux.StoreMethods)if(!allowed[a]&&(Reflux.PublisherMethods[a]||Reflux.ListenerMethods[a]))throw new Error("Cannot override API method "+a+" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");for(var d in definition)if(!allowed[d]&&(Reflux.PublisherMethods[d]||Reflux.ListenerMethods[d]))throw new Error("Cannot override API method "+d+" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");definition=mixer(definition),_.extend(Store.prototype,Reflux.ListenerMethods,Reflux.PublisherMethods,Reflux.StoreMethods,definition);var store=new Store;return Keep.createdStores.push(store),store};


},{"./Keep":409,"./bindMethods":414,"./index":419,"./mixer":423,"./utils":424}],419:[function(require,module,exports){
exports.ActionMethods=require("./ActionMethods"),exports.ListenerMethods=require("./ListenerMethods"),exports.PublisherMethods=require("./PublisherMethods"),exports.StoreMethods=require("./StoreMethods"),exports.createAction=require("./createAction"),exports.createStore=require("./createStore"),exports.connect=require("./connect"),exports.connectFilter=require("./connectFilter"),exports.ListenerMixin=require("./ListenerMixin"),exports.listenTo=require("./listenTo"),exports.listenToMany=require("./listenToMany");var maker=require("./joins").staticJoinCreator;exports.joinTrailing=exports.all=maker("last"),exports.joinLeading=maker("first"),exports.joinStrict=maker("strict"),exports.joinConcat=maker("all");var _=require("./utils");exports.EventEmitter=_.EventEmitter,exports.Promise=_.Promise,exports.createActions=function(definitions){var actions={};for(var k in definitions)if(definitions.hasOwnProperty(k)){var val=definitions[k],actionName=_.isObject(val)?k:val;actions[actionName]=exports.createAction(val)}return actions},exports.setEventEmitter=function(ctx){var _=require("./utils");exports.EventEmitter=_.EventEmitter=ctx},exports.setPromise=function(ctx){var _=require("./utils");exports.Promise=_.Promise=ctx},exports.setPromiseFactory=function(factory){var _=require("./utils");_.createPromise=factory},exports.nextTick=function(nextTick){var _=require("./utils");_.nextTick=nextTick},exports.__keep=require("./Keep"),Function.prototype.bind||console.error("Function.prototype.bind not available. ES5 shim required. https://github.com/spoike/refluxjs#es5");


},{"./ActionMethods":408,"./Keep":409,"./ListenerMethods":410,"./ListenerMixin":411,"./PublisherMethods":412,"./StoreMethods":413,"./connect":415,"./connectFilter":416,"./createAction":417,"./createStore":418,"./joins":420,"./listenTo":421,"./listenToMany":422,"./utils":424}],420:[function(require,module,exports){
function makeStopper(subobj,cancels,context){return function(){var i,subs=context.subscriptions,index=subs?subs.indexOf(subobj):-1;for(_.throwIf(-1===index,"Tried to remove join already gone from subscriptions list!"),i=0;i<cancels.length;i++)cancels[i]();subs.splice(index,1)}}function reset(join){join.listenablesEmitted=new Array(join.numberOfListenables),join.args=new Array(join.numberOfListenables)}function newListener(i,join){return function(){var callargs=slice.call(arguments);if(join.listenablesEmitted[i])switch(join.strategy){case"strict":throw new Error("Strict join failed because listener triggered twice.");case"last":join.args[i]=callargs;break;case"all":join.args[i].push(callargs)}else join.listenablesEmitted[i]=!0,join.args[i]="all"===join.strategy?[callargs]:callargs;emitIfAllListenablesEmitted(join)}}function emitIfAllListenablesEmitted(join){for(var i=0;i<join.numberOfListenables;i++)if(!join.listenablesEmitted[i])return;join.callback.apply(join.listener,join.args),reset(join)}var slice=Array.prototype.slice,_=require("./utils"),createStore=require("./createStore"),strategyMethodNames={strict:"joinStrict",first:"joinLeading",last:"joinTrailing",all:"joinConcat"};exports.staticJoinCreator=function(strategy){return function(){var listenables=slice.call(arguments);return createStore({init:function(){this[strategyMethodNames[strategy]].apply(this,listenables.concat("triggerAsync"))}})}},exports.instanceJoinCreator=function(strategy){return function(){_.throwIf(arguments.length<3,"Cannot create a join with less than 2 listenables!");var i,subobj,listenables=slice.call(arguments),callback=listenables.pop(),numberOfListenables=listenables.length,join={numberOfListenables:numberOfListenables,callback:this[callback]||callback,listener:this,strategy:strategy},cancels=[];for(i=0;numberOfListenables>i;i++)_.throwIf(this.validateListening(listenables[i]));for(i=0;numberOfListenables>i;i++)cancels.push(listenables[i].listen(newListener(i,join),this));return reset(join),subobj={listenable:listenables},subobj.stop=makeStopper(subobj,cancels,this),this.subscriptions=(this.subscriptions||[]).concat(subobj),subobj}};


},{"./createStore":418,"./utils":424}],421:[function(require,module,exports){
var Reflux=require("./index");module.exports=function(listenable,callback,initial){return{componentDidMount:function(){for(var m in Reflux.ListenerMethods)if(this[m]!==Reflux.ListenerMethods[m]){if(this[m])throw"Can't have other property '"+m+"' when using Reflux.listenTo!";this[m]=Reflux.ListenerMethods[m]}this.listenTo(listenable,callback,initial)},componentWillUnmount:Reflux.ListenerMethods.stopListeningToAll}};


},{"./index":419}],422:[function(require,module,exports){
var Reflux=require("./index");module.exports=function(listenables){return{componentDidMount:function(){for(var m in Reflux.ListenerMethods)if(this[m]!==Reflux.ListenerMethods[m]){if(this[m])throw"Can't have other property '"+m+"' when using Reflux.listenToMany!";this[m]=Reflux.ListenerMethods[m]}this.listenToMany(listenables)},componentWillUnmount:Reflux.ListenerMethods.stopListeningToAll}};


},{"./index":419}],423:[function(require,module,exports){
var _=require("./utils");module.exports=function(def){var composed={init:[],preEmit:[],shouldEmit:[]},updated=function mixDef(mixin){var mixed={};return mixin.mixins&&mixin.mixins.forEach(function(subMixin){_.extend(mixed,mixDef(subMixin))}),_.extend(mixed,mixin),Object.keys(composed).forEach(function(composable){mixin.hasOwnProperty(composable)&&composed[composable].push(mixin[composable])}),mixed}(def);return composed.init.length>1&&(updated.init=function(){var args=arguments;composed.init.forEach(function(init){init.apply(this,args)},this)}),composed.preEmit.length>1&&(updated.preEmit=function(){return composed.preEmit.reduce(function(args,preEmit){var newValue=preEmit.apply(this,args);return void 0===newValue?args:[newValue]}.bind(this),arguments)}),composed.shouldEmit.length>1&&(updated.shouldEmit=function(){var args=arguments;return!composed.shouldEmit.some(function(shouldEmit){return!shouldEmit.apply(this,args)},this)}),Object.keys(composed).forEach(function(composable){1===composed[composable].length&&(updated[composable]=composed[composable][0])}),updated};


},{"./utils":424}],424:[function(require,module,exports){
var isObject=exports.isObject=function(obj){var type=typeof obj;return"function"===type||"object"===type&&!!obj};exports.extend=function(obj){if(!isObject(obj))return obj;for(var source,prop,i=1,length=arguments.length;length>i;i++){source=arguments[i];for(prop in source)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var propertyDescriptor=Object.getOwnPropertyDescriptor(source,prop);Object.defineProperty(obj,prop,propertyDescriptor)}else obj[prop]=source[prop]}return obj},exports.isFunction=function(value){return"function"==typeof value},exports.EventEmitter=require("eventemitter3"),exports.nextTick=function(callback){setTimeout(callback,0)},exports.capitalize=function(string){return string.charAt(0).toUpperCase()+string.slice(1)},exports.callbackName=function(string){return"on"+exports.capitalize(string)},exports.object=function(keys,vals){for(var o={},i=0;i<keys.length;i++)o[keys[i]]=vals[i];return o},exports.Promise=require("native-promise-only"),exports.createPromise=function(resolver){return new exports.Promise(resolver)},exports.isArguments=function(value){return"object"==typeof value&&"callee"in value&&"number"==typeof value.length},exports.throwIf=function(val,msg){if(val)throw Error(msg||val)};


},{"eventemitter3":406,"native-promise-only":407}],425:[function(require,module,exports){
!function(){"use strict";function normalizeName(name){if("string"!=typeof name&&(name=name.toString()),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name))throw new TypeError("Invalid character in header field name");return name.toLowerCase()}function normalizeValue(value){return"string"!=typeof value&&(value=value.toString()),value}function Headers(headers){this.map={},headers instanceof Headers?headers.forEach(function(value,name){this.append(name,value)},this):headers&&Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name])},this)}function consumed(body){return body.bodyUsed?Promise.reject(new TypeError("Already read")):void(body.bodyUsed=!0)}function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result)},reader.onerror=function(){reject(reader.error)}})}function readBlobAsArrayBuffer(blob){var reader=new FileReader;return reader.readAsArrayBuffer(blob),fileReaderReady(reader)}function readBlobAsText(blob){var reader=new FileReader;return reader.readAsText(blob),fileReaderReady(reader)}function Body(){return this.bodyUsed=!1,this._initBody=function(body){if(this._bodyInit=body,"string"==typeof body)this._bodyText=body;else if(support.blob&&Blob.prototype.isPrototypeOf(body))this._bodyBlob=body;else if(support.formData&&FormData.prototype.isPrototypeOf(body))this._bodyFormData=body;else{if(body)throw new Error("unsupported BodyInit type");this._bodyText=""}},support.blob?(this.blob=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(readBlobAsArrayBuffer)},this.text=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var rejected=consumed(this);return rejected?rejected:Promise.resolve(this._bodyText)},support.formData&&(this.formData=function(){return this.text().then(decode)}),this.json=function(){return this.text().then(JSON.parse)},this}function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method}function Request(url,options){if(options=options||{},this.url=url,this.credentials=options.credentials||"omit",this.headers=new Headers(options.headers),this.method=normalizeMethod(options.method||"GET"),this.mode=options.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&options.body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(options.body)}function decode(body){var form=new FormData;return body.trim().split("&").forEach(function(bytes){if(bytes){var split=bytes.split("="),name=split.shift().replace(/\+/g," "),value=split.join("=").replace(/\+/g," ");form.append(decodeURIComponent(name),decodeURIComponent(value))}}),form}function headers(xhr){var head=new Headers,pairs=xhr.getAllResponseHeaders().trim().split("\n");return pairs.forEach(function(header){var split=header.trim().split(":"),key=split.shift().trim(),value=split.join(":").trim();head.append(key,value)}),head}function Response(bodyInit,options){options||(options={}),this._initBody(bodyInit),this.type="default",this.url=null,this.status=options.status,this.ok=this.status>=200&&this.status<300,this.statusText=options.statusText,this.headers=options.headers instanceof Headers?options.headers:new Headers(options.headers),this.url=options.url||""}if(!self.fetch){Headers.prototype.append=function(name,value){name=normalizeName(name),value=normalizeValue(value);var list=this.map[name];list||(list=[],this.map[name]=list),list.push(value)},Headers.prototype["delete"]=function(name){delete this.map[normalizeName(name)]},Headers.prototype.get=function(name){var values=this.map[normalizeName(name)];return values?values[0]:null},Headers.prototype.getAll=function(name){return this.map[normalizeName(name)]||[]},Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name))},Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=[normalizeValue(value)]},Headers.prototype.forEach=function(callback,thisArg){Object.getOwnPropertyNames(this.map).forEach(function(name){this.map[name].forEach(function(value){callback.call(thisArg,value,name,this)},this)},this)};var support={blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in self},methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];Body.call(Request.prototype),Body.call(Response.prototype),self.Headers=Headers,self.Request=Request,self.Response=Response,self.fetch=function(input,init){var request;return request=Request.prototype.isPrototypeOf(input)&&!init?input:new Request(input,init),new Promise(function(resolve,reject){function responseURL(){return"responseURL"in xhr?xhr.responseURL:/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())?xhr.getResponseHeader("X-Request-URL"):void 0}var xhr=new XMLHttpRequest;xhr.onload=function(){var status=1223===xhr.status?204:xhr.status;if(100>status||status>599)return void reject(new TypeError("Network request failed"));var options={status:status,statusText:xhr.statusText,headers:headers(xhr),url:responseURL()},body="response"in xhr?xhr.response:xhr.responseText;resolve(new Response(body,options))},xhr.onerror=function(){reject(new TypeError("Network request failed"))},xhr.open(request.method,request.url,!0),"include"===request.credentials&&(xhr.withCredentials=!0),"responseType"in xhr&&support.blob&&(xhr.responseType="blob"),request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value)}),xhr.send("undefined"==typeof request._bodyInit?null:request._bodyInit)})},self.fetch.polyfill=!0}}();


},{}],426:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),Reflux=require("reflux"),Actions=Reflux.createActions({searchYoutubeApi:{asyncResult:!0},closeOverlay:{},chooseVideo:{},initYoutubeApi:{},getPlaylist:{}});Actions.searchYoutubeApi.listenAndPromise(_modules.searchYoutube),exports["default"]=Actions,module.exports=exports["default"];


},{"../modules":434,"reflux":405}],427:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),_=require("./"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),mui=require("material-ui"),ThemeManager=new mui.Styles.ThemeManager,RaisedButton=mui.RaisedButton,AppBar=mui.AppBar;_modules.initYoutubeApi();var Store=require("../stores/store"),App=React.createClass({displayName:"App",mixins:[Reflux.connect(Store)],getInitialState:function(){return{searchBarOpen:!0}},childContextTypes:{muiTheme:React.PropTypes.object},getChildContext:function(){return{muiTheme:ThemeManager.getCurrentTheme()}},toggleSearchBar:function(){this.setState({searchBarOpen:!this.state.searchBarOpen})},render:function(){return React.createElement("div",null,React.createElement(AppBar,{style:{backgroundColor:"#e52d27",zIndex:50,position:"relative"},title:"Youtube Playlists",onLeftIconButtonTouchTap:this.toggleSearchBar,iconClassNameRight:"muidocs-icon-navigation-expand-more"}),React.createElement(_.Search,{open:this.state.searchBarOpen,refs:"SearchBar"}),React.createElement(_.Youtube,null))}});exports["default"]=App,module.exports=exports["default"];


},{"../actions/actions":426,"../modules":434,"../stores/store":441,"./":428,"material-ui":140,"react":404,"reflux":405}],428:[function(require,module,exports){
"use strict";var _interopRequire=require("babel-runtime/helpers/interop-require")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _AppJsx=require("./App.jsx");exports.App=_interopRequire(_AppJsx);var _searchJsx=require("./search.jsx");exports.Search=_interopRequire(_searchJsx);var _youtubeJsx=require("./youtube.jsx");exports.Youtube=_interopRequire(_youtubeJsx);var _searchResultsJsx=require("./searchResults.jsx");exports.SearchResults=_interopRequire(_searchResultsJsx);var _playerJsx=require("./player.jsx");exports.Player=_interopRequire(_playerJsx);var _playlistJsx=require("./playlist.jsx");exports.Playlist=_interopRequire(_playlistJsx);


},{"./App.jsx":427,"./player.jsx":429,"./playlist.jsx":430,"./search.jsx":431,"./searchResults.jsx":432,"./youtube.jsx":433,"babel-runtime/helpers/interop-require":4}],429:[function(require,module,exports){
(function (global){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),vPlayer,Player=React.createClass({displayName:"Player",mixins:[Reflux.connect(Store)],getInitialState:function(){return{videoProps:{id:null}}},onPlayerReady:function(event){console.log("onPlayerReady")},onPlayerStateChange:function(event){console.log("on player state chnaged")},render:function(){var _this=this,videoProps=this.state.videoProps;return console.log(videoProps),void 0===videoProps.id||null===videoProps.id?global.onYouTubeIframeAPIReady=function(){console.log("onYouTubeIframeAPIReady"),vPlayer=new YT.Player("youtubeVideo",{height:"390",width:"640",videoId:"M7lc1UVf-VE",events:{onReady:_this.onPlayerReady,onStateChange:_this.onPlayerStateChange}})}:(console.log(vPlayer),vPlayer.loadVideoById("bHQqvYy5KYo",5,"large")),React.createElement("div",null,React.createElement("div",{id:"youtubeVideo"}),React.createElement("p",{videoProps:this.state.videoProps},this.props.videoProps))}});exports["default"]=Player,module.exports=exports["default"];


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions/actions":426,"../stores/store":441,"react":404,"reflux":405}],430:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),Playlist=React.createClass({displayName:"Playlist",mixins:[Reflux.connect(Store)],getInitialState:function(){return{results:{data:{items:[]}}}},render:function(){return React.createElement("div",null,React.createElement("h4",null,"Playlist here"))}});exports["default"]=Playlist,module.exports=exports["default"];


},{"../actions/actions":426,"../stores/store":441,"react":404,"reflux":405}],431:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),_=require("./"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),mui=require("material-ui"),ThemeManager=new mui.Styles.ThemeManager,TextField=mui.TextField,Search=React.createClass({displayName:"Search",_handleInputChange:function(){var query=this.refs.searchBar.getValue();console.log(this.refs.searchBar.getValue()),_modules.throttle(Actions.searchYoutubeApi(query),600)},overlayClick:function(){console.log("overlay click"),Actions.closeOverlay()},render:function(){return React.createElement("div",{className:this.props.open?"searchWrapper open":"searchWrapper"},React.createElement("div",{className:"search"},React.createElement("h3",null,"Search..."),React.createElement(TextField,{hintText:"Geoff Rowley",onChange:this._handleInputChange,ref:"searchBar"}),React.createElement(_.SearchResults,null)),React.createElement("div",null,React.createElement("div",{className:"searchOverlay",onClick:this.overlayClick})))}});exports["default"]=Search,module.exports=exports["default"];


},{"../actions/actions":426,"../modules":434,"./":428,"material-ui":140,"react":404,"reflux":405}],432:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),mui=require("material-ui"),ThemeManager=new mui.Styles.ThemeManager,List=mui.List,ListItem=mui.ListItem,Avatar=mui.Avatar,SearchResults=React.createClass({displayName:"SearchResults",mixins:[Reflux.connect(Store)],getInitialState:function(){return{results:{data:{items:[]}}}},chooseVideo:function(i){var videoData=this.state.results.data.items[i],videoID=videoData.id.videoId;Actions.chooseVideo(videoID),Actions.closeOverlay()},render:function(){var results=this.state.results.data.items,resultsList=results.map(function(data,i){return React.createElement(ListItem,{className:"resultsItem",onClick:this.chooseVideo.bind(data,i),secondaryText:React.createElement("p",null,data.snippet.description),secondaryTextLines:2,leftAvatar:React.createElement(Avatar,{src:data.snippet.thumbnails["default"].url})},data.snippet.title)},this);return React.createElement(List,{className:"results"},resultsList)}});exports["default"]=SearchResults,module.exports=exports["default"];


},{"../actions/actions":426,"../modules":434,"../stores/store":441,"material-ui":140,"react":404,"reflux":405}],433:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _=require("./"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),Youtube=React.createClass({displayName:"Youtube",mixins:[Reflux.connect(Store)],render:function(){return React.createElement("div",null,React.createElement("div",{className:"playerWrapper"},React.createElement(_.Player,null)),React.createElement("div",{className:"playistWrapper"},React.createElement(_.Playlist,null)))}});exports["default"]=Youtube,module.exports=exports["default"];


},{"../actions/actions":426,"../stores/store":441,"./":428,"react":404,"reflux":405}],434:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _throttle=require("./throttle"),_throttle2=_interopRequireDefault(_throttle),_isEmpty=require("./isEmpty"),_isEmpty2=_interopRequireDefault(_isEmpty),_youtubeSearchApi=require("./youtubeSearchApi"),_youtubeSearchApi2=_interopRequireDefault(_youtubeSearchApi),_initYoutubeApi=require("./initYoutubeApi"),_initYoutubeApi2=_interopRequireDefault(_initYoutubeApi);exports["default"]={throttle:_throttle2["default"],isEmpty:_isEmpty2["default"],searchYoutube:_youtubeSearchApi2["default"],initYoutubeApi:_initYoutubeApi2["default"]},module.exports=exports["default"];


},{"./initYoutubeApi":435,"./isEmpty":436,"./throttle":439,"./youtubeSearchApi":440,"babel-runtime/helpers/interop-require-default":3}],435:[function(require,module,exports){
"use strict";function initYoutubeApi(videoId){console.log("init Youtube Api");var d=document;(void 0==d.getElementById("player")||null==d.getElementById("player"))&&!function(){var tag=d.createElement("script");tag.src="https://www.youtube.com/iframe_api";var firstScriptTag=d.getElementsByTagName("script")[0];firstScriptTag.parentNode.insertBefore(tag,firstScriptTag)}()}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=initYoutubeApi,module.exports=exports["default"];


},{}],436:[function(require,module,exports){
"use strict";function isEmpty(obj){return 0===_Object$keys(obj).length}var _Object$keys=require("babel-runtime/core-js/object/keys")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=isEmpty,module.exports=exports["default"];


},{"babel-runtime/core-js/object/keys":2}],437:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=function(response){return response.json()},module.exports=exports["default"];


},{}],438:[function(require,module,exports){
"use strict";function status(response){if(response.status>=200&&response.status<300)return response;var error=new Error(response.statusText);throw error.response=response,error}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=status,module.exports=exports["default"];


},{}],439:[function(require,module,exports){
"use strict";function throttle(fn,threshhold,scope){threshhold||(threshhold=250);var last,deferTimer;return function(){var context=scope||this,now=+new Date,args=arguments;last&&last+threshhold>now?(clearTimeout(deferTimer),deferTimer=setTimeout(function(){last=now,fn.apply(context,args)},threshhold)):(last=now,fn.apply(context,args))}}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=throttle,module.exports=exports["default"];


},{}],440:[function(require,module,exports){
"use strict";function searchYoutube(query){return fetch("https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=10&order=viewCount&type=video&q="+query+"&key=AIzaSyA4F93yHRFHhLAAB0V1Gq5FwMLR7gyp1vA").then(_status2["default"]).then(_json2["default"]).then(function(data){return{data:data}})}var _interopRequireDefault=require("babel-runtime/helpers/interop-require-default")["default"];Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=searchYoutube;var _status=require("./status"),_status2=_interopRequireDefault(_status),_json=require("./json"),_json2=_interopRequireDefault(_json);module.exports=exports["default"];


},{"./json":437,"./status":438,"babel-runtime/helpers/interop-require-default":3}],441:[function(require,module,exports){
"use strict";var React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=Reflux.createStore({listenables:[Actions],init:function(){console.log("store init")},onSearchYoutubeApiCompleted:function(data){console.log("onsearchYoutubeApiCompleted"),this.trigger({results:data})},onChooseVideo:function(id){this.trigger({videoProps:{id:id}})},onCloseOverlay:function(){this.trigger({searchBarOpen:!1})}});module.exports=Store;


},{"../actions/actions":426,"react":404,"reflux":405}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvc3JjL2FwcC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5kZWYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZncuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZ2V0LW5hbWVzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL2xpYi9iYWJlbC9wb2x5ZmlsbC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbGliL2JhYmVsL3Rvb2xzL3Byb3RlY3QuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5hcnJheS1pbmNsdWRlcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmFycmF5LW1ldGhvZHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5hc3NlcnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5hc3NpZ24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5jb2YuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmNvbGxlY3Rpb24tdG8tanNvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmNvbGxlY3Rpb24td2Vhay5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmNvbGxlY3Rpb24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5jdHguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5kZWYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5kb20tY3JlYXRlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuZW51bS1rZXlzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuZm9yLW9mLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuZncuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5nZXQtbmFtZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5pbnZva2UuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5pdGVyLWNhbGwuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5pdGVyLWRlZmluZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLml0ZXItZGV0ZWN0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuaXRlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQua2V5b2YuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5taXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5vd24ta2V5cy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnBhcnRpYWwuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5yZWRlZi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnJlcGxhY2VyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuc2FtZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnNldC1wcm90by5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnNoYXJlZC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnNwZWNpZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5zdHJpbmctYXQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5zdHJpbmctcGFkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuc3RyaW5nLXJlcGVhdC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnRhc2suanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC50aHJvd3MuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC51aWQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC51bnNjb3BlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQud2tzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnN0YXRpY3MuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zdGF0aWNzLWFjY2VwdC1wcmltaXRpdmVzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudG8tYXJyYXkuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZ2V4cC5lc2NhcGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5scGFkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucnBhZC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9qcy5hcnJheS5zdGF0aWNzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3IvcnVudGltZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvcG9seWZpbGwuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L3BvbHlmaWxsLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2FwcC1iYXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9hcHAtY2FudmFzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvYXZhdGFyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvYmVmb3JlLWFmdGVyLXdyYXBwZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9jYXJkL2NhcmQtYWN0aW9ucy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2NhcmQvY2FyZC1oZWFkZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9jYXJkL2NhcmQtbWVkaWEuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9jYXJkL2NhcmQtdGV4dC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2NhcmQvY2FyZC10aXRsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2NhcmQvY2FyZC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2NoZWNrYm94LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvY2lyY3VsYXItcHJvZ3Jlc3MuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9jbGVhcmZpeC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RhdGUtcGlja2VyL2NhbGVuZGFyLW1vbnRoLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvZGF0ZS1waWNrZXIvY2FsZW5kYXItdG9vbGJhci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RhdGUtcGlja2VyL2NhbGVuZGFyLXllYXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9kYXRlLXBpY2tlci9jYWxlbmRhci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RhdGUtcGlja2VyL2RhdGUtZGlzcGxheS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLWRpYWxvZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvZGF0ZS1waWNrZXIvZGF5LWJ1dHRvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RhdGUtcGlja2VyL3llYXItYnV0dG9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvZGlhbG9nLXdpbmRvdy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2RpYWxvZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2Ryb3AtZG93bi1pY29uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvZHJvcC1kb3duLW1lbnUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9lbmhhbmNlZC1idXR0b24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9lbmhhbmNlZC1zd2l0Y2guanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9lbmhhbmNlZC10ZXh0YXJlYS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2ZsYXQtYnV0dG9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvZmxvYXRpbmctYWN0aW9uLWJ1dHRvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2ZvbnQtaWNvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL2ljb24tYnV0dG9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvaW5kZXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9pbmstYmFyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvbGVmdC1uYXYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9saW5lYXItcHJvZ3Jlc3MuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9saXN0cy9saXN0LWRpdmlkZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9saXN0cy9saXN0LWl0ZW0uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9saXN0cy9saXN0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvbWVudS9saW5rLW1lbnUtaXRlbS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL21lbnUvbWVudS1pdGVtLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvbWVudS9tZW51LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvbWVudS9zdWJoZWFkZXItbWVudS1pdGVtLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvbWl4aW5zL2NsYXNzYWJsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL21peGlucy9jbGljay1hd2F5YWJsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL21peGlucy9zdHlsZS1wcm9wYWJsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL21peGlucy9zdHlsZS1yZXNpemFibGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9taXhpbnMvd2luZG93LWxpc3RlbmFibGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9vdmVybGF5LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvcGFwZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9yYWRpby1idXR0b24tZ3JvdXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9yYWRpby1idXR0b24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9yYWlzZWQtYnV0dG9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvcmlwcGxlcy9jaXJjbGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9yaXBwbGVzL2ZvY3VzLXJpcHBsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3JpcHBsZXMvdG91Y2gtcmlwcGxlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc2VsZWN0LWZpZWxkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc2xpZGVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc25hY2tiYXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdHlsZXMvYXV0by1wcmVmaXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdHlsZXMvY29sb3JzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc3R5bGVzL2luZGV4LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc3R5bGVzL3NwYWNpbmcuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdHlsZXMvdGhlbWUtbWFuYWdlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3N0eWxlcy90aGVtZXMvZGFyay10aGVtZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3N0eWxlcy90aGVtZXMvbGlnaHQtdGhlbWUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdHlsZXMvdHlwb2dyYXBoeS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3N2Zy1pY29uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc3ZnLWljb25zL2Ryb3AtZG93bi1hcnJvdy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tbGVmdC1kb3VibGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdmctaWNvbnMvbmF2aWdhdGlvbi1jaGV2cm9uLWxlZnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdmctaWNvbnMvbmF2aWdhdGlvbi1jaGV2cm9uLXJpZ2h0LWRvdWJsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tcmlnaHQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdmctaWNvbnMvbmF2aWdhdGlvbi1tZW51LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvc3ZnLWljb25zL3RvZ2dsZS1jaGVjay1ib3gtY2hlY2tlZC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3N2Zy1pY29ucy90b2dnbGUtY2hlY2stYm94LW91dGxpbmUtYmxhbmsuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdmctaWNvbnMvdG9nZ2xlLXJhZGlvLWJ1dHRvbi1vZmYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi9zdmctaWNvbnMvdG9nZ2xlLXJhZGlvLWJ1dHRvbi1vbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RhYmxlL3RhYmxlLWZvb3Rlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RhYmxlL3RhYmxlLWhlYWRlci1jb2x1bW4uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90YWJsZS90YWJsZS1oZWFkZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90YWJsZS90YWJsZS1yb3ctY29sdW1uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdGFibGUvdGFibGUtcm93LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdGFibGUvdGFibGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90YWJzL3RhYi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RhYnMvdGFiVGVtcGxhdGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90YWJzL3RhYnMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90ZXh0LWZpZWxkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdGhlbWUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90aW1lLXBpY2tlci9jbG9jay1idXR0b24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90aW1lLXBpY2tlci9jbG9jay1ob3Vycy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RpbWUtcGlja2VyL2Nsb2NrLW1pbnV0ZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90aW1lLXBpY2tlci9jbG9jay1udW1iZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90aW1lLXBpY2tlci9jbG9jay1wb2ludGVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdGltZS1waWNrZXIvY2xvY2suanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90aW1lLXBpY2tlci9pbmRleC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RpbWUtcGlja2VyL3RpbWUtZGlzcGxheS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RpbWUtcGlja2VyL3RpbWUtcGlja2VyLWRpYWxvZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RpbWUtcGlja2VyL3RpbWUtcGlja2VyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdG9nZ2xlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdG9vbGJhci90b29sYmFyLWdyb3VwLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdG9vbGJhci90b29sYmFyLXNlcGFyYXRvci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3Rvb2xiYXIvdG9vbGJhci10aXRsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3Rvb2xiYXIvdG9vbGJhci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3Rvb2x0aXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi90cmFuc2l0aW9uLWdyb3Vwcy9zbGlkZS1pbi1jaGlsZC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3RyYW5zaXRpb24tZ3JvdXBzL3NsaWRlLWluLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdXRpbHMvY29sb3ItbWFuaXB1bGF0b3IuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi91dGlscy9jc3MtZXZlbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi91dGlscy9kYXRlLXRpbWUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi91dGlscy9kb20uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi91dGlscy9ldmVudHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi91dGlscy9leHRlbmQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2xpYi91dGlscy9rZXktY29kZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3V0aWxzL2tleS1saW5lLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9saWIvdXRpbHMvbW9kZXJuaXpyLmN1c3RvbS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbGliL3V0aWxzL3VuaXF1ZS1pZC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUyL2xpYi9kcmFnZ2FibGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0LXRhcC1ldmVudC1wbHVnaW4vc3JjL1Jlc3BvbmRlckV2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC10YXAtZXZlbnQtcGx1Z2luL3NyYy9UYXBFdmVudFBsdWdpbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QtdGFwLWV2ZW50LXBsdWdpbi9zcmMvVG91Y2hFdmVudFV0aWxzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC10YXAtZXZlbnQtcGx1Z2luL3NyYy9pbmplY3RUYXBFdmVudFBsdWdpbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvYWRkb25zLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQXV0b0ZvY3VzTWl4aW4uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ1NTQ29yZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ2FsbGJhY2tRdWV1ZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ2xpZW50UmVhY3RSb290SW5kZXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01DaGlsZHJlbk9wZXJhdGlvbnMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RPTVByb3BlcnR5T3BlcmF0aW9ucy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0Rhbmdlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudExpc3RlbmVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5IdWIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50UHJvcGFnYXRvcnMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0xpbmtlZFN0YXRlTWl4aW4uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvTG9jYWxFdmVudFRyYXBNaXhpbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZFJlY29uY2lsZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDbGFzcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb3NpdGVDb21wb25lbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbnRleHQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01CdXR0b24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUNvbXBvbmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NRm9ybS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSURPcGVyYXRpb25zLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JZnJhbWUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUltZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSW5wdXQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTU9wdGlvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NU2VsZWN0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01TZWxlY3Rpb24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVRleHRDb21wb25lbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVRleHRhcmVhLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdEluamVjdGlvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdFBlcmYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFcnJvclV0aWxzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFdmVudEVtaXR0ZXJNaXhpbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RnJhZ21lbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluamVjdGlvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlSGFuZGxlcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdExpZmVDeWNsZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TGluay5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TWFya3VwQ2hlY2tzdW0uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1vdW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE5hdGl2ZUNvbXBvbmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0T3duZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFBlcmYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUcmFuc2ZlcmVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25zLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFB1dExpc3RlbmVyUXVldWUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWYuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJvb3RJbmRleC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0U3RhdGVTZXR0ZXJzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RUZXN0VXRpbHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFRyYW5zaXRpb25FdmVudHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFRyYW5zaXRpb25Hcm91cC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0VXBkYXRlUXVldWUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFVwZGF0ZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFdpdGhBZGRvbnMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TVkdET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1NlbGVjdEV2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2VydmVyUmVhY3RSb290SW5kZXguanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0RyYWdFdmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRm9jdXNFdmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNLZXlib2FyZEV2ZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljTW91c2VFdmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljV2hlZWxFdmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1RyYW5zYWN0aW9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvVmlld3BvcnRNZXRyaWNzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWNjdW11bGF0ZUludG8uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9hZGxlcjMyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY2FtZWxpemUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2Nsb25lV2l0aFByb3BzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY29udGFpbnNOb2RlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlQXJyYXlGcm9tTWl4ZWQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVGdWxsUGFnZUNvbXBvbmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2N4LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZGFuZ2Vyb3VzU3R5bGVWYWx1ZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5RnVuY3Rpb24uanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lbXB0eU9iamVjdC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZmxhdHRlbkNoaWxkcmVuLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZm9jdXNOb2RlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZm9yRWFjaEFjY3VtdWxhdGVkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50Q2hhckNvZGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudEtleS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50VGFyZ2V0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE1hcmt1cFdyYXAuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaHlwaGVuYXRlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaHlwaGVuYXRlU3R5bGVOYW1lLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc05vZGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHROb2RlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvam9pbkNsYXNzZXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9rZXlNaXJyb3IuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9rZXlPZi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL21hcE9iamVjdC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvb25seUNoaWxkLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvcGVyZm9ybWFuY2UuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9wZXJmb3JtYW5jZU5vdy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2V0SW5uZXJIVE1MLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2V0VGV4dENvbnRlbnQuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zaGFsbG93RXF1YWwuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3RvQXJyYXkuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvdXBkYXRlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlZmx1eC9pbmRleC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvbm9kZV9tb2R1bGVzL25hdGl2ZS1wcm9taXNlLW9ubHkvbnBvLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL0FjdGlvbk1ldGhvZHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvS2VlcC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9MaXN0ZW5lck1ldGhvZHMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvTGlzdGVuZXJNaXhpbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9QdWJsaXNoZXJNZXRob2RzLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL1N0b3JlTWV0aG9kcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9iaW5kTWV0aG9kcy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9jb25uZWN0LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2Nvbm5lY3RGaWx0ZXIuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvY3JlYXRlQWN0aW9uLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2NyZWF0ZVN0b3JlLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2luZGV4LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2pvaW5zLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2xpc3RlblRvLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2xpc3RlblRvTWFueS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9taXhlci5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy91dGlscy5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9hY3Rpb25zL2FjdGlvbnMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvc3JjL2NvbXBvbmVudHMvQXBwLmpzeCIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9zcmMvY29tcG9uZW50cy9pbmRleC5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9zcmMvY29tcG9uZW50cy9wbGF5ZXIuanN4IiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9jb21wb25lbnRzL3BsYXlsaXN0LmpzeCIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9zcmMvY29tcG9uZW50cy9zZWFyY2guanN4IiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9jb21wb25lbnRzL3NlYXJjaFJlc3VsdHMuanN4IiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9jb21wb25lbnRzL3lvdXR1YmUuanN4IiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9tb2R1bGVzL2luZGV4LmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9tb2R1bGVzL2luaXRZb3V0dWJlQXBpLmpzIiwiL1VzZXJzL2NhYmJpbzU0MC9TaXRlcy9wZXJzb25hbC95b3V0dWJlLXBsYXlsaXN0L3NyYy9tb2R1bGVzL2lzRW1wdHkuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvc3JjL21vZHVsZXMvanNvbi5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9zcmMvbW9kdWxlcy9zdGF0dXMuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvc3JjL21vZHVsZXMvdGhyb3R0bGUuanMiLCIvVXNlcnMvY2FiYmlvNTQwL1NpdGVzL3BlcnNvbmFsL3lvdXR1YmUtcGxheWxpc3Qvc3JjL21vZHVsZXMveW91dHViZVNlYXJjaEFwaS5qcyIsIi9Vc2Vycy9jYWJiaW81NDAvU2l0ZXMvcGVyc29uYWwveW91dHViZS1wbGF5bGlzdC9zcmMvc3RvcmVzL3N0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO3FCQ0NPLHdDQWNhLGVBZnBCLFNBQVEsb0JBR1IsSUFBSSxPQUFRLFFBQVEsU0FDaEIscUJBQXVCLFFBQVEseUJBTW5DLHdCQUdBLE9BQU8sTUFBUSxNQUlmLE1BQU0sT0FBTyxNQUFBLGNBQUEsWUFGSixJQUFHLE1BRVMsU0FBUyxjQUFjOztRQWhCckMsY0FBYzs7QUNEckIsT0FBTyxTQUFZLFVBQVcsQURlVixRQ2ZrQixNRGVKLDRCQ2Z1QyxZQUFZOztBREFyRixPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7QUVBN0IsQUZHQSxJQUFJLEtBQUssR0VEVCxBRkNZLE9BQU8sQ0FBQyxDRURaLE1GQ21CLENBQUMsQ0FBQyxHRURSLFNBQVUsS0FDN0IsTUFBTyxNQUFPLElBQUksV0FBYSxLQUM3QixVQUFXLE1BSWYsUUFBUSxZQUFhO0FGSnJCLElBQUksb0JBQW9CLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7OztBR0o3RCxZQUVBLFNBQVEsV0FBYSxTQUFVLEtBQzdCLE1BQU8sTUFBTyxJQUFJLFdBQWEsSUFBSSxXQUFhLEtBR2xELFFBQVEsWUFBYTs7O0FISXJCLG9CQUFvQixFQUFFLENBQUM7QUlWdkIsUUFBUSxzREFDUixPQUFPLFFBQVUsUUFBUSxtQkFBbUIsS0FBSyxPQUFPOztBSll4RCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7QUtUckIsQUxhQSxLQUFLLENBQUMsRUtiRyxJTGFHLENL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VUFDZixjQUFlLFVBQ2YsY0FBZSxVQUNmLGVBQWdCLFVBQ2hCLGVBQWdCLFVBQ2hCLGVBQWdCLFVBQ2hCLGVBQWdCLFVBRWhCLFNBQVUsVUFDVixVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxXQUFZLFVBQ1osV0FBWSxVQUNaLFdBQVksVUFDWixXQUFZLFVBRVosT0FBUSxVQUNSLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFFVixZQUFhLFVBQ2IsYUFBYyxVQUNkLGFBQWMsVUFDZCxhQUFjLFVBQ2QsYUFBYyxVQUNkLGFBQWMsVUFDZCxhQUFjLFVBQ2QsYUFBYyxVQUNkLGFBQWMsVUFDZCxhQUFjLFVBQ2QsY0FBZSxVQUNmLGNBQWUsVUFDZixjQUFlLFVBQ2YsY0FBZSxVQUVmLE9BQVEsVUFDUixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBRVYsT0FBUSxVQUNSLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFFVixRQUFTLFVBQ1QsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUVYLGFBQWMsVUFDZCxjQUFlLFVBQ2YsY0FBZSxVQUNmLGNBQWUsVUFDZixjQUFlLFVBQ2YsY0FBZSxVQUNmLGNBQWUsVUFDZixjQUFlLFVBQ2YsY0FBZSxVQUNmLGNBQWUsVUFDZixlQUFnQixVQUNoQixlQUFnQixVQUNoQixlQUFnQixVQUNoQixlQUFnQixVQUVoQixPQUFRLFVBQ1IsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUVWLFNBQVUsVUFDVixVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxXQUFZLFVBQ1osV0FBWSxVQUNaLFdBQVksVUFDWixXQUFZLFVBRVosUUFBUyxVQUNULFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFFWCxTQUFVLFVBQ1YsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsVUFBVyxVQUNYLFVBQVcsVUFDWCxVQUFXLFVBQ1gsV0FBWSxVQUNaLFdBQVksVUFDWixXQUFZLFVBQ1osV0FBWSxVQUVaLGFBQWMsVUFDZCxjQUFlLFVBQ2YsY0FBZSxVQUNmLGNBQWUsVUFDZixjQUFlLFVBQ2YsY0FBZSxVQUNmLGNBQWUsVUFDZixjQUFlLFVBQ2YsY0FBZSxVQUNmLGNBQWUsVUFDZixlQUFnQixVQUNoQixlQUFnQixVQUNoQixlQUFnQixVQUNoQixlQUFnQixVQUVoQixRQUFTLFVBQ1QsU0FBVSxVQUNWLFNBQVUsVUFDVixT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QUFVLEVBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFLLE1BQUssRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFJLEdBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFlBQVksV0FBVyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsTUFBTSxPQUFPLEdBQUcsRUFBRSxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsS0FBSyxHQUFHLEdBQUksR0FBRSxHQUFHLEtBQUssUUFBUyxHQUFFLEdBQUcsR0FBSSxHQUFFLElBQUssR0FBRSxZQUFZLEVBQUUsV0FBVSxFQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLE1BQU0sT0FBTyxHQUFHLEVBQUUsRUFBRSxJQUFJLFFBQVMsR0FBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksR0FBSSxHQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sS0FBSyxTQUFTLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxLQUFLLFNBQVMsR0FBRyxFQUFFLEVBQUUsSUFBSSxJQUFJLEdBQUcsUUFBUyxHQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsS0FBSyxXQUFVLEVBQUcsUUFBUyxHQUFFLEdBQUcsS0FBSyxRQUFRLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxXQUFVLEVBQUcsS0FBSyxTQUFTLEtBQUssSUFBSSxPQUFPLFFBQVMsR0FBRSxHQUFHLEdBQUcsa0JBQW1CLEdBQUUsS0FBTSxXQUFVLGlCQUFrQixJQUFHLElBQUksS0FBSyxRQUFRLEtBQU0sV0FBVSxnQkFBaUIsTUFBSyxRQUFRLENBQUUsSUFBSSxHQUFFLEdBQUksR0FBRSxLQUFNLE1BQUssS0FBSyxTQUFTLEVBQUUsR0FBRyxHQUFJLElBQUcsUUFBUSxrQkFBbUIsR0FBRSxHQUFFLEVBQUcsUUFBUSxrQkFBbUIsR0FBRSxHQUFFLEVBQUksT0FBTyxHQUFFLFFBQVEsR0FBSSxNQUFLLFlBQVksU0FBUyxFQUFFLEdBQUcsR0FBRyxrQkFBbUIsSUFBRyxrQkFBbUIsR0FBRSxLQUFNLFdBQVUsaUJBQWtCLEdBQUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxJQUFJLEVBQUUsTUFBTSxLQUFLLEdBQUcsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLEtBQUssU0FBUyxTQUFTLEdBQUcsTUFBTyxNQUFLLEtBQUssT0FBTyxHQUFJLEtBQUksRUFBRSxLQUFLLE9BQU8sU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBSSxHQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sVUFBVSxTQUFTLEVBQUUsbUJBQW9CLGNBQWEsU0FBUyxHQUFHLE1BQU8sY0FBYSxJQUFJLFVBQVcsS0FBSSxPQUFPLGtCQUFrQixRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxHQUFHLE1BQU8sUUFBTyxlQUFlLEVBQUUsR0FBRyxNQUFNLEVBQUUsVUFBUyxFQUFHLGFBQWEsS0FBSSxLQUFNLE1BQU0sR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsTUFBTyxHQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsV0FBVyxRQUFTLEdBQUUsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFLEtBQUssS0FBSyxFQUFFLEtBQUssS0FBSyxPQUFPLEdBQUksR0FBRSxFQUFFLENBQUUsUUFBTyxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBSSxHQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLE1BQU0sV0FBVyxHQUFJLEdBQUUsQ0FBRSxLQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVUsSUFBSSxHQUFFLEtBQUssY0FBYyxHQUFFLEVBQUksT0FBTyxH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U0FBUSxXQUFBLFdBQ1IsUUFBTyxVQUFBLFdBQ1AsY0FBYSxtQkFBQSxXQUNiLGVBQWMsaUJBQUE7QUpLWCxBQ2JKLElBQUksTUFBTSxDRGFDLEVDYkUsT0FBTyxDQUFDLE1ISWUsRUdKUCxDQUFDLENBQUMsWUhJcUI7QURvQmxELEFFUEEsQUNISSxBQ2JOLEFDRkEsSURFSSxBQ0ZBLElMeUJJLEFFUEEsQ0dsQkMsQ0x5QkMsQUVQQSxDRlFOLEFFUEEsQUVqQk8sQ0NGQyxDRmVDLENDYkMsQ0RhQyxFSFdMLEFFUEEsQ0ZPQyxBRVBBLENHbkJRLENBQUMsQ0RFQyxDQUFDLEdKd0JKLEFFUEEsQ0ZPQyxBRVBBLENHbkJRLENBQUMsQ0FBQyxFTDBCTCxBRVBBLENGT0MsQUVQQSxDRlF0QixBRVBBLFNFbEJ1QyxDQUFDLENBQUM7QURjcEMsQUVmUixJQUFJLElKSWdCLEVJSlYsRUZlRSxDRWZDLENGZUMsRUZYYyxJSUpSLENBQUMsUUFBUSxDQUFDLENBQUM7QUw0QjdCLEFFUEEsQUNMUSxBRWZWLElBQUksT0FBTyxDR0ZJLEVIRUQsQ0ZlQyxDR1prQixDTndCaEIsQUVQQSxBQ0xBLEVIWUEsQUVQQSxBQ0xFLENHWmtCLENESGhCLEFHRkcsQ0hFRixlR0ZpQixLSEVHLENBQUMsQ0FBQyxFTDJCeEIsQUVQQSxBTXJCbkIsUUFBUSxJQUFJLG1CQUdaLElBQUksR0FBSSxVQUMwQixRQUE5QixFQUFFLGVBQWUsV0FBd0QsTUFBOUIsRUFBRSxlQUFlLHdCQUUvRCxHQUFJLEtBQU0sRUFBRSxjQUFjLFNBQ3pCLEtBQUksSUFBTSxvQ0FDVixJQUFJLGdCQUFpQixFQUFFLHFCQUFxQixVQUFVLEVBQ3RELGdCQUFlLFdBQVcsYUFBYSxJQUFLLDZGQVZ2QjtBUjhCcEIsQUVQRCxBRWZILElBQUksR0FBRyxFRFVFLENDVkMsQ0pzQkMsQUVQRixNRWZRLENBQUMsYUFBYSxDQUFDLENBQUM7QUp1QjNCLEFFUEYsQUVmSixBRVRBLElGU0ksQUVUQSxHSG1CRyxFR25CRSxHQUFHLElKd0JFLEFFZkUsRUZlQSxDRk9HLEFJdEJBLEFFVEEsQ0FBQyxDTitCQyxFSXRCRSxFSnNCRSxDSXRCQyxDQUFDLEFFVEEsQ0FBQyxDQUFDLElGU0ksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBRmdCNUMsQUVmTCxBQ0ZBLEFDUEEsSUZTSSxBQ0ZBLEFDUEEsQ04rQkMsQUdaQSxDSFlDLEFHWkQsR0VaSSxDSGlCRixBSXhCRyxFSndCRCxBR2pCRyxDREVDLEFFVEEsR0p3QkEsQUVmRyxHQUFHLEFDRkEsQ0RFQyxBQ0ZBLEFDUEEsQ0FBQyxRRlNRLEFFVEEsQ0ZTQyxBRVRBLENBQUMsTURPTSxDQUFDLENBQUM7QUNOdkMsR04rQkcsQUdaQSxDR25CQyxHSndCQyxJSXhCTSxDR0ZJLEVIRUQsT0FBTyxBR0ZHLENIRUYsRUNGRCxNRUFXLEtBQzlCLENGRCtCLEtFQ0ksQ0hDSyxDQUFDLENBQUMsRUdEbkMsYUFBWSxLQUFLLDBKQURGO0FMYXhCLElBQUksQ0ZjQSxDQUFBLElFZE0sR0FBRyxLQUFLLENBQUMsRUliSyxTSmFNLENBQUMsSUliTztBUm1DcEMsQUdaQSxBRVpGLEdIaUJHLENHakJDLEdBQUcsQ0ZZQyxFQUFBLEFFWkUsT0FBTyxDQUFDLENMd0JDLEVBQUUsT0daVixHRVpvQixDQUFDLENBQUM7QUx5QjdCLEFHWkEsQUVaSixBQ0pBLEFFUmUsSUhZWCxBQ0pBLEtBQUssQUVSZSxFTHlCbkIsQ0hXTyxBTTVCQSxFTjRCRSxFS3hCRSxHTHdCRyxBS3hCQSxBQ0pBLENONEJDLEFNNUJBLEdESUcsQUdaZSxDQUFDLEVIWWIsQ0FBQyxFTHdCRSxDQUFDLENRcENnQixFSFliLEFHWmUsQ0hZZCxFTHdCRSxDTTVCQyxDQUFDLENBQUMsT0RJTyxFQUFFLENBQUM7QUhrQi9DLEFFaEJBLEFDREYsQUdaQyxHUm9DRSxDS3hCQyxJQUFJLEFHWkEsQ0FBQyxFSFlFLENHWkMsQ0FBQyxDSFlDLENIaUJDLEFHakJBLEVIaUJBLEVHakJJLENEQ0MsQUNEQSxFRENBLENHYkEsUUNBVyxDQUFDLENBQUMsQ0RBRixNTDZCZixLQUFLLEVBQUUsS0VoQkEsbUNNZFIsU0FBQSxnQkFBWSxVQUFTO0FSK0JqQyxBRWhCQyxBQ0RKLEFDSkEsSURJSSxBQ0pBLElGS0ksR0ZnQkUsQUlyQkMsQ0pxQkEsQUdqQkMsQ0RDQyxDRUxDLENKcUJBLEFHakJDLENIaUJBLEFFaEJDLEVDREUsQ0FBQyxBQ0pBLENGS0MsQUVMQSxDRktDLElBQUksQ0FBQyxDQ0RDLENBQUMsR0hpQkUsQUlyQkMsQ0pxQkEsQUlyQkMsQ0pxQkEsRUVoQkcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBSndCN0MsQUl2QkUsQUNESixJQUFJLEVGV0csSUVYRyxDRENDLENBQUMsQ0NEQyxFRENFLENBQUMsQUNEQSxDTHdCQyxBS3hCQSxFTHdCQSxDSXZCRyxDQUFDLEVDREUsQ0FBQyxDRENDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUp1QnhCLEFJdkIwQixDQUFDLENBQUM7QUp3QjVDLEFJdkJBLEFJYkgsR042QkUsRU03QkUsQ0FBQyxHQUFHLEVSb0NFLE1JbkNGLEFJRFEsQ0FBQyxHQ0pNLElMS1AsRUFZSixDS2pCa0IsTUxpQlgsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBSndCN0MsQUt2Qk4sQUNOQyxBRVBBLEdKYUUsQ0NBQyxDR2JDLENBQUMsQ0FBQyxDRk9BLEVBQUUsQ0FDTCxDS2JXLEVYeUNELEVBQUUsQ0t2QkMsQUNMUCxDQUFDLEVES1MsQ0diQyxBR0xHLENIS0YsR0hhRyxBQ0xQLENES1EsQUNMUCxFTjRCUyxDQUFDLEFXekNFLENIS0QsQ0ZRTixBRVJPLENGUU4sQUNYQyxDRFl2QixFRVRnQyxFSGFFLENBQUMsQ01qQnJDLEdBQUksRVh3Q3VDLEFRcENBLEVSb0NFLEVRcENFLENBQUMsQ0FBQyxDR0pwQyxDSkNnQyxPSUR0QixLSEl3QyxBR0pqQyxDSElrQyxRQUFRLEFHSmpDLENISWtDLElBQUksRUdKN0IsRUhJaUMsRUFBRSxBR0hoRixNQUFPLFNBRVAsSUFBSSxPQUFRLEdBQUksT0FBTSxTQUFTLFdBRS9CLE1BREEsT0FBTSxTQUFXLFNBQ1gsZ0ZBTmM7QVRtQ3RCLEFPbkNhLEtUMENWLENBQUMsR1MxQ2tCLE9BQU8sQ0FBQyxHQUFHLENQbUNkLENPbkNnQixDUG1DaEIsNkJBQUMsS0FBSyxFQUFFO0FBQzFCLEFFaEJELEFFSkEsQUdmQSxHVDBDQyxJR2pCMEIsQ0dWckIsQ0dmQyxDSGVELENKb0JFLENBQUMsRUVoQkcsQ0ZnQkEsQ0FBQyxBRWhCRCxLTXBCQyxDRENNLEdBQUcsQ0FBQyxDQUFDLENIZWYsR0loQkksRURDaUIsS0FBSyxDQUFDLEFDRGYsQ05vQk4sQUtuQnNCLENQbUNDLENBQUMsQ0FBQztBRWZ2QyxBQ0RELEFDSEUsQUVWRixDQ0xELElOeUJXLENBQ1AsQ0tyQkMsQ0hhRSxDS3BCbUIsQ0xvQmpCLEFHYkQsQ0pjQyxBQ0FOLEFDSEMsQ0ZHTSxDSWRDLENBQUMsQ0pjQyxBSWRBLENKY0MsQ0NBTCxBS3JCeUIsQ0xxQnhCLEFLckJ5QixJQUFJLEVBQUUsQ0xxQnhCLENBQUMsRUdkUSxDQUFDLEVKY0UsQUNBTixDREFPLEFDQU4sQ0RBTyxBQ0M3QixJR2ZpQyxDQUFDLENBQUM7QVJzQ3BDLEFJdkJDLEFJZEEsQ0VSdUMsRVA2QnZDLEdLckJHLENBQUMsR0FBRyxDSmNBLENBQUMsQVF0QkksQ0pRRixJUnFDSSxFQUFBLEVZN0NPLEdSc0JELEVBQUUsQ0FBQyxHR25CQyxDS0hNLEdBQUksV0FBWSxDWjZDN0IsRU8xQ3lCLENDS0ksQ0FBQyxFSVBoRCxhQUFlLFdBQWEsSUFDNUIsSUFBSSxNQUNBLFVBQ0osT0FBTyxZQUNMLEdBQUksU0FBVSxPQUFTLEtBRW5CLEtBQU8sR0FBSSxNQUNYLEtBQU8sU0FDUCxPQUFjLEtBQU8sV0FBYixLQUVWLGFBQWEsWUFDYixXQUFhLFdBQVcsV0FDdEIsS0FBTyxJQUNQLEdBQUcsTUFBTSxRQUFTLE9BQ2pCLGNBRUgsS0FBTyxJQUNQLEdBQUcsTUFBTSxRQUFTLGtGQWxCQTtBWjhDcEIsQUt0QkYsQUdmQyxDTHFCRixDQUFDLENBQUMsQUNQQSxJSWRJLENScUNDLENBQUMsUUFBUSxBS3RCQSxDTHNCQyxDS3RCRCxFR2ZJLEFHVEcsR0hTQSxDQUFDLENBQUMsQ0dUSSxtQk53QlYsQUdmMEIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBUnNDdEQsQUt0QkYsQUdmRCxNRlNJLEtETUksTUdmTSxDQUFDLENScUNDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ1FyQ0MsQ0FBQyxHUnFDRyxDQUFDLFFRckNRLENBQUMsR0FBRyxDUnFDQyxDUXJDQyxjQUFjLENBQUMsQ0FBQztBSmU3RCxBQ0NJLEFNMUJTLEdUeUNaLEVGT0UsQ0FBQyxDQUFDLENJdkJDLENPekJnQixDUHlCaEIsR0NDSyxFQUFFLEFNMUJlLENBQUMsS1JnQ2hCLEdRaEN3QixFQUFFLEVQeUI5QixDRE9ZO0FDTm5CLEFDQ0ksQU0xQlAsR1hnREUsR1doREUsSUxrQk8sQ0ZRUCxDQ0FPLEFReEJHLEVSd0JELEFNMUJELENBQUMsSUxrQk8sRUFBQyxBQ2RQLEFJSkssQUVFSSxJRkZBLEdBQUcsSUFBSSxJTGtCTSxBT2hCQyxJRkZDLENBQUMsRUVHdEMsSUZINEMsRUVHckMsQ0ZId0MsR0FBRyxFQUFFLENFR3hDLHdHQUF5RyxNQUFLLGdEQUN6SCxLQUFJLFNBQUEsWUFDSixLQUFJLE9BQUEsWUFDSixLQUFLLFNBQUMsYUFBWSxLQUFBLGlMQUpHLGtDQUhMLG1FQUNGO0FYMENmLEFHZlEsQUV0QlQsQUlKRyxRVHlDSSxBSXZCQyxDQ2RBLENMcUNELENTekNHLElOMEJJLEVBQUUsRUFBRSxBTTFCQSxDQUFBLENDRkssT1YyQ2IsQ1UzQ3FCLENOS3ZCLEVDQ0EsSURETSxPQWVHO0FOK0JoQixBTzVDRCxHSUpFLElMa0JVLENOOEJMLEFJeEJFLEFHcEJGLENGc0JDLEFNMUJBLENYZ0RELE9JeEJXLEVBQUUsSUFBSSxDQUFDLElKd0JoQixDSXhCcUIsQ0FBQyxBR3BCeEIsSUhvQjRCLEdBQUcsb0JBQW9CLEdBQUcsZUFBZSxBQUFDO0FKeUIxRSxBTzVDSCxBSUpHLEFDSlcsTVI0QlIsQUVOQSxDRFFBLENNMUJDLENDSmdCLEVacURsQixFV2pETyxDSklDLEVJSkUsQ0NKZ0IsQ0FBQyxFREliLEFDSmUsRUFBRSxHRElaLENBQUMsTUNKcUIsRURJYixBQ0plLENESWQsSUNKbUIsRUFBRSxJTFExQyxBSUorQixDQUFDLENBQUE7QVR3QzNDLEFLbkNGLEFJSkcsQUNKRixLUDhCRyxDQUFBLEVIYUUsQ1N2Q0UsQ0FBQyxFQ0pFLEFFRFosR1BTZSxDT1RYLENGQ2EsQ1YyQ0EsQVN2Q0MsR1R1Q0UsQVN2Q0MsRUdMVCxFWjRDWSxDQUFDLENVM0NFLEVESUUsQ0FBQSxBQ0pDLENWMkNBLEFZNUNWLENaNENXLENVM0NFLENBQUEsQUFBQyxDQUFDLEtFQS9CLEVaMkNxQyxDQUFDLENLbkMzQixHT1JGLFFBQVEsVUFDakIsUUFBVSxRQUFRLHNCQUVsQixNQUFRLE9BQU8sYUFHakIsYUFBYyxTQUVkLEtBQUksV0FDRixRQUFRLElBQUksZUFHZCw0QkFBMkIsU0FBQyxNQUMzQixRQUFRLElBQUksK0JBQ1osS0FBSyxTQUNKLFFBQVMsUUFJWCxjQUFhLFNBQUMsSUFDYixLQUFLLFNBQ0osWUFDQyxHQUFJLE9BS1AsZUFBYyxXQUNiLEtBQUssU0FDRixlQUFlLE1BTXJCLFFBQU8sUUFBVTtBWlNkLEFTdkNDLEFDSkYsQ0xRRCxFRnNCRSxHTzlCRyxJUjBCTSxBRU5BLEFLaEJGLEFDSkEsQ1YyQ0EsQ0FBQyxBVTFDTCxHVjBDUSxBU3ZDQyxDVHVDQSxBU3ZDQSxHUHNCTSxBRU5BLEVGTUMsQUVOQSxDTW5CTixDQUFDLEdWMENRLENBQUMsQ0FBQyxDRWpCRyxRRU5RO0FKd0JuQyxBVTFDRCxBRUpGLEdIT0csQ0dQQyxFZHNESSxFRVJELEFFakJFLEFFTkQsQ01uQkMsQUVKQSxHQUFHLE1aOENLLENBQUMsQVk5Q0MsQ0FBQyxDWjhDQSxBVTFDQyxLWmtEWixBRVJnQixDWTlDRSxDQUFDLENBQUMsQ1JLWixFTmlERixHRVJtQixDRlFsQixFTWpEUyxDSnlDYSxFRlFqQixFQUFFLEVBQUMsQU0vQkwsSUp1QjZCLENBQUMsRUFBRSxLQUFLLElBQUksQ0ZRbkIsQ0VSc0IsQ0ZRcEIsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxBQUFDLEVBQUMsS0FBSyxFQUFDLG1CQUFtQixFQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxlQUFlLEFBQUMsRUFBQyxrQkFBa0IsRUFBQyxxQ0FBcUMsR0FBRTtBRVA5TixBR2JGLEFPN0JFLEFFSkosQ0hPQyxHR1BHLEVkc0RJLENNL0JLLENNbkJMLEVFSkUsRVo4Q0EsQ0FBQyxBR2JFLEFTakNBLEVUaUNBLEFPN0JFLEdBQUcsRUVKRSxDREVJLEFDRkgsRUZJRSxJQUFJLENaYWxCLENjakJvQixDQUFDLENGSUMsQUVKQSxDRklDLEVaYWpCLEFhZnNCLEVYNENILEFHYnBCLENBQUMsQ0xxQkMsQ0VScUIsQUdicEIsR0xxQkcsRUFBRSxJQUFJLENBQUMsRUVSZ0IsR0ZRWCxDQUFDLGFBQWEsQUFBQyxFQUFDLElBQUksRUFBQyxXQUFXLEdBQUU7QUVQN0QsQUdiRixBU2pDSCxJQUFJLENSdUJPLENOK0JILEFNOUJILEVEU0UsR1NqQ0ksR0FBRyxDWjhDRixDQUFDLENHYkcsRUhhQSxDQUFDLEFHYkUsQ1NqQ0UsQ0FBQyxFVGlDQyxDQUFDLEdMakJQLEVLaUJZLENBQUMsSUxqQk4sR0tpQmEsQ0FBQyxHTHFCcEIsQWN0RHdCLENUaUNBLEFTakNDLENUaUNBLEFTakNDLENaOENGLENBQUMsQ0FBQyxFR2JJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUhjOUMsQUdiSCxBTzdCQyxHTm9CRCxFTjhCUyxDQUNQLEVLdEJFLEFPN0JDLEdBQUcsR0FBRyxDVjBDRCxBR2JDLEFPN0JDLEdWMENDLEFHYkMsQ083QkUsR1YwQ0MsQVdqREQsQ0RPSSxDVjBDRCxDQUFDLEFVMUNBLEVQNkJHLENBQUMsRUFBRSxDSGFBLEFHYkMsQ0hhQSxBV2pERCxNUm9DUSxDQUFDLE9IYU0sRUFBRTtBQUN0QyxBR2JMLEFTakNILENSd0JDLENBQUMsQ04rQkMsQU0vQkEsQ1F4QkMsSUZJSSxDUnFCbUIsQVV6QmxCLEVUaUNDLENBQUMsQU83QkMsQUVKQSxHRklHLENWMENELEVBQUUsQVk5Q0UsQ0FBQyxJWjhDRSxBR2JDLENBQUMsQU83QkMsQ0FBQyxLRUpLLENUaUNBLEFTakNDLENUaUNBLENBQUM7QUhjeEIsQUdiTCxBTzdCQyxDWm1ESCxDQUFDLENBQUMsS0k5Qk0sQVFyQkQsR1A2QkUsQ0FBQyxBTzdCQyxHVjBDQyxDVTFDRyxDVjBDRCxFVTFDSSxHVjBDQyxBVTFDRSxFUDZCQyxFQUFFLEFPN0JDLENQNkJBLENEUmhCLENRckJtQixRUnFCVixFUXJCb0IsRVJxQm5CLEFRckJxQixRUnFCYixFQUFDLGNBQWMsRUFBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixBQUFDLEVBQUMsR0FBRyxFQUFDLFdBQVcsR0FBRztBRnNCekYsR0diTCxLRFJNLFNGcUJNLEVBQUUsRUl0QkYsT0FBTyxFRm5CYixFRnlDcUIsV0V6Q1IsT0FvQkc7QUZzQmpCLEFVMUNGLEFFSkosT1Z5QlcsTVV6QkEsRUFBRSxDWjhDRCxBWTlDRSxFWjhDQSxBVTFDRSxDQUFDLENDVkYsQ2I2REYsRWN2RFEsQ2R1REwsQWN2RE0sSUROQyxDRFVJLENBQUMsQ0FBQztBVjJDbkIsQUdiVixBTzdCSSxNUnFCQyxFQ1FDLEVBQUEsTU83QlEsR0FBRyxFVjBDRSxFQUFFLEtHYlosQ0hhaUIsQVUxQ0MsQ0FBQyxZVjBDVyxBVTFDQztBVjJDOUIsQUdiUixBTzdCSSxBRUpOLE1BQUksRVRpQ0UsQVNqQ0YsSUZJTSxHUDZCRyxBTzdCQSxHUDZCRyxBTzdCQSxDQUFDLEdQNkJHLENBQUMsQ1NqQ2QsR1o4Q2tCLENHYkMsQ0hhQyxBR2JBLE1IYUssQ0diRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUhhSztBR1pqRCxBTzdCSSxBRUpKLFFUaUNJLEVPN0JFLENWMENDLEFVMUNBLEFFSkEsQ0FBQyxHQUFHLENGSUMsQUVKQSxDRklDLEVQNkJFLEdBQUcsRU83QkUsRUFBRSxFRUpFLENUaUNDLEFTakNBLENUaUNDLEFPN0JBLEFFSkEsQ0ZJQyxDQUFDLENQNkJDLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxFQUFDO0FBQzlDLEFRekNTLEdDUVosSUZJSSxDUm1CQyxDRnVCRCxBVTFDRSxBQ1plLENYc0RoQixDQUFDLEVHWkQsTU85QlcsQ0FBQyxDQUFDLENDWmdCLENBQUMsS0FBSyxFQUFFLE9UK0JoQyxTQUFTLEVBQUMsZUFBZSxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxBQUFDLEdBQUU7QUNXM0QsQVF6Q1AsS0RZRyxFVjBDQSxBRXZCUSxDRnVCUixDV3RESSxFRFlFLEdDWkcsRVJ5Q0cseUdRekNzRyxLQUFLLGtEQUErQyxDQUN4SyxJQUFJLHFCQUFRLENBQ1osSUFBSSxtQkFBTSxDQUNWLElBQUksQ0FBQyxVQUFDLElBQUk7QURVUCxBRUpKLEtaOENFLEFFdkJPLENBQ04sSVFwQkssQ1YwQ0EsQVdwRFMsRURVTixBQ1ZRLEdEVUwsQ0FBQyxBQ1ZRLEVBQUosSUFBSSxFQUFFLElDTUUsRUFBQSxxQ0FBQyxJQUFJLEVBQUU7QVRpQzNCLEFPNUJILEFFSkgsR1Z3QkEsQVMvQnlCLENBQUMsQ0FBQyxHRFd0QixDQUFDLEVFSkMsQ0FBQyxFRklHLENBQUMsQUVKRCxDQUFDLEdUZ0NHLEVBQUMsQ081QkcsRUFBRSxJQUFJLENBQUMsQ0FBQyxJUDRCRSxXU2hDWSxDQUFDLENBQUM7QVorQzNDLEFHZE0sQUdkTixBTWxCQSxDVndCRixBUy9CQSxDVCtCQyxDQUFDLEVRcEJFLEVKY0UsQ01sQkEsQ0FBQyxJWjhDRSxDQUFDLEVZOUNJLENaOENELEFHZEUsQVNoQ0EsQ1o4Q0QsQ0dkRyxDR2RFLEdIY0UsQUdkQyxDSGNBLENIY0QsQ0FBQyxDQUFDLEtNNUJqQixHSGMyQixDQUFDLElBQUksQ0FBQyxJQUFJLEFHZHhCLENBQUksQ0hjc0IsQ0FBQyxDQUFDLEFBQUMsRUdkcEIsRUFBSztBTjZCL0IsQUdkTSxBR2RMLEFNbEJBLEdGSUQsQ0FBQyxPSmNPLENBQUMsQ040QkYsQVk5Q0MsQ1o4Q0EsQ001QkksQU1sQkYsQ05rQkcsR01sQkMsSVRnQ0ssRUFDVixFSGFZLENBQUMsR001Qk0sQ0FBQyxDQUFDLFFONEJLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FNM0I5QyxDSWRKLElWMENHLEFZOUNBLENBQUMsQ0FBQyxFTmtCSSxDQUFDLE1BQU0sQ0FBQyxJSk1ILEtJTlksQ0pNTixDSU5RLENBQUM7R01qQjNCLENOa0JDLENBQUE7QU42QkEsV0FDQyxDR2hCVSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7QUdacEMsQU1sQkQsT05rQkssSUhhUyxBQUNMLElTaENJLEVBQUEsU05rQlcsR0FBRyxTQUF0QixFTWxCUyxFQUFFLEVBQUUsYU5rQk0sQ0FBSSxLQUFLLEVBQUs7QUhlOUIsQUdkTCxBTWxCRixRTmtCTSxBTWxCRixDQUFDLElOa0JNLENBQUMsRU1sQkEsQ0FBQyxDTmtCRyxJQUFJLEVBQUUsQ0FBQyxHSGNFLEVBQUUsQ0FBQyxBQUFDLEtHZEssQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUU7QUhlOUMsQUdkSCxBTWxCSCxNWjZDRSxTTTNCVyxDQUFDLEFNbEJKLEVBQUUsRVRnQ0ksRUFBRSxHR2RLLEVBQUUsSUFBSSxDQUFDLENBQUMsRU4yQnhCLEVBQUUsRUFBQyxHR2JTLE1BQU0sSUFBQyxDSGFGLEVHYkssQ0hhRSxDR2JBLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxXQUFRLENBQUMsR0FBRyxBQUFDLEdBQUcsQUFBQztBR2JwRSxBTWxCRixNWjZDRSxFR2JJLENHZEEsQ01sQkosRVRnQ1EsQUdkRCxBTWxCTCxDVGdDTyxDU2hDTCxFTmtCTyxDQUFDLEdIY0ksQ0FBQyxLQUFLO0tHYnZCLEVIY2EsQVNoQ2QsQ1RpQ0U7SUdkSCxDSGVDLEFHZkQsQU1sQkEsQ0FBQyxDVGlDRSxBU2pDRCxHWjJDSSxDR1ZDLENBQUMsQ0FBQyxPSFVPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEFBQUM7R1kxQ3pDLEtaMEMyQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVU7QUdSL0QsQUdmRCxPTnVCcUUsQU12QmpFLElIZ0JELEtHaEJVLEdBQUcsU0FBWixTQUFTLEdBQVM7QUhnQmxCLEFHZkYsQU1sQkgsS1p5Q1UsQ0FDUCxJR1RNLEFHZkEsQ0FBQyxLTWxCSSxFQUFBLEVOa0JLLEVBQUUsQ0FBQyxxQk1sQk47QUFDZixHWjBDQSxDTXhCQyxDQUFBLEdIY1EsQVNoQ0wsQ0FBQyxPQUFPLENUZ0NNLEFTaENMLEVUZ0NNLFNBQVM7QVMvQnpCLENaMENMLENBQUMsQ0FBQyxHR1ZNLFdBQVcsRVNoQ0QsRUFBRSxLQUFLO0VOa0J4QixHSGVXLEFTaENSLENUaUNBLEFTakNDLENBQUM7Q05rQk4sRUhnQkUsQVNqQ0Esa0JaMENZLE1BQU07Q0dScEIsQ0FBQyxDQUFDO0NTaENGLENBQUMsQ0FBQztxQlRrQ1ksYUFBYTtBU2hDNUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwicmVxdWlyZSgnYmFiZWxpZnkvcG9seWZpbGwnKTtcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxubGV0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmxldCBpbmplY3RUYXBFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCJyZWFjdC10YXAtZXZlbnQtcGx1Z2luXCIpO1xuXG4vL05lZWRlZCBmb3Igb25Ub3VjaFRhcFxuLy9DYW4gZ28gYXdheSB3aGVuIHJlYWN0IDEuMCByZWxlYXNlXG4vL0NoZWNrIHRoaXMgcmVwbzpcbi8vaHR0cHM6Ly9naXRodWIuY29tL3ppbHZlcmxpbmUvcmVhY3QtdGFwLWV2ZW50LXBsdWdpblxuaW5qZWN0VGFwRXZlbnRQbHVnaW4oKTtcblxuLy9OZWVkZWQgZm9yIFJlYWN0IERldmVsb3BlciBUb29sc1xud2luZG93LlJlYWN0ID0gUmVhY3Q7XG5cbmltcG9ydCB7IEFwcCB9IGZyb20gJy4vY29tcG9uZW50cyc7XG5cblJlYWN0LnJlbmRlcig8QXBwLz4sIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpdlthcHBdJykpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn07XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajtcbn07XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kJykuY29yZS5PYmplY3Qua2V5czsiLCJ2YXIgJCAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgZ2xvYmFsICAgICA9ICQuZ1xuICAsIGNvcmUgICAgICAgPSAkLmNvcmVcbiAgLCBpc0Z1bmN0aW9uID0gJC5pc0Z1bmN0aW9uO1xuZnVuY3Rpb24gY3R4KGZuLCB0aGF0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4vLyB0eXBlIGJpdG1hcFxuJGRlZi5GID0gMTsgIC8vIGZvcmNlZFxuJGRlZi5HID0gMjsgIC8vIGdsb2JhbFxuJGRlZi5TID0gNDsgIC8vIHN0YXRpY1xuJGRlZi5QID0gODsgIC8vIHByb3RvXG4kZGVmLkIgPSAxNjsgLy8gYmluZFxuJGRlZi5XID0gMzI7IC8vIHdyYXBcbmZ1bmN0aW9uICRkZWYodHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cFxuICAgICwgaXNHbG9iYWwgPSB0eXBlICYgJGRlZi5HXG4gICAgLCBpc1Byb3RvICA9IHR5cGUgJiAkZGVmLlBcbiAgICAsIHRhcmdldCAgID0gaXNHbG9iYWwgPyBnbG9iYWwgOiB0eXBlICYgJGRlZi5TXG4gICAgICAgID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSkucHJvdG90eXBlXG4gICAgLCBleHBvcnRzICA9IGlzR2xvYmFsID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIGlmKGlzR2xvYmFsKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhKHR5cGUgJiAkZGVmLkYpICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgaWYoaXNHbG9iYWwgJiYgIWlzRnVuY3Rpb24odGFyZ2V0W2tleV0pKWV4cCA9IHNvdXJjZVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZWxzZSBpZih0eXBlICYgJGRlZi5CICYmIG93billeHAgPSBjdHgob3V0LCBnbG9iYWwpO1xuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgZWxzZSBpZih0eXBlICYgJGRlZi5XICYmIHRhcmdldFtrZXldID09IG91dCkhZnVuY3Rpb24oQyl7XG4gICAgICBleHAgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pO1xuICAgICAgfTtcbiAgICAgIGV4cC5wcm90b3R5cGUgPSBDLnByb3RvdHlwZTtcbiAgICB9KG91dCk7XG4gICAgZWxzZSBleHAgPSBpc1Byb3RvICYmIGlzRnVuY3Rpb24ob3V0KSA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydFxuICAgIGV4cG9ydHNba2V5XSA9IGV4cDtcbiAgICBpZihpc1Byb3RvKShleHBvcnRzLnByb3RvdHlwZSB8fCAoZXhwb3J0cy5wcm90b3R5cGUgPSB7fSkpW2tleV0gPSBvdXQ7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gJGRlZjsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCQpe1xuICAkLkZXICAgPSBmYWxzZTtcbiAgJC5wYXRoID0gJC5jb3JlO1xuICByZXR1cm4gJDtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xyXG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpXHJcbiAgLCB0b1N0cmluZyA9IHt9LnRvU3RyaW5nXHJcbiAgLCBnZXROYW1lcyA9ICQuZ2V0TmFtZXM7XHJcblxyXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXHJcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XHJcblxyXG5mdW5jdGlvbiBnZXRXaW5kb3dOYW1lcyhpdCl7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBnZXROYW1lcyhpdCk7XHJcbiAgfSBjYXRjaChlKXtcclxuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XHJcbiAgaWYod2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScpcmV0dXJuIGdldFdpbmRvd05hbWVzKGl0KTtcclxuICByZXR1cm4gZ2V0TmFtZXMoJC50b09iamVjdChpdCkpO1xyXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpXG4gICwgY29yZSAgID0ge31cbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHlcbiAgLCBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vclxuICAsIG1heCAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICA9IE1hdGgubWluO1xuLy8gVGhlIGVuZ2luZSB3b3JrcyBmaW5lIHdpdGggZGVzY3JpcHRvcnM/IFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkuXG52YXIgREVTQyA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDI7IH19KS5hID09IDI7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcbnZhciBoaWRlID0gY3JlYXRlRGVmaW5lcigxKTtcbi8vIDcuMS40IFRvSW50ZWdlclxuZnVuY3Rpb24gdG9JbnRlZ2VyKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59XG5mdW5jdGlvbiBkZXNjKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn1cbmZ1bmN0aW9uIHNpbXBsZVNldChvYmplY3QsIGtleSwgdmFsdWUpe1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufVxuZnVuY3Rpb24gY3JlYXRlRGVmaW5lcihiaXRtYXApe1xuICByZXR1cm4gREVTQyA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuICQuc2V0RGVzYyhvYmplY3QsIGtleSwgZGVzYyhiaXRtYXAsIHZhbHVlKSk7XG4gIH0gOiBzaW1wbGVTZXQ7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0KXtcbiAgcmV0dXJuIGl0ICE9PSBudWxsICYmICh0eXBlb2YgaXQgPT0gJ29iamVjdCcgfHwgdHlwZW9mIGl0ID09ICdmdW5jdGlvbicpO1xufVxuZnVuY3Rpb24gaXNGdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFzc2VydERlZmluZWQoaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59XG5cbnZhciAkID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLyQuZncnKSh7XG4gIGc6IGdsb2JhbCxcbiAgY29yZTogY29yZSxcbiAgaHRtbDogZ2xvYmFsLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vY29yZS1qcy1pc29iamVjdFxuICBpc09iamVjdDogICBpc09iamVjdCxcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgdGhhdDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLy8gNy4xLjQgVG9JbnRlZ2VyXG4gIHRvSW50ZWdlcjogdG9JbnRlZ2VyLFxuICAvLyA3LjEuMTUgVG9MZW5ndGhcbiAgdG9MZW5ndGg6IGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxuICB9LFxuICB0b0luZGV4OiBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gICAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG4gIH0sXG4gIGhhczogZnVuY3Rpb24oaXQsIGtleSl7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG4gIH0sXG4gIGNyZWF0ZTogICAgIE9iamVjdC5jcmVhdGUsXG4gIGdldFByb3RvOiAgIE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgREVTQzogICAgICAgREVTQyxcbiAgZGVzYzogICAgICAgZGVzYyxcbiAgZ2V0RGVzYzogICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgc2V0RGVzYzogICAgZGVmaW5lUHJvcGVydHksXG4gIHNldERlc2NzOiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLFxuICBnZXRLZXlzOiAgICBPYmplY3Qua2V5cyxcbiAgZ2V0TmFtZXM6ICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gIGdldFN5bWJvbHM6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gIGFzc2VydERlZmluZWQ6IGFzc2VydERlZmluZWQsXG4gIC8vIER1bW15LCBmaXggZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmcgaW4gZXM1IG1vZHVsZVxuICBFUzVPYmplY3Q6IE9iamVjdCxcbiAgdG9PYmplY3Q6IGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gJC5FUzVPYmplY3QoYXNzZXJ0RGVmaW5lZChpdCkpO1xuICB9LFxuICBoaWRlOiBoaWRlLFxuICBkZWY6IGNyZWF0ZURlZmluZXIoMCksXG4gIHNldDogZ2xvYmFsLlN5bWJvbCA/IHNpbXBsZVNldCA6IGhpZGUsXG4gIGVhY2g6IFtdLmZvckVhY2hcbn0pO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbmlmKHR5cGVvZiBfX2UgIT0gJ3VuZGVmaW5lZCcpX19lID0gY29yZTtcbmlmKHR5cGVvZiBfX2cgIT0gJ3VuZGVmaW5lZCcpX19nID0gZ2xvYmFsOyIsInZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBpc09iamVjdCA9ICQuaXNPYmplY3RcbiAgLCB0b09iamVjdCA9ICQudG9PYmplY3Q7XG4kLmVhY2guY2FsbCgoJ2ZyZWV6ZSxzZWFsLHByZXZlbnRFeHRlbnNpb25zLGlzRnJvemVuLGlzU2VhbGVkLGlzRXh0ZW5zaWJsZSwnICtcbiAgJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcixnZXRQcm90b3R5cGVPZixrZXlzLGdldE93blByb3BlcnR5TmFtZXMnKS5zcGxpdCgnLCcpXG4sIGZ1bmN0aW9uKEtFWSwgSUQpe1xuICB2YXIgZm4gICAgID0gKCQuY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGZvcmNlZCA9IDBcbiAgICAsIG1ldGhvZCA9IHt9O1xuICBtZXRob2RbS0VZXSA9IElEID09IDAgPyBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBpdDtcbiAgfSA6IElEID09IDEgPyBmdW5jdGlvbiBzZWFsKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogaXQ7XG4gIH0gOiBJRCA9PSAyID8gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBpdDtcbiAgfSA6IElEID09IDMgPyBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IHRydWU7XG4gIH0gOiBJRCA9PSA0ID8gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiB0cnVlO1xuICB9IDogSUQgPT0gNSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IGZhbHNlO1xuICB9IDogSUQgPT0gNiA/IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gZm4odG9PYmplY3QoaXQpLCBrZXkpO1xuICB9IDogSUQgPT0gNyA/IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXtcbiAgICByZXR1cm4gZm4oT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZChpdCkpKTtcbiAgfSA6IElEID09IDggPyBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gZm4odG9PYmplY3QoaXQpKTtcbiAgfSA6IHJlcXVpcmUoJy4vJC5nZXQtbmFtZXMnKS5nZXQ7XG4gIHRyeSB7XG4gICAgZm4oJ3onKTtcbiAgfSBjYXRjaChlKXtcbiAgICBmb3JjZWQgPSAxO1xuICB9XG4gICRkZWYoJGRlZi5TICsgJGRlZi5GICogZm9yY2VkLCAnT2JqZWN0JywgbWV0aG9kKTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3Rvb2xzUHJvdGVjdEpzMiA9IHJlcXVpcmUoXCIuL3Rvb2xzL3Byb3RlY3QuanNcIik7XG5cbnZhciBfdG9vbHNQcm90ZWN0SnMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9vbHNQcm90ZWN0SnMyKTtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yL3J1bnRpbWVcIik7XG5cbl90b29sc1Byb3RlY3RKczNbXCJkZWZhdWx0XCJdKG1vZHVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsL3BvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIF9wYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbnZhciBfcGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXRoKTtcblxudmFyIHJvb3QgPSBfcGF0aDJbXCJkZWZhdWx0XCJdLnJlc29sdmUoX19kaXJuYW1lLCBcIi4uLy4uLy4uL1wiKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAobW9kdWxlKSB7XG4gIGlmIChtb2R1bGUucGFyZW50ICYmIG1vZHVsZS5wYXJlbnQuZmlsZW5hbWUuaW5kZXhPZihyb290KSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkRvbid0IGhvdGxpbmsgaW50ZXJuYWwgQmFiZWwgZmlsZXMuXCIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9ICQudG9PYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9ICQudG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9ICQudG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4O1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07IiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyICQgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3R4ID0gcmVxdWlyZSgnLi8kLmN0eCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXtcbiAgICB2YXIgTyAgICAgID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZCgkdGhpcykpXG4gICAgICAsIHNlbGYgICA9ICQuRVM1T2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSAkLnRvTGVuZ3RoKHNlbGYubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAsIHJlc3VsdCA9IElTX01BUCA/IEFycmF5KGxlbmd0aCkgOiBJU19GSUxURVIgPyBbXSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59OyIsInZhciAkID0gcmVxdWlyZSgnLi8kJyk7XG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtc2cxLCBtc2cyKXtcbiAgaWYoIWNvbmRpdGlvbil0aHJvdyBUeXBlRXJyb3IobXNnMiA/IG1zZzEgKyBtc2cyIDogbXNnMSk7XG59XG5hc3NlcnQuZGVmID0gJC5hc3NlcnREZWZpbmVkO1xuYXNzZXJ0LmZuID0gZnVuY3Rpb24oaXQpe1xuICBpZighJC5pc0Z1bmN0aW9uKGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuYXNzZXJ0Lm9iaiA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoISQuaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbmFzc2VydC5pbnN0ID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lKXtcbiAgaWYoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBUeXBlRXJyb3IobmFtZSArIFwiOiB1c2UgdGhlICduZXcnIG9wZXJhdG9yIVwiKTtcbiAgcmV0dXJuIGl0O1xufTtcbm1vZHVsZS5leHBvcnRzID0gYXNzZXJ0OyIsInZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgZW51bUtleXMgPSByZXF1aXJlKCcuLyQuZW51bS1rZXlzJyk7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHZhciBUID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZCh0YXJnZXQpKVxuICAgICwgbCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGkgPSAxO1xuICB3aGlsZShsID4gaSl7XG4gICAgdmFyIFMgICAgICA9ICQuRVM1T2JqZWN0KGFyZ3VtZW50c1tpKytdKVxuICAgICAgLCBrZXlzICAgPSBlbnVtS2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKVRba2V5ID0ga2V5c1tqKytdXSA9IFNba2V5XTtcbiAgfVxuICByZXR1cm4gVDtcbn07IiwidmFyICQgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBUQUcgICAgICA9IHJlcXVpcmUoJy4vJC53a3MnKSgndG9TdHJpbmdUYWcnKVxuICAsIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5mdW5jdGlvbiBjb2YoaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufVxuY29mLmNsYXNzb2YgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBUO1xuICByZXR1cm4gaXQgPT0gdW5kZWZpbmVkID8gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogJ051bGwnXG4gICAgOiB0eXBlb2YgKFQgPSAoTyA9IE9iamVjdChpdCkpW1RBR10pID09ICdzdHJpbmcnID8gVCA6IGNvZihPKTtcbn07XG5jb2Yuc2V0ID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICEkLmhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkkLmhpZGUoaXQsIFRBRywgdGFnKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvZjsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCAgICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgc2FmZSAgICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZVxuICAsIGFzc2VydCAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgZm9yT2YgICAgPSByZXF1aXJlKCcuLyQuZm9yLW9mJylcbiAgLCBzdGVwICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyJykuc3RlcFxuICAsICRoYXMgICAgID0gJC5oYXNcbiAgLCBzZXQgICAgICA9ICQuc2V0XG4gICwgaXNPYmplY3QgPSAkLmlzT2JqZWN0XG4gICwgaGlkZSAgICAgPSAkLmhpZGVcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGlzT2JqZWN0XG4gICwgSUQgICAgICAgPSBzYWZlKCdpZCcpXG4gICwgTzEgICAgICAgPSBzYWZlKCdPMScpXG4gICwgTEFTVCAgICAgPSBzYWZlKCdsYXN0JylcbiAgLCBGSVJTVCAgICA9IHNhZmUoJ2ZpcnN0JylcbiAgLCBJVEVSICAgICA9IHNhZmUoJ2l0ZXInKVxuICAsIFNJWkUgICAgID0gJC5ERVNDID8gc2FmZSgnc2l6ZScpIDogJ3NpemUnXG4gICwgaWQgICAgICAgPSAwO1xuXG5mdW5jdGlvbiBmYXN0S2V5KGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoISRoYXMoaXQsIElEKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IGlkIHRvIGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIGlkXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG9iamVjdCBpZFxuICAgIGhpZGUoaXQsIElELCArK2lkKTtcbiAgLy8gcmV0dXJuIG9iamVjdCBpZCB3aXRoIHByZWZpeFxuICB9IHJldHVybiAnTycgKyBpdFtJRF07XG59XG5cbmZ1bmN0aW9uIGdldEVudHJ5KHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0W08xXVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0W0ZJUlNUXTsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFzc2VydC5pbnN0KHRoYXQsIEMsIE5BTUUpO1xuICAgICAgc2V0KHRoYXQsIE8xLCAkLmNyZWF0ZShudWxsKSk7XG4gICAgICBzZXQodGhhdCwgU0laRSwgMCk7XG4gICAgICBzZXQodGhhdCwgTEFTVCwgdW5kZWZpbmVkKTtcbiAgICAgIHNldCh0aGF0LCBGSVJTVCwgdW5kZWZpbmVkKTtcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVxdWlyZSgnLi8kLm1peCcpKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCl7XG4gICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0W08xXSwgZW50cnkgPSB0aGF0W0ZJUlNUXTsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXRbRklSU1RdID0gdGhhdFtMQVNUXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZihlbnRyeSl7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uXG4gICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0W08xXVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXRbRklSU1RdID09IGVudHJ5KXRoYXRbRklSU1RdID0gbmV4dDtcbiAgICAgICAgICBpZih0aGF0W0xBU1RdID09IGVudHJ5KXRoYXRbTEFTVF0gPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpc1tGSVJTVF0pe1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYoJC5ERVNDKSQuc2V0RGVzYyhDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBhc3NlcnQuZGVmKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdFtMQVNUXSA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXRbTEFTVF0sICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXRbRklSU1RdKXRoYXRbRklSU1RdID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXRbTzFdW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgc2V0SXRlcjogZnVuY3Rpb24oQywgTkFNRSwgSVNfTUFQKXtcbiAgICByZXF1aXJlKCcuLyQuaXRlci1kZWZpbmUnKShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICBzZXQodGhpcywgSVRFUiwge286IGl0ZXJhdGVkLCBrOiBraW5kfSk7XG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciBpdGVyICA9IHRoaXNbSVRFUl1cbiAgICAgICAgLCBraW5kICA9IGl0ZXIua1xuICAgICAgICAsIGVudHJ5ID0gaXRlci5sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZighaXRlci5vIHx8ICEoaXRlci5sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiBpdGVyLm9bRklSU1RdKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIGl0ZXIubyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycgLCAhSVNfTUFQLCB0cnVlKTtcbiAgfVxufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBmb3JPZiA9IHJlcXVpcmUoJy4vJC5mb3Itb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7XG4gICRkZWYoJGRlZi5QLCBOQU1FLCB7XG4gICAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKXtcbiAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgIGZvck9mKHRoaXMsIGZhbHNlLCBhcnIucHVzaCwgYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICB9KTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgc2FmZSAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmVcbiAgLCBhc3NlcnQgICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBmb3JPZiAgICAgPSByZXF1aXJlKCcuLyQuZm9yLW9mJylcbiAgLCAkaGFzICAgICAgPSAkLmhhc1xuICAsIGlzT2JqZWN0ICA9ICQuaXNPYmplY3RcbiAgLCBoaWRlICAgICAgPSAkLmhpZGVcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGlzT2JqZWN0XG4gICwgaWQgICAgICAgID0gMFxuICAsIElEICAgICAgICA9IHNhZmUoJ2lkJylcbiAgLCBXRUFLICAgICAgPSBzYWZlKCd3ZWFrJylcbiAgLCBMRUFLICAgICAgPSBzYWZlKCdsZWFrJylcbiAgLCBtZXRob2QgICAgPSByZXF1aXJlKCcuLyQuYXJyYXktbWV0aG9kcycpXG4gICwgZmluZCAgICAgID0gbWV0aG9kKDUpXG4gICwgZmluZEluZGV4ID0gbWV0aG9kKDYpO1xuZnVuY3Rpb24gZmluZEZyb3plbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGZpbmQoc3RvcmUuYXJyYXksIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59XG4vLyBmYWxsYmFjayBmb3IgZnJvemVuIGtleXNcbmZ1bmN0aW9uIGxlYWtTdG9yZSh0aGF0KXtcbiAgcmV0dXJuIHRoYXRbTEVBS10gfHwgaGlkZSh0aGF0LCBMRUFLLCB7XG4gICAgYXJyYXk6IFtdLFxuICAgIGdldDogZnVuY3Rpb24oa2V5KXtcbiAgICAgIHZhciBlbnRyeSA9IGZpbmRGcm96ZW4odGhpcywga2V5KTtcbiAgICAgIGlmKGVudHJ5KXJldHVybiBlbnRyeVsxXTtcbiAgICB9LFxuICAgIGhhczogZnVuY3Rpb24oa2V5KXtcbiAgICAgIHJldHVybiAhIWZpbmRGcm96ZW4odGhpcywga2V5KTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICB2YXIgZW50cnkgPSBmaW5kRnJvemVuKHRoaXMsIGtleSk7XG4gICAgICBpZihlbnRyeSllbnRyeVsxXSA9IHZhbHVlO1xuICAgICAgZWxzZSB0aGlzLmFycmF5LnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICB9LFxuICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuYXJyYXksIGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgICB9KTtcbiAgICAgIGlmKH5pbmRleCl0aGlzLmFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICByZXR1cm4gISF+aW5kZXg7XG4gICAgfVxuICB9KVtMRUFLXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgJC5zZXQoYXNzZXJ0Lmluc3QodGhhdCwgQywgTkFNRSksIElELCBpZCsrKTtcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVxdWlyZSgnLi8kLm1peCcpKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgaWYoIWlzRXh0ZW5zaWJsZShrZXkpKXJldHVybiBsZWFrU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiAkaGFzKGtleSwgV0VBSykgJiYgJGhhcyhrZXlbV0VBS10sIHRoaXNbSURdKSAmJiBkZWxldGUga2V5W1dFQUtdW3RoaXNbSURdXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZighaXNFeHRlbnNpYmxlKGtleSkpcmV0dXJuIGxlYWtTdG9yZSh0aGlzKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuICRoYXMoa2V5LCBXRUFLKSAmJiAkaGFzKGtleVtXRUFLXSwgdGhpc1tJRF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIGlmKCFpc0V4dGVuc2libGUoYXNzZXJ0Lm9iaihrZXkpKSl7XG4gICAgICBsZWFrU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkaGFzKGtleSwgV0VBSykgfHwgaGlkZShrZXksIFdFQUssIHt9KTtcbiAgICAgIGtleVtXRUFLXVt0aGF0W0lEXV0gPSB2YWx1ZTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBsZWFrU3RvcmU6IGxlYWtTdG9yZSxcbiAgV0VBSzogV0VBSyxcbiAgSUQ6IElEXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBCVUdHWSA9IHJlcXVpcmUoJy4vJC5pdGVyJykuQlVHR1lcbiAgLCBmb3JPZiA9IHJlcXVpcmUoJy4vJC5mb3Itb2YnKVxuICAsIHNwZWNpZXMgPSByZXF1aXJlKCcuLyQuc3BlY2llcycpXG4gICwgYXNzZXJ0SW5zdGFuY2UgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JykuaW5zdDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9ICQuZ1tOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgZnVuY3Rpb24gZml4TWV0aG9kKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZXF1aXJlKCcuLyQucmVkZWYnKShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7IHJldHVybiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IH1cbiAgICAgIDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpeyByZXR1cm4gZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyB9XG4gICAgICA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKXsgcmV0dXJuIGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgfVxuICAgICAgOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSl7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfVxuICBpZighJC5pc0Z1bmN0aW9uKEMpIHx8ICEoSVNfV0VBSyB8fCAhQlVHR1kgJiYgcHJvdG8uZm9yRWFjaCAmJiBwcm90by5lbnRyaWVzKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlcXVpcmUoJy4vJC5taXgnKShDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3QgID0gbmV3IENcbiAgICAgICwgY2hhaW4gPSBpbnN0W0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSlcbiAgICAgICwgYnVnZ3laZXJvO1xuICAgIC8vIHdyYXAgZm9yIGluaXQgY29sbGVjdGlvbnMgZnJvbSBpdGVyYWJsZVxuICAgIGlmKCFyZXF1aXJlKCcuLyQuaXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRhcmdldCwgaXRlcmFibGUpe1xuICAgICAgICBhc3NlcnRJbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IG5ldyBCYXNlO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgSVNfV0VBSyB8fCBpbnN0LmZvckVhY2goZnVuY3Rpb24odmFsLCBrZXkpe1xuICAgICAgYnVnZ3laZXJvID0gMSAvIGtleSA9PT0gLUluZmluaXR5O1xuICAgIH0pO1xuICAgIC8vIGZpeCBjb252ZXJ0aW5nIC0wIGtleSB0byArMFxuICAgIGlmKGJ1Z2d5WmVybyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICAvLyArIGZpeCAuYWRkICYgLnNldCBmb3IgY2hhaW5pbmdcbiAgICBpZihidWdneVplcm8gfHwgY2hhaW4gIT09IGluc3QpZml4TWV0aG9kKEFEREVSKTtcbiAgfVxuXG4gIHJlcXVpcmUoJy4vJC5jb2YnKS5zZXQoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRkZWYoJGRlZi5HICsgJGRlZi5XICsgJGRlZi5GICogKEMgIT0gQmFzZSksIE8pO1xuICBzcGVjaWVzKEMpO1xuICBzcGVjaWVzKCQuY29yZVtOQU1FXSk7IC8vIGZvciB3cmFwcGVyXG5cbiAgaWYoIUlTX1dFQUspY29tbW9uLnNldEl0ZXIoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07IiwiLy8gT3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYXNzZXJ0RnVuY3Rpb24gPSByZXF1aXJlKCcuLyQuYXNzZXJ0JykuZm47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhc3NlcnRGdW5jdGlvbihmbik7XG4gIGlmKH5sZW5ndGggJiYgdGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH0gcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn07IiwidmFyICQgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGdsb2JhbCAgICAgPSAkLmdcbiAgLCBjb3JlICAgICAgID0gJC5jb3JlXG4gICwgaXNGdW5jdGlvbiA9ICQuaXNGdW5jdGlvblxuICAsICRyZWRlZiAgICAgPSByZXF1aXJlKCcuLyQucmVkZWYnKTtcbmZ1bmN0aW9uIGN0eChmbiwgdGhhdCl7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufVxuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRkZWYuRiA9IDE7ICAvLyBmb3JjZWRcbiRkZWYuRyA9IDI7ICAvLyBnbG9iYWxcbiRkZWYuUyA9IDQ7ICAvLyBzdGF0aWNcbiRkZWYuUCA9IDg7ICAvLyBwcm90b1xuJGRlZi5CID0gMTY7IC8vIGJpbmRcbiRkZWYuVyA9IDMyOyAvLyB3cmFwXG5mdW5jdGlvbiAkZGVmKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHBcbiAgICAsIGlzR2xvYmFsID0gdHlwZSAmICRkZWYuR1xuICAgICwgaXNQcm90byAgPSB0eXBlICYgJGRlZi5QXG4gICAgLCB0YXJnZXQgICA9IGlzR2xvYmFsID8gZ2xvYmFsIDogdHlwZSAmICRkZWYuU1xuICAgICAgICA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pLnByb3RvdHlwZVxuICAgICwgZXhwb3J0cyAgPSBpc0dsb2JhbCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICBpZihpc0dsb2JhbClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gISh0eXBlICYgJGRlZi5GKSAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBpZih0eXBlICYgJGRlZi5CICYmIG93billeHAgPSBjdHgob3V0LCBnbG9iYWwpO1xuICAgIGVsc2UgZXhwID0gaXNQcm90byAmJiBpc0Z1bmN0aW9uKG91dCkgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYodGFyZ2V0ICYmICFvd24pJHJlZGVmKHRhcmdldCwga2V5LCBvdXQpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmKGV4cG9ydHNba2V5XSAhPSBvdXQpJC5oaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZihpc1Byb3RvKShleHBvcnRzLnByb3RvdHlwZSB8fCAoZXhwb3J0cy5wcm90b3R5cGUgPSB7fSkpW2tleV0gPSBvdXQ7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gJGRlZjsiLCJ2YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGRvY3VtZW50ID0gJC5nLmRvY3VtZW50XG4gICwgaXNPYmplY3QgPSAkLmlzT2JqZWN0XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59OyIsInZhciAkID0gcmVxdWlyZSgnLi8kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGtleXMgICAgICAgPSAkLmdldEtleXMoaXQpXG4gICAgLCBnZXREZXNjICAgID0gJC5nZXREZXNjXG4gICAgLCBnZXRTeW1ib2xzID0gJC5nZXRTeW1ib2xzO1xuICBpZihnZXRTeW1ib2xzKSQuZWFjaC5jYWxsKGdldFN5bWJvbHMoaXQpLCBmdW5jdGlvbihrZXkpe1xuICAgIGlmKGdldERlc2MoaXQsIGtleSkuZW51bWVyYWJsZSlrZXlzLnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufTsiLCJ2YXIgY3R4ICA9IHJlcXVpcmUoJy4vJC5jdHgnKVxuICAsIGdldCAgPSByZXF1aXJlKCcuLyQuaXRlcicpLmdldFxuICAsIGNhbGwgPSByZXF1aXJlKCcuLyQuaXRlci1jYWxsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCl7XG4gIHZhciBpdGVyYXRvciA9IGdldChpdGVyYWJsZSlcbiAgICAsIGYgICAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBzdGVwO1xuICB3aGlsZSghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpe1xuICAgIGlmKGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpID09PSBmYWxzZSl7XG4gICAgICByZXR1cm4gY2FsbC5jbG9zZShpdGVyYXRvcik7XG4gICAgfVxuICB9XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oJCl7XG4gICQuRlcgICA9IHRydWU7XG4gICQucGF0aCA9ICQuZztcbiAgcmV0dXJuICQ7XG59OyIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcclxudmFyICQgPSByZXF1aXJlKCcuLyQnKVxyXG4gICwgdG9TdHJpbmcgPSB7fS50b1N0cmluZ1xyXG4gICwgZ2V0TmFtZXMgPSAkLmdldE5hbWVzO1xyXG5cclxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xyXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xyXG5cclxuZnVuY3Rpb24gZ2V0V2luZG93TmFtZXMoaXQpe1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gZ2V0TmFtZXMoaXQpO1xyXG4gIH0gY2F0Y2goZSl7XHJcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLmdldCA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xyXG4gIGlmKHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nKXJldHVybiBnZXRXaW5kb3dOYW1lcyhpdCk7XHJcbiAgcmV0dXJuIGdldE5hbWVzKCQudG9PYmplY3QoaXQpKTtcclxufTsiLCIvLyBGYXN0IGFwcGx5XG4vLyBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpe1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgY2FzZSA1OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTsiLCJ2YXIgYXNzZXJ0T2JqZWN0ID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpLm9iajtcbmZ1bmN0aW9uIGNsb3NlKGl0ZXJhdG9yKXtcbiAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgaWYocmV0ICE9PSB1bmRlZmluZWQpYXNzZXJ0T2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG59XG5mdW5jdGlvbiBjYWxsKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYXNzZXJ0T2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoKGUpe1xuICAgIGNsb3NlKGl0ZXJhdG9yKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5jYWxsLmNsb3NlID0gY2xvc2U7XG5tb2R1bGUuZXhwb3J0cyA9IGNhbGw7IiwidmFyICRkZWYgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRyZWRlZiAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5yZWRlZicpXG4gICwgJCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkaXRlciAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuaXRlcicpXG4gICwgU1lNQk9MX0lURVJBVE9SID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgRkZfSVRFUkFUT1IgICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgID0gJ3ZhbHVlcydcbiAgLCBJdGVyYXRvcnMgICAgICAgPSAkaXRlci5JdGVyYXRvcnM7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFKXtcbiAgJGl0ZXIuY3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgZnVuY3Rpb24gY3JlYXRlTWV0aG9kKGtpbmQpe1xuICAgIGZ1bmN0aW9uICQkKHRoYXQpe1xuICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGF0LCBraW5kKTtcbiAgICB9XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gJCQodGhpcyk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJCQodGhpcyk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gJCQodGhpcyk7IH07XG4gIH1cbiAgdmFyIFRBRyAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBwcm90byAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCBfbmF0aXZlICA9IHByb3RvW1NZTUJPTF9JVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsIF9kZWZhdWx0ID0gX25hdGl2ZSB8fCBjcmVhdGVNZXRob2QoREVGQVVMVClcbiAgICAsIG1ldGhvZHMsIGtleTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZihfbmF0aXZlKXtcbiAgICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSAkLmdldFByb3RvKF9kZWZhdWx0LmNhbGwobmV3IEJhc2UpKTtcbiAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgY29mLnNldChJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAvLyBGRiBmaXhcbiAgICBpZigkLkZXICYmICQuaGFzKHByb3RvLCBGRl9JVEVSQVRPUikpJGl0ZXIuc2V0KEl0ZXJhdG9yUHJvdG90eXBlLCAkLnRoYXQpO1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigkLkZXIHx8IEZPUkNFKSRpdGVyLnNldChwcm90bywgX2RlZmF1bHQpO1xuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IF9kZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSAkLnRoYXQ7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgICAgICAgICA/IF9kZWZhdWx0IDogY3JlYXRlTWV0aG9kKEtFWVMpLFxuICAgICAgdmFsdWVzOiAgREVGQVVMVCA9PSBWQUxVRVMgPyBfZGVmYXVsdCA6IGNyZWF0ZU1ldGhvZChWQUxVRVMpLFxuICAgICAgZW50cmllczogREVGQVVMVCAhPSBWQUxVRVMgPyBfZGVmYXVsdCA6IGNyZWF0ZU1ldGhvZCgnZW50cmllcycpXG4gICAgfTtcbiAgICBpZihGT1JDRSlmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKSRyZWRlZihwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZGVmKCRkZWYuUCArICRkZWYuRiAqICRpdGVyLkJVR0dZLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxufTsiLCJ2YXIgU1lNQk9MX0lURVJBVE9SID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HICAgID0gZmFsc2U7XG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bU1lNQk9MX0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIGlmKCFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgID0gWzddXG4gICAgICAsIGl0ZXIgPSBhcnJbU1lNQk9MX0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHNhZmUgPSB0cnVlOyB9O1xuICAgIGFycltTWU1CT0xfSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNvZiAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgY2xhc3NvZiAgICAgICAgICAgPSBjb2YuY2xhc3NvZlxuICAsIGFzc2VydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgYXNzZXJ0T2JqZWN0ICAgICAgPSBhc3NlcnQub2JqXG4gICwgU1lNQk9MX0lURVJBVE9SICAgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBGRl9JVEVSQVRPUiAgICAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEl0ZXJhdG9ycyAgICAgICAgID0gcmVxdWlyZSgnLi8kLnNoYXJlZCcpKCdpdGVyYXRvcnMnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuc2V0SXRlcmF0b3IoSXRlcmF0b3JQcm90b3R5cGUsICQudGhhdCk7XG5mdW5jdGlvbiBzZXRJdGVyYXRvcihPLCB2YWx1ZSl7XG4gICQuaGlkZShPLCBTWU1CT0xfSVRFUkFUT1IsIHZhbHVlKTtcbiAgLy8gQWRkIGl0ZXJhdG9yIGZvciBGRiBpdGVyYXRvciBwcm90b2NvbFxuICBpZihGRl9JVEVSQVRPUiBpbiBbXSkkLmhpZGUoTywgRkZfSVRFUkFUT1IsIHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgQlVHR1k6ICdrZXlzJyBpbiBbXSAmJiAhKCduZXh0JyBpbiBbXS5rZXlzKCkpLFxuICBJdGVyYXRvcnM6IEl0ZXJhdG9ycyxcbiAgc3RlcDogZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICAgIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xuICB9LFxuICBpczogZnVuY3Rpb24oaXQpe1xuICAgIHZhciBPICAgICAgPSBPYmplY3QoaXQpXG4gICAgICAsIFN5bWJvbCA9ICQuZy5TeW1ib2w7XG4gICAgcmV0dXJuIChTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IEZGX0lURVJBVE9SKSBpbiBPXG4gICAgICB8fCBTWU1CT0xfSVRFUkFUT1IgaW4gT1xuICAgICAgfHwgJC5oYXMoSXRlcmF0b3JzLCBjbGFzc29mKE8pKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihpdCl7XG4gICAgdmFyIFN5bWJvbCA9ICQuZy5TeW1ib2xcbiAgICAgICwgZ2V0SXRlcjtcbiAgICBpZihpdCAhPSB1bmRlZmluZWQpe1xuICAgICAgZ2V0SXRlciA9IGl0W1N5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3IgfHwgRkZfSVRFUkFUT1JdXG4gICAgICAgIHx8IGl0W1NZTUJPTF9JVEVSQVRPUl1cbiAgICAgICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbiAgICB9XG4gICAgYXNzZXJ0KCQuaXNGdW5jdGlvbihnZXRJdGVyKSwgaXQsICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAgIHJldHVybiBhc3NlcnRPYmplY3QoZ2V0SXRlci5jYWxsKGl0KSk7XG4gIH0sXG4gIHNldDogc2V0SXRlcmF0b3IsXG4gIGNyZWF0ZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIHByb3RvKXtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAkLmNyZWF0ZShwcm90byB8fCBJdGVyYXRvclByb3RvdHlwZSwge25leHQ6ICQuZGVzYygxLCBuZXh0KX0pO1xuICAgIGNvZi5zZXQoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClcbiAgLCBjb3JlICAgPSB7fVxuICAsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICwgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eVxuICAsIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yXG4gICwgbWF4ICAgPSBNYXRoLm1heFxuICAsIG1pbiAgID0gTWF0aC5taW47XG4vLyBUaGUgZW5naW5lIHdvcmtzIGZpbmUgd2l0aCBkZXNjcmlwdG9ycz8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eS5cbnZhciBERVNDID0gISFmdW5jdGlvbigpe1xuICB0cnkge1xuICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gMjsgfX0pLmEgPT0gMjtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufSgpO1xudmFyIGhpZGUgPSBjcmVhdGVEZWZpbmVyKDEpO1xuLy8gNy4xLjQgVG9JbnRlZ2VyXG5mdW5jdGlvbiB0b0ludGVnZXIoaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn1cbmZ1bmN0aW9uIGRlc2MoYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gc2ltcGxlU2V0KG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59XG5mdW5jdGlvbiBjcmVhdGVEZWZpbmVyKGJpdG1hcCl7XG4gIHJldHVybiBERVNDID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gJC5zZXREZXNjKG9iamVjdCwga2V5LCBkZXNjKGJpdG1hcCwgdmFsdWUpKTtcbiAgfSA6IHNpbXBsZVNldDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoaXQpe1xuICByZXR1cm4gaXQgIT09IG51bGwgJiYgKHR5cGVvZiBpdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2YgaXQgPT0gJ2Z1bmN0aW9uJyk7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZChpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn1cblxudmFyICQgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5mdycpKHtcbiAgZzogZ2xvYmFsLFxuICBjb3JlOiBjb3JlLFxuICBodG1sOiBnbG9iYWwuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9jb3JlLWpzLWlzb2JqZWN0XG4gIGlzT2JqZWN0OiAgIGlzT2JqZWN0LFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICB0aGF0OiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvLyA3LjEuNCBUb0ludGVnZXJcbiAgdG9JbnRlZ2VyOiB0b0ludGVnZXIsXG4gIC8vIDcuMS4xNSBUb0xlbmd0aFxuICB0b0xlbmd0aDogZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG4gIH0sXG4gIHRvSW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICAgIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbihpdCwga2V5KXtcbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbiAgfSxcbiAgY3JlYXRlOiAgICAgT2JqZWN0LmNyZWF0ZSxcbiAgZ2V0UHJvdG86ICAgT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICBERVNDOiAgICAgICBERVNDLFxuICBkZXNjOiAgICAgICBkZXNjLFxuICBnZXREZXNjOiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICBzZXREZXNjOiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgc2V0RGVzY3M6ICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXG4gIGdldEtleXM6ICAgIE9iamVjdC5rZXlzLFxuICBnZXROYW1lczogICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgZ2V0U3ltYm9sczogT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgYXNzZXJ0RGVmaW5lZDogYXNzZXJ0RGVmaW5lZCxcbiAgLy8gRHVtbXksIGZpeCBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZyBpbiBlczUgbW9kdWxlXG4gIEVTNU9iamVjdDogT2JqZWN0LFxuICB0b09iamVjdDogZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiAkLkVTNU9iamVjdChhc3NlcnREZWZpbmVkKGl0KSk7XG4gIH0sXG4gIGhpZGU6IGhpZGUsXG4gIGRlZjogY3JlYXRlRGVmaW5lcigwKSxcbiAgc2V0OiBnbG9iYWwuU3ltYm9sID8gc2ltcGxlU2V0IDogaGlkZSxcbiAgZWFjaDogW10uZm9yRWFjaFxufSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuaWYodHlwZW9mIF9fZSAhPSAndW5kZWZpbmVkJylfX2UgPSBjb3JlO1xuaWYodHlwZW9mIF9fZyAhPSAndW5kZWZpbmVkJylfX2cgPSBnbG9iYWw7IiwidmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG4gIHZhciBPICAgICAgPSAkLnRvT2JqZWN0KG9iamVjdClcbiAgICAsIGtleXMgICA9ICQuZ2V0S2V5cyhPKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTtcbn07IiwidmFyICRyZWRlZiA9IHJlcXVpcmUoJy4vJC5yZWRlZicpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjKXtcclxuICBmb3IodmFyIGtleSBpbiBzcmMpJHJlZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XHJcbiAgcmV0dXJuIHRhcmdldDtcclxufTsiLCJ2YXIgJCAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBhc3NlcnRPYmplY3QgPSByZXF1aXJlKCcuLyQuYXNzZXJ0Jykub2JqO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvd25LZXlzKGl0KXtcbiAgYXNzZXJ0T2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgICAgICAgPSAkLmdldE5hbWVzKGl0KVxuICAgICwgZ2V0U3ltYm9scyA9ICQuZ2V0U3ltYm9scztcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBpbnZva2UgPSByZXF1aXJlKCcuLyQuaW52b2tlJylcbiAgLCBhc3NlcnRGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5mbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oLyogLi4ucGFyZ3MgKi8pe1xuICB2YXIgZm4gICAgID0gYXNzZXJ0RnVuY3Rpb24odGhpcylcbiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIHBhcmdzICA9IEFycmF5KGxlbmd0aClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIF8gICAgICA9ICQucGF0aC5fXG4gICAgLCBob2xkZXIgPSBmYWxzZTtcbiAgd2hpbGUobGVuZ3RoID4gaSlpZigocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8paG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciB0aGF0ICAgID0gdGhpc1xuICAgICAgLCBfbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7XG4gICAgaWYoIWhvbGRlciAmJiAhX2xlbmd0aClyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlKF9sZW5ndGggPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7XG4gICAgcmV0dXJuIGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG59OyIsInZhciAkICAgPSByZXF1aXJlKCcuLyQnKVxyXG4gICwgdHBsID0gU3RyaW5nKHt9Lmhhc093blByb3BlcnR5KVxyXG4gICwgU1JDID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ3NyYycpXHJcbiAgLCBfdG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcclxuXHJcbmZ1bmN0aW9uICRyZWRlZihPLCBrZXksIHZhbCwgc2FmZSl7XHJcbiAgaWYoJC5pc0Z1bmN0aW9uKHZhbCkpe1xyXG4gICAgdmFyIGJhc2UgPSBPW2tleV07XHJcbiAgICAkLmhpZGUodmFsLCBTUkMsIGJhc2UgPyBTdHJpbmcoYmFzZSkgOiB0cGwucmVwbGFjZSgvaGFzT3duUHJvcGVydHkvLCBTdHJpbmcoa2V5KSkpO1xyXG4gICAgaWYoISgnbmFtZScgaW4gdmFsKSl2YWwubmFtZSA9IGtleTtcclxuICB9XHJcbiAgaWYoTyA9PT0gJC5nKXtcclxuICAgIE9ba2V5XSA9IHZhbDtcclxuICB9IGVsc2Uge1xyXG4gICAgaWYoIXNhZmUpZGVsZXRlIE9ba2V5XTtcclxuICAgICQuaGlkZShPLCBrZXksIHZhbCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9yc1xyXG4vLyB3aXRoIG1ldGhvZHMgc2ltaWxhciB0byBMb0Rhc2ggaXNOYXRpdmVcclxuJHJlZGVmKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcclxuICByZXR1cm4gJC5oYXModGhpcywgU1JDKSA/IHRoaXNbU1JDXSA6IF90b1N0cmluZy5jYWxsKHRoaXMpO1xyXG59KTtcclxuXHJcbiQuY29yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24oaXQpe1xyXG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChpdCk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICRyZWRlZjsiLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlZ0V4cCwgcmVwbGFjZSwgaXNTdGF0aWMpe1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbihwYXJ0KXtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIFN0cmluZyhpc1N0YXRpYyA/IGl0IDogdGhpcykucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSl7XHJcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XHJcbn07IiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyICQgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgYXNzZXJ0ID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpO1xuZnVuY3Rpb24gY2hlY2soTywgcHJvdG8pe1xuICBhc3NlcnQub2JqKE8pO1xuICBhc3NlcnQocHJvdG8gPT09IG51bGwgfHwgJC5pc09iamVjdChwcm90byksIHByb3RvLCBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICA/IGZ1bmN0aW9uKGJ1Z2d5LCBzZXQpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldCA9IHJlcXVpcmUoJy4vJC5jdHgnKShGdW5jdGlvbi5jYWxsLCAkLmdldERlc2MoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgICAgc2V0KHt9LCBbXSk7XG4gICAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgICByZXR1cm4gTztcbiAgICAgICAgfTtcbiAgICAgIH0oKVxuICAgIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59OyIsInZhciAkICAgICAgPSByZXF1aXJlKCcuLyQnKVxyXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcclxuICAsIHN0b3JlICA9ICQuZ1tTSEFSRURdIHx8ICgkLmdbU0hBUkVEXSA9IHt9KTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xyXG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xyXG59OyIsInZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBTUEVDSUVTID0gcmVxdWlyZSgnLi8kLndrcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEMpe1xuICBpZigkLkRFU0MgJiYgIShTUEVDSUVTIGluIEMpKSQuc2V0RGVzYyhDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogJC50aGF0XG4gIH0pO1xufTsiLCIvLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxudmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoJC5hc3NlcnREZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gJC50b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbFxuICAgICAgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTsiLCIvLyBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1zdHJhd21hbjpzdHJpbmdfcGFkZGluZ1xudmFyICQgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgcmVwZWF0ID0gcmVxdWlyZSgnLi8kLnN0cmluZy1yZXBlYXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBtaW5MZW5ndGgsIGZpbGxDaGFyLCBsZWZ0KXtcbiAgLy8gMS4gTGV0IE8gYmUgQ2hlY2tPYmplY3RDb2VyY2libGUodGhpcyB2YWx1ZSkuXG4gIC8vIDIuIExldCBTIGJlIFRvU3RyaW5nKE8pLlxuICB2YXIgUyA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhhdCkpO1xuICAvLyA0LiBJZiBpbnRNaW5MZW5ndGggaXMgdW5kZWZpbmVkLCByZXR1cm4gUy5cbiAgaWYobWluTGVuZ3RoID09PSB1bmRlZmluZWQpcmV0dXJuIFM7XG4gIC8vIDQuIExldCBpbnRNaW5MZW5ndGggYmUgVG9JbnRlZ2VyKG1pbkxlbmd0aCkuXG4gIHZhciBpbnRNaW5MZW5ndGggPSAkLnRvSW50ZWdlcihtaW5MZW5ndGgpO1xuICAvLyA1LiBMZXQgZmlsbExlbiBiZSB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gUyBtaW51cyBpbnRNaW5MZW5ndGguXG4gIHZhciBmaWxsTGVuID0gaW50TWluTGVuZ3RoIC0gUy5sZW5ndGg7XG4gIC8vIDYuIElmIGZpbGxMZW4gPCAwLCB0aGVuIHRocm93IGEgUmFuZ2VFcnJvciBleGNlcHRpb24uXG4gIC8vIDcuIElmIGZpbGxMZW4gaXMgK+KIniwgdGhlbiB0aHJvdyBhIFJhbmdlRXJyb3IgZXhjZXB0aW9uLlxuICBpZihmaWxsTGVuIDwgMCB8fCBmaWxsTGVuID09PSBJbmZpbml0eSl7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Nhbm5vdCBzYXRpc2Z5IHN0cmluZyBsZW5ndGggJyArIG1pbkxlbmd0aCArICcgZm9yIHN0cmluZzogJyArIFMpO1xuICB9XG4gIC8vIDguIExldCBzRmlsbFN0ciBiZSB0aGUgc3RyaW5nIHJlcHJlc2VudGVkIGJ5IGZpbGxTdHIuXG4gIC8vIDkuIElmIHNGaWxsU3RyIGlzIHVuZGVmaW5lZCwgbGV0IHNGaWxsU3RyIGJlIGEgc3BhY2UgY2hhcmFjdGVyLlxuICB2YXIgc0ZpbGxTdHIgPSBmaWxsQ2hhciA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxDaGFyKTtcbiAgLy8gMTAuIExldCBzRmlsbFZhbCBiZSBhIFN0cmluZyBtYWRlIG9mIHNGaWxsU3RyLCByZXBlYXRlZCB1bnRpbCBmaWxsTGVuIGlzIG1ldC5cbiAgdmFyIHNGaWxsVmFsID0gcmVwZWF0LmNhbGwoc0ZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gc0ZpbGxTdHIubGVuZ3RoKSk7XG4gIC8vIHRydW5jYXRlIGlmIHdlIG92ZXJmbG93ZWRcbiAgaWYoc0ZpbGxWYWwubGVuZ3RoID4gZmlsbExlbilzRmlsbFZhbCA9IGxlZnRcbiAgICA/IHNGaWxsVmFsLnNsaWNlKHNGaWxsVmFsLmxlbmd0aCAtIGZpbGxMZW4pXG4gICAgOiBzRmlsbFZhbC5zbGljZSgwLCBmaWxsTGVuKTtcbiAgLy8gMTEuIFJldHVybiBhIHN0cmluZyBtYWRlIGZyb20gc0ZpbGxWYWwsIGZvbGxvd2VkIGJ5IFMuXG4gIC8vIDExLiBSZXR1cm4gYSBTdHJpbmcgbWFkZSBmcm9tIFMsIGZvbGxvd2VkIGJ5IHNGaWxsVmFsLlxuICByZXR1cm4gbGVmdCA/IHNGaWxsVmFsLmNvbmNhdChTKSA6IFMuY29uY2F0KHNGaWxsVmFsKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLyQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSlcbiAgICAsIHJlcyA9ICcnXG4gICAgLCBuICAgPSAkLnRvSW50ZWdlcihjb3VudCk7XG4gIGlmKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSlpZihuICYgMSlyZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjdHggICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCBjb2YgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCBpbnZva2UgPSByZXF1aXJlKCcuLyQuaW52b2tlJylcbiAgLCBjZWwgICAgPSByZXF1aXJlKCcuLyQuZG9tLWNyZWF0ZScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gJC5nXG4gICwgaXNGdW5jdGlvbiAgICAgICAgID0gJC5pc0Z1bmN0aW9uXG4gICwgaHRtbCAgICAgICAgICAgICAgID0gJC5odG1sXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbmZ1bmN0aW9uIHJ1bigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYoJC5oYXMocXVldWUsIGlkKSl7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufVxuZnVuY3Rpb24gbGlzdG5lcihldmVudCl7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufVxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYoIWlzRnVuY3Rpb24oc2V0VGFzaykgfHwgIWlzRnVuY3Rpb24oY2xlYXJUYXNrKSl7XG4gIHNldFRhc2sgPSBmdW5jdGlvbihmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZShpc0Z1bmN0aW9uKGZuKSA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbihpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKGNvZihwcm9jZXNzKSA9PSAncHJvY2Vzcycpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIE1vZGVybiBicm93c2Vycywgc2tpcCBpbXBsZW1lbnRhdGlvbiBmb3IgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyBvYmplY3RcbiAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIGlzRnVuY3Rpb24oZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0bmVyLCBmYWxzZSk7XG4gIC8vIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmKGlzRnVuY3Rpb24oTWVzc2FnZUNoYW5uZWwpKXtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsO1xuICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdG5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0Jykpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6ICAgc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIGV4ZWMoKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwidmFyIHNpZCA9IDA7XG5mdW5jdGlvbiB1aWQoa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsrc2lkICsgTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMzYpKTtcbn1cbnVpZC5zYWZlID0gcmVxdWlyZSgnLi8kJykuZy5TeW1ib2wgfHwgdWlkO1xubW9kdWxlLmV4cG9ydHMgPSB1aWQ7IiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi8kLndrcycpKCd1bnNjb3BhYmxlcycpO1xuaWYoIShVTlNDT1BBQkxFUyBpbiBbXSkpcmVxdWlyZSgnLi8kJykuaGlkZShBcnJheS5wcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIFtdW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vJCcpLmdcbiAgLCBzdG9yZSAgPSByZXF1aXJlKCcuLyQuc2hhcmVkJykoJ3drcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgZ2xvYmFsLlN5bWJvbCAmJiBnbG9iYWwuU3ltYm9sW25hbWVdIHx8IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07IiwidmFyICQgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNlbCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuZG9tLWNyZWF0ZScpXG4gICwgY29mICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRkZWYgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBpbnZva2UgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmludm9rZScpXG4gICwgYXJyYXlNZXRob2QgICAgICA9IHJlcXVpcmUoJy4vJC5hcnJheS1tZXRob2RzJylcbiAgLCBJRV9QUk9UTyAgICAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ19fcHJvdG9fXycpXG4gICwgYXNzZXJ0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKVxuICAsIGFzc2VydE9iamVjdCAgICAgPSBhc3NlcnQub2JqXG4gICwgT2JqZWN0UHJvdG8gICAgICA9IE9iamVjdC5wcm90b3R5cGVcbiAgLCBodG1sICAgICAgICAgICAgID0gJC5odG1sXG4gICwgQSAgICAgICAgICAgICAgICA9IFtdXG4gICwgX3NsaWNlICAgICAgICAgICA9IEEuc2xpY2VcbiAgLCBfam9pbiAgICAgICAgICAgID0gQS5qb2luXG4gICwgY2xhc3NvZiAgICAgICAgICA9IGNvZi5jbGFzc29mXG4gICwgaGFzICAgICAgICAgICAgICA9ICQuaGFzXG4gICwgZGVmaW5lUHJvcGVydHkgICA9ICQuc2V0RGVzY1xuICAsIGdldE93bkRlc2NyaXB0b3IgPSAkLmdldERlc2NcbiAgLCBkZWZpbmVQcm9wZXJ0aWVzID0gJC5zZXREZXNjc1xuICAsIGlzRnVuY3Rpb24gICAgICAgPSAkLmlzRnVuY3Rpb25cbiAgLCBpc09iamVjdCAgICAgICAgID0gJC5pc09iamVjdFxuICAsIHRvT2JqZWN0ICAgICAgICAgPSAkLnRvT2JqZWN0XG4gICwgdG9MZW5ndGggICAgICAgICA9ICQudG9MZW5ndGhcbiAgLCB0b0luZGV4ICAgICAgICAgID0gJC50b0luZGV4XG4gICwgSUU4X0RPTV9ERUZJTkUgICA9IGZhbHNlXG4gICwgJGluZGV4T2YgICAgICAgICA9IHJlcXVpcmUoJy4vJC5hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsICRmb3JFYWNoICAgICAgICAgPSBhcnJheU1ldGhvZCgwKVxuICAsICRtYXAgICAgICAgICAgICAgPSBhcnJheU1ldGhvZCgxKVxuICAsICRmaWx0ZXIgICAgICAgICAgPSBhcnJheU1ldGhvZCgyKVxuICAsICRzb21lICAgICAgICAgICAgPSBhcnJheU1ldGhvZCgzKVxuICAsICRldmVyeSAgICAgICAgICAgPSBhcnJheU1ldGhvZCg0KTtcblxuaWYoISQuREVTQyl7XG4gIHRyeSB7XG4gICAgSUU4X0RPTV9ERUZJTkUgPSBkZWZpbmVQcm9wZXJ0eShjZWwoJ2RpdicpLCAneCcsXG4gICAgICB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gODsgfX1cbiAgICApLnggPT0gODtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICAkLnNldERlc2MgPSBmdW5jdGlvbihPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICAgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpYXNzZXJ0T2JqZWN0KE8pW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICByZXR1cm4gTztcbiAgfTtcbiAgJC5nZXREZXNjID0gZnVuY3Rpb24oTywgUCl7XG4gICAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICAgIHJldHVybiBnZXRPd25EZXNjcmlwdG9yKE8sIFApO1xuICAgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgICBpZihoYXMoTywgUCkpcmV0dXJuICQuZGVzYyghT2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChPLCBQKSwgT1tQXSk7XG4gIH07XG4gICQuc2V0RGVzY3MgPSBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24oTywgUHJvcGVydGllcyl7XG4gICAgYXNzZXJ0T2JqZWN0KE8pO1xuICAgIHZhciBrZXlzICAgPSAkLmdldEtleXMoUHJvcGVydGllcylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSA9IDBcbiAgICAgICwgUDtcbiAgICB3aGlsZShsZW5ndGggPiBpKSQuc2V0RGVzYyhPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgICByZXR1cm4gTztcbiAgfTtcbn1cbiRkZWYoJGRlZi5TICsgJGRlZi5GICogISQuREVTQywgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjYgLyAxNS4yLjMuMyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJC5nZXREZXNjLFxuICAvLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJC5zZXREZXNjLFxuICAvLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuXG4gIC8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbnZhciBrZXlzMSA9ICgnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSwnICtcbiAgICAgICAgICAgICd0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJykuc3BsaXQoJywnKVxuICAvLyBBZGRpdGlvbmFsIGtleXMgZm9yIGdldE93blByb3BlcnR5TmFtZXNcbiAgLCBrZXlzMiA9IGtleXMxLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpXG4gICwga2V5c0xlbjEgPSBrZXlzMS5sZW5ndGg7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBjZWwoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBrZXlzTGVuMVxuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoJzxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8L3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3QucHJvdG90eXBlW2tleXMxW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVHZXRLZXlzKG5hbWVzLCBsZW5ndGgpe1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3Qob2JqZWN0KVxuICAgICAgLCBpICAgICAgPSAwXG4gICAgICAsIHJlc3VsdCA9IFtdXG4gICAgICAsIGtleTtcbiAgICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICAgIHdoaWxlKGxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICAgIH4kaW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbmZ1bmN0aW9uIEVtcHR5KCl7fVxuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG4gIGdldFByb3RvdHlwZU9mOiAkLmdldFByb3RvID0gJC5nZXRQcm90byB8fCBmdW5jdGlvbihPKXtcbiAgICBPID0gT2JqZWN0KGFzc2VydC5kZWYoTykpO1xuICAgIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICAgIGlmKGlzRnVuY3Rpb24oTy5jb25zdHJ1Y3RvcikgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG4gIH0sXG4gIC8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJC5nZXROYW1lcyA9ICQuZ2V0TmFtZXMgfHwgY3JlYXRlR2V0S2V5cyhrZXlzMiwga2V5czIubGVuZ3RoLCB0cnVlKSxcbiAgLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJC5jcmVhdGUgPSAkLmNyZWF0ZSB8fCBmdW5jdGlvbihPLCAvKj8qL1Byb3BlcnRpZXMpe1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYoTyAhPT0gbnVsbCl7XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSBhc3NlcnRPYmplY3QoTyk7XG4gICAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHNoaW1cbiAgICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICAgIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gICAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbiAgfSxcbiAgLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG4gIGtleXM6ICQuZ2V0S2V5cyA9ICQuZ2V0S2V5cyB8fCBjcmVhdGVHZXRLZXlzKGtleXMxLCBrZXlzTGVuMSwgZmFsc2UpLFxuICAvLyAxOS4xLjIuMTcgLyAxNS4yLjMuOCBPYmplY3Quc2VhbChPKVxuICBzZWFsOiBmdW5jdGlvbiBzZWFsKGl0KXtcbiAgICByZXR1cm4gaXQ7IC8vIDwtIGNhcFxuICB9LFxuICAvLyAxOS4xLjIuNSAvIDE1LjIuMy45IE9iamVjdC5mcmVlemUoTylcbiAgZnJlZXplOiBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiBpdDsgLy8gPC0gY2FwXG4gIH0sXG4gIC8vIDE5LjEuMi4xNSAvIDE1LjIuMy4xMCBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gaXQ7IC8vIDwtIGNhcFxuICB9LFxuICAvLyAxOS4xLjIuMTMgLyAxNS4yLjMuMTEgT2JqZWN0LmlzU2VhbGVkKE8pXG4gIGlzU2VhbGVkOiBmdW5jdGlvbiBpc1NlYWxlZChpdCl7XG4gICAgcmV0dXJuICFpc09iamVjdChpdCk7IC8vIDwtIGNhcFxuICB9LFxuICAvLyAxOS4xLjIuMTIgLyAxNS4yLjMuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG4gIGlzRnJvemVuOiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuICFpc09iamVjdChpdCk7IC8vIDwtIGNhcFxuICB9LFxuICAvLyAxOS4xLjIuMTEgLyAxNS4yLjMuMTMgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KTsgLy8gPC0gY2FwXG4gIH1cbn0pO1xuXG4vLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG4kZGVmKCRkZWYuUCwgJ0Z1bmN0aW9uJywge1xuICBiaW5kOiBmdW5jdGlvbih0aGF0IC8qLCBhcmdzLi4uICovKXtcbiAgICB2YXIgZm4gICAgICAgPSBhc3NlcnQuZm4odGhpcylcbiAgICAgICwgcGFydEFyZ3MgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pe1xuICAgICAgdmFyIGFyZ3MgICA9IHBhcnRBcmdzLmNvbmNhdChfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAsIGNvbnN0ciA9IHRoaXMgaW5zdGFuY2VvZiBib3VuZFxuICAgICAgICAsIGN0eCAgICA9IGNvbnN0ciA/ICQuY3JlYXRlKGZuLnByb3RvdHlwZSkgOiB0aGF0XG4gICAgICAgICwgcmVzdWx0ID0gaW52b2tlKGZuLCBhcmdzLCBjdHgpO1xuICAgICAgcmV0dXJuIGNvbnN0ciA/IGN0eCA6IHJlc3VsdDtcbiAgICB9XG4gICAgaWYoZm4ucHJvdG90eXBlKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH1cbn0pO1xuXG4vLyBGaXggZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmcgYW5kIERPTSBvYmplY3RzXG5pZighKDAgaW4gT2JqZWN0KCd6JykgJiYgJ3onWzBdID09ICd6Jykpe1xuICAkLkVTNU9iamVjdCA9IGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG4gIH07XG59XG5cbnZhciBidWdneVNsaWNlID0gdHJ1ZTtcbnRyeSB7XG4gIGlmKGh0bWwpX3NsaWNlLmNhbGwoaHRtbCk7XG4gIGJ1Z2d5U2xpY2UgPSBmYWxzZTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBidWdneVNsaWNlLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXtcbiAgICB2YXIgbGVuICAgPSB0b0xlbmd0aCh0aGlzLmxlbmd0aClcbiAgICAgICwga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYoa2xhc3MgPT0gJ0FycmF5JylyZXR1cm4gX3NsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ICA9IHRvSW5kZXgoYmVnaW4sIGxlbilcbiAgICAgICwgdXBUbyAgID0gdG9JbmRleChlbmQsIGxlbilcbiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KVxuICAgICAgLCBjbG9uZWQgPSBBcnJheShzaXplKVxuICAgICAgLCBpICAgICAgPSAwO1xuICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG5cbiRkZWYoJGRlZi5QICsgJGRlZi5GICogKCQuRVM1T2JqZWN0ICE9IE9iamVjdCksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbigpe1xuICAgIHJldHVybiBfam9pbi5hcHBseSgkLkVTNU9iamVjdCh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfVxufSk7XG5cbi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG4kZGVmKCRkZWYuUywgJ0FycmF5Jywge1xuICBpc0FycmF5OiBmdW5jdGlvbihhcmcpe1xuICAgIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xuICB9XG59KTtcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5UmVkdWNlKGlzUmlnaHQpe1xuICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2tmbiwgbWVtbyl7XG4gICAgYXNzZXJ0LmZuKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwXG4gICAgICAsIGkgICAgICA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA8IDIpZm9yKDs7KXtcbiAgICAgIGlmKGluZGV4IGluIE8pe1xuICAgICAgICBtZW1vID0gT1tpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGFzc2VydChpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4LCAnUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gTyl7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBPW2luZGV4XSwgaW5kZXgsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn1cbiRkZWYoJGRlZi5QLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiAkLmVhY2ggPSAkLmVhY2ggfHwgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9LFxuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9LFxuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9LFxuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9LFxuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogY3JlYXRlQXJyYXlSZWR1Y2UoZmFsc2UpLFxuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGNyZWF0ZUFycmF5UmVkdWNlKHRydWUpLFxuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gJGluZGV4T2YodGhpcywgZWwsIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24oZWwsIGZyb21JbmRleCAvKiA9IEBbKi0xXSAqLyl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSBsZW5ndGggLSAxO1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKWluZGV4ID0gTWF0aC5taW4oaW5kZXgsICQudG9JbnRlZ2VyKGZyb21JbmRleCkpO1xuICAgIGlmKGluZGV4IDwgMClpbmRleCA9IHRvTGVuZ3RoKGxlbmd0aCArIGluZGV4KTtcbiAgICBmb3IoO2luZGV4ID49IDA7IGluZGV4LS0paWYoaW5kZXggaW4gTylpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIGluZGV4O1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG5cbi8vIDIxLjEuMy4yNSAvIDE1LjUuNC4yMCBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7dHJpbTogcmVxdWlyZSgnLi8kLnJlcGxhY2VyJykoL15cXHMqKFtcXHNcXFNdKlxcUyk/XFxzKiQvLCAnJDEnKX0pO1xuXG4vLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbiRkZWYoJGRlZi5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCl7XG4gIHJldHVybiArbmV3IERhdGU7XG59fSk7XG5cbmZ1bmN0aW9uIGx6KG51bSl7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufVxuXG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxuLy8gUGhhbnRvbUpTIGFuZCBvbGQgd2Via2l0IGhhZCBhIGJyb2tlbiBEYXRlIGltcGxlbWVudGF0aW9uLlxudmFyIGRhdGUgICAgICAgPSBuZXcgRGF0ZSgtNWUxMyAtIDEpXG4gICwgYnJva2VuRGF0ZSA9ICEoZGF0ZS50b0lTT1N0cmluZyAmJiBkYXRlLnRvSVNPU3RyaW5nKCkgPT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5WidcbiAgICAgICYmIHJlcXVpcmUoJy4vJC50aHJvd3MnKShmdW5jdGlvbigpeyBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7IH0pKTtcbiRkZWYoJGRlZi5QICsgJGRlZi5GICogYnJva2VuRGF0ZSwgJ0RhdGUnLCB7dG9JU09TdHJpbmc6IGZ1bmN0aW9uKCl7XG4gIGlmKCFpc0Zpbml0ZSh0aGlzKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzXG4gICAgLCB5ID0gZC5nZXRVVENGdWxsWWVhcigpXG4gICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgICwgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn19KTtcblxuaWYoY2xhc3NvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdPYmplY3QnKWNvZi5jbGFzc29mID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgdGFnID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiB0YWcgPT0gJ09iamVjdCcgJiYgaXNGdW5jdGlvbihpdC5jYWxsZWUpID8gJ0FyZ3VtZW50cycgOiB0YWc7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgdG9JbmRleCA9ICQudG9JbmRleDtcbiRkZWYoJGRlZi5QLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKXtcbiAgICB2YXIgTyAgICAgPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKHRoaXMpKVxuICAgICAgLCBsZW4gICA9ICQudG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIHRvICAgID0gdG9JbmRleCh0YXJnZXQsIGxlbilcbiAgICAgICwgZnJvbSAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGVuZCAgID0gYXJndW1lbnRzWzJdXG4gICAgICAsIGZpbiAgID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0luZGV4KGVuZCwgbGVuKVxuICAgICAgLCBjb3VudCA9IE1hdGgubWluKGZpbiAtIGZyb20sIGxlbiAtIHRvKVxuICAgICAgLCBpbmMgICA9IDE7XG4gICAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXtcbiAgICAgIGluYyAgPSAtMTtcbiAgICAgIGZyb20gPSBmcm9tICsgY291bnQgLSAxO1xuICAgICAgdG8gICA9IHRvICAgKyBjb3VudCAtIDE7XG4gICAgfVxuICAgIHdoaWxlKGNvdW50LS0gPiAwKXtcbiAgICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07XG4gICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIHRvICAgKz0gaW5jO1xuICAgICAgZnJvbSArPSBpbmM7XG4gICAgfSByZXR1cm4gTztcbiAgfVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCdjb3B5V2l0aGluJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCB0b0luZGV4ID0gJC50b0luZGV4O1xuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4gIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLyl7XG4gICAgdmFyIE8gICAgICA9IE9iamVjdCgkLmFzc2VydERlZmluZWQodGhpcykpXG4gICAgICAsIGxlbmd0aCA9ICQudG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoYXJndW1lbnRzWzFdLCBsZW5ndGgpXG4gICAgICAsIGVuZCAgICA9IGFyZ3VtZW50c1syXVxuICAgICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpO1xuICAgIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTtcbiAgICByZXR1cm4gTztcbiAgfVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCdmaWxsJyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgS0VZICAgID0gJ2ZpbmRJbmRleCdcbiAgLCAkZGVmICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBmb3JjZWQgPSB0cnVlXG4gICwgJGZpbmQgID0gcmVxdWlyZSgnLi8kLmFycmF5LW1ldGhvZHMnKSg2KTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZGVmKCRkZWYuUCArICRkZWYuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vJC51bnNjb3BlJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgS0VZICAgID0gJ2ZpbmQnXG4gICwgJGRlZiAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgZm9yY2VkID0gdHJ1ZVxuICAsICRmaW5kICA9IHJlcXVpcmUoJy4vJC5hcnJheS1tZXRob2RzJykoNSk7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vJC51bnNjb3BlJykoS0VZKTsiLCJ2YXIgJCAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkaXRlciA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBjYWxsICA9IHJlcXVpcmUoJy4vJC5pdGVyLWNhbGwnKTtcbiRkZWYoJGRlZi5TICsgJGRlZi5GICogIXJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pe1xuICAgIHZhciBPICAgICAgID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZChhcnJheUxpa2UpKVxuICAgICAgLCBtYXBmbiAgID0gYXJndW1lbnRzWzFdXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGYgICAgICAgPSBtYXBwaW5nID8gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpIDogdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZigkaXRlci5pcyhPKSl7XG4gICAgICBpdGVyYXRvciA9ICRpdGVyLmdldChPKTtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgcXVpcmtzIG1vZGUgYnVnIC0+IHVzZSB0eXBlb2YgaW5zdGVhZCBvZiBpc0Z1bmN0aW9uXG4gICAgICByZXN1bHQgICA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSk7XG4gICAgICBmb3IoOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4Kyspe1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIGYsIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RyYW5nZSBJRSBxdWlya3MgbW9kZSBidWcgLT4gdXNlIHR5cGVvZiBpbnN0ZWFkIG9mIGlzRnVuY3Rpb25cbiAgICAgIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkobGVuZ3RoID0gJC50b0xlbmd0aChPLmxlbmd0aCkpO1xuICAgICAgZm9yKDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gbWFwcGluZyA/IGYoT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwidmFyICQgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIHNldFVuc2NvcGUgPSByZXF1aXJlKCcuLyQudW5zY29wZScpXG4gICwgSVRFUiAgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdpdGVyJylcbiAgLCAkaXRlciAgICAgID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIHN0ZXAgICAgICAgPSAkaXRlci5zdGVwXG4gICwgSXRlcmF0b3JzICA9ICRpdGVyLkl0ZXJhdG9ycztcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi8kLml0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgJC5zZXQodGhpcywgSVRFUiwge286ICQudG9PYmplY3QoaXRlcmF0ZWQpLCBpOiAwLCBrOiBraW5kfSk7XG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBpdGVyICA9IHRoaXNbSVRFUl1cbiAgICAsIE8gICAgID0gaXRlci5vXG4gICAgLCBraW5kICA9IGl0ZXIua1xuICAgICwgaW5kZXggPSBpdGVyLmkrKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIGl0ZXIubyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuc2V0VW5zY29wZSgna2V5cycpO1xuc2V0VW5zY29wZSgndmFsdWVzJyk7XG5zZXRVbnNjb3BlKCdlbnRyaWVzJyk7IiwidmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUywgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAvLyBzdHJhbmdlIElFIHF1aXJrcyBtb2RlIGJ1ZyAtPiB1c2UgdHlwZW9mIGluc3RlYWQgb2YgaXNGdW5jdGlvblxuICAgICAgLCByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXN1bHQubGVuZ3RoID0gbGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsInJlcXVpcmUoJy4vJC5zcGVjaWVzJykoQXJyYXkpOyIsInZhciAkICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBIQVNfSU5TVEFOQ0UgID0gcmVxdWlyZSgnLi8kLndrcycpKCdoYXNJbnN0YW5jZScpXG4gICwgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpJC5zZXREZXNjKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwge3ZhbHVlOiBmdW5jdGlvbihPKXtcbiAgaWYoISQuaXNGdW5jdGlvbih0aGlzKSB8fCAhJC5pc09iamVjdChPKSlyZXR1cm4gZmFsc2U7XG4gIGlmKCEkLmlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSlyZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlKE8gPSAkLmdldFByb3RvKE8pKWlmKHRoaXMucHJvdG90eXBlID09PSBPKXJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59fSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIE5BTUUgPSAnbmFtZSdcbiAgLCBzZXREZXNjID0gJC5zZXREZXNjXG4gICwgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRnVuY3Rpb25Qcm90byB8fCAkLkZXICYmICQuREVTQyAmJiBzZXREZXNjKEZ1bmN0aW9uUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIG1hdGNoID0gU3RyaW5nKHRoaXMpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLylcbiAgICAgICwgbmFtZSAgPSBtYXRjaCA/IG1hdGNoWzFdIDogJyc7XG4gICAgJC5oYXModGhpcywgTkFNRSkgfHwgc2V0RGVzYyh0aGlzLCBOQU1FLCAkLmRlc2MoNSwgbmFtZSkpO1xuICAgIHJldHVybiBuYW1lO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAkLmhhcyh0aGlzLCBOQU1FKSB8fCBzZXREZXNjKHRoaXMsIE5BTUUsICQuZGVzYygwLCB2YWx1ZSkpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbnJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uJykoJ01hcCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHNbMF0pOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTsiLCJ2YXIgSW5maW5pdHkgPSAxIC8gMFxuICAsICRkZWYgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgRSAgICAgPSBNYXRoLkVcbiAgLCBwb3cgICA9IE1hdGgucG93XG4gICwgYWJzICAgPSBNYXRoLmFic1xuICAsIGV4cCAgID0gTWF0aC5leHBcbiAgLCBsb2cgICA9IE1hdGgubG9nXG4gICwgc3FydCAgPSBNYXRoLnNxcnRcbiAgLCBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vclxuICAsIEVQU0lMT04gICA9IHBvdygyLCAtNTIpXG4gICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMylcbiAgLCBNQVgzMiAgICAgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKVxuICAsIE1JTjMyICAgICA9IHBvdygyLCAtMTI2KTtcbmZ1bmN0aW9uIHJvdW5kVGllc1RvRXZlbihuKXtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufVxuXG4vLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5mdW5jdGlvbiBzaWduKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59XG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG5mdW5jdGlvbiBhc2luaCh4KXtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBsb2coeCArIHNxcnQoeCAqIHggKyAxKSk7XG59XG4vLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxuZnVuY3Rpb24gZXhwbTEoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBleHAoeCkgLSAxO1xufVxuXG4kZGVmKCRkZWYuUywgJ01hdGgnLCB7XG4gIC8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiBpc0Zpbml0ZSh4KSA/IGxvZyh4IC8gRSArIHNxcnQoeCArIDEpICogc3FydCh4IC0gMSkgLyBFKSArIDEgOiB4O1xuICB9LFxuICAvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG4gIGFzaW5oOiBhc2luaCxcbiAgLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogbG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH0sXG4gIC8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpe1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBwb3coYWJzKHgpLCAxIC8gMyk7XG4gIH0sXG4gIC8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KXtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gZmxvb3IobG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfSxcbiAgLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpe1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH0sXG4gIC8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG4gIGV4cG0xOiBleHBtMSxcbiAgLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG4gIGZyb3VuZDogZnVuY3Rpb24gZnJvdW5kKHgpe1xuICAgIHZhciAkYWJzICA9IGFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfSxcbiAgLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgbGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGFyZyA9IDBcbiAgICAgICwgYXJnLCBkaXY7XG4gICAgd2hpbGUoaSA8IGxlbil7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYobGFyZyA8IGFyZyl7XG4gICAgICAgIGRpdiAgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZihhcmcgPiAwKXtcbiAgICAgICAgZGl2ICA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogc3FydChzdW0pO1xuICB9LFxuICAvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7XG4gICAgdmFyIFVJbnQxNiA9IDB4ZmZmZlxuICAgICAgLCB4biA9ICt4XG4gICAgICAsIHluID0gK3lcbiAgICAgICwgeGwgPSBVSW50MTYgJiB4blxuICAgICAgLCB5bCA9IFVJbnQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUludDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUludDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH0sXG4gIC8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG4gIGxvZzFwOiBmdW5jdGlvbiBsb2cxcCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBsb2coMSArIHgpO1xuICB9LFxuICAvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCl7XG4gICAgcmV0dXJuIGxvZyh4KSAvIE1hdGguTE4xMDtcbiAgfSxcbiAgLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpe1xuICAgIHJldHVybiBsb2coeCkgLyBNYXRoLkxOMjtcbiAgfSxcbiAgLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxuICBzaWduOiBzaWduLFxuICAvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCl7XG4gICAgcmV0dXJuIGFicyh4ID0gK3gpIDwgMSA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoRSAvIDIpO1xuICB9LFxuICAvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCl7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpXG4gICAgICAsIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfSxcbiAgLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KXtcbiAgICByZXR1cm4gKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgaXNPYmplY3QgICA9ICQuaXNPYmplY3RcbiAgLCBpc0Z1bmN0aW9uID0gJC5pc0Z1bmN0aW9uXG4gICwgTlVNQkVSICAgICA9ICdOdW1iZXInXG4gICwgJE51bWJlciAgICA9ICQuZ1tOVU1CRVJdXG4gICwgQmFzZSAgICAgICA9ICROdW1iZXJcbiAgLCBwcm90byAgICAgID0gJE51bWJlci5wcm90b3R5cGU7XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZShpdCl7XG4gIHZhciBmbiwgdmFsO1xuICBpZihpc0Z1bmN0aW9uKGZuID0gaXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZihpc0Z1bmN0aW9uKGZuID0gaXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gbnVtYmVyXCIpO1xufVxuZnVuY3Rpb24gdG9OdW1iZXIoaXQpe1xuICBpZihpc09iamVjdChpdCkpaXQgPSB0b1ByaW1pdGl2ZShpdCk7XG4gIGlmKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyICYmIGl0LmNoYXJDb2RlQXQoMCkgPT0gNDgpe1xuICAgIHZhciBiaW5hcnkgPSBmYWxzZTtcbiAgICBzd2l0Y2goaXQuY2hhckNvZGVBdCgxKSl7XG4gICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiBiaW5hcnkgPSB0cnVlO1xuICAgICAgY2FzZSA3OSA6IGNhc2UgMTExIDogcmV0dXJuIHBhcnNlSW50KGl0LnNsaWNlKDIpLCBiaW5hcnkgPyAyIDogOCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59XG5pZigkLkZXICYmICEoJE51bWJlcignMG8xJykgJiYgJE51bWJlcignMGIxJykpKXtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcihpdCl7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiAkTnVtYmVyID8gbmV3IEJhc2UodG9OdW1iZXIoaXQpKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgJC5lYWNoLmNhbGwoJC5ERVNDID8gJC5nZXROYW1lcyhCYXNlKSA6IChcbiAgICAgIC8vIEVTMzpcbiAgICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICAgICkuc3BsaXQoJywnKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgIGlmKCQuaGFzKEJhc2UsIGtleSkgJiYgISQuaGFzKCROdW1iZXIsIGtleSkpe1xuICAgICAgICAkLnNldERlc2MoJE51bWJlciwga2V5LCAkLmdldERlc2MoQmFzZSwga2V5KSk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vJC5yZWRlZicpKCQuZywgTlVNQkVSLCAkTnVtYmVyKTtcbn0iLCJ2YXIgJCAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgYWJzICAgPSBNYXRoLmFic1xuICAsIGZsb29yID0gTWF0aC5mbG9vclxuICAsIF9pc0Zpbml0ZSA9ICQuZy5pc0Zpbml0ZVxuICAsIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxO1xuZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICEkLmlzT2JqZWN0KGl0KSAmJiBfaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59XG4kZGVmKCRkZWYuUywgJ051bWJlcicsIHtcbiAgLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbiAgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSxcbiAgLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH0sXG4gIC8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxuICBpc0ludGVnZXI6IGlzSW50ZWdlcixcbiAgLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcil7XG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH0sXG4gIC8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpe1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICB9LFxuICAvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICBNQVhfU0FGRV9JTlRFR0VSOiBNQVhfU0FGRV9JTlRFR0VSLFxuICAvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbiAgTUlOX1NBRkVfSU5URUdFUjogLU1BWF9TQUZFX0lOVEVHRVIsXG4gIC8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXQsXG4gIC8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiAgcGFyc2VJbnQ6IHBhcnNlSW50XG59KTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vJC5hc3NpZ24nKX0pOyIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnT2JqZWN0Jywge1xuICBpczogcmVxdWlyZSgnLi8kLnNhbWUnKVxufSk7IiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vJC5zZXQtcHJvdG8nKS5zZXR9KTsiLCJ2YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgaXNPYmplY3QgPSAkLmlzT2JqZWN0XG4gICwgdG9PYmplY3QgPSAkLnRvT2JqZWN0O1xuJC5lYWNoLmNhbGwoKCdmcmVlemUsc2VhbCxwcmV2ZW50RXh0ZW5zaW9ucyxpc0Zyb3plbixpc1NlYWxlZCxpc0V4dGVuc2libGUsJyArXG4gICdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsZ2V0UHJvdG90eXBlT2Ysa2V5cyxnZXRPd25Qcm9wZXJ0eU5hbWVzJykuc3BsaXQoJywnKVxuLCBmdW5jdGlvbihLRVksIElEKXtcbiAgdmFyIGZuICAgICA9ICgkLmNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBmb3JjZWQgPSAwXG4gICAgLCBtZXRob2QgPSB7fTtcbiAgbWV0aG9kW0tFWV0gPSBJRCA9PSAwID8gZnVuY3Rpb24gZnJlZXplKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogaXQ7XG4gIH0gOiBJRCA9PSAxID8gZnVuY3Rpb24gc2VhbChpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IGl0O1xuICB9IDogSUQgPT0gMiA/IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogaXQ7XG4gIH0gOiBJRCA9PSAzID8gZnVuY3Rpb24gaXNGcm96ZW4oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiB0cnVlO1xuICB9IDogSUQgPT0gNCA/IGZ1bmN0aW9uIGlzU2VhbGVkKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogdHJ1ZTtcbiAgfSA6IElEID09IDUgPyBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBmYWxzZTtcbiAgfSA6IElEID09IDYgPyBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gICAgcmV0dXJuIGZuKHRvT2JqZWN0KGl0KSwga2V5KTtcbiAgfSA6IElEID09IDcgPyBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuIGZuKE9iamVjdCgkLmFzc2VydERlZmluZWQoaXQpKSk7XG4gIH0gOiBJRCA9PSA4ID8gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuIGZuKHRvT2JqZWN0KGl0KSk7XG4gIH0gOiByZXF1aXJlKCcuLyQuZ2V0LW5hbWVzJykuZ2V0O1xuICB0cnkge1xuICAgIGZuKCd6Jyk7XG4gIH0gY2F0Y2goZSl7XG4gICAgZm9yY2VkID0gMTtcbiAgfVxuICAkZGVmKCRkZWYuUyArICRkZWYuRiAqIGZvcmNlZCwgJ09iamVjdCcsIG1ldGhvZCk7XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCB0bXAgPSB7fTtcbnRtcFtyZXF1aXJlKCcuLyQud2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYocmVxdWlyZSgnLi8kJykuRlcgJiYgY29mKHRtcCkgIT0gJ3onKXtcbiAgcmVxdWlyZSgnLi8kLnJlZGVmJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNvZi5jbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCAgICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgY29mICAgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkZGVmICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGFzc2VydCAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgZm9yT2YgICAgPSByZXF1aXJlKCcuLyQuZm9yLW9mJylcbiAgLCBzZXRQcm90byA9IHJlcXVpcmUoJy4vJC5zZXQtcHJvdG8nKS5zZXRcbiAgLCBzYW1lICAgICA9IHJlcXVpcmUoJy4vJC5zYW1lJylcbiAgLCBzcGVjaWVzICA9IHJlcXVpcmUoJy4vJC5zcGVjaWVzJylcbiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vJC53a3MnKSgnc3BlY2llcycpXG4gICwgUkVDT1JEICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZSgncmVjb3JkJylcbiAgLCBQUk9NSVNFICA9ICdQcm9taXNlJ1xuICAsIGdsb2JhbCAgID0gJC5nXG4gICwgcHJvY2VzcyAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIGlzTm9kZSAgID0gY29mKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGFzYXAgICAgID0gcHJvY2VzcyAmJiBwcm9jZXNzLm5leHRUaWNrIHx8IHJlcXVpcmUoJy4vJC50YXNrJykuc2V0XG4gICwgUCAgICAgICAgPSBnbG9iYWxbUFJPTUlTRV1cbiAgLCBpc0Z1bmN0aW9uICAgICA9ICQuaXNGdW5jdGlvblxuICAsIGlzT2JqZWN0ICAgICAgID0gJC5pc09iamVjdFxuICAsIGFzc2VydEZ1bmN0aW9uID0gYXNzZXJ0LmZuXG4gICwgYXNzZXJ0T2JqZWN0ICAgPSBhc3NlcnQub2JqXG4gICwgV3JhcHBlcjtcblxuZnVuY3Rpb24gdGVzdFJlc29sdmUoc3ViKXtcbiAgdmFyIHRlc3QgPSBuZXcgUChmdW5jdGlvbigpe30pO1xuICBpZihzdWIpdGVzdC5jb25zdHJ1Y3RvciA9IE9iamVjdDtcbiAgcmV0dXJuIFAucmVzb2x2ZSh0ZXN0KSA9PT0gdGVzdDtcbn1cblxudmFyIHVzZU5hdGl2ZSA9IGZ1bmN0aW9uKCl7XG4gIHZhciB3b3JrcyA9IGZhbHNlO1xuICBmdW5jdGlvbiBQMih4KXtcbiAgICB2YXIgc2VsZiA9IG5ldyBQKHgpO1xuICAgIHNldFByb3RvKHNlbGYsIFAyLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgdHJ5IHtcbiAgICB3b3JrcyA9IGlzRnVuY3Rpb24oUCkgJiYgaXNGdW5jdGlvbihQLnJlc29sdmUpICYmIHRlc3RSZXNvbHZlKCk7XG4gICAgc2V0UHJvdG8oUDIsIFApO1xuICAgIFAyLnByb3RvdHlwZSA9ICQuY3JlYXRlKFAucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHt2YWx1ZTogUDJ9fSk7XG4gICAgLy8gYWN0dWFsIEZpcmVmb3ggaGFzIGJyb2tlbiBzdWJjbGFzcyBzdXBwb3J0LCB0ZXN0IHRoYXRcbiAgICBpZighKFAyLnJlc29sdmUoNSkudGhlbihmdW5jdGlvbigpe30pIGluc3RhbmNlb2YgUDIpKXtcbiAgICAgIHdvcmtzID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFjdHVhbCBWOCBidWcsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTYyXG4gICAgaWYod29ya3MgJiYgJC5ERVNDKXtcbiAgICAgIHZhciB0aGVuYWJsZVRoZW5Hb3R0ZW4gPSBmYWxzZTtcbiAgICAgIFAucmVzb2x2ZSgkLnNldERlc2Moe30sICd0aGVuJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHRoZW5hYmxlVGhlbkdvdHRlbiA9IHRydWU7IH1cbiAgICAgIH0pKTtcbiAgICAgIHdvcmtzID0gdGhlbmFibGVUaGVuR290dGVuO1xuICAgIH1cbiAgfSBjYXRjaChlKXsgd29ya3MgPSBmYWxzZTsgfVxuICByZXR1cm4gd29ya3M7XG59KCk7XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIGlzUHJvbWlzZShpdCl7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKHVzZU5hdGl2ZSA/IGNvZi5jbGFzc29mKGl0KSA9PSAnUHJvbWlzZScgOiBSRUNPUkQgaW4gaXQpO1xufVxuZnVuY3Rpb24gc2FtZUNvbnN0cnVjdG9yKGEsIGIpe1xuICAvLyBsaWJyYXJ5IHdyYXBwZXIgc3BlY2lhbCBjYXNlXG4gIGlmKCEkLkZXICYmIGEgPT09IFAgJiYgYiA9PT0gV3JhcHBlcilyZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHNhbWUoYSwgYik7XG59XG5mdW5jdGlvbiBnZXRDb25zdHJ1Y3RvcihDKXtcbiAgdmFyIFMgPSBhc3NlcnRPYmplY3QoQylbU1BFQ0lFU107XG4gIHJldHVybiBTICE9IHVuZGVmaW5lZCA/IFMgOiBDO1xufVxuZnVuY3Rpb24gaXNUaGVuYWJsZShpdCl7XG4gIHZhciB0aGVuO1xuICBpZihpc09iamVjdChpdCkpdGhlbiA9IGl0LnRoZW47XG4gIHJldHVybiBpc0Z1bmN0aW9uKHRoZW4pID8gdGhlbiA6IGZhbHNlO1xufVxuZnVuY3Rpb24gbm90aWZ5KHJlY29yZCl7XG4gIHZhciBjaGFpbiA9IHJlY29yZC5jO1xuICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gIGlmKGNoYWluLmxlbmd0aClhc2FwLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHJlY29yZC52XG4gICAgICAsIG9rICAgID0gcmVjb3JkLnMgPT0gMVxuICAgICAgLCBpICAgICA9IDA7XG4gICAgZnVuY3Rpb24gcnVuKHJlYWN0KXtcbiAgICAgIHZhciBjYiA9IG9rID8gcmVhY3Qub2sgOiByZWFjdC5mYWlsXG4gICAgICAgICwgcmV0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoY2Ipe1xuICAgICAgICAgIGlmKCFvaylyZWNvcmQuaCA9IHRydWU7XG4gICAgICAgICAgcmV0ID0gY2IgPT09IHRydWUgPyB2YWx1ZSA6IGNiKHZhbHVlKTtcbiAgICAgICAgICBpZihyZXQgPT09IHJlYWN0LlApe1xuICAgICAgICAgICAgcmVhY3QucmVqKFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmV0KSl7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmV0LCByZWFjdC5yZXMsIHJlYWN0LnJlaik7XG4gICAgICAgICAgfSBlbHNlIHJlYWN0LnJlcyhyZXQpO1xuICAgICAgICB9IGVsc2UgcmVhY3QucmVqKHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICAgcmVhY3QucmVqKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIGNoYWluLmxlbmd0aCA9IDA7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNVbmhhbmRsZWQocHJvbWlzZSl7XG4gIHZhciByZWNvcmQgPSBwcm9taXNlW1JFQ09SRF1cbiAgICAsIGNoYWluICA9IHJlY29yZC5hIHx8IHJlY29yZC5jXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZWFjdDtcbiAgaWYocmVjb3JkLmgpcmV0dXJuIGZhbHNlO1xuICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXtcbiAgICByZWFjdCA9IGNoYWluW2krK107XG4gICAgaWYocmVhY3QuZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3QuUCkpcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gJHJlamVjdCh2YWx1ZSl7XG4gIHZhciByZWNvcmQgPSB0aGlzXG4gICAgLCBwcm9taXNlO1xuICBpZihyZWNvcmQuZClyZXR1cm47XG4gIHJlY29yZC5kID0gdHJ1ZTtcbiAgcmVjb3JkID0gcmVjb3JkLnIgfHwgcmVjb3JkOyAvLyB1bndyYXBcbiAgcmVjb3JkLnYgPSB2YWx1ZTtcbiAgcmVjb3JkLnMgPSAyO1xuICByZWNvcmQuYSA9IHJlY29yZC5jLnNsaWNlKCk7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgYXNhcC5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UgPSByZWNvcmQucCkpe1xuICAgICAgICBpZihpc05vZGUpe1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYoZ2xvYmFsLmNvbnNvbGUgJiYgY29uc29sZS5lcnJvcil7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWNvcmQuYSA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfSwgMSk7XG4gIG5vdGlmeShyZWNvcmQpO1xufVxuZnVuY3Rpb24gJHJlc29sdmUodmFsdWUpe1xuICB2YXIgcmVjb3JkID0gdGhpc1xuICAgICwgdGhlbjtcbiAgaWYocmVjb3JkLmQpcmV0dXJuO1xuICByZWNvcmQuZCA9IHRydWU7XG4gIHJlY29yZCA9IHJlY29yZC5yIHx8IHJlY29yZDsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIGFzYXAuY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB3cmFwcGVyID0ge3I6IHJlY29yZCwgZDogZmFsc2V9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY29yZC52ID0gdmFsdWU7XG4gICAgICByZWNvcmQucyA9IDE7XG4gICAgICBub3RpZnkocmVjb3JkKTtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgJHJlamVjdC5jYWxsKHtyOiByZWNvcmQsIGQ6IGZhbHNlfSwgZSk7IC8vIHdyYXBcbiAgfVxufVxuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIXVzZU5hdGl2ZSl7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFAgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICBhc3NlcnRGdW5jdGlvbihleGVjdXRvcik7XG4gICAgdmFyIHJlY29yZCA9IHtcbiAgICAgIHA6IGFzc2VydC5pbnN0KHRoaXMsIFAsIFBST01JU0UpLCAgICAgICAvLyA8LSBwcm9taXNlXG4gICAgICBjOiBbXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgICBhOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICAgIHM6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgICAgZDogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICAgIHY6IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgaDogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGhhbmRsZWQgcmVqZWN0aW9uXG4gICAgfTtcbiAgICAkLmhpZGUodGhpcywgUkVDT1JELCByZWNvcmQpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHJlY29yZCwgMSksIGN0eCgkcmVqZWN0LCByZWNvcmQsIDEpKTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAkcmVqZWN0LmNhbGwocmVjb3JkLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgcmVxdWlyZSgnLi8kLm1peCcpKFAucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXtcbiAgICAgIHZhciBTID0gYXNzZXJ0T2JqZWN0KGFzc2VydE9iamVjdCh0aGlzKS5jb25zdHJ1Y3RvcilbU1BFQ0lFU107XG4gICAgICB2YXIgcmVhY3QgPSB7XG4gICAgICAgIG9rOiAgIGlzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiB0cnVlLFxuICAgICAgICBmYWlsOiBpc0Z1bmN0aW9uKG9uUmVqZWN0ZWQpICA/IG9uUmVqZWN0ZWQgIDogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIgcHJvbWlzZSA9IHJlYWN0LlAgPSBuZXcgKFMgIT0gdW5kZWZpbmVkID8gUyA6IFApKGZ1bmN0aW9uKHJlcywgcmVqKXtcbiAgICAgICAgcmVhY3QucmVzID0gYXNzZXJ0RnVuY3Rpb24ocmVzKTtcbiAgICAgICAgcmVhY3QucmVqID0gYXNzZXJ0RnVuY3Rpb24ocmVqKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHJlY29yZCA9IHRoaXNbUkVDT1JEXTtcbiAgICAgIHJlY29yZC5jLnB1c2gocmVhY3QpO1xuICAgICAgaWYocmVjb3JkLmEpcmVjb3JkLmEucHVzaChyZWFjdCk7XG4gICAgICBpZihyZWNvcmQucylub3RpZnkocmVjb3JkKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBleHBvcnRcbiRkZWYoJGRlZi5HICsgJGRlZi5XICsgJGRlZi5GICogIXVzZU5hdGl2ZSwge1Byb21pc2U6IFB9KTtcbmNvZi5zZXQoUCwgUFJPTUlTRSk7XG5zcGVjaWVzKFApO1xuc3BlY2llcyhXcmFwcGVyID0gJC5jb3JlW1BST01JU0VdKTtcblxuLy8gc3RhdGljc1xuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhdXNlTmF0aXZlLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpe1xuICAgIHJldHVybiBuZXcgKGdldENvbnN0cnVjdG9yKHRoaXMpKShmdW5jdGlvbihyZXMsIHJlail7IHJlaihyKTsgfSk7XG4gIH1cbn0pO1xuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAoIXVzZU5hdGl2ZSB8fCB0ZXN0UmVzb2x2ZSh0cnVlKSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCl7XG4gICAgcmV0dXJuIGlzUHJvbWlzZSh4KSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcylcbiAgICAgID8geCA6IG5ldyB0aGlzKGZ1bmN0aW9uKHJlcyl7IHJlcyh4KTsgfSk7XG4gIH1cbn0pO1xuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhKHVzZU5hdGl2ZSAmJiByZXF1aXJlKCcuLyQuaXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXtcbiAgUC5hbGwoaXRlcilbJ2NhdGNoJ10oZnVuY3Rpb24oKXt9KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgPSBnZXRDb25zdHJ1Y3Rvcih0aGlzKVxuICAgICAgLCB2YWx1ZXMgPSBbXTtcbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ocmVzLCByZWope1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCB2YWx1ZXMucHVzaCwgdmFsdWVzKTtcbiAgICAgIHZhciByZW1haW5pbmcgPSB2YWx1ZXMubGVuZ3RoXG4gICAgICAgICwgcmVzdWx0cyAgID0gQXJyYXkocmVtYWluaW5nKTtcbiAgICAgIGlmKHJlbWFpbmluZykkLmVhY2guY2FsbCh2YWx1ZXMsIGZ1bmN0aW9uKHByb21pc2UsIGluZGV4KXtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzKHJlc3VsdHMpO1xuICAgICAgICB9LCByZWopO1xuICAgICAgfSk7XG4gICAgICBlbHNlIHJlcyhyZXN1bHRzKTtcbiAgICB9KTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyA9IGdldENvbnN0cnVjdG9yKHRoaXMpO1xuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihyZXMsIHJlail7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upe1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihyZXMsIHJlaik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7IiwidmFyICQgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgc2V0UHJvdG8gID0gcmVxdWlyZSgnLi8kLnNldC1wcm90bycpXG4gICwgJGl0ZXIgICAgID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKVxuICAsIElURVIgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdpdGVyJylcbiAgLCBzdGVwICAgICAgPSAkaXRlci5zdGVwXG4gICwgYXNzZXJ0ICAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgaXNPYmplY3QgID0gJC5pc09iamVjdFxuICAsIGdldFByb3RvICA9ICQuZ2V0UHJvdG9cbiAgLCAkUmVmbGVjdCAgPSAkLmcuUmVmbGVjdFxuICAsIF9hcHBseSAgICA9IEZ1bmN0aW9uLmFwcGx5XG4gICwgYXNzZXJ0T2JqZWN0ID0gYXNzZXJ0Lm9ialxuICAsIF9pc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGlzT2JqZWN0XG4gICwgX3ByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zXG4gIC8vIElFIFRQIGhhcyBicm9rZW4gUmVmbGVjdC5lbnVtZXJhdGVcbiAgLCBidWdneUVudW1lcmF0ZSA9ICEoJFJlZmxlY3QgJiYgJFJlZmxlY3QuZW51bWVyYXRlICYmIElURVJBVE9SIGluICRSZWZsZWN0LmVudW1lcmF0ZSh7fSkpO1xuXG5mdW5jdGlvbiBFbnVtZXJhdGUoaXRlcmF0ZWQpe1xuICAkLnNldCh0aGlzLCBJVEVSLCB7bzogaXRlcmF0ZWQsIGs6IHVuZGVmaW5lZCwgaTogMH0pO1xufVxuJGl0ZXIuY3JlYXRlKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCl7XG4gIHZhciBpdGVyID0gdGhpc1tJVEVSXVxuICAgICwga2V5cyA9IGl0ZXIua1xuICAgICwga2V5O1xuICBpZihrZXlzID09IHVuZGVmaW5lZCl7XG4gICAgaXRlci5rID0ga2V5cyA9IFtdO1xuICAgIGZvcihrZXkgaW4gaXRlci5vKWtleXMucHVzaChrZXkpO1xuICB9XG4gIGRvIHtcbiAgICBpZihpdGVyLmkgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHN0ZXAoMSk7XG4gIH0gd2hpbGUoISgoa2V5ID0ga2V5c1tpdGVyLmkrK10pIGluIGl0ZXIubykpO1xuICByZXR1cm4gc3RlcCgwLCBrZXkpO1xufSk7XG5cbnZhciByZWZsZWN0ID0ge1xuICAvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KXtcbiAgICByZXR1cm4gX2FwcGx5LmNhbGwodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpO1xuICB9LFxuICAvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCAvKiwgbmV3VGFyZ2V0Ki8pe1xuICAgIHZhciBwcm90byAgICA9IGFzc2VydC5mbihhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXSkucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gJC5jcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKVxuICAgICAgLCByZXN1bHQgICA9IF9hcHBseS5jYWxsKHRhcmdldCwgaW5zdGFuY2UsIGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH0sXG4gIC8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKXtcbiAgICBhc3NlcnRPYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgJC5zZXREZXNjKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIC8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICB2YXIgZGVzYyA9ICQuZ2V0RGVzYyhhc3NlcnRPYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH0sXG4gIC8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleS8qLCByZWNlaXZlciovKXtcbiAgICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXVxuICAgICAgLCBkZXNjID0gJC5nZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSksIHByb3RvO1xuICAgIGlmKGRlc2MpcmV0dXJuICQuaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICA/IGRlc2MudmFsdWVcbiAgICAgIDogZGVzYy5nZXQgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgIHJldHVybiBpc09iamVjdChwcm90byA9IGdldFByb3RvKHRhcmdldCkpXG4gICAgICA/IGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIC8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gJC5nZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH0sXG4gIC8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCl7XG4gICAgcmV0dXJuIGdldFByb3RvKGFzc2VydE9iamVjdCh0YXJnZXQpKTtcbiAgfSxcbiAgLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH0sXG4gIC8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIHJldHVybiBfaXNFeHRlbnNpYmxlKGFzc2VydE9iamVjdCh0YXJnZXQpKTtcbiAgfSxcbiAgLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxuICBvd25LZXlzOiByZXF1aXJlKCcuLyQub3duLWtleXMnKSxcbiAgLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7XG4gICAgYXNzZXJ0T2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmKF9wcmV2ZW50RXh0ZW5zaW9ucylfcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICAvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxuICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICAgIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdXG4gICAgICAsIG93bkRlc2MgID0gJC5nZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSlcbiAgICAgICwgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgICBpZighb3duRGVzYyl7XG4gICAgICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvKHRhcmdldCkpKXtcbiAgICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICAgIH1cbiAgICAgIG93bkRlc2MgPSAkLmRlc2MoMCk7XG4gICAgfVxuICAgIGlmKCQuaGFzKG93bkRlc2MsICd2YWx1ZScpKXtcbiAgICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gJC5nZXREZXNjKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgJC5kZXNjKDApO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgICQuc2V0RGVzYyhyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG4gIH1cbn07XG4vLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbmlmKHNldFByb3RvKXJlZmxlY3Quc2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKXtcbiAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gIHRyeSB7XG4gICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuJGRlZigkZGVmLkcsIHtSZWZsZWN0OiB7fX0pO1xuXG4kZGVmKCRkZWYuUyArICRkZWYuRiAqIGJ1Z2d5RW51bWVyYXRlLCAnUmVmbGVjdCcsIHtcbiAgLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KXtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZShhc3NlcnRPYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuXG4kZGVmKCRkZWYuUywgJ1JlZmxlY3QnLCByZWZsZWN0KTsiLCJ2YXIgJCAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY29mICAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRSZWdFeHAgPSAkLmcuUmVnRXhwXG4gICwgQmFzZSAgICA9ICRSZWdFeHBcbiAgLCBwcm90byAgID0gJFJlZ0V4cC5wcm90b3R5cGVcbiAgLCByZSAgICAgID0gL2EvZ1xuICAvLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0XG4gICwgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZSkgIT09IHJlXG4gIC8vIFJlZ0V4cCBhbGxvd3MgYSByZWdleCB3aXRoIGZsYWdzIGFzIHRoZSBwYXR0ZXJuXG4gICwgQUxMT1dTX1JFX1dJVEhfRkxBR1MgPSBmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gJFJlZ0V4cChyZSwgJ2knKSA9PSAnL2EvaSc7XG4gICAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICB9KCk7XG5pZigkLkZXICYmICQuREVTQyl7XG4gIGlmKCFDT1JSRUNUX05FVyB8fCAhQUxMT1dTX1JFX1dJVEhfRkxBR1Mpe1xuICAgICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3Mpe1xuICAgICAgdmFyIHBhdHRlcm5Jc1JlZ0V4cCAgPSBjb2YocGF0dGVybikgPT0gJ1JlZ0V4cCdcbiAgICAgICAgLCBmbGFnc0lzVW5kZWZpbmVkID0gZmxhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICAgIGlmKCEodGhpcyBpbnN0YW5jZW9mICRSZWdFeHApICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0lzVW5kZWZpbmVkKXJldHVybiBwYXR0ZXJuO1xuICAgICAgcmV0dXJuIENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0lzVW5kZWZpbmVkID8gcGF0dGVybi5zb3VyY2UgOiBwYXR0ZXJuLCBmbGFncylcbiAgICAgICAgOiBuZXcgQmFzZShwYXR0ZXJuSXNSZWdFeHAgPyBwYXR0ZXJuLnNvdXJjZSA6IHBhdHRlcm5cbiAgICAgICAgICAsIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0lzVW5kZWZpbmVkID8gcGF0dGVybi5mbGFncyA6IGZsYWdzKTtcbiAgICB9O1xuICAgICQuZWFjaC5jYWxsKCQuZ2V0TmFtZXMoQmFzZSksIGZ1bmN0aW9uKGtleSl7XG4gICAgICBrZXkgaW4gJFJlZ0V4cCB8fCAkLnNldERlc2MoJFJlZ0V4cCwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGl0KXsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHJlcXVpcmUoJy4vJC5yZWRlZicpKCQuZywgJ1JlZ0V4cCcsICRSZWdFeHApO1xuICB9XG4gIC8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbiAgaWYoLy4vZy5mbGFncyAhPSAnZycpJC5zZXREZXNjKHByb3RvLCAnZmxhZ3MnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogcmVxdWlyZSgnLi8kLnJlcGxhY2VyJykoL14uKlxcLyhcXHcqKSQvLCAnJDEnKVxuICB9KTtcbn1cbnJlcXVpcmUoJy4vJC5zcGVjaWVzJykoJFJlZ0V4cCk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5yZXF1aXJlKCcuLyQuY29sbGVjdGlvbicpKCdTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzWzBdKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkYXQgID0gcmVxdWlyZSgnLi8kLnN0cmluZy1hdCcpKGZhbHNlKTtcbiRkZWYoJGRlZi5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY29mICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCB0b0xlbmd0aCA9ICQudG9MZW5ndGg7XG5cbi8vIHNob3VsZCB0aHJvdyBlcnJvciBvbiByZWdleFxuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiAhcmVxdWlyZSgnLi8kLnRocm93cycpKGZ1bmN0aW9uKCl7ICdxJy5lbmRzV2l0aCgvLi8pOyB9KSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIGlmKGNvZihzZWFyY2hTdHJpbmcpID09ICdSZWdFeHAnKXRocm93IFR5cGVFcnJvcigpO1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSlcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHNbMV1cbiAgICAgICwgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpXG4gICAgICAsIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgc2VhcmNoU3RyaW5nICs9ICcnO1xuICAgIHJldHVybiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaFN0cmluZy5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaFN0cmluZztcbiAgfVxufSk7IiwidmFyICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCB0b0luZGV4ID0gcmVxdWlyZSgnLi8kJykudG9JbmRleFxuICAsIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXVxuICAgICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGkgICA9IDBcbiAgICAgICwgY29kZTtcbiAgICB3aGlsZShsZW4gPiBpKXtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZih0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSl0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY29mICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG5cbiRkZWYoJGRlZi5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIGlmKGNvZihzZWFyY2hTdHJpbmcpID09ICdSZWdFeHAnKXRocm93IFR5cGVFcnJvcigpO1xuICAgIHJldHVybiAhIX5TdHJpbmcoJC5hc3NlcnREZWZpbmVkKHRoaXMpKS5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwidmFyIHNldCAgID0gcmVxdWlyZSgnLi8kJykuc2V0XG4gICwgJGF0ICAgPSByZXF1aXJlKCcuLyQuc3RyaW5nLWF0JykodHJ1ZSlcbiAgLCBJVEVSICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdpdGVyJylcbiAgLCAkaXRlciA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBzdGVwICA9ICRpdGVyLnN0ZXA7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vJC5pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgc2V0KHRoaXMsIElURVIsIHtvOiBTdHJpbmcoaXRlcmF0ZWQpLCBpOiAwfSk7XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgaXRlciAgPSB0aGlzW0lURVJdXG4gICAgLCBPICAgICA9IGl0ZXIub1xuICAgICwgaW5kZXggPSBpdGVyLmlcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4gc3RlcCgxKTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICBpdGVyLmkgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4gc3RlcCgwLCBwb2ludCk7XG59KTsiLCJ2YXIgJCAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcblxuJGRlZigkZGVmLlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKXtcbiAgICB2YXIgdHBsID0gJC50b09iamVjdChjYWxsU2l0ZS5yYXcpXG4gICAgICAsIGxlbiA9ICQudG9MZW5ndGgodHBsLmxlbmd0aClcbiAgICAgICwgc2xuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXMgPSBbXVxuICAgICAgLCBpICAgPSAwO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZihpIDwgc2xuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pOyIsInZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuXG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vJC5zdHJpbmctcmVwZWF0Jylcbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcblxuLy8gc2hvdWxkIHRocm93IGVycm9yIG9uIHJlZ2V4XG4kZGVmKCRkZWYuUCArICRkZWYuRiAqICFyZXF1aXJlKCcuLyQudGhyb3dzJykoZnVuY3Rpb24oKXsgJ3EnLnN0YXJ0c1dpdGgoLy4vKTsgfSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIGlmKGNvZihzZWFyY2hTdHJpbmcpID09ICdSZWdFeHAnKXRocm93IFR5cGVFcnJvcigpO1xuICAgIHZhciB0aGF0ICA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhpcykpXG4gICAgICAsIGluZGV4ID0gJC50b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHNbMV0sIHRoYXQubGVuZ3RoKSk7XG4gICAgc2VhcmNoU3RyaW5nICs9ICcnO1xuICAgIHJldHVybiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaFN0cmluZy5sZW5ndGgpID09PSBzZWFyY2hTdHJpbmc7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgc2V0VGFnICAgPSByZXF1aXJlKCcuLyQuY29mJykuc2V0XG4gICwgdWlkICAgICAgPSByZXF1aXJlKCcuLyQudWlkJylcbiAgLCBzaGFyZWQgICA9IHJlcXVpcmUoJy4vJC5zaGFyZWQnKVxuICAsICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJHJlZGVmICAgPSByZXF1aXJlKCcuLyQucmVkZWYnKVxuICAsIGtleU9mICAgID0gcmVxdWlyZSgnLi8kLmtleW9mJylcbiAgLCBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vJC5lbnVtLWtleXMnKVxuICAsIGFzc2VydE9iamVjdCA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5vYmpcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGVcbiAgLCBERVNDICAgICA9ICQuREVTQ1xuICAsIGhhcyAgICAgID0gJC5oYXNcbiAgLCAkY3JlYXRlICA9ICQuY3JlYXRlXG4gICwgZ2V0RGVzYyAgPSAkLmdldERlc2NcbiAgLCBzZXREZXNjICA9ICQuc2V0RGVzY1xuICAsIGRlc2MgICAgID0gJC5kZXNjXG4gICwgJG5hbWVzICAgPSByZXF1aXJlKCcuLyQuZ2V0LW5hbWVzJylcbiAgLCBnZXROYW1lcyA9ICRuYW1lcy5nZXRcbiAgLCB0b09iamVjdCA9ICQudG9PYmplY3RcbiAgLCAkU3ltYm9sICA9ICQuZy5TeW1ib2xcbiAgLCBzZXR0ZXIgICA9IGZhbHNlXG4gICwgVEFHICAgICAgPSB1aWQoJ3RhZycpXG4gICwgSElEREVOICAgPSB1aWQoJ2hpZGRlbicpXG4gICwgX3Byb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGVcbiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JylcbiAgLCBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCB1c2VOYXRpdmUgPSAkLmlzRnVuY3Rpb24oJFN5bWJvbCk7XG5cbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQyA/IGZ1bmN0aW9uKCl7IC8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZFxuICB0cnkge1xuICAgIHJldHVybiAkY3JlYXRlKHNldERlc2Moe30sIEhJRERFTiwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gc2V0RGVzYyh0aGlzLCBISURERU4sIHt2YWx1ZTogZmFsc2V9KVtISURERU5dO1xuICAgICAgfVxuICAgIH0pKVtISURERU5dIHx8IHNldERlc2M7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGl0LCBrZXksIEQpe1xuICAgICAgdmFyIHByb3RvRGVzYyA9IGdldERlc2MoT2JqZWN0UHJvdG8sIGtleSk7XG4gICAgICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gICAgICBzZXREZXNjKGl0LCBrZXksIEQpO1xuICAgICAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylzZXREZXNjKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG4gICAgfTtcbiAgfVxufSgpIDogc2V0RGVzYztcblxuZnVuY3Rpb24gd3JhcCh0YWcpe1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gJC5zZXQoJGNyZWF0ZSgkU3ltYm9sLnByb3RvdHlwZSksIFRBRywgdGFnKTtcbiAgREVTQyAmJiBzZXR0ZXIgJiYgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGRlc2MoMSwgdmFsdWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc3ltO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKXNldERlc2MoaXQsIEhJRERFTiwgZGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSAkY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBkZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIHNldERlc2MoaXQsIGtleSwgRCk7XG59XG5mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYXNzZXJ0T2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9PYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKWRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyAkY3JlYXRlKGl0KSA6IGRlZmluZVByb3BlcnRpZXMoJGNyZWF0ZShpdCksIFApO1xufVxuZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcbiAgdmFyIEUgPSBfcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0aGlzLCBrZXkpO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldXG4gICAgPyBFIDogdHJ1ZTtcbn1cbmZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgdmFyIEQgPSBnZXREZXNjKGl0ID0gdG9PYmplY3QoaXQpLCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59XG5mdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdldE5hbWVzKHRvT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOKXJlc3VsdC5wdXNoKGtleSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ2V0TmFtZXModG9PYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighdXNlTmF0aXZlKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgcmV0dXJuIHdyYXAodWlkKGFyZ3VtZW50c1swXSkpO1xuICB9O1xuICAkcmVkZWYoJFN5bWJvbC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXNbVEFHXTtcbiAgfSk7XG5cbiAgJC5jcmVhdGUgICAgID0gY3JlYXRlO1xuICAkLnNldERlc2MgICAgPSBkZWZpbmVQcm9wZXJ0eTtcbiAgJC5nZXREZXNjICAgID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkLnNldERlc2NzICAgPSBkZWZpbmVQcm9wZXJ0aWVzO1xuICAkLmdldE5hbWVzICAgPSAkbmFtZXMuZ2V0ID0gZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgJC5nZXRTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmKCQuREVTQyAmJiAkLkZXKSRyZWRlZihPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xufVxuXG52YXIgc3ltYm9sU3RhdGljcyA9IHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXtcbiAgICByZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufTtcbi8vIDE5LjQuMi4yIFN5bWJvbC5oYXNJbnN0YW5jZVxuLy8gMTkuNC4yLjMgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZVxuLy8gMTkuNC4yLjQgU3ltYm9sLml0ZXJhdG9yXG4vLyAxOS40LjIuNiBTeW1ib2wubWF0Y2hcbi8vIDE5LjQuMi44IFN5bWJvbC5yZXBsYWNlXG4vLyAxOS40LjIuOSBTeW1ib2wuc2VhcmNoXG4vLyAxOS40LjIuMTAgU3ltYm9sLnNwZWNpZXNcbi8vIDE5LjQuMi4xMSBTeW1ib2wuc3BsaXRcbi8vIDE5LjQuMi4xMiBTeW1ib2wudG9QcmltaXRpdmVcbi8vIDE5LjQuMi4xMyBTeW1ib2wudG9TdHJpbmdUYWdcbi8vIDE5LjQuMi4xNCBTeW1ib2wudW5zY29wYWJsZXNcbiQuZWFjaC5jYWxsKChcbiAgICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLCcgK1xuICAgICdzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuICApLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgc3ltID0gcmVxdWlyZSgnLi8kLndrcycpKGl0KTtcbiAgICBzeW1ib2xTdGF0aWNzW2l0XSA9IHVzZU5hdGl2ZSA/IHN5bSA6IHdyYXAoc3ltKTtcbiAgfVxuKTtcblxuc2V0dGVyID0gdHJ1ZTtcblxuJGRlZigkZGVmLkcgKyAkZGVmLlcsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuJGRlZigkZGVmLlMsICdTeW1ib2wnLCBzeW1ib2xTdGF0aWNzKTtcblxuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhdXNlTmF0aXZlLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6IGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiBkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRhZygkLmcuSlNPTiwgJ0pTT04nLCB0cnVlKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCB3ZWFrICAgICAgPSByZXF1aXJlKCcuLyQuY29sbGVjdGlvbi13ZWFrJylcbiAgLCBsZWFrU3RvcmUgPSB3ZWFrLmxlYWtTdG9yZVxuICAsIElEICAgICAgICA9IHdlYWsuSURcbiAgLCBXRUFLICAgICAgPSB3ZWFrLldFQUtcbiAgLCBoYXMgICAgICAgPSAkLmhhc1xuICAsIGlzT2JqZWN0ICA9ICQuaXNPYmplY3RcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGlzT2JqZWN0XG4gICwgdG1wICAgICAgID0ge307XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSByZXF1aXJlKCcuLyQuY29sbGVjdGlvbicpKCdXZWFrTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHNbMF0pOyB9O1xufSwge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIGlmKGlzT2JqZWN0KGtleSkpe1xuICAgICAgaWYoIWlzRXh0ZW5zaWJsZShrZXkpKXJldHVybiBsZWFrU3RvcmUodGhpcykuZ2V0KGtleSk7XG4gICAgICBpZihoYXMoa2V5LCBXRUFLKSlyZXR1cm4ga2V5W1dFQUtdW3RoaXNbSURdXTtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZihuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KXtcbiAgJC5lYWNoLmNhbGwoWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlXG4gICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVxdWlyZSgnLi8kLnJlZGVmJykocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBsZWFreSBtYXBcbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpe1xuICAgICAgICB2YXIgcmVzdWx0ID0gbGVha1N0b3JlKHRoaXMpW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuLyQuY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuLyQuY29sbGVjdGlvbicpKCdXZWFrU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHNbMF0pOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vJC5hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RvbWVuaWMvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuLyQudW5zY29wZScpKCdpbmNsdWRlcycpOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi85MzUzNzgxXG52YXIgJCAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIG93bktleXMgPSByZXF1aXJlKCcuLyQub3duLWtleXMnKTtcblxuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgID0gJC50b09iamVjdChvYmplY3QpXG4gICAgICAsIHJlc3VsdCA9IHt9O1xuICAgICQuZWFjaC5jYWxsKG93bktleXMoTyksIGZ1bmN0aW9uKGtleSl7XG4gICAgICAkLnNldERlc2MocmVzdWx0LCBrZXksICQuZGVzYygwLCAkLmdldERlc2MoTywga2V5KSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsIi8vIGh0dHA6Ly9nb28uZ2wvWGtCcmpEXG52YXIgJCAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdFRvQXJyYXkoaXNFbnRyaWVzKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCl7XG4gICAgdmFyIE8gICAgICA9ICQudG9PYmplY3Qob2JqZWN0KVxuICAgICAgLCBrZXlzICAgPSAkLmdldEtleXMoTylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSAgICAgID0gMFxuICAgICAgLCByZXN1bHQgPSBBcnJheShsZW5ndGgpXG4gICAgICAsIGtleTtcbiAgICBpZihpc0VudHJpZXMpd2hpbGUobGVuZ3RoID4gaSlyZXN1bHRbaV0gPSBba2V5ID0ga2V5c1tpKytdLCBPW2tleV1dO1xuICAgIGVsc2Ugd2hpbGUobGVuZ3RoID4gaSlyZXN1bHRbaV0gPSBPW2tleXNbaSsrXV07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbiRkZWYoJGRlZi5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6ICBjcmVhdGVPYmplY3RUb0FycmF5KGZhbHNlKSxcbiAgZW50cmllczogY3JlYXRlT2JqZWN0VG9BcnJheSh0cnVlKVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUywgJ1JlZ0V4cCcsIHtcbiAgZXNjYXBlOiByZXF1aXJlKCcuLyQucmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnLCB0cnVlKVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG5yZXF1aXJlKCcuLyQuY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbid1c2Ugc3RyaWN0JztcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJGF0ICA9IHJlcXVpcmUoJy4vJC5zdHJpbmctYXQnKSh0cnVlKTtcbiRkZWYoJGRlZi5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKXtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJHBhZCA9IHJlcXVpcmUoJy4vJC5zdHJpbmctcGFkJyk7XG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgbHBhZDogZnVuY3Rpb24gbHBhZChuKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBuLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRwYWQgPSByZXF1aXJlKCcuLyQuc3RyaW5nLXBhZCcpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7XG4gIHJwYWQ6IGZ1bmN0aW9uIHJwYWQobil7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbiwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pOyIsIi8vIEphdmFTY3JpcHQgMS42IC8gU3RyYXdtYW4gYXJyYXkgc3RhdGljcyBzaGltXG52YXIgJCAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRBcnJheSAgPSAkLmNvcmUuQXJyYXkgfHwgQXJyYXlcbiAgLCBzdGF0aWNzID0ge307XG5mdW5jdGlvbiBzZXRTdGF0aWNzKGtleXMsIGxlbmd0aCl7XG4gICQuZWFjaC5jYWxsKGtleXMuc3BsaXQoJywnKSwgZnVuY3Rpb24oa2V5KXtcbiAgICBpZihsZW5ndGggPT0gdW5kZWZpbmVkICYmIGtleSBpbiAkQXJyYXkpc3RhdGljc1trZXldID0gJEFycmF5W2tleV07XG4gICAgZWxzZSBpZihrZXkgaW4gW10pc3RhdGljc1trZXldID0gcmVxdWlyZSgnLi8kLmN0eCcpKEZ1bmN0aW9uLmNhbGwsIFtdW2tleV0sIGxlbmd0aCk7XG4gIH0pO1xufVxuc2V0U3RhdGljcygncG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcycsIDEpO1xuc2V0U3RhdGljcygnaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcycsIDMpO1xuc2V0U3RhdGljcygnam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLCcgK1xuICAgICAgICAgICAncmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbCx0dXJuJyk7XG4kZGVmKCRkZWYuUywgJ0FycmF5Jywgc3RhdGljcyk7IiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkICAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgSXRlcmF0b3JzICAgPSByZXF1aXJlKCcuLyQuaXRlcicpLkl0ZXJhdG9yc1xuICAsIElURVJBVE9SICAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXlcbiAgLCBOTCAgICAgICAgICA9ICQuZy5Ob2RlTGlzdFxuICAsIEhUQyAgICAgICAgID0gJC5nLkhUTUxDb2xsZWN0aW9uXG4gICwgTkxQcm90byAgICAgPSBOTCAmJiBOTC5wcm90b3R5cGVcbiAgLCBIVENQcm90byAgICA9IEhUQyAmJiBIVEMucHJvdG90eXBlO1xuaWYoJC5GVyl7XG4gIGlmKE5MICYmICEoSVRFUkFUT1IgaW4gTkxQcm90bykpJC5oaWRlKE5MUHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gIGlmKEhUQyAmJiAhKElURVJBVE9SIGluIEhUQ1Byb3RvKSkkLmhpZGUoSFRDUHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG59XG5JdGVyYXRvcnMuTm9kZUxpc3QgPSBJdGVyYXRvcnMuSFRNTENvbGxlY3Rpb24gPSBBcnJheVZhbHVlczsiLCJ2YXIgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkdGFzayA9IHJlcXVpcmUoJy4vJC50YXNrJyk7XG4kZGVmKCRkZWYuRyArICRkZWYuQiwge1xuICBzZXRJbW1lZGlhdGU6ICAgJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pOyIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciAkICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGludm9rZSAgICA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKVxuICAsIHBhcnRpYWwgICA9IHJlcXVpcmUoJy4vJC5wYXJ0aWFsJylcbiAgLCBuYXZpZ2F0b3IgPSAkLmcubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xuZnVuY3Rpb24gd3JhcChzZXQpe1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gc2V0KGludm9rZShcbiAgICAgIHBhcnRpYWwsXG4gICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksXG4gICAgICAkLmlzRnVuY3Rpb24oZm4pID8gZm4gOiBGdW5jdGlvbihmbilcbiAgICApLCB0aW1lKTtcbiAgfSA6IHNldDtcbn1cbiRkZWYoJGRlZi5HICsgJGRlZi5CICsgJGRlZi5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcCgkLmcuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKCQuZy5zZXRJbnRlcnZhbClcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5zdGF0aWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubHBhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucnBhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWdleHAuZXNjYXBlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC50by1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2pzLmFycmF5LnN0YXRpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzLyQnKS5jb3JlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgaXRlcmF0b3JTeW1ib2wgPVxuICAgIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZSgob3V0ZXJGbiB8fCBHZW5lcmF0b3IpLnByb3RvdHlwZSk7XG5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoXG4gICAgICBpbm5lckZuLCBzZWxmIHx8IG51bGwsXG4gICAgICBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSlcbiAgICApO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGB2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnRgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLiBTb21lIG1heSBjb25zaWRlciB0aGUgbmFtZSBvZiB0aGlzIG1ldGhvZCB0b29cbiAgLy8gY3V0ZXN5LCBidXQgdGhleSBhcmUgY3VybXVkZ2VvbnMuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gbmV3IEF3YWl0QXJndW1lbnQoYXJnKTtcbiAgfTtcblxuICBmdW5jdGlvbiBBd2FpdEFyZ3VtZW50KGFyZykge1xuICAgIHRoaXMuYXJnID0gYXJnO1xuICB9XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICAvLyBUaGlzIGludm9rZSBmdW5jdGlvbiBpcyB3cml0dGVuIGluIGEgc3R5bGUgdGhhdCBhc3N1bWVzIHNvbWVcbiAgICAvLyBjYWxsaW5nIGZ1bmN0aW9uIChvciBQcm9taXNlKSB3aWxsIGhhbmRsZSBleGNlcHRpb25zLlxuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgdmFyIHJlc3VsdCA9IGdlbmVyYXRvclttZXRob2RdKGFyZyk7XG4gICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBd2FpdEFyZ3VtZW50XG4gICAgICAgID8gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLmFyZykudGhlbihpbnZva2VOZXh0LCBpbnZva2VUaHJvdylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH0sIGludm9rZVRocm93KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IHByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgaW52b2tlTmV4dCA9IGludm9rZS5iaW5kKGdlbmVyYXRvciwgXCJuZXh0XCIpO1xuICAgIHZhciBpbnZva2VUaHJvdyA9IGludm9rZS5iaW5kKGdlbmVyYXRvciwgXCJ0aHJvd1wiKTtcbiAgICB2YXIgaW52b2tlUmV0dXJuID0gaW52b2tlLmJpbmQoZ2VuZXJhdG9yLCBcInJldHVyblwiKTtcbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgdmFyIGVucXVldWVSZXN1bHQgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICAgIH0pIDogbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoaW52b2tlKG1ldGhvZCwgYXJnKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBlbnF1ZXVlUmVzdWx0IGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5XG4gICAgICAvLyBsYXRlciBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IsIGFuZCBjYWxsIGdlbmVyYXRvci5yZXR1cm4oKSB0b1xuICAgICAgLy8gYWxsb3cgdGhlIGdlbmVyYXRvciBhIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgIHByZXZpb3VzUHJvbWlzZSA9IGVucXVldWVSZXN1bHRbXCJjYXRjaFwiXShpbnZva2VSZXR1cm4pO1xuXG4gICAgICByZXR1cm4gZW5xdWV1ZVJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicmV0dXJuXCIgfHxcbiAgICAgICAgICAgICAgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiICYmIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIC8vIEEgcmV0dXJuIG9yIHRocm93ICh3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gdGhyb3dcbiAgICAgICAgICAgIC8vIG1ldGhvZCkgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICAgIHZhciByZXR1cm5NZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXTtcbiAgICAgICAgICAgIGlmIChyZXR1cm5NZXRob2QpIHtcbiAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKHJldHVybk1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGFyZyk7XG4gICAgICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJldHVybiBtZXRob2QgdGhyZXcgYW4gZXhjZXB0aW9uLCBsZXQgdGhhdFxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBwcmV2YWlsIG92ZXIgdGhlIG9yaWdpbmFsIHJldHVybiBvciB0aHJvdy5cbiAgICAgICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIG91dGVyIHJldHVybiwgbm93IHRoYXQgdGhlIGRlbGVnYXRlXG4gICAgICAgICAgICAgIC8vIGl0ZXJhdG9yIGhhcyBiZWVuIHRlcm1pbmF0ZWQuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChcbiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0sXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvcixcbiAgICAgICAgICAgIGFyZ1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIExpa2UgcmV0dXJuaW5nIGdlbmVyYXRvci50aHJvdyh1bmNhdWdodCksIGJ1dCB3aXRob3V0IHRoZVxuICAgICAgICAgICAgLy8gb3ZlcmhlYWQgb2YgYW4gZXh0cmEgZnVuY3Rpb24gY2FsbC5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEZWxlZ2F0ZSBnZW5lcmF0b3IgcmFuIGFuZCBoYW5kbGVkIGl0cyBvd24gZXhjZXB0aW9ucyBzb1xuICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGUgbWV0aG9kIHdhcywgd2UgY29udGludWUgYXMgaWYgaXQgaXNcbiAgICAgICAgICAvLyBcIm5leHRcIiB3aXRoIGFuIHVuZGVmaW5lZCBhcmcuXG4gICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuICAgICAgICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuICAgICAgICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCkge1xuICAgICAgICAgICAgY29udGV4dC5zZW50ID0gYXJnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgY29udGV4dC5zZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSAmJiBtZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICB0aGlzLnNlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgLy8gUHJlLWluaXRpYWxpemUgYXQgbGVhc3QgMjAgdGVtcG9yYXJ5IHZhcmlhYmxlcyB0byBlbmFibGUgaGlkZGVuXG4gICAgICAvLyBjbGFzcyBvcHRpbWl6YXRpb25zIGZvciBzaW1wbGUgZ2VuZXJhdG9ycy5cbiAgICAgIGZvciAodmFyIHRlbXBJbmRleCA9IDAsIHRlbXBOYW1lO1xuICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCB0ZW1wTmFtZSA9IFwidFwiICsgdGVtcEluZGV4KSB8fCB0ZW1wSW5kZXggPCAyMDtcbiAgICAgICAgICAgKyt0ZW1wSW5kZXgpIHtcbiAgICAgICAgdGhpc1t0ZW1wTmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG4gICAgICAgIHJldHVybiAhIWNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvYmFiZWwvcG9seWZpbGxcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJiYWJlbC1jb3JlL3BvbHlmaWxsXCIpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRRdWV1ZTtcbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xufVxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICBxdWV1ZS5wdXNoKGZ1bik7XG4gICAgaWYgKCFkcmFpbmluZykge1xuICAgICAgICBzZXRUaW1lb3V0KGRyYWluUXVldWUsIDApO1xuICAgIH1cbn07XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFR5cG9ncmFwaHkgPSByZXF1aXJlKCcuL3N0eWxlcy90eXBvZ3JhcGh5Jyk7XG52YXIgSWNvbkJ1dHRvbiA9IHJlcXVpcmUoJy4vaWNvbi1idXR0b24nKTtcbnZhciBOYXZpZ2F0aW9uTWVudSA9IHJlcXVpcmUoJy4vc3ZnLWljb25zL25hdmlnYXRpb24tbWVudScpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xuXG52YXIgQXBwQmFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0FwcEJhcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBvbkxlZnRJY29uQnV0dG9uVG91Y2hUYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHNob3dNZW51SWNvbkJ1dHRvbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaWNvbkNsYXNzTmFtZUxlZnQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvbkNsYXNzTmFtZVJpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25FbGVtZW50TGVmdDogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgaWNvbkVsZW1lbnRSaWdodDogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgaWNvblN0eWxlUmlnaHQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgdGl0bGU6IFJlYWN0LlByb3BUeXBlcy5ub2RlLFxuICAgIHpEZXB0aDogUmVhY3QuUHJvcFR5cGVzLm51bWJlclxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG93TWVudUljb25CdXR0b246IHRydWUsXG4gICAgICB0aXRsZTogJycsXG4gICAgICB6RGVwdGg6IDFcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0aGlzLnByb3BzLmljb25FbGVtZW50TGVmdCAmJiB0aGlzLnByb3BzLmljb25DbGFzc05hbWVMZWZ0KSB7XG5cbiAgICAgIGNvbnNvbGUud2FybignUHJvcGVydGllcyBpY29uQ2xhc3NOYW1lTGVmdCBhbmQgaWNvbkVsZW1lbnRMZWZ0IGNhbm5vdCBiZSBzaW11bHRhbmVvdXNseSAnICsgJ2RlZmluZWQuIFBsZWFzZSB1c2Ugb25lIG9yIHRoZSBvdGhlci4nKTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHNwYWNpbmcgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgICB2YXIgdGhlbWVWYXJpYWJsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmFwcEJhcjtcbiAgICB2YXIgaWNvbkJ1dHRvblNpemUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmJ1dHRvbi5pY29uQnV0dG9uU2l6ZTtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB6SW5kZXg6IDUsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGRpc3BsYXk6ICctd2Via2l0LWJveDsgZGlzcGxheTogZmxleCcsXG4gICAgICAgIG1pbkhlaWdodDogdGhlbWVWYXJpYWJsZXMuaGVpZ2h0LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lVmFyaWFibGVzLmNvbG9yLFxuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZy5kZXNrdG9wR3V0dGVyLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcuZGVza3RvcEd1dHRlclxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICBsZXR0ZXJTcGFjaW5nOiAwLFxuICAgICAgICBmb250U2l6ZTogMjQsXG4gICAgICAgIGZvbnRXZWlnaHQ6IFR5cG9ncmFwaHkuZm9udFdlaWdodE5vcm1hbCxcbiAgICAgICAgY29sb3I6IHRoZW1lVmFyaWFibGVzLnRleHRDb2xvcixcbiAgICAgICAgbGluZUhlaWdodDogdGhlbWVWYXJpYWJsZXMuaGVpZ2h0ICsgJ3B4J1xuICAgICAgfSxcbiAgICAgIG1haW5FbGVtZW50OiB7XG4gICAgICAgIGJveEZsZXg6IDEsXG4gICAgICAgIGZsZXg6ICcxJ1xuICAgICAgfSxcbiAgICAgIGljb25CdXR0b246IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBtYXJnaW5Ub3A6ICh0aGVtZVZhcmlhYmxlcy5oZWlnaHQgLSBpY29uQnV0dG9uU2l6ZSkgLyAyLFxuICAgICAgICAgIG1hcmdpblJpZ2h0OiA4LFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IC0xNlxuICAgICAgICB9LFxuICAgICAgICBpY29uU3R5bGU6IHtcbiAgICAgICAgICBmaWxsOiB0aGVtZVZhcmlhYmxlcy50ZXh0Q29sb3IsXG4gICAgICAgICAgY29sb3I6IHRoZW1lVmFyaWFibGVzLnRleHRDb2xvclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGljb25SaWdodFN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbkJ1dHRvbi5zdHlsZSwge1xuICAgICAgbWFyZ2luUmlnaHQ6IC0xNixcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJ1xuICAgIH0sIHRoaXMucHJvcHMuaWNvblN0eWxlUmlnaHQpO1xuXG4gICAgdmFyIHRpdGxlID0gdGhpcy5wcm9wcy50aXRsZTtcblxuICAgIHZhciB0aXRsZUVsZW1lbnQ7XG4gICAgdmFyIG1lbnVFbGVtZW50TGVmdDtcbiAgICB2YXIgbWVudUVsZW1lbnRSaWdodDtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgLy8gSWYgdGhlIHRpdGxlIGlzIGEgc3RyaW5nLCB3cmFwIGluIGFuIGgxIHRhZy5cbiAgICAgIC8vIElmIG5vdCwganVzdCB1c2UgaXQgYXMgYSBub2RlLlxuICAgICAgdGl0bGVFbGVtZW50ID0gdHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJyB8fCB0aXRsZSBpbnN0YW5jZW9mIFN0cmluZyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdoMScsXG4gICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRpdGxlLCBzdHlsZXMubWFpbkVsZW1lbnQpIH0sXG4gICAgICAgIHRpdGxlXG4gICAgICApIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1haW5FbGVtZW50KSB9LFxuICAgICAgICB0aXRsZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zaG93TWVudUljb25CdXR0b24pIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmljb25FbGVtZW50TGVmdCkge1xuICAgICAgICBtZW51RWxlbWVudExlZnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5pY29uQnV0dG9uLnN0eWxlIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5pY29uRWxlbWVudExlZnRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGlsZCA9IHRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZUxlZnQgPyAnJyA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbk1lbnUsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb25CdXR0b24uaWNvblN0eWxlKSB9KTtcbiAgICAgICAgbWVudUVsZW1lbnRMZWZ0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBJY29uQnV0dG9uLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uQnV0dG9uLnN0eWxlKSxcbiAgICAgICAgICAgIGljb25TdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbkJ1dHRvbi5pY29uU3R5bGUpLFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZTogdGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lTGVmdCxcbiAgICAgICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX29uTGVmdEljb25CdXR0b25Ub3VjaFRhcCB9LFxuICAgICAgICAgIGNoaWxkXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmljb25FbGVtZW50UmlnaHQpIHtcbiAgICAgICAgbWVudUVsZW1lbnRSaWdodCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogaWNvblJpZ2h0U3R5bGUgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLmljb25FbGVtZW50UmlnaHRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lUmlnaHQpIHtcbiAgICAgICAgbWVudUVsZW1lbnRSaWdodCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwge1xuICAgICAgICAgIHN0eWxlOiBpY29uUmlnaHRTdHlsZSxcbiAgICAgICAgICBpY29uU3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb25CdXR0b24uaWNvblN0eWxlKSxcbiAgICAgICAgICBpY29uQ2xhc3NOYW1lOiB0aGlzLnByb3BzLmljb25DbGFzc05hbWVSaWdodCxcbiAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUGFwZXIsXG4gICAgICB7XG4gICAgICAgIHJvdW5kZWQ6IGZhbHNlLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSksXG4gICAgICAgIHpEZXB0aDogdGhpcy5wcm9wcy56RGVwdGggfSxcbiAgICAgIG1lbnVFbGVtZW50TGVmdCxcbiAgICAgIHRpdGxlRWxlbWVudCxcbiAgICAgIG1lbnVFbGVtZW50UmlnaHQsXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBfb25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwOiBmdW5jdGlvbiBfb25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTGVmdEljb25CdXR0b25Ub3VjaFRhcChldmVudCk7XG4gICAgfVxuICB9LFxuXG4gIF9vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwOiBmdW5jdGlvbiBfb25SaWdodEljb25CdXR0b25Ub3VjaFRhcChldmVudCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXApIHtcbiAgICAgIHRoaXMucHJvcHMub25SaWdodEljb25CdXR0b25Ub3VjaFRhcChldmVudCk7XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcEJhcjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBBcHBDYW52YXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQXBwQ2FudmFzJyxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS5jYW52YXNDb2xvcixcbiAgICAgIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCdcbiAgICB9O1xuXG4gICAgdmFyIG5ld0NoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjdXJyZW50Q2hpbGQpIHtcbiAgICAgIGlmICghY3VycmVudENoaWxkKSB7XG4gICAgICAgIC8vIElmIHVuZGVmaW5lZCwgc2tpcCBpdFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoY3VycmVudENoaWxkLnR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgY2FzZSAnQXBwQmFyJzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY3VycmVudENoaWxkO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcyB9LFxuICAgICAgbmV3Q2hpbGRyZW5cbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcENhbnZhczsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi9zdHlsZXMvY29sb3JzJyk7XG52YXIgVHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4vc3R5bGVzL3R5cG9ncmFwaHknKTtcblxudmFyIFN2Z0ljb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU3ZnSWNvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpY29uOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3JjOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLmdyZXk0MDAsXG4gICAgICBjb2xvcjogQ29sb3JzLndoaXRlXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaWNvbiA9IF9wcm9wcy5pY29uO1xuICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBfcHJvcHMuYmFja2dyb3VuZENvbG9yO1xuICAgIHZhciBjb2xvciA9IF9wcm9wcy5jb2xvcjtcbiAgICB2YXIgc3JjID0gX3Byb3BzLnNyYztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2ljb24nLCAnYmFja2dyb3VuZENvbG9yJywgJ2NvbG9yJywgJ3NyYycsICdzdHlsZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGhlaWdodDogc3JjID8gMzggOiA0MCxcbiAgICAgICAgd2lkdGg6IHNyYyA/IDM4IDogNDAsXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIGJvcmRlcjogc3JjID8gJ3NvbGlkIDFweCcgOiAnbm9uZScsXG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS5ib3JkZXJDb2xvcixcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG5cbiAgICAgICAgLy9OZWVkZWQgZm9yIGxldHRlciBhdmF0YXJzXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICc0MHB4JyxcbiAgICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgIH0sXG5cbiAgICAgIGljb25TdHlsZXM6IHtcbiAgICAgICAgbWFyZ2luOiA4XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgc3R5bGUpO1xuICAgIHZhciBtZXJnZWRJY29uU3R5bGVzID0gaWNvbiA/IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmljb25TdHlsZXMsIGljb24ucHJvcHMuc3R5bGUpIDogbnVsbDtcblxuICAgIHZhciBpY29uRWxlbWVudCA9IGljb24gPyBSZWFjdC5jbG9uZUVsZW1lbnQoaWNvbiwge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgc3R5bGU6IG1lcmdlZEljb25TdHlsZXNcbiAgICB9KSA6IG51bGw7XG5cbiAgICByZXR1cm4gc3JjID8gUmVhY3QuY3JlYXRlRWxlbWVudCgnaW1nJywgX2V4dGVuZHMoe30sIG90aGVyLCB7IHNyYzogc3JjLCBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyB9KSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXMgfSksXG4gICAgICBpY29uRWxlbWVudCxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdmdJY29uOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEF1dG9QcmVmaXggPSByZXF1aXJlKCcuL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xuXG4vKiogIFxuICogIEJlZm9yZUFmdGVyV3JhcHBlclxuICogICAgQW4gYWx0ZXJuYXRpdmUgZm9yIHRoZSA6OmJlZm9yZSBhbmQgOjphZnRlciBjc3MgcHNldWRvLWVsZW1lbnRzIGZvciBcbiAqICAgIGNvbXBvbmVudHMgd2hvc2Ugc3R5bGVzIGFyZSBkZWZpbmVkIGluIGphdmFzY3JpcHQgaW5zdGVhZCBvZiBjc3MuXG4gKlxuICogIFVzYWdlOiBGb3IgdGhlIGVsZW1lbnQgdGhhdCB3ZSB3YW50IHRvIGFwcGx5IGJlZm9yZSBhbmQgYWZ0ZXIgZWxlbWVudHMgdG8sXG4gKiAgICB3cmFwIGl0cyBjaGlsZHJlbiB3aXRoIEJlZm9yZUFmdGVyV3JhcHBlci4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlcj5cbiAqICA8UGFwZXI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+IC8vIFNlZSBub3RpY2VcbiAqICAgIDxCZWZvcmVBZnRlcldyYXBwZXI+ICAgICAgICByZW5kZXJzICAgICAgICAgPGRpdi8+IC8vIGJlZm9yZSBlbGVtZW50XG4gKiAgICAgIFtjaGlsZHJlbiBvZiBwYXBlcl0gICAgICAgLS0tLS0tPiAgICAgICAgIFtjaGlsZHJlbiBvZiBwYXBlcl1cbiAqICAgIDwvQmVmb3JlQWZ0ZXJXcmFwcGVyPiAgICAgICAgICAgICAgICAgICAgICAgPGRpdi8+IC8vIGFmdGVyIGVsZW1lbnRcbiAqICA8L1BhcGVyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUGFwZXI+XG4gKlxuICogIE5vdGljZTogTm90aWNlIHRoYXQgdGhpcyBkaXYgYnVuZGxlcyB0b2dldGhlciBvdXIgZWxlbWVudHMuIElmIHRoZSBlbGVtZW50IFxuICogICAgdGhhdCB3ZSB3YW50IHRvIGFwcGx5IGJlZm9yZSBhbmQgYWZ0ZXIgZWxlbWVudHMgaXMgYSBIVE1MIHRhZyAoaS5lLiBhIFxuICogICAgZGl2LCBwLCBvciBidXR0b24gdGFnKSwgd2UgY2FuIGF2b2lkIHRoaXMgZXh0cmEgbmVzdGluZyBieSBwYXNzaW5nIHVzaW5nIFxuICogICAgdGhlIEJlZm9yZUFmdGVyV3JhcHBlciBpbiBwbGFjZSBvZiBzYWlkIHRhZyBsaWtlIHNvOlxuICpcbiAqICA8cD5cbiAqICAgIDxCZWZvcmVBZnRlcldyYXBwZXI+ICAgZG8gdGhpcyBpbnN0ZWFkICAgPEJlZm9yZUFmdGVyV3JhcHBlciBlbGVtZW50VHlwZT0ncCc+XG4gKiAgICAgIFtjaGlsZHJlbiBvZiBwXSAgICAgICAgICAtLS0tLS0+ICAgICAgICAgW2NoaWxkcmVuIG9mIHBdXG4gKiAgICA8L0JlZm9yZUFmdGVyV3JhcHBlcj4gICAgICAgICAgICAgICAgICAgIDwvQmVmb3JlQWZ0ZXJXcmFwcGVyPiBcbiAqICA8L3A+XG4gKlxuICogIEJlZm9yZUFmdGVyV3JhcHBlciBmZWF0dXJlcyBzcHJlYWQgZnVuY3Rpb25hbGl0eS4gVGhpcyBtZWFucyB0aGF0IHdlIGNhbiBcbiAqICBwYXNzIEhUTUwgdGFnIHByb3BlcnRpZXMgZGlyZWN0bHkgaW50byB0aGUgQmVmb3JlQWZ0ZXJXcmFwcGVyIHRhZy5cbiAqXG4gKiAgV2hlbiB1c2luZyBCZWZvcmVBZnRlcldyYXBwZXIsIGVuc3VyZSB0aGF0IHRoZSBwYXJlbnQgb2YgdGhlIGJlZm9yZUVsZW1lbnQgXG4gKiAgYW5kIGFmdGVyRWxlbWVudCBoYXZlIGEgZGVmaW5lZCBzdHlsZSBwb3NpdGlvbi5cbiAqL1xuXG52YXIgQmVmb3JlQWZ0ZXJXcmFwcGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0JlZm9yZUFmdGVyV3JhcHBlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYmVmb3JlU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgYWZ0ZXJTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBiZWZvcmVFbGVtZW50VHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhZnRlckVsZW1lbnRUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGVsZW1lbnRUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJlZm9yZUVsZW1lbnRUeXBlOiAnZGl2JyxcbiAgICAgIGFmdGVyRWxlbWVudFR5cGU6ICdkaXYnLFxuICAgICAgZWxlbWVudFR5cGU6ICdkaXYnXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgYmVmb3JlU3R5bGUgPSBfcHJvcHMuYmVmb3JlU3R5bGU7XG4gICAgdmFyIGFmdGVyU3R5bGUgPSBfcHJvcHMuYWZ0ZXJTdHlsZTtcbiAgICB2YXIgYmVmb3JlRWxlbWVudFR5cGUgPSBfcHJvcHMuYmVmb3JlRWxlbWVudFR5cGU7XG4gICAgdmFyIGFmdGVyRWxlbWVudFR5cGUgPSBfcHJvcHMuYWZ0ZXJFbGVtZW50VHlwZTtcbiAgICB2YXIgZWxlbWVudFR5cGUgPSBfcHJvcHMuZWxlbWVudFR5cGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2JlZm9yZVN0eWxlJywgJ2FmdGVyU3R5bGUnLCAnYmVmb3JlRWxlbWVudFR5cGUnLCAnYWZ0ZXJFbGVtZW50VHlwZScsICdlbGVtZW50VHlwZSddKTtcblxuICAgIHZhciBiZWZvcmVFbGVtZW50LCBhZnRlckVsZW1lbnQ7XG5cbiAgICBiZWZvcmVTdHlsZSA9IEF1dG9QcmVmaXguYWxsKHsgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcgfSk7XG4gICAgYWZ0ZXJTdHlsZSA9IEF1dG9QcmVmaXguYWxsKHsgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcgfSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5iZWZvcmVTdHlsZSkgYmVmb3JlRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5iZWZvcmVFbGVtZW50VHlwZSwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChiZWZvcmVTdHlsZSwgdGhpcy5wcm9wcy5iZWZvcmVTdHlsZSksXG4gICAgICBrZXk6ICc6OmJlZm9yZScgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMuYWZ0ZXJTdHlsZSkgYWZ0ZXJFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmFmdGVyRWxlbWVudFR5cGUsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoYWZ0ZXJTdHlsZSwgdGhpcy5wcm9wcy5hZnRlclN0eWxlKSxcbiAgICAgIGtleTogJzo6YWZ0ZXInIH0pO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gW2JlZm9yZUVsZW1lbnQsIHRoaXMucHJvcHMuY2hpbGRyZW4sIGFmdGVyRWxlbWVudF07XG5cbiAgICB2YXIgcHJvcHMgPSBvdGhlcjtcbiAgICBwcm9wcy5zdHlsZSA9IHRoaXMucHJvcHMuc3R5bGU7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmVsZW1lbnRUeXBlLCBwcm9wcywgY2hpbGRyZW4pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJlZm9yZUFmdGVyV3JhcHBlcjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVzID0gcmVxdWlyZSgnLi4vc3R5bGVzJyk7XG5cbnZhciBDYXJkQWN0aW9ucyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDYXJkQWN0aW9ucycsXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcGFkZGluZzogOFxuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBzdHlsZTogeyBtYXJnaW5SaWdodDogOCB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRBY3Rpb25zOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZXMgPSByZXF1aXJlKCcuLi9zdHlsZXMnKTtcbnZhciBBdmF0YXIgPSByZXF1aXJlKCcuLi9hdmF0YXInKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBDYXJkSGVhZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0NhcmRIZWFkZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGVTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdWJ0aXRsZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdWJ0aXRsZUNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN1YnRpdGxlU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgdGV4dFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya0JsYWNrLFxuICAgICAgc3VidGl0bGVDb2xvcjogU3R5bGVzLkNvbG9ycy5saWdodEJsYWNrXG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6IDcyLFxuICAgICAgICBwYWRkaW5nOiAxNixcbiAgICAgICAgZm9udFdlaWdodDogU3R5bGVzLlR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgIH0sXG4gICAgICB0ZXh0OiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xuICAgICAgfSxcbiAgICAgIGF2YXRhcjoge1xuICAgICAgICBtYXJnaW5SaWdodDogMTZcbiAgICAgIH0sXG4gICAgICB0aXRsZToge1xuICAgICAgICBjb2xvcjogdGhpcy5wcm9wcy50aXRsZUNvbG9yLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBmb250U2l6ZTogMTVcbiAgICAgIH0sXG4gICAgICBzdWJ0aXRsZToge1xuICAgICAgICBjb2xvcjogdGhpcy5wcm9wcy5zdWJ0aXRsZUNvbG9yLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBmb250U2l6ZTogMTRcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciByb290U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKTtcbiAgICB2YXIgdGV4dFN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudGV4dCwgdGhpcy5wcm9wcy50ZXh0U3R5bGUpO1xuICAgIHZhciB0aXRsZVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudGl0bGUsIHRoaXMucHJvcHMudGl0bGVTdHlsZSk7XG4gICAgdmFyIHN1YnRpdGxlU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5zdWJ0aXRsZSwgdGhpcy5wcm9wcy5zdWJ0aXRsZVN0eWxlKTtcblxuICAgIHZhciBhdmF0YXIgPSB0aGlzLnByb3BzLmF2YXRhcjtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQodGhpcy5wcm9wcy5hdmF0YXIpKSB7XG4gICAgICB2YXIgYXZhdGFyTWVyZ2VkU3R5bGUgPSB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5hdmF0YXIsIGF2YXRhci5wcm9wcy5zdHlsZSk7XG4gICAgICBhdmF0YXIgPSBSZWFjdC5jbG9uZUVsZW1lbnQoYXZhdGFyLCB7IHN0eWxlOiBhdmF0YXJNZXJnZWRTdHlsZSB9KTtcbiAgICB9IGVsc2UgYXZhdGFyID0gUmVhY3QuY3JlYXRlRWxlbWVudChBdmF0YXIsIHsgc3JjOiB0aGlzLnByb3BzLmF2YXRhciwgc3R5bGU6IHN0eWxlcy5hdmF0YXIgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgc3R5bGU6IHJvb3RTdHlsZSB9KSxcbiAgICAgIGF2YXRhcixcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiB0ZXh0U3R5bGUgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBzdHlsZTogdGl0bGVTdHlsZSB9LFxuICAgICAgICAgIHRoaXMucHJvcHMudGl0bGVcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBzdHlsZTogc3VidGl0bGVTdHlsZSB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuc3VidGl0bGVcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRIZWFkZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlcyA9IHJlcXVpcmUoJy4uL3N0eWxlcycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENhcmRNZWRpYSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDYXJkTWVkaWEnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIG92ZXJsYXk6IFJlYWN0LlByb3BUeXBlcy5ub2RlLFxuICAgIHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG92ZXJsYXlTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvdmVybGF5Q29udGFpbmVyU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgb3ZlcmxheUNvbnRlbnRTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZWRpYVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBvdmVybGF5Q29udGFpbmVyOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgIH0sXG4gICAgICBvdmVybGF5OiB7XG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIG92ZXJsYXlDb250ZW50OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBwYWRkaW5nVG9wOiA4LFxuICAgICAgICBiYWNrZ3JvdW5kOiBTdHlsZXMuQ29sb3JzLmxpZ2h0QmxhY2tcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciByb290U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKTtcbiAgICB2YXIgbWVkaWFTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lZGlhLCB0aGlzLnByb3BzLm1lZGlhU3R5bGUpO1xuICAgIHZhciBvdmVybGF5Q29udGFpbmVyU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5vdmVybGF5Q29udGFpbmVyLCB0aGlzLnByb3BzLm92ZXJsYXlDb250YWluZXJTdHlsZSk7XG4gICAgdmFyIG92ZXJsYXlDb250ZW50U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5vdmVybGF5Q29udGVudCwgdGhpcy5wcm9wcy5vdmVybGF5Q29udGVudFN0eWxlKTtcbiAgICB2YXIgb3ZlcmxheVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMub3ZlcmxheSwgdGhpcy5wcm9wcy5vdmVybGF5U3R5bGUpO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgbWluV2lkdGg6ICcxMDAlJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBvdmVybGF5Q2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5vdmVybGF5LCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC50eXBlLmRpc3BsYXlOYW1lID09PSAnQ2FyZEhlYWRlcicgfHwgY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ0NhcmRUaXRsZScpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIHRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya1doaXRlLFxuICAgICAgICAgIHN1YnRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMubGlnaHRXaGl0ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ0NhcmRUZXh0Jykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgY29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya1doaXRlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IHN0eWxlOiByb290U3R5bGUgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogbWVkaWFTdHlsZSB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKSxcbiAgICAgIHRoaXMucHJvcHMub3ZlcmxheSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBvdmVybGF5Q29udGFpbmVyU3R5bGUgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBvdmVybGF5U3R5bGUgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBvdmVybGF5Q29udGVudFN0eWxlIH0sXG4gICAgICAgICAgICBvdmVybGF5Q2hpbGRyZW5cbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICkgOiAnJ1xuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRNZWRpYTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVzID0gcmVxdWlyZSgnLi4vc3R5bGVzJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgQ2FyZFRleHQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FyZFRleHQnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbG9yOiBTdHlsZXMuQ29sb3JzLmNrXG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwYWRkaW5nOiAxNixcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuY29sb3JcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciByb290U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBzdHlsZTogcm9vdFN0eWxlIH0pLFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRUZXh0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZXMgPSByZXF1aXJlKCcuLi9zdHlsZXMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBDYXJkVGl0bGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FyZFRpdGxlJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICB0aXRsZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aXRsZUNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgc3VidGl0bGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3VidGl0bGVDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdWJ0aXRsZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya0JsYWNrLFxuICAgICAgc3VidGl0bGVDb2xvcjogU3R5bGVzLkNvbG9ycy5saWdodEJsYWNrXG4gICAgfTtcbiAgfSxcbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcGFkZGluZzogMTZcbiAgICAgIH0sXG4gICAgICB0aXRsZToge1xuICAgICAgICBmb250U2l6ZTogMjQsXG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLnRpdGxlQ29sb3IsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICczNnB4J1xuICAgICAgfSxcbiAgICAgIHN1YnRpdGxlOiB7XG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuc3VidGl0bGVDb2xvcixcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciByb290U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKTtcbiAgICB2YXIgdGl0bGVTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRpdGxlLCB0aGlzLnByb3BzLnRpdGxlU3R5bGUpO1xuICAgIHZhciBzdWJ0aXRsZVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuc3VidGl0bGUsIHRoaXMucHJvcHMuc3VidGl0bGVTdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgc3R5bGU6IHJvb3RTdHlsZSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGl0bGVTdHlsZSB9LFxuICAgICAgICB0aGlzLnByb3BzLnRpdGxlXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiBzdWJ0aXRsZVN0eWxlIH0sXG4gICAgICAgIHRoaXMucHJvcHMuc3VidGl0bGVcbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkVGl0bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuLi9wYXBlcicpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENhcmQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FyZCcsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgc3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbGFzdEVsZW1lbnQgPSBSZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA+IDEgPyB0aGlzLnByb3BzLmNoaWxkcmVuW3RoaXMucHJvcHMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgLy8gSWYgdGhlIGxhc3QgZWxlbWVudCBpcyB0ZXh0IG9yIGEgdGl0bGUgd2Ugc2hvdWxkIGFkZFxuICAgIC8vIDhweCBwYWRkaW5nIHRvIHRoZSBib3R0b20gb2YgdGhlIGNhcmRcbiAgICB2YXIgYWRkQm90dG9tUGFkZGluZyA9IGxhc3RFbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgPT09ICdDYXJkVGV4dCcgfHwgbGFzdEVsZW1lbnQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ0NhcmRUaXRsZSc7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzdHlsZSddKTtcblxuICAgIHZhciBtZXJnZWRTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHpJbmRleDogMVxuICAgIH0sIHN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUGFwZXIsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IG1lcmdlZFN0eWxlcyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiB7IHBhZGRpbmdCb3R0b206IGFkZEJvdHRvbVBhZGRpbmcgPyA4IDogMCB9IH0sXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIEVuaGFuY2VkU3dpdGNoID0gcmVxdWlyZSgnLi9lbmhhbmNlZC1zd2l0Y2gnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQ2hlY2tib3hPdXRsaW5lID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvdG9nZ2xlLWNoZWNrLWJveC1vdXRsaW5lLWJsYW5rJyk7XG52YXIgQ2hlY2tib3hDaGVja2VkID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvdG9nZ2xlLWNoZWNrLWJveC1jaGVja2VkJyk7XG5cbnZhciBDaGVja2JveCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDaGVja2JveCcsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNoZWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBjaGVja2VkSWNvbjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgdW5DaGVja2VkSWNvbjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnRcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3dpdGNoZWQ6IHRoaXMucHJvcHMuY2hlY2tlZCB8fCB0aGlzLnByb3BzLmRlZmF1bHRDaGVja2VkIHx8IHRoaXMucHJvcHMudmFsdWVMaW5rICYmIHRoaXMucHJvcHMudmFsdWVMaW5rLnZhbHVlIHx8IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuY2hlY2tib3g7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIGNoZWNrYm94U2l6ZSA9IDI0O1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICBpY29uOiB7XG4gICAgICAgIGhlaWdodDogY2hlY2tib3hTaXplLFxuICAgICAgICB3aWR0aDogY2hlY2tib3hTaXplXG4gICAgICB9LFxuICAgICAgY2hlY2s6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbk9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICdvcGFjaXR5JywgJzBtcycpICsgJywgJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICd0cmFuc2Zvcm0nLCAnNDUwbXMnKSxcbiAgICAgICAgZmlsbDogdGhpcy5nZXRUaGVtZSgpLmNoZWNrZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGJveDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgZmlsbDogdGhpcy5nZXRUaGVtZSgpLmJveENvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcycycsIG51bGwsICcyMDBtcycpXG4gICAgICB9LFxuICAgICAgY2hlY2tXaGVuU3dpdGNoZWQ6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcwbXMnLCAnb3BhY2l0eScsICcwbXMnKSArICcsICcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc4MDBtcycsICd0cmFuc2Zvcm0nLCAnMG1zJylcbiAgICAgIH0sXG4gICAgICBib3hXaGVuU3dpdGNoZWQ6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMTAwbXMnLCBudWxsLCAnMG1zJyksXG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5jaGVja2VkQ29sb3JcbiAgICAgIH0sXG4gICAgICBjaGVja1doZW5EaXNhYmxlZDoge1xuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGJveFdoZW5EaXNhYmxlZDoge1xuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmRpc2FibGVkID8gdGhpcy5nZXRUaGVtZSgpLmxhYmVsRGlzYWJsZWRDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5sYWJlbENvbG9yXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBpY29uU3R5bGUgPSBfcHJvcHMuaWNvblN0eWxlO1xuICAgIHZhciBvbkNoZWNrID0gX3Byb3BzLm9uQ2hlY2s7XG4gICAgdmFyIGNoZWNrZWRJY29uID0gX3Byb3BzLmNoZWNrZWRJY29uO1xuICAgIHZhciB1bkNoZWNrZWRJY29uID0gX3Byb3BzLnVuQ2hlY2tlZEljb247XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2ljb25TdHlsZScsICdvbkNoZWNrJywgJ2NoZWNrZWRJY29uJywgJ3VuQ2hlY2tlZEljb24nXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgYm94U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuYm94LCB0aGlzLnN0YXRlLnN3aXRjaGVkICYmIHN0eWxlcy5ib3hXaGVuU3dpdGNoZWQsIGljb25TdHlsZSwgdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMuYm94V2hlbkRpc2FibGVkKTtcbiAgICB2YXIgY2hlY2tTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5jaGVjaywgdGhpcy5zdGF0ZS5zd2l0Y2hlZCAmJiBzdHlsZXMuY2hlY2tXaGVuU3dpdGNoZWQsIGljb25TdHlsZSwgdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMuY2hlY2tXaGVuRGlzYWJsZWQpO1xuXG4gICAgdmFyIGNoZWNrZWRFbGVtZW50ID0gY2hlY2tlZEljb24gPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hlY2tlZEljb24sIHtcbiAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KGNoZWNrU3R5bGVzLCBjaGVja2VkSWNvbi5wcm9wcy5zdHlsZSlcbiAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2tib3hDaGVja2VkLCB7XG4gICAgICBzdHlsZTogY2hlY2tTdHlsZXNcbiAgICB9KTtcblxuICAgIHZhciB1bkNoZWNrZWRFbGVtZW50ID0gdW5DaGVja2VkSWNvbiA/IFJlYWN0LmNsb25lRWxlbWVudCh1bkNoZWNrZWRJY29uLCB7XG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChib3hTdHlsZXMsIHVuQ2hlY2tlZEljb24ucHJvcHMuc3R5bGUpXG4gICAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm94T3V0bGluZSwge1xuICAgICAgc3R5bGU6IGJveFN0eWxlc1xuICAgIH0pO1xuXG4gICAgdmFyIGNoZWNrYm94RWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICB1bkNoZWNrZWRFbGVtZW50LFxuICAgICAgY2hlY2tlZEVsZW1lbnRcbiAgICApO1xuXG4gICAgdmFyIHJpcHBsZUNvbG9yID0gdGhpcy5zdGF0ZS5zd2l0Y2hlZCA/IGNoZWNrU3R5bGVzLmZpbGwgOiBib3hTdHlsZXMuZmlsbDtcbiAgICB2YXIgbWVyZ2VkSWNvblN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgaWNvblN0eWxlKTtcblxuICAgIHZhciBsYWJlbFN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwsIHRoaXMucHJvcHMubGFiZWxTdHlsZSk7XG5cbiAgICB2YXIgZW5oYW5jZWRTd2l0Y2hQcm9wcyA9IHtcbiAgICAgIHJlZjogJ2VuaGFuY2VkU3dpdGNoJyxcbiAgICAgIGlucHV0VHlwZTogJ2NoZWNrYm94JyxcbiAgICAgIHN3aXRjaGVkOiB0aGlzLnN0YXRlLnN3aXRjaGVkLFxuICAgICAgc3dpdGNoRWxlbWVudDogY2hlY2tib3hFbGVtZW50LFxuICAgICAgcmlwcGxlQ29sb3I6IHJpcHBsZUNvbG9yLFxuICAgICAgaWNvblN0eWxlOiBtZXJnZWRJY29uU3R5bGUsXG4gICAgICBvblN3aXRjaDogdGhpcy5faGFuZGxlQ2hlY2ssXG4gICAgICBsYWJlbFN0eWxlOiBsYWJlbFN0eWxlLFxuICAgICAgb25QYXJlbnRTaG91bGRVcGRhdGU6IHRoaXMuX2hhbmRsZVN0YXRlQ2hhbmdlLFxuICAgICAgZGVmYXVsdFN3aXRjaGVkOiB0aGlzLnByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgbGFiZWxQb3NpdGlvbjogdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uID8gdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uIDogJ3JpZ2h0J1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbmhhbmNlZFN3aXRjaCwgX2V4dGVuZHMoe30sIG90aGVyLCBlbmhhbmNlZFN3aXRjaFByb3BzKSk7XG4gIH0sXG5cbiAgaXNDaGVja2VkOiBmdW5jdGlvbiBpc0NoZWNrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy5lbmhhbmNlZFN3aXRjaC5pc1N3aXRjaGVkKCk7XG4gIH0sXG5cbiAgc2V0Q2hlY2tlZDogZnVuY3Rpb24gc2V0Q2hlY2tlZChuZXdDaGVja2VkVmFsdWUpIHtcbiAgICB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guc2V0U3dpdGNoZWQobmV3Q2hlY2tlZFZhbHVlKTtcbiAgfSxcblxuICBfaGFuZGxlQ2hlY2s6IGZ1bmN0aW9uIF9oYW5kbGVDaGVjayhlLCBpc0lucHV0Q2hlY2tlZCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hlY2spIHRoaXMucHJvcHMub25DaGVjayhlLCBpc0lucHV0Q2hlY2tlZCk7XG4gIH0sXG5cbiAgX2hhbmRsZVN0YXRlQ2hhbmdlOiBmdW5jdGlvbiBfaGFuZGxlU3RhdGVDaGFuZ2UobmV3U3dpdGNoZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc3dpdGNoZWQ6IG5ld1N3aXRjaGVkIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoZWNrYm94OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIENpcmN1bGFyUHJvZ3Jlc3MgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2lyY3VsYXJQcm9ncmVzcycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbW9kZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZSddKSxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBtaW46IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWF4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHNpemU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIF9nZXRSZWxhdGl2ZVZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVsYXRpdmVWYWx1ZSgpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIHZhciBtaW4gPSB0aGlzLnByb3BzLm1pbjtcbiAgICB2YXIgbWF4ID0gdGhpcy5wcm9wcy5tYXg7XG5cbiAgICB2YXIgY2xhbXBlZFZhbHVlID0gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG4gICAgdmFyIHJhbmdlVmFsdWUgPSBtYXggLSBtaW47XG4gICAgdmFyIHJlbFZhbHVlID0gTWF0aC5yb3VuZChjbGFtcGVkVmFsdWUgLyByYW5nZVZhbHVlICogMTAwMDApIC8gMTAwMDA7XG4gICAgcmV0dXJuIHJlbFZhbHVlICogMTAwO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblxuICAgIHZhciB3cmFwcGVyID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLndyYXBwZXIpO1xuICAgIHZhciBwYXRoID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnBhdGgpO1xuXG4gICAgdGhpcy5fc2NhbGVQYXRoKHBhdGgpO1xuICAgIHRoaXMuX3JvdGF0ZVdyYXBwZXIod3JhcHBlcik7XG4gIH0sXG4gIF9zY2FsZVBhdGg6IGZ1bmN0aW9uIF9zY2FsZVBhdGgocGF0aCwgc3RlcCkge1xuICAgIHN0ZXAgPSBzdGVwIHx8IDA7XG4gICAgc3RlcCAlPSAzO1xuXG4gICAgc2V0VGltZW91dCh0aGlzLl9zY2FsZVBhdGguYmluZCh0aGlzLCBwYXRoLCBzdGVwICsgMSksIHN0ZXAgPyA3NTAgOiAyNTApO1xuXG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZCgpKSByZXR1cm47XG4gICAgaWYgKHRoaXMucHJvcHMubW9kZSAhPSAnaW5kZXRlcm1pbmF0ZScpIHJldHVybjtcblxuICAgIGlmIChzdGVwID09PSAwKSB7XG5cbiAgICAgIHBhdGguc3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gJzEsIDIwMCc7XG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSAwO1xuICAgICAgcGF0aC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPT0gMSkge1xuXG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICc4OSwgMjAwJztcbiAgICAgIHBhdGguc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IC0zNTtcbiAgICAgIHBhdGguc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzc1MG1zJztcbiAgICB9IGVsc2Uge1xuXG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICc4OSwyMDAnO1xuICAgICAgcGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gLTEyNDtcbiAgICAgIHBhdGguc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzg1MG1zJztcbiAgICB9XG4gIH0sXG4gIF9yb3RhdGVXcmFwcGVyOiBmdW5jdGlvbiBfcm90YXRlV3JhcHBlcih3cmFwcGVyKSB7XG5cbiAgICBzZXRUaW1lb3V0KHRoaXMuX3JvdGF0ZVdyYXBwZXIuYmluZCh0aGlzLCB3cmFwcGVyKSwgMTAwNTApO1xuXG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZCgpKSByZXR1cm47XG4gICAgaWYgKHRoaXMucHJvcHMubW9kZSAhPSAnaW5kZXRlcm1pbmF0ZScpIHJldHVybjtcblxuICAgIHdyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gbnVsbDtcbiAgICB3cmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9ICdyb3RhdGUoMGRlZyknO1xuICAgIHdyYXBwZXIuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHdyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgxODAwZGVnKSc7XG4gICAgICB3cmFwcGVyLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcxMHMnO1xuICAgIH0sIDUwKTtcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogJ2luZGV0ZXJtaW5hdGUnLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBtaW46IDAsXG4gICAgICBtYXg6IDEwMCxcbiAgICAgIHNpemU6IDFcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGU7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoem9vbSkge1xuICAgIHpvb20gKj0gMS40O1xuICAgIHZhciBzaXplID0gJzUwcHgnO1xuXG4gICAgdmFyIG1hcmdpbiA9IE1hdGgucm91bmQoKDUwICogem9vbSAtIDUwKSAvIDIpO1xuXG4gICAgaWYgKG1hcmdpbiA8IDApIG1hcmdpbiA9IDA7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgbWFyZ2luOiBtYXJnaW4gKyAncHgnLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIGhlaWdodDogc2l6ZVxuXG4gICAgICB9LFxuICAgICAgd3JhcHBlcjoge1xuXG4gICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgIG1hcmdpbjogJzVweCcsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsICcyMHMnLCBudWxsLCAnbGluZWFyJylcbiAgICAgIH0sXG4gICAgICBzdmc6IHtcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoJyArIHpvb20gKyAnKScsXG4gICAgICAgIHdpZHRoOiBzaXplXG4gICAgICB9LFxuICAgICAgcGF0aDoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICc4OSwyMDAnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAwLFxuICAgICAgICBzdHJva2U6IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBzdHJva2VMaW5lY2FwOiAncm91bmQnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5jcmVhdGUoJ2FsbCcsICcxLjVzJywgbnVsbCwgJ2Vhc2UtaW4tb3V0JylcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgICB2YXIgcmVsVmFsID0gdGhpcy5fZ2V0UmVsYXRpdmVWYWx1ZSgpO1xuICAgICAgc3R5bGVzLnBhdGgudHJhbnNpdGlvbiA9IFRyYW5zaXRpb25zLmNyZWF0ZSgnYWxsJywgJzAuM3MnLCBudWxsLCAnbGluZWFyJyk7XG4gICAgICBzdHlsZXMucGF0aC5zdHJva2VEYXNoYXJyYXkgPSBNYXRoLnJvdW5kKHJlbFZhbCAqIDEuMjUpICsgJywyMDAnO1xuICAgIH0gZWxzZSB7fVxuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG4gICAgdmFyIHNpemUgPSBfcHJvcHMuc2l6ZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGUnLCAnc2l6ZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcyhzaXplIHx8IDEpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgc3R5bGUpIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgcmVmOiAnd3JhcHBlcicsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy53cmFwcGVyKSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzdmcnLFxuICAgICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnN2ZykgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdjaXJjbGUnLCB7IHJlZjogJ3BhdGgnLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucGF0aCksIGN4OiAnMjUnLCBjeTogJzI1JywgcjogJzIwJywgZmlsbDogJ25vbmUnLCBzdHJva2VXaWR0aDogJzIuNScsIHN0cm9rZU1pdGVybGltaXQ6ICcxMCcgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENpcmN1bGFyUHJvZ3Jlc3M7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgQmVmb3JlQWZ0ZXJXcmFwcGVyID0gcmVxdWlyZSgnLi9iZWZvcmUtYWZ0ZXItd3JhcHBlcicpO1xuXG52YXIgQ2xlYXJGaXggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2xlYXJGaXgnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGUnXSk7XG5cbiAgICB2YXIgYmVmb3JlID0gZnVuY3Rpb24gYmVmb3JlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogJ1xcJyBcXCcnLFxuICAgICAgICBkaXNwbGF5OiAndGFibGUnXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgYWZ0ZXIgPSBiZWZvcmUoKTtcbiAgICBhZnRlci5jbGVhciA9ICdib3RoJztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQmVmb3JlQWZ0ZXJXcmFwcGVyLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIGJlZm9yZVN0eWxlOiBiZWZvcmUoKSxcbiAgICAgICAgYWZ0ZXJTdHlsZTogYWZ0ZXIsXG4gICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlIH0pLFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsZWFyRml4OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIERheUJ1dHRvbiA9IHJlcXVpcmUoJy4vZGF5LWJ1dHRvbicpO1xudmFyIENsZWFyRml4ID0gcmVxdWlyZSgnLi4vY2xlYXJmaXgnKTtcblxudmFyIENhbGVuZGFyTW9udGggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FsZW5kYXJNb250aCcsXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGlzcGxheURhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBvbkRheVRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBtaW5EYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1heERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgc2hvdWxkRGlzYWJsZURhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIGF1dG9PazogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgbGluZUhlaWdodDogJzMycHgnLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIHBhZGRpbmc6ICc4cHggMTRweCAwIDE0cHgnXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMgfSxcbiAgICAgIHRoaXMuX2dldFdlZWtFbGVtZW50cygpXG4gICAgKTtcbiAgfSxcblxuICBpc1NlbGVjdGVkRGF0ZURpc2FibGVkOiBmdW5jdGlvbiBpc1NlbGVjdGVkRGF0ZURpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZERhdGVEaXNhYmxlZDtcbiAgfSxcblxuICBfZ2V0V2Vla0VsZW1lbnRzOiBmdW5jdGlvbiBfZ2V0V2Vla0VsZW1lbnRzKCkge1xuICAgIHZhciB3ZWVrQXJyYXkgPSBEYXRlVGltZS5nZXRXZWVrQXJyYXkodGhpcy5wcm9wcy5kaXNwbGF5RGF0ZSk7XG5cbiAgICByZXR1cm4gd2Vla0FycmF5Lm1hcChmdW5jdGlvbiAod2VlaywgaSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIENsZWFyRml4LFxuICAgICAgICB7IGtleTogaSB9LFxuICAgICAgICB0aGlzLl9nZXREYXlFbGVtZW50cyh3ZWVrLCBpKVxuICAgICAgKTtcbiAgICB9LCB0aGlzKTtcbiAgfSxcblxuICBfZ2V0RGF5RWxlbWVudHM6IGZ1bmN0aW9uIF9nZXREYXlFbGVtZW50cyh3ZWVrLCBpKSB7XG4gICAgcmV0dXJuIHdlZWsubWFwKGZ1bmN0aW9uIChkYXksIGopIHtcbiAgICAgIHZhciBpc1NhbWVEYXRlID0gRGF0ZVRpbWUuaXNFcXVhbERhdGUodGhpcy5wcm9wcy5zZWxlY3RlZERhdGUsIGRheSk7XG4gICAgICB2YXIgZGlzYWJsZWQgPSB0aGlzLl9zaG91bGREaXNhYmxlRGF0ZShkYXkpO1xuICAgICAgdmFyIHNlbGVjdGVkID0gIWRpc2FibGVkICYmIGlzU2FtZURhdGU7XG5cbiAgICAgIGlmIChpc1NhbWVEYXRlKSB7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdGVkRGF0ZURpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zZWxlY3RlZERhdGVEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERheUJ1dHRvbiwge1xuICAgICAgICBrZXk6ICdkYicgKyBpICsgaixcbiAgICAgICAgZGF0ZTogZGF5LFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVEYXlUb3VjaFRhcCxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfSk7XG4gICAgfSwgdGhpcyk7XG4gIH0sXG5cbiAgX2hhbmRsZURheVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlRGF5VG91Y2hUYXAoZSwgZGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uRGF5VG91Y2hUYXApIHRoaXMucHJvcHMub25EYXlUb3VjaFRhcChlLCBkYXRlKTtcbiAgfSxcblxuICBfc2hvdWxkRGlzYWJsZURhdGU6IGZ1bmN0aW9uIF9zaG91bGREaXNhYmxlRGF0ZShkYXkpIHtcbiAgICBpZiAoZGF5ID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGRpc2FibGVkID0gIURhdGVUaW1lLmlzQmV0d2VlbkRhdGVzKGRheSwgdGhpcy5wcm9wcy5taW5EYXRlLCB0aGlzLnByb3BzLm1heERhdGUpO1xuICAgIGlmICghZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5zaG91bGREaXNhYmxlRGF0ZSkgZGlzYWJsZWQgPSB0aGlzLnByb3BzLnNob3VsZERpc2FibGVEYXRlKGRheSk7XG5cbiAgICByZXR1cm4gZGlzYWJsZWQ7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsZW5kYXJNb250aDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBJY29uQnV0dG9uID0gcmVxdWlyZSgnLi4vaWNvbi1idXR0b24nKTtcbnZhciBUb29sYmFyID0gcmVxdWlyZSgnLi4vdG9vbGJhci90b29sYmFyJyk7XG52YXIgVG9vbGJhckdyb3VwID0gcmVxdWlyZSgnLi4vdG9vbGJhci90b29sYmFyLWdyb3VwJyk7XG52YXIgRHJvcERvd25NZW51ID0gcmVxdWlyZSgnLi4vZHJvcC1kb3duLW1lbnUnKTtcbnZhciBOYXZpZ2F0aW9uQ2hldnJvbkxlZnQgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi1jaGV2cm9uLWxlZnQnKTtcbnZhciBOYXZpZ2F0aW9uQ2hldnJvbkxlZnREb3VibGUgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi1jaGV2cm9uLWxlZnQtZG91YmxlJyk7XG52YXIgTmF2aWdhdGlvbkNoZXZyb25SaWdodCA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tcmlnaHQnKTtcbnZhciBOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0RG91YmxlID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL25hdmlnYXRpb24tY2hldnJvbi1yaWdodC1kb3VibGUnKTtcbnZhciBTbGlkZUluVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgnLi4vdHJhbnNpdGlvbi1ncm91cHMvc2xpZGUtaW4nKTtcblxudmFyIENhbGVuZGFyVG9vbGJhciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDYWxlbmRhclRvb2xiYXInLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRpc3BsYXlEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb25Nb250aENoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25ZZWFyQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBwcmV2WWVhcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbmV4dFllYXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHByZXZNb250aDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbmV4dE1vbnRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBoaWRlWWVhckNoYW5nZUJ1dHRvbnM6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZXZZZWFyOiB0cnVlLFxuICAgICAgbmV4dFllYXI6IHRydWUsXG4gICAgICBwcmV2TW9udGg6IHRydWUsXG4gICAgICBuZXh0TW9udGg6IHRydWUsXG4gICAgICBoaWRlWWVhckNoYW5nZUJ1dHRvbnM6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogJ3VwJ1xuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uO1xuXG4gICAgaWYgKG5leHRQcm9wcy5kaXNwbGF5RGF0ZSAhPT0gdGhpcy5wcm9wcy5kaXNwbGF5RGF0ZSkge1xuICAgICAgZGlyZWN0aW9uID0gbmV4dFByb3BzLmRpc3BsYXlEYXRlID4gdGhpcy5wcm9wcy5kaXNwbGF5RGF0ZSA/ICd1cCcgOiAnZG93bic7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX3N0eWxlczogZnVuY3Rpb24gX3N0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnaW5oZXJpdCdcbiAgICAgIH0sXG5cbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICcxN3B4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzE0cHgnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHpJbmRleDogLTFcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtb250aCA9IERhdGVUaW1lLmdldEZ1bGxNb250aCh0aGlzLnByb3BzLmRpc3BsYXlEYXRlKTtcbiAgICB2YXIgeWVhciA9IHRoaXMucHJvcHMuZGlzcGxheURhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICB2YXIgcHJldlllYXJDaGFuZ2VCdXR0b24gPSB0aGlzLl9nZXRQcmV2WWVhckNoYW5nZUJ1dHRvbigpO1xuICAgIHZhciBuZXh0WWVhckNoYW5nZUJ1dHRvbiA9IHRoaXMuX2dldE5leHRZZWFyQ2hhbmdlQnV0dG9uKCk7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuX3N0eWxlcygpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUb29sYmFyLFxuICAgICAgeyBjbGFzc05hbWU6ICdtdWktZGF0ZS1waWNrZXItY2FsZW5kYXItdG9vbGJhcicsIHN0eWxlOiBzdHlsZXMucm9vdCwgbm9HdXR0ZXI6IHRydWUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRvb2xiYXJHcm91cCxcbiAgICAgICAgeyBrZXk6IDAsIGZsb2F0OiAnbGVmdCcgfSxcbiAgICAgICAgcHJldlllYXJDaGFuZ2VCdXR0b24sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgSWNvbkJ1dHRvbixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMucHJvcHMucHJldk1vbnRoLFxuICAgICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5fcHJldk1vbnRoVG91Y2hUYXAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25DaGV2cm9uTGVmdCwgbnVsbClcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRvb2xiYXJHcm91cCxcbiAgICAgICAgeyBrZXk6IDEsIGZsb2F0OiAncmlnaHQnIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgSWNvbkJ1dHRvbixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMucHJvcHMubmV4dE1vbnRoLFxuICAgICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5fbmV4dE1vbnRoVG91Y2hUYXAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25DaGV2cm9uUmlnaHQsIG51bGwpXG4gICAgICAgICksXG4gICAgICAgIG5leHRZZWFyQ2hhbmdlQnV0dG9uXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgU2xpZGVJblRyYW5zaXRpb25Hcm91cCxcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBzdHlsZXMudGl0bGUsXG4gICAgICAgICAgZGlyZWN0aW9uOiB0aGlzLnN0YXRlLnRyYW5zaXRpb25EaXJlY3Rpb24gfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGtleTogbW9udGggKyAnXycgKyB5ZWFyIH0sXG4gICAgICAgICAgbW9udGgsXG4gICAgICAgICAgJyAnLFxuICAgICAgICAgIHllYXJcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX2dldFByZXZZZWFyQ2hhbmdlQnV0dG9uOiBmdW5jdGlvbiBfZ2V0UHJldlllYXJDaGFuZ2VCdXR0b24oKSB7XG4gICAgdmFyIHN0eWxlID0ge1xuICAgICAgZGlzcGxheTogdGhpcy5wcm9wcy5oaWRlWWVhckNoYW5nZUJ1dHRvbnMgPyAnbm9uZScgOiAnJ1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEljb25CdXR0b24sXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLnByb3BzLnByZXZZZWFyLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9wcmV2WWVhclRvdWNoVGFwIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25DaGV2cm9uTGVmdERvdWJsZSwgbnVsbClcbiAgICApO1xuICB9LFxuXG4gIF9nZXROZXh0WWVhckNoYW5nZUJ1dHRvbjogZnVuY3Rpb24gX2dldE5leHRZZWFyQ2hhbmdlQnV0dG9uKCkge1xuICAgIHZhciBzdHlsZSA9IHtcbiAgICAgIGRpc3BsYXk6IHRoaXMucHJvcHMuaGlkZVllYXJDaGFuZ2VCdXR0b25zID8gJ25vbmUnIDogJydcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBJY29uQnV0dG9uLFxuICAgICAge1xuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIGRpc2FibGVkOiAhdGhpcy5wcm9wcy5uZXh0WWVhcixcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5fbmV4dFllYXJUb3VjaFRhcCB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0RG91YmxlLCBudWxsKVxuICAgICk7XG4gIH0sXG5cbiAgX3ByZXZZZWFyVG91Y2hUYXA6IGZ1bmN0aW9uIF9wcmV2WWVhclRvdWNoVGFwKCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uWWVhckNoYW5nZSAmJiB0aGlzLnByb3BzLnByZXZZZWFyKSB0aGlzLnByb3BzLm9uWWVhckNoYW5nZSgtMSk7XG4gIH0sXG5cbiAgX25leHRZZWFyVG91Y2hUYXA6IGZ1bmN0aW9uIF9uZXh0WWVhclRvdWNoVGFwKCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uWWVhckNoYW5nZSAmJiB0aGlzLnByb3BzLm5leHRZZWFyKSB0aGlzLnByb3BzLm9uWWVhckNoYW5nZSgxKTtcbiAgfSxcblxuICBfcHJldk1vbnRoVG91Y2hUYXA6IGZ1bmN0aW9uIF9wcmV2TW9udGhUb3VjaFRhcCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vbnRoQ2hhbmdlICYmIHRoaXMucHJvcHMucHJldk1vbnRoKSB0aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UoLTEpO1xuICB9LFxuXG4gIF9uZXh0TW9udGhUb3VjaFRhcDogZnVuY3Rpb24gX25leHRNb250aFRvdWNoVGFwKCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UgJiYgdGhpcy5wcm9wcy5uZXh0TW9udGgpIHRoaXMucHJvcHMub25Nb250aENoYW5nZSgxKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxlbmRhclRvb2xiYXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY29sb3JzJyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBZZWFyQnV0dG9uID0gcmVxdWlyZSgnLi95ZWFyLWJ1dHRvbicpO1xuXG52YXIgQ2FsZW5kYXJZZWFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0NhbGVuZGFyWWVhcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGlzcGxheURhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBvblllYXJUb3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0ZWREYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgbWluRGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtYXhEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX3Njcm9sbFRvU2VsZWN0ZWRZZWFyKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICB0aGlzLl9zY3JvbGxUb1NlbGVjdGVkWWVhcigpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciB5ZWFycyA9IHRoaXMuX2dldFllYXJzKCk7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnMzZweCcsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgcGFkZGluZzogJzhweCAxNHB4IDAgMTRweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICBvdmVyZmxvd1k6ICdzY3JvbGwnXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMgfSxcbiAgICAgIHllYXJzXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0WWVhcnM6IGZ1bmN0aW9uIF9nZXRZZWFycygpIHtcbiAgICB2YXIgbWluWWVhciA9IHRoaXMucHJvcHMubWluRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHZhciBtYXhZZWFyID0gdGhpcy5wcm9wcy5tYXhEYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgICB2YXIgeWVhcnMgPSBbXTtcbiAgICB2YXIgZGF0ZUNoZWNrID0gRGF0ZVRpbWUuY2xvbmUodGhpcy5wcm9wcy5zZWxlY3RlZERhdGUpO1xuICAgIGZvciAodmFyIHllYXIgPSBtaW5ZZWFyOyB5ZWFyIDw9IG1heFllYXI7IHllYXIrKykge1xuICAgICAgZGF0ZUNoZWNrLnNldEZ1bGxZZWFyKHllYXIpO1xuICAgICAgaWYgKCFEYXRlVGltZS5pc0JldHdlZW5EYXRlcyhkYXRlQ2hlY2ssIHRoaXMucHJvcHMubWluRGF0ZSwgdGhpcy5wcm9wcy5tYXhEYXRlKSkgY29udGludWU7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyO1xuICAgICAgdmFyIHNlbGVjdGVkUHJvcHMgPSB7fTtcbiAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICBzZWxlY3RlZFByb3BzID0geyByZWY6ICdzZWxlY3RlZFllYXJCdXR0b24nIH07XG4gICAgICB9XG5cbiAgICAgIHZhciB5ZWFyQnV0dG9uID0gUmVhY3QuY3JlYXRlRWxlbWVudChZZWFyQnV0dG9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogJ3liJyArIHllYXIsXG4gICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZVllYXJUb3VjaFRhcCxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkXG4gICAgICB9LCBzZWxlY3RlZFByb3BzKSk7XG5cbiAgICAgIHllYXJzLnB1c2goeWVhckJ1dHRvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHllYXJzO1xuICB9LFxuXG4gIF9zY3JvbGxUb1NlbGVjdGVkWWVhcjogZnVuY3Rpb24gX3Njcm9sbFRvU2VsZWN0ZWRZZWFyKCkge1xuICAgIGlmICh0aGlzLnJlZnMuc2VsZWN0ZWRZZWFyQnV0dG9uID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjb250YWluZXIgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICB2YXIgeWVhckJ1dHRvbk5vZGUgPSB0aGlzLnJlZnMuc2VsZWN0ZWRZZWFyQnV0dG9uLmdldERPTU5vZGUoKTtcblxuICAgIHZhciBjb250YWluZXJIZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuICAgIHZhciB5ZWFyQnV0dG9uTm9kZUhlaWdodCA9IHllYXJCdXR0b25Ob2RlLmNsaWVudEhlaWdodCB8fCAzMjtcblxuICAgIHZhciBzY3JvbGxZT2Zmc2V0ID0geWVhckJ1dHRvbk5vZGUub2Zmc2V0VG9wICsgeWVhckJ1dHRvbk5vZGVIZWlnaHQgLyAyIC0gY29udGFpbmVySGVpZ2h0IC8gMjtcbiAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsWU9mZnNldDtcbiAgfSxcblxuICBfaGFuZGxlWWVhclRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlWWVhclRvdWNoVGFwKGUsIHllYXIpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblllYXJUb3VjaFRhcCkgdGhpcy5wcm9wcy5vblllYXJUb3VjaFRhcChlLCB5ZWFyKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxlbmRhclllYXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBXaW5kb3dMaXN0ZW5hYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlJyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENhbGVuZGFyTW9udGggPSByZXF1aXJlKCcuL2NhbGVuZGFyLW1vbnRoJyk7XG52YXIgQ2FsZW5kYXJZZWFyID0gcmVxdWlyZSgnLi9jYWxlbmRhci15ZWFyJyk7XG52YXIgQ2FsZW5kYXJUb29sYmFyID0gcmVxdWlyZSgnLi9jYWxlbmRhci10b29sYmFyJyk7XG52YXIgRGF0ZURpc3BsYXkgPSByZXF1aXJlKCcuL2RhdGUtZGlzcGxheScpO1xudmFyIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKCcuLi90cmFuc2l0aW9uLWdyb3Vwcy9zbGlkZS1pbicpO1xudmFyIENsZWFyRml4ID0gcmVxdWlyZSgnLi4vY2xlYXJmaXgnKTtcblxudmFyIENhbGVuZGFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0NhbGVuZGFyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlLCBXaW5kb3dMaXN0ZW5hYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbml0aWFsRGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBpc0FjdGl2ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbWluRGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtYXhEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHNob3VsZERpc2FibGVEYXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBoaWRlVG9vbGJhclllYXJDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHNob3VsZFNob3dNb250aERheVBpY2tlckZpcnN0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzaG91bGRTaG93WWVhclBpY2tlckZpcnN0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93WWVhclNlbGVjdG9yOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvblNlbGVjdGVkRGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgfSxcblxuICB3aW5kb3dMaXN0ZW5lcnM6IHtcbiAgICAna2V5ZG93bic6ICdfaGFuZGxlV2luZG93S2V5RG93bidcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdGlhbERhdGU6IG5ldyBEYXRlKCksXG4gICAgICBtaW5EYXRlOiBEYXRlVGltZS5hZGRZZWFycyhuZXcgRGF0ZSgpLCAtMTAwKSxcbiAgICAgIG1heERhdGU6IERhdGVUaW1lLmFkZFllYXJzKG5ldyBEYXRlKCksIDEwMCksXG4gICAgICBoaWRlVG9vbGJhclllYXJDaGFuZ2U6IGZhbHNlLFxuICAgICAgc2hvdWxkU2hvd01vbnRoRGF5UGlja2VyRmlyc3Q6IHRydWUsXG4gICAgICBzaG91bGRTaG93WWVhclBpY2tlckZpcnN0OiBmYWxzZSxcbiAgICAgIHNob3dZZWFyU2VsZWN0b3I6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheURhdGU6IERhdGVUaW1lLmdldEZpcnN0RGF5T2ZNb250aCh0aGlzLnByb3BzLmluaXRpYWxEYXRlKSxcbiAgICAgIHNlbGVjdGVkRGF0ZTogdGhpcy5wcm9wcy5pbml0aWFsRGF0ZSxcbiAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246ICdsZWZ0JyxcbiAgICAgIGRpc3BsYXlNb250aERheTogdGhpcy5wcm9wcy5zaG91bGRTaG93TW9udGhEYXlQaWNrZXJGaXJzdCB8fCB0aGlzLnByb3BzLnNob3VsZFNob3dZZWFyUGlja2VyRmlyc3QgfHwgdHJ1ZSxcbiAgICAgIHRyYW5zaXRpb25FbnRlcjogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7fSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuaW5pdGlhbERhdGUgIT09IHRoaXMucHJvcHMuaW5pdGlhbERhdGUpIHtcbiAgICAgIHZhciBkID0gbmV4dFByb3BzLmluaXRpYWxEYXRlIHx8IG5ldyBEYXRlKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGlzcGxheURhdGU6IERhdGVUaW1lLmdldEZpcnN0RGF5T2ZNb250aChkKSxcbiAgICAgICAgc2VsZWN0ZWREYXRlOiBkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFByb3BzLnNob3VsZFNob3dNb250aERheVBpY2tlckZpcnN0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGlzcGxheU1vbnRoRGF5OiBuZXh0UHJvcHMuc2hvdWxkU2hvd01vbnRoRGF5UGlja2VyRmlyc3QgfSk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciB5ZWFyQ291bnQgPSBEYXRlVGltZS55ZWFyRGlmZih0aGlzLnByb3BzLm1heERhdGUsIHRoaXMucHJvcHMubWluRGF0ZSkgKyAxO1xuICAgIHZhciB3ZWVrQ291bnQgPSBEYXRlVGltZS5nZXRXZWVrQXJyYXkodGhpcy5zdGF0ZS5kaXNwbGF5RGF0ZSkubGVuZ3RoO1xuICAgIHZhciB0b29sYmFySW50ZXJhY3Rpb25zID0gdGhpcy5fZ2V0VG9vbGJhckludGVyYWN0aW9ucygpO1xuICAgIHZhciBoaWRlWWVhckNoYW5nZUJ1dHRvbnMgPSB0aGlzLnByb3BzLmhpZGVUb29sYmFyWWVhckNoYW5nZSB8fCAhdGhpcy5wcm9wcy5zaG93WWVhclNlbGVjdG9yO1xuICAgIHZhciBpc011bHRpWWVhclJhbmdlID0geWVhckNvdW50ID4gMjsgLy8gV2FudCBhIHllYXIgcmFuZ2UgZ3JlYXRlciB0aGFuIDEuIEV4LiBbMjAxNCwyMDE2XSBoYXMgYSBjb3VudCBvZiAzXG4gICAgdmFyIGlzTGFuZHNjYXBlID0gdGhpcy5wcm9wcy5tb2RlID09PSAnbGFuZHNjYXBlJztcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICB9LFxuICAgICAgY2FsZW5kYXJDb250YWluZXI6IHtcbiAgICAgICAgd2lkdGg6IGlzTGFuZHNjYXBlID8gJzI4MHB4JyA6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiB3ZWVrQ291bnQgPT09IDUgPyAnMjY4cHgnIDogd2Vla0NvdW50ID09PSA2ID8gJzMwOHB4JyA6ICcyMjhweCcsXG4gICAgICAgIGZsb2F0OiBpc0xhbmRzY2FwZSA/ICdyaWdodCcgOiAnbm9uZScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzE1MG1zJywgJ2hlaWdodCcpXG4gICAgICB9LFxuICAgICAgeWVhckNvbnRhaW5lcjoge1xuICAgICAgICB3aWR0aDogJzI4MHB4JyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBoZWlnaHQ6IHllYXJDb3VudCA8IDYgPyB5ZWFyQ291bnQgKiA1NiArIDEwIDogd2Vla0NvdW50ID09PSA1ID8gJzI2OHB4JyA6IHdlZWtDb3VudCA9PT0gNiA/ICczMDhweCcgOiAnMjI4cHgnLFxuICAgICAgICBmbG9hdDogaXNMYW5kc2NhcGUgPyAncmlnaHQnIDogJ25vbmUnXG4gICAgICB9LFxuICAgICAgZGF0ZURpc3BsYXk6IHtcbiAgICAgICAgd2lkdGg6IGlzTGFuZHNjYXBlID8gJzI4MHB4JyA6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGZsb2F0OiBpc0xhbmRzY2FwZSA/ICdsZWZ0JyA6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHdlZWtUaXRsZToge1xuICAgICAgICBwYWRkaW5nOiAnMCAxNHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzEycHgnLFxuICAgICAgICBvcGFjaXR5OiAnMC41JyxcbiAgICAgICAgaGVpZ2h0OiAnMTJweCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgICAgICBtYXJnaW46IDBcbiAgICAgIH0sXG4gICAgICB3ZWVrVGl0bGVEYXk6IHtcbiAgICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIHdpZHRoOiAnMzJweCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIG1hcmdpbjogJzAgMnB4J1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5kaXNwbGF5TW9udGhEYXkgfHwgIXRoaXMucHJvcHMuc2hvd1llYXJTZWxlY3Rvcikge1xuICAgICAgc3R5bGVzLnllYXJDb250YWluZXIuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzLmNhbGVuZGFyQ29udGFpbmVyLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDbGVhckZpeCxcbiAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QpIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGVEaXNwbGF5LCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuZGF0ZURpc3BsYXksXG4gICAgICAgIHNlbGVjdGVkRGF0ZTogdGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsXG4gICAgICAgIGhhbmRsZU1vbnRoRGF5Q2xpY2s6IHRoaXMuX2hhbmRsZU1vbnRoRGF5Q2xpY2ssXG4gICAgICAgIGhhbmRsZVllYXJDbGljazogdGhpcy5faGFuZGxlWWVhckNsaWNrLFxuICAgICAgICB5ZWFyU2VsZWN0aW9uQXZhaWxhYmxlOiB0aGlzLnByb3BzLnNob3dZZWFyU2VsZWN0b3IgJiYgaXNNdWx0aVllYXJSYW5nZSxcbiAgICAgICAgbW9udGhEYXlTZWxlY3RlZDogdGhpcy5zdGF0ZS5kaXNwbGF5TW9udGhEYXksXG4gICAgICAgIG1vZGU6IHRoaXMucHJvcHMubW9kZSxcbiAgICAgICAgd2Vla0NvdW50OiB3ZWVrQ291bnQgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNhbGVuZGFyQ29udGFpbmVyIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FsZW5kYXJUb29sYmFyLCB7XG4gICAgICAgICAgZGlzcGxheURhdGU6IHRoaXMuc3RhdGUuZGlzcGxheURhdGUsXG4gICAgICAgICAgb25Nb250aENoYW5nZTogdGhpcy5faGFuZGxlTW9udGhDaGFuZ2UsXG4gICAgICAgICAgb25ZZWFyQ2hhbmdlOiB0aGlzLl9oYW5kbGVZZWFyQ2hhbmdlLFxuICAgICAgICAgIHByZXZNb250aDogdG9vbGJhckludGVyYWN0aW9ucy5wcmV2TW9udGgsXG4gICAgICAgICAgbmV4dE1vbnRoOiB0b29sYmFySW50ZXJhY3Rpb25zLm5leHRNb250aCxcbiAgICAgICAgICBwcmV2WWVhcjogdG9vbGJhckludGVyYWN0aW9ucy5wcmV2WWVhcixcbiAgICAgICAgICBuZXh0WWVhcjogdG9vbGJhckludGVyYWN0aW9ucy5uZXh0WWVhcixcbiAgICAgICAgICBoaWRlWWVhckNoYW5nZUJ1dHRvbnM6IGhpZGVZZWFyQ2hhbmdlQnV0dG9ucyB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBDbGVhckZpeCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbGVtZW50VHlwZTogJ3VsJyxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMud2Vla1RpdGxlIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2Vla1RpdGxlRGF5IH0sXG4gICAgICAgICAgICAnUydcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndlZWtUaXRsZURheSB9LFxuICAgICAgICAgICAgJ00nXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53ZWVrVGl0bGVEYXkgfSxcbiAgICAgICAgICAgICdUJ1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2Vla1RpdGxlRGF5IH0sXG4gICAgICAgICAgICAnVydcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndlZWtUaXRsZURheSB9LFxuICAgICAgICAgICAgJ1QnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53ZWVrVGl0bGVEYXkgfSxcbiAgICAgICAgICAgICdGJ1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2Vla1RpdGxlRGF5IH0sXG4gICAgICAgICAgICAnUydcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgU2xpZGVJblRyYW5zaXRpb25Hcm91cCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuc3RhdGUudHJhbnNpdGlvbkRpcmVjdGlvbiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FsZW5kYXJNb250aCwge1xuICAgICAgICAgICAga2V5OiB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlLnRvRGF0ZVN0cmluZygpLFxuICAgICAgICAgICAgcmVmOiAnY2FsZW5kYXInLFxuICAgICAgICAgICAgZGlzcGxheURhdGU6IHRoaXMuc3RhdGUuZGlzcGxheURhdGUsXG4gICAgICAgICAgICBvbkRheVRvdWNoVGFwOiB0aGlzLl9oYW5kbGVEYXlUb3VjaFRhcCxcbiAgICAgICAgICAgIHNlbGVjdGVkRGF0ZTogdGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsXG4gICAgICAgICAgICBtaW5EYXRlOiB0aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgICAgICBtYXhEYXRlOiB0aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgICAgICBzaG91bGREaXNhYmxlRGF0ZTogdGhpcy5wcm9wcy5zaG91bGREaXNhYmxlRGF0ZSB9KVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy55ZWFyQ29udGFpbmVyIH0sXG4gICAgICAgIHRoaXMuX3llYXJTZWxlY3RvcigpXG4gICAgICApXG4gICAgKTtcbiAgfSxcblxuICBfeWVhclNlbGVjdG9yOiBmdW5jdGlvbiBfeWVhclNlbGVjdG9yKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dZZWFyU2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyWWVhciwge1xuICAgICAgICBrZXk6ICd5ZWFycycsXG4gICAgICAgIGRpc3BsYXlEYXRlOiB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlLFxuICAgICAgICBvblllYXJUb3VjaFRhcDogdGhpcy5faGFuZGxlWWVhclRvdWNoVGFwLFxuICAgICAgICBzZWxlY3RlZERhdGU6IHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLFxuICAgICAgICBtaW5EYXRlOiB0aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgIG1heERhdGU6IHRoaXMucHJvcHMubWF4RGF0ZSB9KTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0U2VsZWN0ZWREYXRlOiBmdW5jdGlvbiBnZXRTZWxlY3RlZERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlO1xuICB9LFxuXG4gIGlzU2VsZWN0ZWREYXRlRGlzYWJsZWQ6IGZ1bmN0aW9uIGlzU2VsZWN0ZWREYXRlRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy5jYWxlbmRhci5pc1NlbGVjdGVkRGF0ZURpc2FibGVkKCk7XG4gIH0sXG5cbiAgX2FkZFNlbGVjdGVkRGF5czogZnVuY3Rpb24gX2FkZFNlbGVjdGVkRGF5cyhkYXlzKSB7XG4gICAgdGhpcy5fc2V0U2VsZWN0ZWREYXRlKERhdGVUaW1lLmFkZERheXModGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsIGRheXMpKTtcbiAgfSxcblxuICBfYWRkU2VsZWN0ZWRNb250aHM6IGZ1bmN0aW9uIF9hZGRTZWxlY3RlZE1vbnRocyhtb250aHMpIHtcbiAgICB0aGlzLl9zZXRTZWxlY3RlZERhdGUoRGF0ZVRpbWUuYWRkTW9udGhzKHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLCBtb250aHMpKTtcbiAgfSxcblxuICBfYWRkU2VsZWN0ZWRZZWFyczogZnVuY3Rpb24gX2FkZFNlbGVjdGVkWWVhcnMoeWVhcnMpIHtcbiAgICB0aGlzLl9zZXRTZWxlY3RlZERhdGUoRGF0ZVRpbWUuYWRkWWVhcnModGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsIHllYXJzKSk7XG4gIH0sXG5cbiAgX3NldERpc3BsYXlEYXRlOiBmdW5jdGlvbiBfc2V0RGlzcGxheURhdGUoZCwgbmV3U2VsZWN0ZWREYXRlKSB7XG4gICAgdmFyIG5ld0Rpc3BsYXlEYXRlID0gRGF0ZVRpbWUuZ2V0Rmlyc3REYXlPZk1vbnRoKGQpO1xuICAgIHZhciBkaXJlY3Rpb24gPSBuZXdEaXNwbGF5RGF0ZSA+IHRoaXMuc3RhdGUuZGlzcGxheURhdGUgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gICAgaWYgKG5ld0Rpc3BsYXlEYXRlICE9PSB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGlzcGxheURhdGU6IG5ld0Rpc3BsYXlEYXRlLFxuICAgICAgICB0cmFuc2l0aW9uRGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICAgIHNlbGVjdGVkRGF0ZTogbmV3U2VsZWN0ZWREYXRlIHx8IHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX3NldFNlbGVjdGVkRGF0ZTogZnVuY3Rpb24gX3NldFNlbGVjdGVkRGF0ZShkYXRlLCBlKSB7XG4gICAgdmFyIGFkanVzdGVkRGF0ZSA9IGRhdGU7XG4gICAgaWYgKERhdGVUaW1lLmlzQmVmb3JlRGF0ZShkYXRlLCB0aGlzLnByb3BzLm1pbkRhdGUpKSB7XG4gICAgICBhZGp1c3RlZERhdGUgPSB0aGlzLnByb3BzLm1pbkRhdGU7XG4gICAgfSBlbHNlIGlmIChEYXRlVGltZS5pc0FmdGVyRGF0ZShkYXRlLCB0aGlzLnByb3BzLm1heERhdGUpKSB7XG4gICAgICBhZGp1c3RlZERhdGUgPSB0aGlzLnByb3BzLm1heERhdGU7XG4gICAgfVxuXG4gICAgdmFyIG5ld0Rpc3BsYXlEYXRlID0gRGF0ZVRpbWUuZ2V0Rmlyc3REYXlPZk1vbnRoKGFkanVzdGVkRGF0ZSk7XG4gICAgaWYgKG5ld0Rpc3BsYXlEYXRlICE9PSB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlKSB7XG4gICAgICB0aGlzLl9zZXREaXNwbGF5RGF0ZShuZXdEaXNwbGF5RGF0ZSwgYWRqdXN0ZWREYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkRGF0ZTogYWRqdXN0ZWREYXRlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25TZWxlY3RlZERhdGUpIHRoaXMucHJvcHMub25TZWxlY3RlZERhdGUoZSwgZGF0ZSk7XG4gIH0sXG5cbiAgX2hhbmRsZURheVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlRGF5VG91Y2hUYXAoZSwgZGF0ZSkge1xuICAgIHRoaXMuX3NldFNlbGVjdGVkRGF0ZShkYXRlLCBlKTtcbiAgfSxcblxuICBfaGFuZGxlTW9udGhDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVNb250aENoYW5nZShtb250aHMpIHtcbiAgICB0aGlzLl9hZGRTZWxlY3RlZE1vbnRocyhtb250aHMpO1xuICB9LFxuXG4gIF9oYW5kbGVZZWFyQ2hhbmdlOiBmdW5jdGlvbiBfaGFuZGxlWWVhckNoYW5nZSh5ZWFycykge1xuICAgIHRoaXMuX2FkZFNlbGVjdGVkWWVhcnMoeWVhcnMpO1xuICB9LFxuXG4gIF9oYW5kbGVZZWFyVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVZZWFyVG91Y2hUYXAoZSwgeWVhcikge1xuICAgIHZhciBkYXRlID0gRGF0ZVRpbWUuY2xvbmUodGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUpO1xuICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gICAgdGhpcy5fc2V0U2VsZWN0ZWREYXRlKGRhdGUsIGUpO1xuICB9LFxuXG4gIF9nZXRUb29sYmFySW50ZXJhY3Rpb25zOiBmdW5jdGlvbiBfZ2V0VG9vbGJhckludGVyYWN0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJldk1vbnRoOiBEYXRlVGltZS5tb250aERpZmYodGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsIHRoaXMucHJvcHMubWluRGF0ZSkgPiAwLFxuICAgICAgbmV4dE1vbnRoOiBEYXRlVGltZS5tb250aERpZmYodGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsIHRoaXMucHJvcHMubWF4RGF0ZSkgPCAwLFxuICAgICAgcHJldlllYXI6IERhdGVUaW1lLnllYXJEaWZmKHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLCB0aGlzLnByb3BzLm1pbkRhdGUpID4gMCxcbiAgICAgIG5leHRZZWFyOiBEYXRlVGltZS55ZWFyRGlmZih0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSwgdGhpcy5wcm9wcy5tYXhEYXRlKSA8IDBcbiAgICB9O1xuICB9LFxuXG4gIF9oYW5kbGVNb250aERheUNsaWNrOiBmdW5jdGlvbiBfaGFuZGxlTW9udGhEYXlDbGljaygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlzcGxheU1vbnRoRGF5OiB0cnVlIH0pO1xuICB9LFxuXG4gIF9oYW5kbGVZZWFyQ2xpY2s6IGZ1bmN0aW9uIF9oYW5kbGVZZWFyQ2xpY2soKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpc3BsYXlNb250aERheTogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZVdpbmRvd0tleURvd246IGZ1bmN0aW9uIF9oYW5kbGVXaW5kb3dLZXlEb3duKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pc0FjdGl2ZSkge1xuXG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIEtleUNvZGUuVVA6XG4gICAgICAgICAgaWYgKGUuYWx0S2V5ICYmIGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkWWVhcnMoLTEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRNb250aHMoLTEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZERheXMoLTcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEtleUNvZGUuRE9XTjpcbiAgICAgICAgICBpZiAoZS5hbHRLZXkgJiYgZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRZZWFycygxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkTW9udGhzKDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZERheXMoNyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgS2V5Q29kZS5SSUdIVDpcbiAgICAgICAgICBpZiAoZS5hbHRLZXkgJiYgZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRZZWFycygxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkTW9udGhzKDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZERheXMoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgS2V5Q29kZS5MRUZUOlxuICAgICAgICAgIGlmIChlLmFsdEtleSAmJiBlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZFllYXJzKC0xKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkTW9udGhzKC0xKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWREYXlzKC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbGVuZGFyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xudmFyIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKCcuLi90cmFuc2l0aW9uLWdyb3Vwcy9zbGlkZS1pbicpO1xuXG52YXIgRGF0ZURpc3BsYXkgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRGF0ZURpc3BsYXknLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgc2VsZWN0ZWREYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgd2Vla0NvdW50OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHllYXJTZWxlY3Rpb25BdmFpbGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG1vbnRoRGF5U2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdlZWtDb3VudDogNCxcbiAgICAgIHllYXJTZWxlY3Rpb25BdmFpbGFibGU6IHRydWUsXG4gICAgICBtb250aERheVNlbGVjdGVkOiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogJ3VwJyxcbiAgICAgIHNlbGVjdGVkWWVhcjogIXRoaXMucHJvcHMubW9udGhEYXlTZWxlY3RlZFxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uO1xuXG4gICAgaWYgKG5leHRQcm9wcy5zZWxlY3RlZERhdGUgIT09IHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlKSB7XG4gICAgICBkaXJlY3Rpb24gPSBuZXh0UHJvcHMuc2VsZWN0ZWREYXRlID4gdGhpcy5wcm9wcy5zZWxlY3RlZERhdGUgPyAndXAnIDogJ2Rvd24nO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRQcm9wcy5tb250aERheVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFllYXI6ICFuZXh0UHJvcHMubW9udGhEYXlTZWxlY3RlZCB9KTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmRhdGVQaWNrZXI7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHNlbGVjdGVkRGF0ZSA9IF9wcm9wcy5zZWxlY3RlZERhdGU7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzZWxlY3RlZERhdGUnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgZGF5T2ZXZWVrID0gRGF0ZVRpbWUuZ2V0RGF5T2ZXZWVrKHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlKTtcbiAgICB2YXIgbW9udGggPSBEYXRlVGltZS5nZXRTaG9ydE1vbnRoKHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlKTtcbiAgICB2YXIgZGF5ID0gdGhpcy5wcm9wcy5zZWxlY3RlZERhdGUuZ2V0RGF0ZSgpO1xuICAgIHZhciB5ZWFyID0gdGhpcy5wcm9wcy5zZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKTtcblxuICAgIHZhciBpc0xhbmRzY2FwZSA9IHRoaXMucHJvcHMubW9kZSA9PT0gJ2xhbmRzY2FwZSc7XG4gICAgdmFyIGRhdGVZUG9zaXRpb24gPSAnMHB4JztcbiAgICB2YXIgZGF5WVBvc2l0aW9uID0gJzMwcHgnO1xuICAgIHZhciB5ZWFyWVBvc2l0aW9uID0gJzk1cHgnO1xuXG4gICAgaWYgKGlzTGFuZHNjYXBlKSB7XG4gICAgICBkYXRlWVBvc2l0aW9uID0gdGhpcy5wcm9wcy53ZWVrQ291bnQgPT09IDUgPyAnMTRweCcgOiB0aGlzLnByb3BzLndlZWtDb3VudCA9PT0gNiA/ICczNHB4JyA6ICc4cHgnO1xuICAgICAgeWVhcllQb3NpdGlvbiA9IHRoaXMucHJvcHMud2Vla0NvdW50ID09PSA0ID8gJzExNHB4JyA6ICcxNTBweCc7XG4gICAgICBpZiAodGhpcy5wcm9wcy53ZWVrQ291bnQgPiA0KSBkYXlZUG9zaXRpb24gPSAnNTBweCc7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG5cbiAgICAgIGRhdGVDb250YWluZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuY29sb3IsXG4gICAgICAgIGhlaWdodDogaXNMYW5kc2NhcGUgPyB0aGlzLnByb3BzLndlZWtDb3VudCAqIDQwICsgMzYgKyAncHgnIDogJzE1MHB4JyxcbiAgICAgICAgcGFkZGluZzogJzE2cHggMCcsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgIH0sXG5cbiAgICAgIGRhdGU6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkudGV4dENvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsJyArIGRhdGVZUG9zaXRpb24gKyAnLDApJ1xuICAgICAgfSxcblxuICAgICAgZG93Q29udGFpbmVyOiB7XG4gICAgICAgIGhlaWdodDogJzMycHgnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RDb2xvcixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBpc0xhbmRzY2FwZSA/ICcycHggMCAwIDAnIDogJzJweCAycHggMCAwJyxcbiAgICAgICAgcGFkZGluZ1RvcDogJzlweCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICB9LFxuXG4gICAgICBkb3c6IHtcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzEzcHgnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RUZXh0Q29sb3JcbiAgICAgIH0sXG5cbiAgICAgIGRheToge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgbGluZUhlaWdodDogaXNMYW5kc2NhcGUgPyAnNzZweCcgOiAnNThweCcsXG4gICAgICAgICAgZm9udFNpemU6IGlzTGFuZHNjYXBlID8gJzc2cHgnIDogJzU4cHgnLFxuICAgICAgICAgIGhlaWdodDogaXNMYW5kc2NhcGUgPyAnNzZweCcgOiAnNThweCcsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBvcGFjaXR5OiB0aGlzLnN0YXRlLnNlbGVjdGVkWWVhciA/ICcwLjcnIDogJzEuMCcsXG4gICAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsJyArIGRheVlQb3NpdGlvbiArICcsMCknXG4gICAgICAgIH0sXG5cbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICB3aWR0aDogJzEwMHB4JyxcbiAgICAgICAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICBjdXJzb3I6ICF0aGlzLnN0YXRlLnNlbGVjdGVkWWVhciA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJ1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBtb250aDoge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgdG9wOiBpc0xhbmRzY2FwZSA/ICcwcHgnIDogJzFweCcsXG4gICAgICAgICAgZm9udFNpemU6IGlzTGFuZHNjYXBlID8gJzI2cHgnIDogJzIycHgnLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IGlzTGFuZHNjYXBlID8gJzI2cHgnIDogJzIycHgnLFxuICAgICAgICAgIGhlaWdodDogaXNMYW5kc2NhcGUgPyAnMjZweCcgOiAnMjJweCcsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgICBvcGFjaXR5OiB0aGlzLnN0YXRlLnNlbGVjdGVkWWVhciA/ICcwLjcnIDogJzEuMCdcbiAgICAgICAgfSxcblxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIHdpZHRoOiAnMTAwcHgnLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgICAgIGN1cnNvcjogIXRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHllYXI6IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIG1hcmdpbjogJzBweCcsXG4gICAgICAgICAgZm9udFNpemU6IGlzTGFuZHNjYXBlID8gJzI2cHgnIDogJzIycHgnLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IGlzTGFuZHNjYXBlID8gJzI2cHgnIDogJzIycHgnLFxuICAgICAgICAgIGhlaWdodDogaXNMYW5kc2NhcGUgPyAnMjZweCcgOiAnMjJweCcsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgICBvcGFjaXR5OiB0aGlzLnN0YXRlLnNlbGVjdGVkWWVhciA/ICcxLjAnIDogJzAuNycsXG4gICAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsJyArIHllYXJZUG9zaXRpb24gKyAnLDApJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgd2lkdGg6ICcxMDBweCcsXG4gICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgIG1hcmdpblJpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgY3Vyc29yOiAhdGhpcy5wcm9wcy55ZWFyU2VsZWN0aW9uQXZhaWxhYmxlIHx8IHRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvd0NvbnRhaW5lciB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5kb3csXG4gICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuc3RhdGUudHJhbnNpdGlvbkRpcmVjdGlvbiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsga2V5OiBkYXlPZldlZWsgfSxcbiAgICAgICAgICAgIGRheU9mV2Vla1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBBdXRvUHJlZml4LmFsbChzdHlsZXMuZGF0ZUNvbnRhaW5lcikgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBBdXRvUHJlZml4LmFsbChzdHlsZXMuZGF0ZSkgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgU2xpZGVJblRyYW5zaXRpb25Hcm91cCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5tb250aC5yb290LFxuICAgICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuc3RhdGUudHJhbnNpdGlvbkRpcmVjdGlvbiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsga2V5OiBtb250aCwgc3R5bGU6IHN0eWxlcy5tb250aC50aXRsZSwgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlTW9udGhEYXlDbGljayB9LFxuICAgICAgICAgICAgICBtb250aFxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuZGF5LnJvb3QsXG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy5zdGF0ZS50cmFuc2l0aW9uRGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBrZXk6IGRheSwgc3R5bGU6IHN0eWxlcy5kYXkudGl0bGUsIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZU1vbnRoRGF5Q2xpY2sgfSxcbiAgICAgICAgICAgICAgZGF5XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgU2xpZGVJblRyYW5zaXRpb25Hcm91cCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy55ZWFyLnJvb3QsXG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy5zdGF0ZS50cmFuc2l0aW9uRGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBrZXk6IHllYXIsIHN0eWxlOiBzdHlsZXMueWVhci50aXRsZSwgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlWWVhckNsaWNrIH0sXG4gICAgICAgICAgICAgIHllYXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF9oYW5kbGVNb250aERheUNsaWNrOiBmdW5jdGlvbiBfaGFuZGxlTW9udGhEYXlDbGljaygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oYW5kbGVNb250aERheUNsaWNrICYmIHRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyKSB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZU1vbnRoRGF5Q2xpY2soKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy55ZWFyU2VsZWN0aW9uQXZhaWxhYmxlKSB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRZZWFyOiBmYWxzZSB9KTtcbiAgfSxcblxuICBfaGFuZGxlWWVhckNsaWNrOiBmdW5jdGlvbiBfaGFuZGxlWWVhckNsaWNrKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmhhbmRsZVllYXJDbGljayAmJiAhdGhpcy5zdGF0ZS5zZWxlY3RlZFllYXIgJiYgdGhpcy5wcm9wcy55ZWFyU2VsZWN0aW9uQXZhaWxhYmxlKSB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZVllYXJDbGljaygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnllYXJTZWxlY3Rpb25BdmFpbGFibGUpIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFllYXI6IHRydWUgfSk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0ZURpc3BsYXk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGUnKTtcbnZhciBDc3NFdmVudCA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nzcy1ldmVudCcpO1xudmFyIEtleUNvZGUgPSByZXF1aXJlKCcuLi91dGlscy9rZXktY29kZScpO1xudmFyIENhbGVuZGFyID0gcmVxdWlyZSgnLi9jYWxlbmRhcicpO1xudmFyIERpYWxvZ1dpbmRvdyA9IHJlcXVpcmUoJy4uL2RpYWxvZy13aW5kb3cnKTtcbnZhciBGbGF0QnV0dG9uID0gcmVxdWlyZSgnLi4vZmxhdC1idXR0b24nKTtcblxudmFyIERhdGVQaWNrZXJEaWFsb2cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRGF0ZVBpY2tlckRpYWxvZycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgV2luZG93TGlzdGVuYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbml0aWFsRGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkFjY2VwdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TaG93OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkRpc21pc3M6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2xpY2tBd2F5OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBtaW5EYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1heERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgc2hvdWxkRGlzYWJsZURhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIGhpZGVUb29sYmFyWWVhckNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1llYXJTZWxlY3RvcjogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICB3aW5kb3dMaXN0ZW5lcnM6IHtcbiAgICAna2V5dXAnOiAnX2hhbmRsZVdpbmRvd0tleVVwJ1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0NhbGVuZGFyQWN0aXZlOiBmYWxzZSxcbiAgICAgIHNob3dNb250aERheVBpY2tlcjogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGluaXRpYWxEYXRlID0gX3Byb3BzLmluaXRpYWxEYXRlO1xuICAgIHZhciBvbkFjY2VwdCA9IF9wcm9wcy5vbkFjY2VwdDtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2luaXRpYWxEYXRlJywgJ29uQWNjZXB0JywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuZGF0ZVBpY2tlci5jYWxlbmRhclRleHRDb2xvclxuICAgICAgfSxcblxuICAgICAgZGlhbG9nQ29udGVudHM6IHtcbiAgICAgICAgd2lkdGg6IHRoaXMucHJvcHMubW9kZSA9PT0gJ2xhbmRzY2FwZScgPyAnNTYwcHgnIDogJzI4MHB4J1xuICAgICAgfSxcblxuICAgICAgYWN0aW9uczoge1xuICAgICAgICBtYXJnaW5SaWdodDogOFxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYWN0aW9ucyA9IFtSZWFjdC5jcmVhdGVFbGVtZW50KEZsYXRCdXR0b24sIHtcbiAgICAgIGtleTogMCxcbiAgICAgIGxhYmVsOiAnQ2FuY2VsJyxcbiAgICAgIHNlY29uZGFyeTogdHJ1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZXMuYWN0aW9ucyxcbiAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZUNhbmNlbFRvdWNoVGFwIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KEZsYXRCdXR0b24sIHtcbiAgICAgIGtleTogMSxcbiAgICAgIGxhYmVsOiAnT0snLFxuICAgICAgc2Vjb25kYXJ5OiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IHRoaXMucmVmcy5jYWxlbmRhciAhPT0gdW5kZWZpbmVkICYmIHRoaXMucmVmcy5jYWxlbmRhci5pc1NlbGVjdGVkRGF0ZURpc2FibGVkKCksXG4gICAgICBzdHlsZTogc3R5bGVzLmFjdGlvbnMsXG4gICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVPS1RvdWNoVGFwIH0pXTtcblxuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Paykge1xuICAgICAgYWN0aW9ucyA9IGFjdGlvbnMuc2xpY2UoMCwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBEaWFsb2dXaW5kb3csXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnZGlhbG9nV2luZG93JyxcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5yb290LFxuICAgICAgICBjb250ZW50U3R5bGU6IHN0eWxlcy5kaWFsb2dDb250ZW50cyxcbiAgICAgICAgYWN0aW9uczogYWN0aW9ucyxcbiAgICAgICAgb25EaXNtaXNzOiB0aGlzLl9oYW5kbGVEaWFsb2dEaXNtaXNzLFxuICAgICAgICBvblNob3c6IHRoaXMuX2hhbmRsZURpYWxvZ1Nob3csXG4gICAgICAgIG9uQ2xpY2tBd2F5OiB0aGlzLl9oYW5kbGVEaWFsb2dDbGlja0F3YXksXG4gICAgICAgIHJlcG9zaXRpb25PblVwZGF0ZTogZmFsc2UgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyLCB7XG4gICAgICAgIHJlZjogJ2NhbGVuZGFyJyxcbiAgICAgICAgb25TZWxlY3RlZERhdGU6IHRoaXMuX29uU2VsZWN0ZWREYXRlLFxuICAgICAgICBpbml0aWFsRGF0ZTogdGhpcy5wcm9wcy5pbml0aWFsRGF0ZSxcbiAgICAgICAgaXNBY3RpdmU6IHRoaXMuc3RhdGUuaXNDYWxlbmRhckFjdGl2ZSxcbiAgICAgICAgbWluRGF0ZTogdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiB0aGlzLnByb3BzLm1heERhdGUsXG4gICAgICAgIHNob3VsZERpc2FibGVEYXRlOiB0aGlzLnByb3BzLnNob3VsZERpc2FibGVEYXRlLFxuICAgICAgICBzaG91bGRTaG93TW9udGhEYXlQaWNrZXJGaXJzdDogdGhpcy5zdGF0ZS5zaG93TW9udGhEYXlQaWNrZXIsXG4gICAgICAgIGhpZGVUb29sYmFyWWVhckNoYW5nZTogdGhpcy5wcm9wcy5oaWRlVG9vbGJhclllYXJDaGFuZ2UsXG4gICAgICAgIHNob3dZZWFyU2VsZWN0b3I6IHRoaXMucHJvcHMuc2hvd1llYXJTZWxlY3RvcixcbiAgICAgICAgbW9kZTogdGhpcy5wcm9wcy5tb2RlIH0pXG4gICAgKTtcbiAgfSxcblxuICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgIHRoaXMucmVmcy5kaWFsb2dXaW5kb3cuc2hvdygpO1xuICB9LFxuXG4gIGRpc21pc3M6IGZ1bmN0aW9uIGRpc21pc3MoKSB7XG4gICAgdGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5kaXNtaXNzKCk7XG4gIH0sXG5cbiAgX29uU2VsZWN0ZWREYXRlOiBmdW5jdGlvbiBfb25TZWxlY3RlZERhdGUoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Paykge1xuICAgICAgc2V0VGltZW91dCh0aGlzLl9oYW5kbGVPS1RvdWNoVGFwLCAzMDApO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2FuY2VsVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVDYW5jZWxUb3VjaFRhcCgpIHtcbiAgICB0aGlzLmRpc21pc3MoKTtcbiAgfSxcblxuICBfaGFuZGxlT0tUb3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZU9LVG91Y2hUYXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25BY2NlcHQgJiYgIXRoaXMucmVmcy5jYWxlbmRhci5pc1NlbGVjdGVkRGF0ZURpc2FibGVkKCkpIHtcbiAgICAgIHRoaXMucHJvcHMub25BY2NlcHQodGhpcy5yZWZzLmNhbGVuZGFyLmdldFNlbGVjdGVkRGF0ZSgpKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpc21pc3MoKTtcbiAgfSxcblxuICBfaGFuZGxlRGlhbG9nU2hvdzogZnVuY3Rpb24gX2hhbmRsZURpYWxvZ1Nob3coKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0NhbGVuZGFyQWN0aXZlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vblNob3cpIHRoaXMucHJvcHMub25TaG93KCk7XG4gIH0sXG5cbiAgX2hhbmRsZURpYWxvZ0Rpc21pc3M6IGZ1bmN0aW9uIF9oYW5kbGVEaWFsb2dEaXNtaXNzKCkge1xuICAgIENzc0V2ZW50Lm9uVHJhbnNpdGlvbkVuZCh0aGlzLnJlZnMuZGlhbG9nV2luZG93LmdldERPTU5vZGUoKSwgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0NhbGVuZGFyQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgc2hvd01vbnRoRGF5UGlja2VyOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KS5iaW5kKHRoaXMpKTtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uRGlzbWlzcykgdGhpcy5wcm9wcy5vbkRpc21pc3MoKTtcbiAgfSxcblxuICBfaGFuZGxlRGlhbG9nQ2xpY2tBd2F5OiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nQ2xpY2tBd2F5KCkge1xuICAgIENzc0V2ZW50Lm9uVHJhbnNpdGlvbkVuZCh0aGlzLnJlZnMuZGlhbG9nV2luZG93LmdldERPTU5vZGUoKSwgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0NhbGVuZGFyQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgc2hvd01vbnRoRGF5UGlja2VyOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KS5iaW5kKHRoaXMpKTtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KCk7XG4gIH0sXG5cbiAgX2hhbmRsZVdpbmRvd0tleVVwOiBmdW5jdGlvbiBfaGFuZGxlV2luZG93S2V5VXAoZSkge1xuICAgIGlmICh0aGlzLnJlZnMuZGlhbG9nV2luZG93LmlzT3BlbigpKSB7XG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIEtleUNvZGUuRU5URVI6XG4gICAgICAgICAgdGhpcy5faGFuZGxlT0tUb3VjaFRhcCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUGlja2VyRGlhbG9nOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBXaW5kb3dMaXN0ZW5hYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlJyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBEYXRlUGlja2VyRGlhbG9nID0gcmVxdWlyZSgnLi9kYXRlLXBpY2tlci1kaWFsb2cnKTtcbnZhciBUZXh0RmllbGQgPSByZXF1aXJlKCcuLi90ZXh0LWZpZWxkJyk7XG5cbnZhciBEYXRlUGlja2VyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0RhdGVQaWNrZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIFdpbmRvd0xpc3RlbmFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRlZmF1bHREYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGZvcm1hdERhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG1vZGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ3BvcnRyYWl0JywgJ2xhbmRzY2FwZScsICdpbmxpbmUnXSksXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uU2hvdzogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25EaXNtaXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBtaW5EYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1heERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgc2hvdWxkRGlzYWJsZURhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIGhpZGVUb29sYmFyWWVhckNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgYXV0b09rOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93WWVhclNlbGVjdG9yOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIHdpbmRvd0xpc3RlbmVyczoge1xuICAgICdrZXl1cCc6ICdfaGFuZGxlV2luZG93S2V5VXAnXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdERhdGU6IERhdGVUaW1lLmZvcm1hdCxcbiAgICAgIGF1dG9PazogZmFsc2UsXG4gICAgICBzaG93WWVhclNlbGVjdG9yOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGU6IHRoaXMucHJvcHMuZGVmYXVsdERhdGUsXG4gICAgICBkaWFsb2dEYXRlOiBuZXcgRGF0ZSgpXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLmRlZmF1bHREYXRlICE9PSBuZXh0UHJvcHMuZGVmYXVsdERhdGUpIHtcbiAgICAgIHRoaXMuc2V0RGF0ZShuZXh0UHJvcHMuZGVmYXVsdERhdGUpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgZm9ybWF0RGF0ZSA9IF9wcm9wcy5mb3JtYXREYXRlO1xuICAgIHZhciBtb2RlID0gX3Byb3BzLm1vZGU7XG4gICAgdmFyIG9uRm9jdXMgPSBfcHJvcHMub25Gb2N1cztcbiAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgIHZhciBvblNob3cgPSBfcHJvcHMub25TaG93O1xuICAgIHZhciBvbkRpc21pc3MgPSBfcHJvcHMub25EaXNtaXNzO1xuICAgIHZhciBtaW5EYXRlID0gX3Byb3BzLm1pbkRhdGU7XG4gICAgdmFyIG1heERhdGUgPSBfcHJvcHMubWF4RGF0ZTtcbiAgICB2YXIgYXV0b09rID0gX3Byb3BzLmF1dG9PaztcbiAgICB2YXIgc2hvd1llYXJTZWxlY3RvciA9IF9wcm9wcy5zaG93WWVhclNlbGVjdG9yO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydmb3JtYXREYXRlJywgJ21vZGUnLCAnb25Gb2N1cycsICdvblRvdWNoVGFwJywgJ29uU2hvdycsICdvbkRpc21pc3MnLCAnbWluRGF0ZScsICdtYXhEYXRlJywgJ2F1dG9PaycsICdzaG93WWVhclNlbGVjdG9yJ10pO1xuXG4gICAgdmFyIGRlZmF1bHRJbnB1dFZhbHVlO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZGVmYXVsdERhdGUpIHtcbiAgICAgIGRlZmF1bHRJbnB1dFZhbHVlID0gdGhpcy5wcm9wcy5mb3JtYXREYXRlKHRoaXMucHJvcHMuZGVmYXVsdERhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRGaWVsZCwgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHJlZjogJ2lucHV0JyxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0SW5wdXRWYWx1ZSxcbiAgICAgICAgb25Gb2N1czogdGhpcy5faGFuZGxlSW5wdXRGb2N1cyxcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlSW5wdXRUb3VjaFRhcCB9KSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERhdGVQaWNrZXJEaWFsb2csIHtcbiAgICAgICAgcmVmOiAnZGlhbG9nV2luZG93JyxcbiAgICAgICAgbW9kZTogdGhpcy5wcm9wcy5tb2RlLFxuICAgICAgICBpbml0aWFsRGF0ZTogdGhpcy5zdGF0ZS5kaWFsb2dEYXRlLFxuICAgICAgICBvbkFjY2VwdDogdGhpcy5faGFuZGxlRGlhbG9nQWNjZXB0LFxuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25EaXNtaXNzOiB0aGlzLl9oYW5kbGVEaWFsb2dEaXNtaXNzLFxuICAgICAgICBtaW5EYXRlOiBtaW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBtYXhEYXRlLFxuICAgICAgICBhdXRvT2s6IGF1dG9PayxcbiAgICAgICAgc2hvd1llYXJTZWxlY3Rvcjogc2hvd1llYXJTZWxlY3RvcixcbiAgICAgICAgc2hvdWxkRGlzYWJsZURhdGU6IHRoaXMucHJvcHMuc2hvdWxkRGlzYWJsZURhdGUsXG4gICAgICAgIGhpZGVUb29sYmFyWWVhckNoYW5nZTogdGhpcy5wcm9wcy5oaWRlVG9vbGJhclllYXJDaGFuZ2UgfSlcbiAgICApO1xuICB9LFxuXG4gIGdldERhdGU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZGF0ZTtcbiAgfSxcblxuICBzZXREYXRlOiBmdW5jdGlvbiBzZXREYXRlKGQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRhdGU6IGRcbiAgICB9KTtcbiAgICB0aGlzLnJlZnMuaW5wdXQuc2V0VmFsdWUodGhpcy5wcm9wcy5mb3JtYXREYXRlKGQpKTtcbiAgfSxcblxuICBfaGFuZGxlRGlhbG9nQWNjZXB0OiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nQWNjZXB0KGQpIHtcbiAgICB0aGlzLnNldERhdGUoZCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UobnVsbCwgZCk7XG4gIH0sXG5cbiAgX2hhbmRsZURpYWxvZ0Rpc21pc3M6IGZ1bmN0aW9uIF9oYW5kbGVEaWFsb2dEaXNtaXNzKCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uRGlzbWlzcykgdGhpcy5wcm9wcy5vbkRpc21pc3MoKTtcbiAgfSxcblxuICBfaGFuZGxlSW5wdXRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUlucHV0Rm9jdXMoZSkge1xuICAgIGUudGFyZ2V0LmJsdXIoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0VG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVJbnB1dFRvdWNoVGFwKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpYWxvZ0RhdGU6IHRoaXMuZ2V0RGF0ZSgpXG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZnMuZGlhbG9nV2luZG93LnNob3coKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vblRvdWNoVGFwKSB0aGlzLnByb3BzLm9uVG91Y2hUYXAoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVdpbmRvd0tleVVwOiBmdW5jdGlvbiBfaGFuZGxlV2luZG93S2V5VXAoKSB7fVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUGlja2VyO1xuXG4vL1RPIERPOiBvcGVuIHRoZSBkaWFsb2cgaWYgaW5wdXQgaGFzIGZvY3VzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb24gPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIEVuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi4vZW5oYW5jZWQtYnV0dG9uJyk7XG5cbnZhciBEYXlCdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRGF5QnV0dG9uJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3ZlcjogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5kYXRlUGlja2VyO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBkYXRlID0gX3Byb3BzLmRhdGU7XG4gICAgdmFyIG9uVG91Y2hUYXAgPSBfcHJvcHMub25Ub3VjaFRhcDtcbiAgICB2YXIgc2VsZWN0ZWQgPSBfcHJvcHMuc2VsZWN0ZWQ7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2RhdGUnLCAnb25Ub3VjaFRhcCcsICdzZWxlY3RlZCddKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgd2lkdGg6IDM2LFxuICAgICAgICBwYWRkaW5nOiAnNHB4IDJweCdcbiAgICAgIH0sXG5cbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBjb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUudGV4dENvbG9yXG4gICAgICB9LFxuXG4gICAgICBidXR0b25TdGF0ZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgaGVpZ2h0OiAzMixcbiAgICAgICAgd2lkdGg6IDMyLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb24uZWFzZU91dCgpLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RDb2xvclxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5ob3Zlcikge1xuICAgICAgc3R5bGVzLmxhYmVsLmNvbG9yID0gdGhpcy5nZXRUaGVtZSgpLnNlbGVjdFRleHRDb2xvcjtcbiAgICAgIHN0eWxlcy5idXR0b25TdGF0ZS5vcGFjaXR5ID0gJzAuNic7XG4gICAgICBzdHlsZXMuYnV0dG9uU3RhdGUudHJhbnNmb3JtID0gJ3NjYWxlKDEpJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgc3R5bGVzLmxhYmVsLmNvbG9yID0gdGhpcy5nZXRUaGVtZSgpLnNlbGVjdFRleHRDb2xvcjtcbiAgICAgIHN0eWxlcy5idXR0b25TdGF0ZS5vcGFjaXR5ID0gMTtcbiAgICAgIHN0eWxlcy5idXR0b25TdGF0ZS50cmFuc2Zvcm0gPSAnc2NhbGUoMSknO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgc3R5bGVzLnJvb3Qub3BhY2l0eSA9ICcwLjYnO1xuICAgIH1cblxuICAgIGlmIChEYXRlVGltZS5pc0VxdWFsRGF0ZSh0aGlzLnByb3BzLmRhdGUsIG5ldyBEYXRlKCkpICYmICF0aGlzLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuY29sb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGF0ZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBFbmhhbmNlZEJ1dHRvbixcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLnJvb3QsXG4gICAgICAgIGhvdmVyU3R5bGU6IHN0eWxlcy5ob3ZlcixcbiAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGRpc2FibGVGb2N1c1JpcHBsZTogdHJ1ZSxcbiAgICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlOiB0cnVlLFxuICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5faGFuZGxlTW91c2VPdmVyLFxuICAgICAgICBvbk1vdXNlT3V0OiB0aGlzLl9oYW5kbGVNb3VzZU91dCxcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlVG91Y2hUYXAsXG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5faGFuZGxlS2V5Ym9hcmRGb2N1cyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5idXR0b25TdGF0ZSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgIHRoaXMucHJvcHMuZGF0ZS5nZXREYXRlKClcbiAgICAgIClcbiAgICApIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgc3R5bGU6IHN0eWxlcy5yb290IH0pO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU92ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU92ZXIoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXI6IHRydWUgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXI6IGZhbHNlIH0pO1xuICB9LFxuXG4gIF9oYW5kbGVUb3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZVRvdWNoVGFwKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vblRvdWNoVGFwKSB0aGlzLnByb3BzLm9uVG91Y2hUYXAoZSwgdGhpcy5wcm9wcy5kYXRlKTtcbiAgfSxcblxuICBfaGFuZGxlS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUtleWJvYXJkRm9jdXMoZSwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMub25LZXlib2FyZEZvY3VzKSB0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhlLCBrZXlib2FyZEZvY3VzZWQsIHRoaXMucHJvcHMuZGF0ZSk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF5QnV0dG9uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIEVuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi4vZW5oYW5jZWQtYnV0dG9uJyk7XG5cbnZhciBZZWFyQnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1llYXJCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgeWVhcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXI6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuZGF0ZVBpY2tlcjtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcbiAgICB2YXIgeWVhciA9IF9wcm9wcy55ZWFyO1xuICAgIHZhciBvblRvdWNoVGFwID0gX3Byb3BzLm9uVG91Y2hUYXA7XG4gICAgdmFyIHNlbGVjdGVkID0gX3Byb3BzLnNlbGVjdGVkO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAneWVhcicsICdvblRvdWNoVGFwJywgJ3NlbGVjdGVkJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgICB3aWR0aDogMzYsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIHBhZGRpbmc6ICc4cHggMnB4J1xuICAgICAgfSxcblxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHRvcDogJy0xcHgnLFxuICAgICAgICBjb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUudGV4dENvbG9yXG4gICAgICB9LFxuXG4gICAgICBidXR0b25TdGF0ZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgaGVpZ2h0OiAzMixcbiAgICAgICAgd2lkdGg6IDMyLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmhvdmVyKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuc2VsZWN0VGV4dENvbG9yO1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLm9wYWNpdHkgPSAnMC42JztcbiAgICAgIHN0eWxlcy5idXR0b25TdGF0ZS50cmFuc2Zvcm0gPSAnc2NhbGUoMS41KSc7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuc2VsZWN0VGV4dENvbG9yO1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLm9wYWNpdHkgPSAxO1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLnRyYW5zZm9ybSA9ICdzY2FsZSgxLjUpJztcbiAgICB9XG5cbiAgICBpZiAoeWVhciA9PT0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICBzdHlsZXMucm9vdC5jb2xvciA9IHRoaXMuZ2V0VGhlbWUoKS5jb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEVuaGFuY2VkQnV0dG9uLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMucm9vdCxcbiAgICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlOiB0cnVlLFxuICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGU6IHRydWUsXG4gICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLl9oYW5kbGVNb3VzZU92ZXIsXG4gICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0LFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVUb3VjaFRhcCB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5idXR0b25TdGF0ZSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgIHllYXJcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU92ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU92ZXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiB0cnVlIH0pO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU91dDogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3V0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcjogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hUYXAoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVG91Y2hUYXApIHRoaXMucHJvcHMub25Ub3VjaFRhcChlLCB0aGlzLnByb3BzLnllYXIpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFllYXJCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIENzc0V2ZW50ID0gcmVxdWlyZSgnLi91dGlscy9jc3MtZXZlbnQnKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi91dGlscy9rZXktY29kZScpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBGbGF0QnV0dG9uID0gcmVxdWlyZSgnLi9mbGF0LWJ1dHRvbicpO1xudmFyIE92ZXJsYXkgPSByZXF1aXJlKCcuL292ZXJsYXknKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcblxudmFyIERpYWxvZ1dpbmRvdyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEaWFsb2dXaW5kb3cnLFxuXG4gIGNsb3NlYWJsZTogZmFsc2UsXG5cbiAgbWl4aW5zOiBbV2luZG93TGlzdGVuYWJsZSwgU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBhY3Rpb25zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXG4gICAgYWN0aW9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGVudENsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZW50U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgb3BlbkltbWVkaWF0ZWx5OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNsaWNrQXdheTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25EaXNtaXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblNob3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHJlcG9zaXRpb25PblVwZGF0ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbW9kYWw6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAgJ2tleXVwJzogJ19oYW5kbGVXaW5kb3dLZXlVcCcsXG4gICAgJ3Jlc2l6ZSc6ICdfcG9zaXRpb25EaWFsb2cnXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgcmVwb3NpdGlvbk9uVXBkYXRlOiB0cnVlLFxuICAgICAgbW9kYWw6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogdGhpcy5wcm9wcy5vcGVuSW1tZWRpYXRlbHkgfHwgZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9wb3NpdGlvbkRpYWxvZygpO1xuICAgIGlmICh0aGlzLnByb3BzLm9wZW5JbW1lZGlhdGVseSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdGhpcy5fcG9zaXRpb25EaWFsb2coKTtcbiAgICB0aGlzLl9mb2N1c09uQWN0aW9uKCk7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWU7XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IC0xMDAwMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICdsZWZ0JywgJzQ1MG1zJyksXG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkucGFsZXR0ZS50ZXh0Q29sb3JcbiAgICAgIH0sXG4gICAgICBjb250ZW50czoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6ICc3NSUnLFxuICAgICAgICBtYXhXaWR0aDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEtleWxpbmVJbmNyZW1lbnQgKiAxMixcbiAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgekluZGV4OiAxMCxcbiAgICAgICAgYmFja2dyb3VuZDogdGhpcy5nZXRUaGVtZSgpLnBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH0sXG4gICAgICByb290V2hlbk9wZW46IHtcbiAgICAgICAgbGVmdDogMixcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ2xlZnQnLCAnMG1zJylcbiAgICAgIH0sXG4gICAgICBjb250ZW50c1doZW5PcGVuOiB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgJyArIHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BLZXlsaW5lSW5jcmVtZW50ICsgJ3B4LCAwKSdcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGFjdGlvbnMgPSB0aGlzLl9nZXRBY3Rpb25zQ29udGFpbmVyKHRoaXMucHJvcHMuYWN0aW9ucyk7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyByZWY6ICdjb250YWluZXInLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSwgdGhpcy5zdGF0ZS5vcGVuICYmIHN0eWxlcy5yb290V2hlbk9wZW4pIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQYXBlcixcbiAgICAgICAge1xuICAgICAgICAgIHJlZjogJ2RpYWxvZ1dpbmRvdycsXG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRlbnRzLCB0aGlzLnByb3BzLmNvbnRlbnRTdHlsZSwgdGhpcy5zdGF0ZS5vcGVuICYmIHN0eWxlcy5jb250ZW50c1doZW5PcGVuKSxcbiAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY29udGVudENsYXNzTmFtZSxcbiAgICAgICAgICB6RGVwdGg6IDQgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgYWN0aW9uc1xuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoT3ZlcmxheSwgeyByZWY6ICdkaWFsb2dPdmVybGF5Jywgc2hvdzogdGhpcy5zdGF0ZS5vcGVuLCBhdXRvTG9ja1Njcm9sbGluZzogZmFsc2UsIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZU92ZXJsYXlUb3VjaFRhcCB9KVxuICAgICk7XG4gIH0sXG5cbiAgaXNPcGVuOiBmdW5jdGlvbiBpc09wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUub3BlbjtcbiAgfSxcblxuICBkaXNtaXNzOiBmdW5jdGlvbiBkaXNtaXNzKCkge1xuICAgIGlmICh0aGlzLmNsb3NlYWJsZSkge1xuICAgICAgQ3NzRXZlbnQub25UcmFuc2l0aW9uRW5kKFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLCAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlZnMuZGlhbG9nT3ZlcmxheS5hbGxvd1Njcm9sbGluZygpO1xuICAgICAgfSkuYmluZCh0aGlzKSk7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgICAgIHRoaXMuX29uRGlzbWlzcygpO1xuICAgIH1cbiAgfSxcblxuICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgIC8vIHByZXZlbnQgcmFwaWQgc2hvdy9oaWRlXG4gICAgc2V0VGltZW91dCgoZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jbG9zZWFibGUgPSB0cnVlO1xuICAgIH0pLmJpbmQodGhpcyksIDI1MCk7XG5cbiAgICB0aGlzLnJlZnMuZGlhbG9nT3ZlcmxheS5wcmV2ZW50U2Nyb2xsaW5nKCk7XG4gICAgdGhpcy5fZm9jdXNPbkFjdGlvbigpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pO1xuICAgIHRoaXMuX29uU2hvdygpO1xuICB9LFxuXG4gIF9nZXRBY3Rpb246IGZ1bmN0aW9uIF9nZXRBY3Rpb24oYWN0aW9uSlNPTiwga2V5KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZXMgPSB7IG1hcmdpblJpZ2h0OiA4IH07XG4gICAgdmFyIHByb3BzID0ge1xuICAgICAga2V5OiBrZXksXG4gICAgICBzZWNvbmRhcnk6IHRydWUsXG4gICAgICBvbkNsaWNrOiBhY3Rpb25KU09OLm9uQ2xpY2ssXG4gICAgICBvblRvdWNoVGFwOiBmdW5jdGlvbiBvblRvdWNoVGFwKCkge1xuICAgICAgICBpZiAoYWN0aW9uSlNPTi5vblRvdWNoVGFwKSB7XG4gICAgICAgICAgYWN0aW9uSlNPTi5vblRvdWNoVGFwLmNhbGwodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShhY3Rpb25KU09OLm9uQ2xpY2sgfHwgYWN0aW9uSlNPTi5vblRvdWNoVGFwKSkge1xuICAgICAgICAgIF90aGlzLmRpc21pc3MoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxhYmVsOiBhY3Rpb25KU09OLnRleHQsXG4gICAgICBzdHlsZTogc3R5bGVzXG4gICAgfTtcbiAgICBpZiAoYWN0aW9uSlNPTi5yZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGFjdGlvbkpTT04ucmVmO1xuICAgICAgcHJvcHMua2V5Ym9hcmRGb2N1c2VkID0gYWN0aW9uSlNPTi5yZWYgPT09IHRoaXMucHJvcHMuYWN0aW9uRm9jdXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmxhdEJ1dHRvbiwgcHJvcHMpO1xuICB9LFxuXG4gIF9nZXRBY3Rpb25zQ29udGFpbmVyOiBmdW5jdGlvbiBfZ2V0QWN0aW9uc0NvbnRhaW5lcihhY3Rpb25zKSB7XG4gICAgLy9qc29uIHcvIHJlZnNcbiAgICB2YXIgYWN0aW9uQ29udGFpbmVyO1xuICAgIHZhciBhY3Rpb25PYmplY3RzID0gW107XG4gICAgdmFyIGFjdGlvblN0eWxlID0ge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoczAsMCwwLDApJyxcbiAgICAgIHBhZGRpbmc6IDgsXG4gICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfTtcblxuICAgIGlmIChhY3Rpb25zLmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50QWN0aW9uID0gYWN0aW9uc1tpXTtcblxuICAgICAgICAvL2lmIHRoZSBjdXJyZW50IGFjdGlvbiBpc24ndCBhIHJlYWN0IG9iamVjdCwgY3JlYXRlIG9uZVxuICAgICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGN1cnJlbnRBY3Rpb24pKSB7XG4gICAgICAgICAgY3VycmVudEFjdGlvbiA9IHRoaXMuX2dldEFjdGlvbihjdXJyZW50QWN0aW9uLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhY3Rpb25PYmplY3RzLnB1c2goY3VycmVudEFjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbkNvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBhY3Rpb25TdHlsZSB9LFxuICAgICAgICBhY3Rpb25PYmplY3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25Db250YWluZXI7XG4gIH0sXG5cbiAgX3Bvc2l0aW9uRGlhbG9nOiBmdW5jdGlvbiBfcG9zaXRpb25EaWFsb2coKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkaWFsb2dXaW5kb3cgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuZGlhbG9nV2luZG93KTtcbiAgICB2YXIgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICB2YXIgZGlhbG9nV2luZG93SGVpZ2h0ID0gZGlhbG9nV2luZG93Lm9mZnNldEhlaWdodDtcblxuICAgIC8vUmVzZXQgdGhlIGhlaWdodCBpbiBjYXNlIHRoZSB3aW5kb3cgd2FzIHJlc2l6ZWQuXG4gICAgZGlhbG9nV2luZG93LnN0eWxlLmhlaWdodCA9ICcnO1xuXG4gICAgdmFyIHBhZGRpbmdUb3AgPSBNYXRoLm1heCgoY29udGFpbmVySGVpZ2h0IC0gZGlhbG9nV2luZG93SGVpZ2h0KSAvIDIgLSA2NCwgMCk7XG5cbiAgICAvL1ZlcnRpY2FsbHkgY2VudGVyIHRoZSBkaWFsb2cgd2luZG93LCBidXQgbWFrZSBzdXJlIGl0IGRvZXNuJ3RcbiAgICAvL3RyYW5zaXRpb24gdG8gdGhhdCBwb3NpdGlvbi5cbiAgICBpZiAodGhpcy5wcm9wcy5yZXBvc2l0aW9uT25VcGRhdGUgfHwgIWNvbnRhaW5lci5zdHlsZS5wYWRkaW5nVG9wKSB7XG4gICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1RvcCA9IHBhZGRpbmdUb3AgKyAncHgnO1xuICAgIH1cbiAgfSxcblxuICBfZm9jdXNPbkFjdGlvbjogZnVuY3Rpb24gX2ZvY3VzT25BY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYWN0aW9uRm9jdXMpIHtcbiAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmc1t0aGlzLnByb3BzLmFjdGlvbkZvY3VzXSkuZm9jdXMoKTtcbiAgICB9XG4gIH0sXG5cbiAgX29uU2hvdzogZnVuY3Rpb24gX29uU2hvdygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblNob3cpIHRoaXMucHJvcHMub25TaG93KCk7XG4gIH0sXG5cbiAgX29uRGlzbWlzczogZnVuY3Rpb24gX29uRGlzbWlzcygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkRpc21pc3MpIHRoaXMucHJvcHMub25EaXNtaXNzKCk7XG4gIH0sXG5cbiAgX2hhbmRsZU92ZXJsYXlUb3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZU92ZXJsYXlUb3VjaFRhcCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMubW9kYWwgJiYgdGhpcy5jbG9zZWFibGUpIHtcbiAgICAgIHRoaXMuZGlzbWlzcygpO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25DbGlja0F3YXkpIHRoaXMucHJvcHMub25DbGlja0F3YXkoKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZVdpbmRvd0tleVVwOiBmdW5jdGlvbiBfaGFuZGxlV2luZG93S2V5VXAoZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5tb2RhbCAmJiBlLmtleUNvZGUgPT0gS2V5Q29kZS5FU0MpIHtcbiAgICAgIHRoaXMuZGlzbWlzcygpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEaWFsb2dXaW5kb3c7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgRGlhbG9nV2luZG93ID0gcmVxdWlyZSgnLi9kaWFsb2ctd2luZG93Jyk7XG5cbnZhciBEaWFsb2cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRGlhbG9nJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMubm9kZSxcbiAgICBjb250ZW50SW5uZXJTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzcGFjaW5nID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gICAgdmFyIGd1dHRlciA9IHNwYWNpbmcuZGVza3RvcEd1dHRlciArICdweCAnO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICB0aXRsZToge1xuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIHBhZGRpbmc6IGd1dHRlciArIGd1dHRlciArICcwICcgKyBndXR0ZXIsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICAgIGZvbnRTaXplOiAnMjRweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICczMnB4JyxcbiAgICAgICAgZm9udFdlaWdodDogJzQwMCdcbiAgICAgIH0sXG4gICAgICBjb250ZW50OiB7XG4gICAgICAgIHBhZGRpbmc6IHNwYWNpbmcuZGVza3RvcEd1dHRlclxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcbiAgICB2YXIgY29udGVudElubmVyU3R5bGUgPSBfcHJvcHMuY29udGVudElubmVyU3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZScsICdjb250ZW50SW5uZXJTdHlsZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHRpdGxlO1xuICAgIGlmICh0aGlzLnByb3BzLnRpdGxlKSB7XG4gICAgICAvLyBJZiB0aGUgdGl0bGUgaXMgYSBzdHJpbmcsIHdyYXAgaW4gYW4gaDMgdGFnLlxuICAgICAgLy8gSWYgbm90LCBqdXN0IHVzZSBpdCBhcyBhIG5vZGUuXG4gICAgICB0aXRsZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLnByb3BzLnRpdGxlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXScgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnaDMnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMudGl0bGUgfSxcbiAgICAgICAgdGhpcy5wcm9wcy50aXRsZVxuICAgICAgKSA6IHRoaXMucHJvcHMudGl0bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBEaWFsb2dXaW5kb3csXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnZGlhbG9nV2luZG93JyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlIH0pLFxuICAgICAgdGl0bGUsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyByZWY6ICdkaWFsb2dDb250ZW50Jywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRlbnQsIGNvbnRlbnRJbm5lclN0eWxlKSB9LFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfSxcblxuICBkaXNtaXNzOiBmdW5jdGlvbiBkaXNtaXNzKCkge1xuICAgIHRoaXMucmVmcy5kaWFsb2dXaW5kb3cuZGlzbWlzcygpO1xuICB9LFxuXG4gIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5zaG93KCk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGlhbG9nOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDbGlja0F3YXlhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvY2xpY2stYXdheWFibGUnKTtcbnZhciBGb250SWNvbiA9IHJlcXVpcmUoJy4vZm9udC1pY29uJyk7XG52YXIgTWVudSA9IHJlcXVpcmUoJy4vbWVudS9tZW51Jyk7XG5cbnZhciBEcm9wRG93bkljb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRHJvcERvd25JY29uJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlLCBDbGlja0F3YXlhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBtZW51SXRlbXM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGNsb3NlT25NZW51SXRlbVRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgaWNvbkNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uTGlnYXR1cmU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbG9zZU9uTWVudUl0ZW1Ub3VjaFRhcDogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50Q2xpY2tBd2F5OiBmdW5jdGlvbiBjb21wb25lbnRDbGlja0F3YXkoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzcGFjaW5nID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gICAgdmFyIGljb25XaWR0aCA9IDQ4O1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB3aWR0aDogaWNvbldpZHRoICsgJ3B4ICFpbXBvcnRhbnQnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiBzcGFjaW5nLmRlc2t0b3BUb29sYmFySGVpZ2h0LFxuICAgICAgICBmb250U2l6ZTogc3BhY2luZy5kZXNrdG9wRHJvcERvd25NZW51Rm9udFNpemUsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICB9LFxuICAgICAgbWVudToge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHJpZ2h0OiAnLTE0cHggIWltcG9ydGFudCcsXG4gICAgICAgIHRvcDogJzlweCAhaW1wb3J0YW50JyxcbiAgICAgICAgb3BhY2l0eTogdGhpcy5zdGF0ZS5vcGVuID8gMSA6IDBcbiAgICAgIH0sXG4gICAgICBtZW51SXRlbTogeyAvLyBzaW1pbGFpciB0byBkcm9wIGRvd24gbWVudSdzIG1lbnUgaXRlbSBzdHlsZXNcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLmljb25TaXplICsgc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyAqIDIsXG4gICAgICAgIGhlaWdodDogc3BhY2luZy5kZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCxcbiAgICAgICAgbGluZUhlaWdodDogc3BhY2luZy5kZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCArICdweCdcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbWVudUl0ZW1zID0gX3Byb3BzLm1lbnVJdGVtcztcbiAgICB2YXIgY2xvc2VPbk1lbnVJdGVtVG91Y2hUYXAgPSBfcHJvcHMuY2xvc2VPbk1lbnVJdGVtVG91Y2hUYXA7XG4gICAgdmFyIGljb25TdHlsZSA9IF9wcm9wcy5pY29uU3R5bGU7XG4gICAgdmFyIGljb25DbGFzc05hbWUgPSBfcHJvcHMuaWNvbkNsYXNzTmFtZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGUnLCAnY2hpbGRyZW4nLCAnbWVudUl0ZW1zJywgJ2Nsb3NlT25NZW51SXRlbVRvdWNoVGFwJywgJ2ljb25TdHlsZScsICdpY29uQ2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IG9uVG91Y2hUYXA6IHRoaXMuX29uQ29udHJvbENsaWNrIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgRm9udEljb24sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBpY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgc3R5bGU6IGljb25TdHlsZSB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuaWNvbkxpZ2F0dXJlXG4gICAgICAgICksXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnUsIHtcbiAgICAgICAgcmVmOiAnbWVudUl0ZW1zJyxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnUpLFxuICAgICAgICBtZW51SXRlbXM6IG1lbnVJdGVtcyxcbiAgICAgICAgbWVudUl0ZW1TdHlsZTogc3R5bGVzLm1lbnVJdGVtLFxuICAgICAgICBoaWRlYWJsZTogdHJ1ZSxcbiAgICAgICAgdmlzaWJsZTogdGhpcy5zdGF0ZS5vcGVuLFxuICAgICAgICBvbkl0ZW1UYXA6IHRoaXMuX29uTWVudUl0ZW1DbGljayB9KVxuICAgICk7XG4gIH0sXG5cbiAgX29uQ29udHJvbENsaWNrOiBmdW5jdGlvbiBfb25Db250cm9sQ2xpY2soKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46ICF0aGlzLnN0YXRlLm9wZW4gfSk7XG4gIH0sXG5cbiAgX29uTWVudUl0ZW1DbGljazogZnVuY3Rpb24gX29uTWVudUl0ZW1DbGljayhlLCBrZXksIHBheWxvYWQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShlLCBrZXksIHBheWxvYWQpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbk1lbnVJdGVtVG91Y2hUYXApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BEb3duSWNvbjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENsaWNrQXdheWFibGUgPSByZXF1aXJlKCcuL21peGlucy9jbGljay1hd2F5YWJsZScpO1xudmFyIEtleUNvZGUgPSByZXF1aXJlKCcuL3V0aWxzL2tleS1jb2RlJyk7XG52YXIgRHJvcERvd25BcnJvdyA9IHJlcXVpcmUoJy4vc3ZnLWljb25zL2Ryb3AtZG93bi1hcnJvdycpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xudmFyIE1lbnUgPSByZXF1aXJlKCcuL21lbnUvbWVudScpO1xudmFyIENsZWFyRml4ID0gcmVxdWlyZSgnLi9jbGVhcmZpeCcpO1xudmFyIERyb3BEb3duTWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEcm9wRG93bk1lbnUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIENsaWNrQXdheWFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgLy8gVGhlIG5lc3RlZCBzdHlsZXMgZm9yIGRyb3AtZG93bi1tZW51IGFyZSBtb2RpZmllZCBieSB0b29sYmFyIGFuZCBwb3NzaWJseVxuICAvLyBvdGhlciB1c2VyIGNvbXBvbmVudHMsIHNvIGl0IHdpbGwgZ2l2ZSBmdWxsIGFjY2VzcyB0byBpdHMganMgc3R5bGVzIHJhdGhlclxuICAvLyB0aGFuIGp1c3QgdGhlIHBhcmVudC5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc3BsYXlNZW1iZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgdmFsdWVNZW1iZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgYXV0b1dpZHRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBtZW51SXRlbVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHVuZGVybGluZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGljb25TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsYWJlbFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbGVjdGVkSW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0b1dpZHRoOiB0cnVlLFxuICAgICAgdmFsdWVNZW1iZXI6ICdwYXlsb2FkJyxcbiAgICAgIGRpc3BsYXlNZW1iZXI6ICd0ZXh0J1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgaXNIb3ZlcmVkOiBmYWxzZSxcbiAgICAgIHNlbGVjdGVkSW5kZXg6IHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHwgdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJykgPyBudWxsIDogdGhpcy5wcm9wcy5zZWxlY3RlZEluZGV4IHx8IDBcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudENsaWNrQXdheTogZnVuY3Rpb24gY29tcG9uZW50Q2xpY2tBd2F5KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b1dpZHRoKSB0aGlzLl9zZXRXaWR0aCgpO1xuICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCdzZWxlY3RlZEluZGV4JykpIHRoaXMuX3NldFNlbGVjdGVkSW5kZXgodGhpcy5wcm9wcyk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnc2VsZWN0ZWRJbmRleCcpKSB7XG4gICAgICB0aGlzLl9zZXRTZWxlY3RlZEluZGV4KG5leHRQcm9wcyk7XG4gICAgfVxuICB9LFxuXG4gIGdldFNwYWNpbmc6IGZ1bmN0aW9uIGdldFNwYWNpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nO1xuICB9LFxuXG4gIGdldFRleHRDb2xvcjogZnVuY3Rpb24gZ2V0VGV4dENvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIGFjY2VudENvbG9yID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5kcm9wRG93bk1lbnUuYWNjZW50Q29sb3I7XG4gICAgdmFyIGJhY2tncm91bmRDb2xvciA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubWVudS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcFRvb2xiYXJIZWlnaHQsXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wRHJvcERvd25NZW51Rm9udFNpemUsXG4gICAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2w6IHtcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAnc3RhdGljJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sQmc6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH0sXG4gICAgICBpY29uOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICh0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wVG9vbGJhckhlaWdodCAtIDI0KSAvIDIsXG4gICAgICAgIHJpZ2h0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyTGVzcyxcbiAgICAgICAgZmlsbDogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5kcm9wRG93bk1lbnUuYWNjZW50Q29sb3JcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BUb29sYmFySGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRleHRDb2xvcigpXG4gICAgICB9LFxuICAgICAgdW5kZXJsaW5lOiB7XG4gICAgICAgIGJvcmRlclRvcDogJ3NvbGlkIDFweCAnICsgYWNjZW50Q29sb3IsXG4gICAgICAgIG1hcmdpbjogJy0xcHggJyArIHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIgKyAncHgnXG4gICAgICB9LFxuICAgICAgbWVudUl0ZW06IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmdldFNwYWNpbmcoKS5pY29uU2l6ZSArIHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXJMZXNzICsgdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1pbmksXG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcERyb3BEb3duTWVudUl0ZW1IZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BEcm9wRG93bk1lbnVJdGVtSGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgIH0sXG4gICAgICByb290V2hlbk9wZW46IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgIGxhYmVsV2hlbk9wZW46IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdG9wOiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wVG9vbGJhckhlaWdodCAvIDJcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgZ2V0SW5wdXROb2RlOiBmdW5jdGlvbiBnZXRJbnB1dE5vZGUoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLnJlZnMucm9vdDtcbiAgICB2YXIgaXRlbSA9IHRoaXMucHJvcHMubWVudUl0ZW1zW3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF07XG4gICAgaWYgKGl0ZW0pIHJvb3QudmFsdWUgPSBpdGVtW3RoaXMucHJvcHMuZGlzcGxheU1lbWJlcl07XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleDtcbiAgICB2YXIgZGlzcGxheVZhbHVlID0gJyc7XG4gICAgaWYgKHNlbGVjdGVkSW5kZXgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KCEhdGhpcy5wcm9wcy5tZW51SXRlbXNbc2VsZWN0ZWRJbmRleF0sICdTZWxlY3RlZEluZGV4IG9mICcgKyBzZWxlY3RlZEluZGV4ICsgJyBkb2VzIG5vdCBleGlzdCBpbiBtZW51SXRlbXMuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlTWVtYmVyICYmICh0aGlzLnByb3BzLnZhbHVlTGluayB8fCB0aGlzLnByb3BzLnZhbHVlKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlIHx8IHRoaXMucHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMucHJvcHMubWVudUl0ZW1zKSBpZiAodGhpcy5wcm9wcy5tZW51SXRlbXNbaV1bdGhpcy5wcm9wcy52YWx1ZU1lbWJlcl0gPT09IHZhbHVlKSBzZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0ZWRJdGVtID0gdGhpcy5wcm9wcy5tZW51SXRlbXNbc2VsZWN0ZWRJbmRleF07XG4gICAgaWYgKHNlbGVjdGVkSXRlbSkgZGlzcGxheVZhbHVlID0gc2VsZWN0ZWRJdGVtW3RoaXMucHJvcHMuZGlzcGxheU1lbWJlcl07XG5cbiAgICB2YXIgbWVudUl0ZW1zID0gdGhpcy5wcm9wcy5tZW51SXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLnRleHQgPSBpdGVtW190aGlzLnByb3BzLmRpc3BsYXlNZW1iZXJdO1xuICAgICAgaXRlbS5wYXlsb2FkID0gaXRlbVtfdGhpcy5wcm9wcy52YWx1ZU1lbWJlcl07XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIHJlZjogJ3Jvb3QnLFxuICAgICAgICBvbk1vdXNlT3V0OiB0aGlzLl9oYW5kbGVNb3VzZU91dCxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLl9vbktleURvd24sXG4gICAgICAgIG9uRm9jdXM6IHRoaXMucHJvcHMub25Gb2N1cyxcbiAgICAgICAgb25CbHVyOiB0aGlzLnByb3BzLm9uQmx1cixcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMuc3RhdGUub3BlbiAmJiBzdHlsZXMucm9vdFdoZW5PcGVuLCB0aGlzLnByb3BzLnN0eWxlKSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgQ2xlYXJGaXgsXG4gICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRyb2wpLCBvblRvdWNoVGFwOiB0aGlzLl9vbkNvbnRyb2xDbGljayB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5jb250cm9sQmcpLCB6RGVwdGg6IDAgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwsIHRoaXMuc3RhdGUub3BlbiAmJiBzdHlsZXMubGFiZWxXaGVuT3BlbiwgdGhpcy5wcm9wcy5sYWJlbFN0eWxlKSB9LFxuICAgICAgICAgIGRpc3BsYXlWYWx1ZVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3BEb3duQXJyb3csIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb24sIHRoaXMucHJvcHMuaWNvblN0eWxlKSB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudW5kZXJsaW5lLCB0aGlzLnByb3BzLnVuZGVybGluZVN0eWxlKSB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwge1xuICAgICAgICByZWY6ICdtZW51SXRlbXMnLFxuICAgICAgICBhdXRvV2lkdGg6IHRoaXMucHJvcHMuYXV0b1dpZHRoLFxuICAgICAgICBzZWxlY3RlZEluZGV4OiBzZWxlY3RlZEluZGV4LFxuICAgICAgICBtZW51SXRlbXM6IG1lbnVJdGVtcyxcbiAgICAgICAgbWVudUl0ZW1TdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubWVudUl0ZW0sIHRoaXMucHJvcHMubWVudUl0ZW1TdHlsZSksXG4gICAgICAgIGhpZGVhYmxlOiB0cnVlLFxuICAgICAgICB2aXNpYmxlOiB0aGlzLnN0YXRlLm9wZW4sXG4gICAgICAgIG9uUmVxdWVzdENsb3NlOiB0aGlzLl9vbk1lbnVSZXF1ZXN0Q2xvc2UsXG4gICAgICAgIG9uSXRlbVRhcDogdGhpcy5fb25NZW51SXRlbUNsaWNrIH0pXG4gICAgKTtcbiAgfSxcblxuICBfc2V0V2lkdGg6IGZ1bmN0aW9uIF9zZXRXaWR0aCgpIHtcbiAgICB2YXIgZWwgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgbWVudUl0ZW1zRG9tID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm1lbnVJdGVtcyk7XG4gICAgaWYgKCF0aGlzLnByb3BzLnN0eWxlIHx8ICF0aGlzLnByb3BzLnN0eWxlLmhhc093blByb3BlcnR5KCd3aWR0aCcpKSB7XG4gICAgICBlbC5zdHlsZS53aWR0aCA9IG1lbnVJdGVtc0RvbS5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgfVxuICB9LFxuXG4gIF9zZXRTZWxlY3RlZEluZGV4OiBmdW5jdGlvbiBfc2V0U2VsZWN0ZWRJbmRleChwcm9wcykge1xuICAgIHZhciBzZWxlY3RlZEluZGV4ID0gcHJvcHMuc2VsZWN0ZWRJbmRleDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlbGVjdGVkSW5kZXggPCAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBzZXQgc2VsZWN0ZWRJbmRleCB0byBhIG5lZ2F0aXZlIGluZGV4LicsIHNlbGVjdGVkSW5kZXgpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZEluZGV4OiBzZWxlY3RlZEluZGV4ID4gLTEgPyBzZWxlY3RlZEluZGV4IDogMCB9KTtcbiAgfSxcblxuICBfb25Db250cm9sQ2xpY2s6IGZ1bmN0aW9uIF9vbkNvbnRyb2xDbGljaygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogIXRoaXMuc3RhdGUub3BlbiB9KTtcbiAgfSxcblxuICBfb25LZXlEb3duOiBmdW5jdGlvbiBfb25LZXlEb3duKGUpIHtcbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgS2V5Q29kZS5VUDpcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLm9wZW4pIHRoaXMuX3NlbGVjdFByZXZpb3VzSXRlbSgpO2Vsc2UgaWYgKGUuYWx0S2V5KSB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlDb2RlLkRPV046XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5vcGVuKSBpZiAoZS5hbHRLZXkpIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pO2Vsc2UgdGhpcy5fc2VsZWN0TmV4dEl0ZW0oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtleUNvZGUuRU5URVI6XG4gICAgICBjYXNlIEtleUNvZGUuU1BBQ0U6XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjsgLy9pbXBvcnRhbnRcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9LFxuXG4gIF9vbk1lbnVJdGVtQ2xpY2s6IGZ1bmN0aW9uIF9vbk1lbnVJdGVtQ2xpY2soZSwga2V5LCBwYXlsb2FkKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ICE9PSBrZXkpIHtcbiAgICAgIHZhciBzZWxlY3RlZEl0ZW0gPSB0aGlzLnByb3BzLm1lbnVJdGVtc1trZXldO1xuICAgICAgaWYgKHNlbGVjdGVkSXRlbSkgZS50YXJnZXQudmFsdWUgPSBzZWxlY3RlZEl0ZW1bdGhpcy5wcm9wcy52YWx1ZU1lbWJlcl07XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlTGluaykgdGhpcy5wcm9wcy52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShlLnRhcmdldC52YWx1ZSk7ZWxzZSB0aGlzLnByb3BzLm9uQ2hhbmdlKGUsIGtleSwgcGF5bG9hZCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZEluZGV4OiBrZXksXG4gICAgICB2YWx1ZTogZS50YXJnZXQudmFsdWUsXG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICAgIGlzSG92ZXJlZDogZmFsc2VcbiAgICB9KTtcbiAgfSxcblxuICBfb25NZW51UmVxdWVzdENsb3NlOiBmdW5jdGlvbiBfb25NZW51UmVxdWVzdENsb3NlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdmVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0hvdmVyZWQ6IHRydWUgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzSG92ZXJlZDogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX3NlbGVjdFByZXZpb3VzSXRlbTogZnVuY3Rpb24gX3NlbGVjdFByZXZpb3VzSXRlbSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogTWF0aC5tYXgodGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4IC0gMSwgMCkgfSk7XG4gIH0sXG5cbiAgX3NlbGVjdE5leHRJdGVtOiBmdW5jdGlvbiBfc2VsZWN0TmV4dEl0ZW0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IE1hdGgubWluKHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCArIDEsIHRoaXMucHJvcHMubWVudUl0ZW1zLmxlbmd0aCAtIDEpIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BEb3duTWVudTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi91dGlscy9rZXktY29kZScpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIEZvY3VzUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZScpO1xudmFyIFRvdWNoUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL3RvdWNoLXJpcHBsZScpO1xuXG52YXIgRW5oYW5jZWRCdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRW5oYW5jZWRCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIFdpbmRvd0xpc3RlbmFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2VudGVyUmlwcGxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBjb250YWluZXJFbGVtZW50OiBSZWFjdC5Qcm9wVHlwZXMub25lT2ZUeXBlKFtSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudF0pLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVUb3VjaFJpcHBsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAga2V5Ym9hcmRGb2N1c2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBsaW5rQnV0dG9uOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBmb2N1c1JpcHBsZUNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvdWNoUmlwcGxlQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZm9jdXNSaXBwbGVPcGFjaXR5OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHRvdWNoUmlwcGxlT3BhY2l0eTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkJsdXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VPdXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VPdmVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbktleWJvYXJkRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQ6ICdidXR0b24nXG4gICAgfTtcbiAgfSxcblxuICB3aW5kb3dMaXN0ZW5lcnM6IHtcbiAgICAna2V5ZG93bic6ICdfaGFuZGxlV2luZG93S2V5ZG93bicsXG4gICAgJ2tleXVwJzogJ19oYW5kbGVXaW5kb3dLZXl1cCdcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6ICF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMua2V5Ym9hcmRGb2N1c2VkXG4gICAgfTtcbiAgfSxcblxuICAvLyBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIUVuaGFuY2VkQnV0dG9uLmhhc1N0eWxlQmVlbkluamVjdGVkKSB7XG4gICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUuaW5uZXJIVE1MID0gJ2J1dHRvbjo6LW1vei1mb2N1cy1pbm5lciwnICsgJ2lucHV0OjotbW96LWZvY3VzLWlubmVyIHsnICsgJyBib3JkZXI6IDA7JyArICcgcGFkZGluZzogMDsnICsgJyB9JztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgRW5oYW5jZWRCdXR0b24uaGFzU3R5bGVCZWVuSW5qZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBib3JkZXI6IDEwLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICAgIGZvbnRGYW1pbHk6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb250ZW50Rm9udEZhbWlseSxcbiAgICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgICAgICAgV2Via2l0QXBwZWFyYW5jZTogIXRoaXMucHJvcHMubGlua0J1dHRvbiAmJiAnYnV0dG9uJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgIH0sXG4gICAgICByb290V2hlbkxpbmtCdXR0b246IHtcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgIGN1cnNvcjogdGhpcy5wcm9wcy5kaXNhYmxlZCA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJyxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNlbnRlclJpcHBsZSA9IF9wcm9wcy5jZW50ZXJSaXBwbGU7XG4gICAgdmFyIGNvbnRhaW5lckVsZW1lbnQgPSBfcHJvcHMuY29udGFpbmVyRWxlbWVudDtcbiAgICB2YXIgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQ7XG4gICAgdmFyIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGU7XG4gICAgdmFyIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcy5kaXNhYmxlVG91Y2hSaXBwbGU7XG4gICAgdmFyIGZvY3VzUmlwcGxlQ29sb3IgPSBfcHJvcHMuZm9jdXNSaXBwbGVDb2xvcjtcbiAgICB2YXIgZm9jdXNSaXBwbGVPcGFjaXR5ID0gX3Byb3BzLmZvY3VzUmlwcGxlT3BhY2l0eTtcbiAgICB2YXIgbGlua0J1dHRvbiA9IF9wcm9wcy5saW5rQnV0dG9uO1xuICAgIHZhciB0b3VjaFJpcHBsZUNvbG9yID0gX3Byb3BzLnRvdWNoUmlwcGxlQ29sb3I7XG4gICAgdmFyIHRvdWNoUmlwcGxlT3BhY2l0eSA9IF9wcm9wcy50b3VjaFJpcHBsZU9wYWNpdHk7XG4gICAgdmFyIG9uQmx1ciA9IF9wcm9wcy5vbkJsdXI7XG4gICAgdmFyIG9uRm9jdXMgPSBfcHJvcHMub25Gb2N1cztcbiAgICB2YXIgb25Nb3VzZU92ZXIgPSBfcHJvcHMub25Nb3VzZU92ZXI7XG4gICAgdmFyIG9uTW91c2VPdXQgPSBfcHJvcHMub25Nb3VzZU91dDtcbiAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2VudGVyUmlwcGxlJywgJ2NvbnRhaW5lckVsZW1lbnQnLCAnZGlzYWJsZWQnLCAnZGlzYWJsZUZvY3VzUmlwcGxlJywgJ2Rpc2FibGVUb3VjaFJpcHBsZScsICdmb2N1c1JpcHBsZUNvbG9yJywgJ2ZvY3VzUmlwcGxlT3BhY2l0eScsICdsaW5rQnV0dG9uJywgJ3RvdWNoUmlwcGxlQ29sb3InLCAndG91Y2hSaXBwbGVPcGFjaXR5JywgJ29uQmx1cicsICdvbkZvY3VzJywgJ29uTW91c2VPdmVyJywgJ29uTW91c2VPdXQnLCAnb25Ub3VjaFRhcCcsICdzdHlsZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIGxpbmtCdXR0b24gJiYgc3R5bGVzLnJvb3RXaGVuTGlua0J1dHRvbiwgZGlzYWJsZWQgJiYgc3R5bGVzLnJvb3RXaGVuRGlzYWJsZWQsIHN0eWxlKTtcblxuICAgIHZhciBidXR0b25Qcm9wcyA9IF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgc3R5bGU6IG1lcmdlZFN0eWxlcyxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIG9uQmx1cjogdGhpcy5faGFuZGxlQmx1cixcbiAgICAgIG9uRm9jdXM6IHRoaXMuX2hhbmRsZUZvY3VzLFxuICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0LFxuICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlVG91Y2hUYXBcbiAgICB9KTtcblxuICAgIHZhciBidXR0b25DaGlsZHJlbiA9IFtdO1xuXG4gICAgLy8gQ3JlYXRlIHJpcHBsZXMgaWYgd2UgbmVlZCB0b1xuICAgIGJ1dHRvbkNoaWxkcmVuLnB1c2goZGlzYWJsZWQgfHwgZGlzYWJsZVRvdWNoUmlwcGxlID8gdGhpcy5wcm9wcy5jaGlsZHJlbiA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUb3VjaFJpcHBsZSxcbiAgICAgIHtcbiAgICAgICAgcmVmOiAndG91Y2hSaXBwbGUnLFxuICAgICAgICBrZXk6ICd0b3VjaFJpcHBsZScsXG4gICAgICAgIGNlbnRlclJpcHBsZTogY2VudGVyUmlwcGxlLFxuICAgICAgICBjb2xvcjogdG91Y2hSaXBwbGVDb2xvcixcbiAgICAgICAgb3BhY2l0eTogdG91Y2hSaXBwbGVPcGFjaXR5IH0sXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKSk7XG4gICAgYnV0dG9uQ2hpbGRyZW4ucHVzaChkaXNhYmxlZCB8fCBkaXNhYmxlRm9jdXNSaXBwbGUgPyBudWxsIDogUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1JpcHBsZSwge1xuICAgICAga2V5OiAnZm9jdXNSaXBwbGUnLFxuICAgICAgY29sb3I6IGZvY3VzUmlwcGxlQ29sb3IsXG4gICAgICBvcGFjaXR5OiBmb2N1c1JpcHBsZU9wYWNpdHksXG4gICAgICBzaG93OiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkIH0pKTtcblxuICAgIGlmIChkaXNhYmxlZCAmJiBsaW5rQnV0dG9uKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgICBzdHlsZTogbWVyZ2VkU3R5bGVzIH0pLFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjb250YWluZXJFbGVtZW50KSA/IFJlYWN0LmNsb25lRWxlbWVudChjb250YWluZXJFbGVtZW50LCBidXR0b25Qcm9wcywgYnV0dG9uQ2hpbGRyZW4pIDogUmVhY3QuY3JlYXRlRWxlbWVudChsaW5rQnV0dG9uID8gJ2EnIDogY29udGFpbmVyRWxlbWVudCwgYnV0dG9uUHJvcHMsIGJ1dHRvbkNoaWxkcmVuKTtcbiAgfSxcblxuICBpc0tleWJvYXJkRm9jdXNlZDogZnVuY3Rpb24gaXNLZXlib2FyZEZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQ7XG4gIH0sXG5cbiAgX2hhbmRsZVdpbmRvd0tleWRvd246IGZ1bmN0aW9uIF9oYW5kbGVXaW5kb3dLZXlkb3duKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT0gS2V5Q29kZS5UQUIpIHRoaXMuX3RhYlByZXNzZWQgPSB0cnVlO1xuICAgICAgaWYgKGUua2V5Q29kZSA9PSBLZXlDb2RlLkVOVEVSICYmIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlVG91Y2hUYXAoZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVXaW5kb3dLZXl1cDogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleXVwKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgZS5rZXlDb2RlID09IEtleUNvZGUuU1BBQ0UgJiYgdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgdGhpcy5faGFuZGxlVG91Y2hUYXAoZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVCbHVyOiBmdW5jdGlvbiBfaGFuZGxlQmx1cihlKSB7XG4gICAgdGhpcy5fY2FuY2VsRm9jdXNUaW1lb3V0KCk7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cykgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZSwgZmFsc2UpO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUZvY3VzOiBmdW5jdGlvbiBfaGFuZGxlRm9jdXMoZSkge1xuICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlLm91dGxpbmUgPSAnbm9uZSc7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAvL3NldFRpbWVvdXQgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGZvY3VzIGV2ZW50IGZpcmVzIGZpcnN0XG4gICAgICAvL1dhaXQgc28gdGhhdCB3ZSBjYW4gY2FwdHVyZSBpZiB0aGlzIHdhcyBhIGtleWJvYXJkIGZvY3VzXG4gICAgICAvL29yIHRvdWNoIGZvY3VzXG4gICAgICB0aGlzLl9mb2N1c1RpbWVvdXQgPSBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90YWJQcmVzc2VkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cykgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmJpbmQodGhpcyksIDE1MCk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRm9jdXMpIHRoaXMucHJvcHMub25Gb2N1cyhlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3ZlcihlKSB7XG4gICAgUmVhY3QuZmluZERPTU5vZGUodGhpcykuc3R5bGUudGV4dERlY29yYXRpb24gPSAnbm9uZSc7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU92ZXIpIHRoaXMucHJvcHMub25Nb3VzZU92ZXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VPdXQpIHRoaXMucHJvcHMub25Nb3VzZU91dChlKTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFRhcChlKSB7XG4gICAgdGhpcy5fY2FuY2VsRm9jdXNUaW1lb3V0KCk7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLl90YWJQcmVzc2VkID0gZmFsc2U7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cykgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZSwgZmFsc2UpO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25Ub3VjaFRhcCkgdGhpcy5wcm9wcy5vblRvdWNoVGFwKGUpO1xuICAgIH1cbiAgfSxcblxuICBfY2FuY2VsRm9jdXNUaW1lb3V0OiBmdW5jdGlvbiBfY2FuY2VsRm9jdXNUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLl9mb2N1c1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9mb2N1c1RpbWVvdXQpO1xuICAgICAgdGhpcy5fZm9jdXNUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxufSk7XG5cbkVuaGFuY2VkQnV0dG9uLmhhc1N0eWxlQmVlbkluamVjdGVkID0gZmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gRW5oYW5jZWRCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgS2V5Q29kZSA9IHJlcXVpcmUoJy4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgVW5pcXVlSWQgPSByZXF1aXJlKCcuL3V0aWxzL3VuaXF1ZS1pZCcpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIENsZWFyRml4ID0gcmVxdWlyZSgnLi9jbGVhcmZpeCcpO1xudmFyIEZvY3VzUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZScpO1xudmFyIFRvdWNoUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL3RvdWNoLXJpcHBsZScpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xuXG52YXIgRW5oYW5jZWRTd2l0Y2ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRW5oYW5jZWRTd2l0Y2gnLFxuXG4gIG1peGluczogW1dpbmRvd0xpc3RlbmFibGUsIFN0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5wdXRUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc3dpdGNoRWxlbWVudDogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBvblBhcmVudFNob3VsZFVwZGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzd2l0Y2hlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICByaXBwbGVTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICByaXBwbGVDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgdGh1bWJTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0cmFja1N0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGxhYmVsU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvblN3aXRjaDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVxdWlyZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkZWZhdWx0U3dpdGNoZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGxhYmVsUG9zaXRpb246IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXG4gICAgZGlzYWJsZUZvY3VzUmlwcGxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAgJ2tleWRvd24nOiAnX2hhbmRsZVdpbmRvd0tleWRvd24nLFxuICAgICdrZXl1cCc6ICdfaGFuZGxlV2luZG93S2V5dXAnXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHBhcmVudFdpZHRoOiAxMDBcbiAgICB9O1xuICB9LFxuXG4gIGdldEV2ZW5XaWR0aDogZnVuY3Rpb24gZ2V0RXZlbldpZHRoKCkge1xuICAgIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMucm9vdCkpLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJyksIDEwKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIGlucHV0Tm9kZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5jaGVja2JveCk7XG4gICAgaWYgKCF0aGlzLnByb3BzLnN3aXRjaGVkIHx8IGlucHV0Tm9kZS5jaGVja2VkICE9IHRoaXMucHJvcHMuc3dpdGNoZWQpIHRoaXMucHJvcHMub25QYXJlbnRTaG91bGRVcGRhdGUoaW5wdXROb2RlLmNoZWNrZWQpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZVJlc2l6ZSk7XG5cbiAgICB0aGlzLl9oYW5kbGVSZXNpemUoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZVJlc2l6ZSk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgaGFzQ2hlY2tlZExpbmtQcm9wID0gbmV4dFByb3BzLmhhc093blByb3BlcnR5KCdjaGVja2VkTGluaycpO1xuICAgIHZhciBoYXNDaGVja2VkUHJvcCA9IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnY2hlY2tlZCcpO1xuICAgIHZhciBoYXNUb2dnbGVkUHJvcCA9IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgndG9nZ2xlZCcpO1xuICAgIHZhciBoYXNOZXdEZWZhdWx0UHJvcCA9IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdFN3aXRjaGVkJykgJiYgbmV4dFByb3BzLmRlZmF1bHRTd2l0Y2hlZCAhPSB0aGlzLnByb3BzLmRlZmF1bHRTd2l0Y2hlZDtcbiAgICB2YXIgbmV3U3RhdGUgPSB7fTtcblxuICAgIGlmIChoYXNDaGVja2VkUHJvcCkge1xuICAgICAgbmV3U3RhdGUuc3dpdGNoZWQgPSBuZXh0UHJvcHMuY2hlY2tlZDtcbiAgICB9IGVsc2UgaWYgKGhhc1RvZ2dsZWRQcm9wKSB7XG4gICAgICBuZXdTdGF0ZS5zd2l0Y2hlZCA9IG5leHRQcm9wcy50b2dnbGVkO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2hlY2tlZExpbmtQcm9wKSB7XG4gICAgICBuZXdTdGF0ZS5zd2l0Y2hlZCA9IG5leHRQcm9wcy5jaGVja2VkTGluay52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGhhc05ld0RlZmF1bHRQcm9wKSB7XG4gICAgICBuZXdTdGF0ZS5zd2l0Y2hlZCA9IG5leHRQcm9wcy5kZWZhdWx0U3dpdGNoZWQ7XG4gICAgfVxuXG4gICAgaWYgKG5ld1N0YXRlLnN3aXRjaGVkICE9PSB1bmRlZmluZWQgJiYgbmV3U3RhdGUuc3dpdGNoZWQgIT0gdGhpcy5wcm9wcy5zd2l0Y2hlZCkgdGhpcy5wcm9wcy5vblBhcmVudFNob3VsZFVwZGF0ZShuZXdTdGF0ZS5zd2l0Y2hlZCk7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3BhY2luZyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nO1xuICAgIHZhciBzd2l0Y2hXaWR0aCA9IDYwIC0gc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcztcbiAgICB2YXIgbGFiZWxXaWR0aCA9ICdjYWxjKDEwMCUgLSA2MHB4KSc7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgY3Vyc29yOiB0aGlzLnByb3BzLmRpc2FibGVkID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInLFxuICAgICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBjdXJzb3I6IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAnZGVmYXVsdCcgOiAncG9pbnRlcicsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdhbGwnLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgekluZGV4OiAyLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgbWFyZ2luOiAwXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6IGxhYmVsV2lkdGgsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3JcbiAgICAgIH0sXG4gICAgICB3cmFwOiB7XG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHdpZHRoOiBzd2l0Y2hXaWR0aCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA9PSAncmlnaHQnID8gc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyA6IDAsXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA9PSAnbGVmdCcgPyBzcGFjaW5nLmRlc2t0b3BHdXR0ZXJMZXNzIDogMFxuICAgICAgfSxcbiAgICAgIHJpcHBsZToge1xuICAgICAgICBoZWlnaHQ6ICcyMDAlJyxcbiAgICAgICAgd2lkdGg6ICcyMDAlJyxcbiAgICAgICAgdG9wOiAnLTEyJyxcbiAgICAgICAgbGVmdDogJy0xMidcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHR5cGUgPSBfcHJvcHMudHlwZTtcbiAgICB2YXIgbmFtZSA9IF9wcm9wcy5uYW1lO1xuICAgIHZhciB2YWx1ZSA9IF9wcm9wcy52YWx1ZTtcbiAgICB2YXIgbGFiZWwgPSBfcHJvcHMubGFiZWw7XG4gICAgdmFyIG9uU3dpdGNoID0gX3Byb3BzLm9uU3dpdGNoO1xuICAgIHZhciBkZWZhdWx0U3dpdGNoZWQgPSBfcHJvcHMuZGVmYXVsdFN3aXRjaGVkO1xuICAgIHZhciBvbkJsdXIgPSBfcHJvcHMub25CbHVyO1xuICAgIHZhciBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXM7XG4gICAgdmFyIG9uTW91c2VVcCA9IF9wcm9wcy5vbk1vdXNlVXA7XG4gICAgdmFyIG9uTW91c2VEb3duID0gX3Byb3BzLm9uTW91c2VEb3duO1xuICAgIHZhciBvbk1vdXNlT3V0ID0gX3Byb3BzLm9uTW91c2VPdXQ7XG4gICAgdmFyIG9uVG91Y2hTdGFydCA9IF9wcm9wcy5vblRvdWNoU3RhcnQ7XG4gICAgdmFyIG9uVG91Y2hFbmQgPSBfcHJvcHMub25Ub3VjaEVuZDtcbiAgICB2YXIgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzLmRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICB2YXIgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzLmRpc2FibGVGb2N1c1JpcHBsZTtcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsndHlwZScsICduYW1lJywgJ3ZhbHVlJywgJ2xhYmVsJywgJ29uU3dpdGNoJywgJ2RlZmF1bHRTd2l0Y2hlZCcsICdvbkJsdXInLCAnb25Gb2N1cycsICdvbk1vdXNlVXAnLCAnb25Nb3VzZURvd24nLCAnb25Nb3VzZU91dCcsICdvblRvdWNoU3RhcnQnLCAnb25Ub3VjaEVuZCcsICdkaXNhYmxlVG91Y2hSaXBwbGUnLCAnZGlzYWJsZUZvY3VzUmlwcGxlJywgJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHdyYXBTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy53cmFwLCB0aGlzLnByb3BzLmljb25TdHlsZSk7XG4gICAgdmFyIHJpcHBsZVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucmlwcGxlLCB0aGlzLnByb3BzLnJpcHBsZVN0eWxlKTtcbiAgICB2YXIgcmlwcGxlQ29sb3IgPSB0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCdyaXBwbGVDb2xvcicpID8gdGhpcy5wcm9wcy5yaXBwbGVDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5MUNvbG9yO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudGh1bWJTdHlsZSkge1xuICAgICAgd3JhcFN0eWxlcy5tYXJnaW5MZWZ0IC89IDI7XG4gICAgICB3cmFwU3R5bGVzLm1hcmdpblJpZ2h0IC89IDI7XG4gICAgfVxuXG4gICAgdmFyIGlucHV0SWQgPSB0aGlzLnByb3BzLmlkIHx8IFVuaXF1ZUlkLmdlbmVyYXRlKCk7XG5cbiAgICB2YXIgbGFiZWxTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmxhYmVsLCB0aGlzLnByb3BzLmxhYmVsU3R5bGUpO1xuXG4gICAgdmFyIGxhYmVsRWxlbWVudCA9IHRoaXMucHJvcHMubGFiZWwgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xhYmVsJyxcbiAgICAgIHsgc3R5bGU6IGxhYmVsU3R5bGUsIGh0bWxGb3I6IGlucHV0SWQgfSxcbiAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICApIDogbnVsbDtcblxuICAgIHZhciBpbnB1dFByb3BzID0ge1xuICAgICAgcmVmOiAnY2hlY2tib3gnLFxuICAgICAgdHlwZTogdGhpcy5wcm9wcy5pbnB1dFR5cGUsXG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaW5wdXQpLFxuICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICBkZWZhdWx0Q2hlY2tlZDogdGhpcy5wcm9wcy5kZWZhdWx0U3dpdGNoZWQsXG4gICAgICBvbkJsdXI6IHRoaXMuX2hhbmRsZUJsdXIsXG4gICAgICBvbkZvY3VzOiB0aGlzLl9oYW5kbGVGb2N1c1xuICAgIH07XG5cbiAgICB2YXIgaGlkZVRvdWNoUmlwcGxlID0gdGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBkaXNhYmxlVG91Y2hSaXBwbGU7XG5cbiAgICBpZiAoIWhpZGVUb3VjaFJpcHBsZSkge1xuICAgICAgaW5wdXRQcm9wcy5vbk1vdXNlVXAgPSB0aGlzLl9oYW5kbGVNb3VzZVVwO1xuICAgICAgaW5wdXRQcm9wcy5vbk1vdXNlRG93biA9IHRoaXMuX2hhbmRsZU1vdXNlRG93bjtcbiAgICAgIGlucHV0UHJvcHMub25Nb3VzZU91dCA9IHRoaXMuX2hhbmRsZU1vdXNlT3V0O1xuICAgICAgaW5wdXRQcm9wcy5vblRvdWNoU3RhcnQgPSB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0O1xuICAgICAgaW5wdXRQcm9wcy5vblRvdWNoRW5kID0gdGhpcy5faGFuZGxlVG91Y2hFbmQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCdjaGVja2VkTGluaycpKSB7XG4gICAgICBpbnB1dFByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuICAgIH1cblxuICAgIHZhciBpbnB1dEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIF9leHRlbmRzKHt9LCBvdGhlciwgaW5wdXRQcm9wcykpO1xuXG4gICAgdmFyIHRvdWNoUmlwcGxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChUb3VjaFJpcHBsZSwge1xuICAgICAgcmVmOiAndG91Y2hSaXBwbGUnLFxuICAgICAga2V5OiAndG91Y2hSaXBwbGUnLFxuICAgICAgc3R5bGU6IHJpcHBsZVN0eWxlLFxuICAgICAgY29sb3I6IHJpcHBsZUNvbG9yLFxuICAgICAgY2VudGVyUmlwcGxlOiB0cnVlIH0pO1xuXG4gICAgdmFyIGZvY3VzUmlwcGxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1JpcHBsZSwge1xuICAgICAga2V5OiAnZm9jdXNSaXBwbGUnLFxuICAgICAgaW5uZXJTdHlsZTogcmlwcGxlU3R5bGUsXG4gICAgICBjb2xvcjogcmlwcGxlQ29sb3IsXG4gICAgICBzaG93OiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkIH0pO1xuXG4gICAgdmFyIHJpcHBsZXMgPSBbaGlkZVRvdWNoUmlwcGxlID8gbnVsbCA6IHRvdWNoUmlwcGxlLCB0aGlzLnByb3BzLmRpc2FibGVkIHx8IGRpc2FibGVGb2N1c1JpcHBsZSA/IG51bGwgOiBmb2N1c1JpcHBsZV07XG5cbiAgICAvLyBJZiB0b2dnbGUgY29tcG9uZW50IChpbmRpY2F0ZWQgYnkgd2hldGhlciB0aGUgc3R5bGUgaW5jbHVkZXMgdGh1bWIpIG1hbnVhbGx5IGxheSBvdXRcbiAgICAvLyBlbGVtZW50cyBpbiBvcmRlciB0byBuZXN0IHJpcHBsZSBlbGVtZW50c1xuICAgIHZhciBzd2l0Y2hFbGVtZW50ID0gIXRoaXMucHJvcHMudGh1bWJTdHlsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHdyYXBTdHlsZXMgfSxcbiAgICAgIHRoaXMucHJvcHMuc3dpdGNoRWxlbWVudCxcbiAgICAgIHJpcHBsZXNcbiAgICApIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogd3JhcFN0eWxlcyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogdGhpcy5wcm9wcy50cmFja1N0eWxlIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgUGFwZXIsXG4gICAgICAgIHsgc3R5bGU6IHRoaXMucHJvcHMudGh1bWJTdHlsZSwgekRlcHRoOiAxLCBjaXJjbGU6IHRydWUgfSxcbiAgICAgICAgJyAnLFxuICAgICAgICByaXBwbGVzLFxuICAgICAgICAnICdcbiAgICAgIClcbiAgICApO1xuXG4gICAgdmFyIGxhYmVsUG9zaXRpb25FeGlzdCA9IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbjtcblxuICAgIC8vIFBvc2l0aW9uIGlzIGxlZnQgaWYgbm90IGRlZmluZWQgb3IgaW52YWxpZC5cbiAgICB2YXIgZWxlbWVudHNJbk9yZGVyID0gbGFiZWxQb3NpdGlvbkV4aXN0ICYmIHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbi50b1VwcGVyQ2FzZSgpID09PSAnUklHSFQnID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENsZWFyRml4LFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuY29udHJvbHMpIH0sXG4gICAgICBzd2l0Y2hFbGVtZW50LFxuICAgICAgbGFiZWxFbGVtZW50XG4gICAgKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDbGVhckZpeCxcbiAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRyb2xzKSB9LFxuICAgICAgbGFiZWxFbGVtZW50LFxuICAgICAgc3dpdGNoRWxlbWVudFxuICAgICk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyByZWY6ICdyb290JywgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKSB9LFxuICAgICAgaW5wdXRFbGVtZW50LFxuICAgICAgZWxlbWVudHNJbk9yZGVyXG4gICAgKTtcbiAgfSxcblxuICBpc1N3aXRjaGVkOiBmdW5jdGlvbiBpc1N3aXRjaGVkKCkge1xuICAgIHJldHVybiBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuY2hlY2tib3gpLmNoZWNrZWQ7XG4gIH0sXG5cbiAgLy8gbm8gY2FsbGJhY2sgaGVyZSBiZWNhdXNlIHRoZXJlIGlzIG5vIGV2ZW50XG4gIHNldFN3aXRjaGVkOiBmdW5jdGlvbiBzZXRTd2l0Y2hlZChuZXdTd2l0Y2hlZFZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCdjaGVja2VkJykgfHwgdGhpcy5wcm9wcy5jaGVja2VkID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5wcm9wcy5vblBhcmVudFNob3VsZFVwZGF0ZShuZXdTd2l0Y2hlZFZhbHVlKTtcbiAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5jaGVja2JveCkuY2hlY2tlZCA9IG5ld1N3aXRjaGVkVmFsdWU7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdDYW5ub3QgY2FsbCBzZXQgbWV0aG9kIHdoaWxlIGNoZWNrZWQgaXMgZGVmaW5lZCBhcyBhIHByb3BlcnR5Lic7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgfSxcblxuICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5jaGVja2JveCkudmFsdWU7XG4gIH0sXG5cbiAgaXNLZXlib2FyZEZvY3VzZWQ6IGZ1bmN0aW9uIGlzS2V5Ym9hcmRGb2N1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkO1xuICB9LFxuXG4gIF9oYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZSkge1xuICAgIHRoaXMuX3RhYlByZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdmFyIGlzSW5wdXRDaGVja2VkID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmNoZWNrYm94KS5jaGVja2VkO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCdjaGVja2VkJykpIHRoaXMucHJvcHMub25QYXJlbnRTaG91bGRVcGRhdGUoaXNJbnB1dENoZWNrZWQpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uU3dpdGNoKSB0aGlzLnByb3BzLm9uU3dpdGNoKGUsIGlzSW5wdXRDaGVja2VkKTtcbiAgfSxcblxuICAvKipcbiAgICogQmVjYXVzZSBib3RoIHRoZSByaXBwbGVzIGFuZCB0aGUgY2hlY2tib3ggaW5wdXQgY2Fubm90IHNoYXJlIHBvaW50ZXJcbiAgICogZXZlbnRzLCB0aGUgY2hlY2tib3ggaW5wdXQgdGFrZXMgY29udHJvbCBvZiBwb2ludGVyIGV2ZW50cyBhbmQgY2FsbHNcbiAgICogcmlwcGxlIGFuaW1hdGlvbnMgbWFudWFsbHkuXG4gICAqL1xuXG4gIC8vIENoZWNrYm94IGlucHV0cyBvbmx5IHVzZSBTUEFDRSB0byBjaGFuZ2UgdGhlaXIgc3RhdGUuIFVzaW5nIEVOVEVSIHdpbGxcbiAgLy8gdXBkYXRlIHRoZSB1aSBidXQgbm90IHRoZSBpbnB1dC5cbiAgX2hhbmRsZVdpbmRvd0tleWRvd246IGZ1bmN0aW9uIF9oYW5kbGVXaW5kb3dLZXlkb3duKGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlID09IEtleUNvZGUuVEFCKSB0aGlzLl90YWJQcmVzc2VkID0gdHJ1ZTtcbiAgICBpZiAoZS5rZXlDb2RlID09IEtleUNvZGUuU1BBQ0UgJiYgdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgdGhpcy5faGFuZGxlQ2hhbmdlKGUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlV2luZG93S2V5dXA6IGZ1bmN0aW9uIF9oYW5kbGVXaW5kb3dLZXl1cChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PSBLZXlDb2RlLlNQQUNFICYmIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUNoYW5nZShlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy9vbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkgdGhpcy5yZWZzLnRvdWNoUmlwcGxlLnN0YXJ0KGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZVVwOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VVcCgpIHtcbiAgICB0aGlzLnJlZnMudG91Y2hSaXBwbGUuZW5kKCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoKSB7XG4gICAgdGhpcy5yZWZzLnRvdWNoUmlwcGxlLmVuZCgpO1xuICB9LFxuXG4gIF9oYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hTdGFydChlKSB7XG4gICAgdGhpcy5yZWZzLnRvdWNoUmlwcGxlLnN0YXJ0KGUpO1xuICB9LFxuXG4gIF9oYW5kbGVUb3VjaEVuZDogZnVuY3Rpb24gX2hhbmRsZVRvdWNoRW5kKCkge1xuICAgIHRoaXMucmVmcy50b3VjaFJpcHBsZS5lbmQoKTtcbiAgfSxcblxuICBfaGFuZGxlQmx1cjogZnVuY3Rpb24gX2hhbmRsZUJsdXIoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkJsdXIpIHRoaXMucHJvcHMub25CbHVyKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVGb2N1czogZnVuY3Rpb24gX2hhbmRsZUZvY3VzKGUpIHtcbiAgICAvL3NldFRpbWVvdXQgaXMgbmVlZGVkIGJlY3Vhc2UgdGhlIGZvY3VzIGV2ZW50IGZpcmVzIGZpcnN0XG4gICAgLy9XYWl0IHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgaWYgdGhpcyB3YXMgYSBrZXlib2FyZCBmb2N1c1xuICAgIC8vb3IgdG91Y2ggZm9jdXNcbiAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5fdGFiUHJlc3NlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5iaW5kKHRoaXMpLCAxNTApO1xuXG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVSZXNpemU6IGZ1bmN0aW9uIF9oYW5kbGVSZXNpemUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBhcmVudFdpZHRoOiB0aGlzLmdldEV2ZW5XaWR0aCgpIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVuaGFuY2VkU3dpdGNoOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEF1dG9QcmVmaXggPSByZXF1aXJlKCcuL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xuXG52YXIgRW5oYW5jZWRUZXh0YXJlYSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdFbmhhbmNlZFRleHRhcmVhJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25IZWlnaHRDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHRleHRhcmVhU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgcm93czogUmVhY3QuUHJvcFR5cGVzLm51bWJlclxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3dzOiAxXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLnJvd3MgKiAyNFxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX3N5bmNIZWlnaHRXaXRoU2hhZG93KCk7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgICBwYWRkaW5nOiAwXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBvbkNoYW5nZSA9IF9wcm9wcy5vbkNoYW5nZTtcbiAgICB2YXIgb25IZWlnaHRDaGFuZ2UgPSBfcHJvcHMub25IZWlnaHRDaGFuZ2U7XG4gICAgdmFyIHJvd3MgPSBfcHJvcHMucm93cztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG4gICAgdmFyIHRleHRhcmVhU3R5bGUgPSBfcHJvcHMudGV4dGFyZWFTdHlsZTtcbiAgICB2YXIgdmFsdWVMaW5rID0gX3Byb3BzLnZhbHVlTGluaztcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb25DaGFuZ2UnLCAnb25IZWlnaHRDaGFuZ2UnLCAncm93cycsICdzdHlsZScsICd0ZXh0YXJlYVN0eWxlJywgJ3ZhbHVlTGluayddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpLnJvb3Q7XG5cbiAgICB2YXIgdGV4dEFyZWFTdHlsZXMgPSB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfTtcblxuICAgIHZhciBpbnB1dFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLCB7XG4gICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuaGVpZ2h0ICsgJ3B4J1xuICAgIH0pO1xuXG4gICAgaW5wdXRTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KGlucHV0U3R5bGVzLCB0ZXh0YXJlYVN0eWxlKTtcblxuICAgIC8vIE92ZXJmbG93IGFsc28gbmVlZGVkIHRvIGhlcmUgdG8gcmVtb3ZlIHRoZSBleHRyYSByb3dcbiAgICAvLyBhZGRlZCB0byB0ZXh0YXJlYXMgaW4gRmlyZWZveC5cbiAgICB2YXIgc2hhZG93U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh0ZXh0QXJlYVN0eWxlcywge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBvcGFjaXR5OiAwXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJykpIG90aGVyLnZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZUxpbmsudmFsdWU7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScsIHtcbiAgICAgICAgcmVmOiAnc2hhZG93JyxcbiAgICAgICAgc3R5bGU6IEF1dG9QcmVmaXguYWxsKHNoYWRvd1N0eWxlcyksXG4gICAgICAgIHRhYkluZGV4OiAnLTEnLFxuICAgICAgICByb3dzOiB0aGlzLnByb3BzLnJvd3MsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgICAgdmFsdWVMaW5rOiB0aGlzLnByb3BzLnZhbHVlTGluayB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJywgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHJlZjogJ2lucHV0JyxcbiAgICAgICAgcm93czogdGhpcy5wcm9wcy5yb3dzLFxuICAgICAgICBzdHlsZTogQXV0b1ByZWZpeC5hbGwoaW5wdXRTdHlsZXMpLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5faGFuZGxlQ2hhbmdlIH0pKVxuICAgICk7XG4gIH0sXG5cbiAgZ2V0SW5wdXROb2RlOiBmdW5jdGlvbiBnZXRJbnB1dE5vZGUoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5pbnB1dCk7XG4gIH0sXG5cbiAgc2V0VmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5yZWZzLmlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fc3luY0hlaWdodFdpdGhTaGFkb3codmFsdWUpO1xuICB9LFxuXG4gIF9zeW5jSGVpZ2h0V2l0aFNoYWRvdzogZnVuY3Rpb24gX3N5bmNIZWlnaHRXaXRoU2hhZG93KG5ld1ZhbHVlLCBlKSB7XG4gICAgdmFyIHNoYWRvdyA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5zaGFkb3cpO1xuICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gdGhpcy5zdGF0ZS5oZWlnaHQ7XG4gICAgdmFyIG5ld0hlaWdodDtcblxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSBzaGFkb3cudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBuZXdIZWlnaHQgPSBzaGFkb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgaWYgKGN1cnJlbnRIZWlnaHQgIT09IG5ld0hlaWdodCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhlaWdodDogbmV3SGVpZ2h0IH0pO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25IZWlnaHRDaGFuZ2UpIHRoaXMucHJvcHMub25IZWlnaHRDaGFuZ2UoZSwgbmV3SGVpZ2h0KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24gX2hhbmRsZUNoYW5nZShlKSB7XG4gICAgdGhpcy5fc3luY0hlaWdodFdpdGhTaGFkb3coZS50YXJnZXQudmFsdWUpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlTGluaycpKSB7XG4gICAgICB0aGlzLnByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShlKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT0gdGhpcy5wcm9wcy52YWx1ZSkge1xuICAgICAgdGhpcy5fc3luY0hlaWdodFdpdGhTaGFkb3cobmV4dFByb3BzLnZhbHVlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVuaGFuY2VkVGV4dGFyZWE7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yJyk7XG52YXIgVHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4vc3R5bGVzL3R5cG9ncmFwaHknKTtcbnZhciBFbmhhbmNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4vZW5oYW5jZWQtYnV0dG9uJyk7XG5cbnZhciBGbGF0QnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0ZsYXRCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBob3ZlckNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxhYmVsOiBmdW5jdGlvbiBsYWJlbChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgIXByb3BzLmxhYmVsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1dhcm5pbmc6IFJlcXVpcmVkIHByb3AgYGxhYmVsYCBvciBgY2hpbGRyZW5gIHdhcyBub3Qgc3BlY2lmaWVkIGluIGAnICsgY29tcG9uZW50TmFtZSArICdgLicpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwcmltYXJ5OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICByaXBwbGVDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzZWNvbmRhcnk6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsU3R5bGU6IHt9XG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lQnV0dG9uOiBmdW5jdGlvbiBnZXRUaGVtZUJ1dHRvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5idXR0b247XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmZsYXRCdXR0b247XG4gIH0sXG5cbiAgX2dldENvbG9yOiBmdW5jdGlvbiBfZ2V0Q29sb3IoKSB7XG4gICAgdmFyIHRoZW1lID0gdGhpcy5nZXRUaGVtZSgpO1xuICAgIHZhciBjb2xvciA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGVtZS5kaXNhYmxlZFRleHRDb2xvciA6IHRoaXMucHJvcHMucHJpbWFyeSA/IHRoZW1lLnByaW1hcnlUZXh0Q29sb3IgOiB0aGlzLnByb3BzLnNlY29uZGFyeSA/IHRoZW1lLnNlY29uZGFyeVRleHRDb2xvciA6IHRoZW1lLnRleHRDb2xvcjtcblxuICAgIHJldHVybiB7XG4gICAgICAnZGVmYXVsdCc6IGNvbG9yLFxuICAgICAgaG92ZXI6IHRoaXMucHJvcHMuaG92ZXJDb2xvciB8fCBDb2xvck1hbmlwdWxhdG9yLmZhZGUoQ29sb3JNYW5pcHVsYXRvci5saWdodGVuKGNvbG9yLCAwLjQpLCAwLjE1KSxcbiAgICAgIHJpcHBsZTogdGhpcy5wcm9wcy5yaXBwbGVDb2xvciB8fCBDb2xvck1hbmlwdWxhdG9yLmZhZGUoY29sb3IsIDAuOClcbiAgICB9O1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBjb2xvciA9IHRoaXMuX2dldENvbG9yKCk7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgY29sb3I6IGNvbG9yWydkZWZhdWx0J10sXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgZm9udFNpemU6IFR5cG9ncmFwaHkuZm9udFN0eWxlQnV0dG9uRm9udFNpemUsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250V2VpZ2h0OiBUeXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5jb2xvcixcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZUJ1dHRvbigpLmhlaWdodCArICdweCcsXG4gICAgICAgIG1pbldpZHRoOiB0aGlzLmdldFRoZW1lQnV0dG9uKCkubWluV2lkdGgsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgLy9UaGlzIGlzIG5lZWQgc28gdGhhdCByaXBwbGVzIGRvIG5vdCBibGVlZCBwYXN0IGJvcmRlciByYWRpdXMuXG4gICAgICAgIC8vU2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3Mjk4NzM5L2Nzcy1vdmVyZmxvdy1oaWRkZW4tbm90LXdvcmtpbmctaW4tY2hyb21lLXdoZW4tcGFyZW50LWhhcy1ib3JkZXItcmFkaXVzLWFuZC1jaGlsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJ1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBwYWRkaW5nOiAnMHB4ICcgKyB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyArICdweCdcbiAgICAgIH0sXG4gICAgICByb290V2hlbkhvdmVyZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5ob3ZlclxuICAgICAgfSxcbiAgICAgIHJpcHBsZUNvbG9yOiBjb2xvci5yaXBwbGVcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcjtcbiAgICB2YXIgbGFiZWwgPSBfcHJvcHMubGFiZWw7XG4gICAgdmFyIGxhYmVsU3R5bGUgPSBfcHJvcHMubGFiZWxTdHlsZTtcbiAgICB2YXIgb25CbHVyID0gX3Byb3BzLm9uQmx1cjtcbiAgICB2YXIgb25Nb3VzZU91dCA9IF9wcm9wcy5vbk1vdXNlT3V0O1xuICAgIHZhciBvbk1vdXNlT3ZlciA9IF9wcm9wcy5vbk1vdXNlT3ZlcjtcbiAgICB2YXIgcHJpbWFyeSA9IF9wcm9wcy5wcmltYXJ5O1xuICAgIHZhciByaXBwbGVDb2xvciA9IF9wcm9wcy5yaXBwbGVDb2xvcjtcbiAgICB2YXIgc2Vjb25kYXJ5ID0gX3Byb3BzLnNlY29uZGFyeTtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2hvdmVyQ29sb3InLCAnbGFiZWwnLCAnbGFiZWxTdHlsZScsICdvbkJsdXInLCAnb25Nb3VzZU91dCcsICdvbk1vdXNlT3ZlcicsICdwcmltYXJ5JywgJ3JpcHBsZUNvbG9yJywgJ3NlY29uZGFyeScsICdzdHlsZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGxhYmVsRWxlbWVudDtcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGxhYmVsRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwsIHRoaXMucHJvcHMubGFiZWxTdHlsZSkgfSxcbiAgICAgICAgbGFiZWxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBFbmhhbmNlZEJ1dHRvbixcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICByZWY6ICdlbmhhbmNlZEJ1dHRvbicsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5yb290LCAodGhpcy5zdGF0ZS5ob3ZlcmVkIHx8IHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpICYmICF0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5yb290V2hlbkhvdmVyZWQsIHRoaXMucHJvcHMuc3R5bGUpLFxuICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5faGFuZGxlTW91c2VPdmVyLFxuICAgICAgICBvbk1vdXNlT3V0OiB0aGlzLl9oYW5kbGVNb3VzZU91dCxcbiAgICAgICAgZm9jdXNSaXBwbGVDb2xvcjogc3R5bGVzLnJpcHBsZUNvbG9yLFxuICAgICAgICB0b3VjaFJpcHBsZUNvbG9yOiBzdHlsZXMucmlwcGxlQ29sb3IsXG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5faGFuZGxlS2V5Ym9hcmRGb2N1cyB9KSxcbiAgICAgIGxhYmVsRWxlbWVudCxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU92ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU92ZXIoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VPdmVyKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTW91c2VPdmVyKGUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VPdXQpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VzZU91dChlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZEZvY3VzKGUsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZCB9KTtcbiAgfSxcblxuICBfaGFuZGxlT25CbHVyOiBmdW5jdGlvbiBfaGFuZGxlT25CbHVyKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsYXRCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yJyk7XG52YXIgRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuL2VuaGFuY2VkLWJ1dHRvbicpO1xudmFyIEZvbnRJY29uID0gcmVxdWlyZSgnLi9mb250LWljb24nKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcblxudmFyIGdldFpEZXB0aCA9IGZ1bmN0aW9uIGdldFpEZXB0aChkaXNhYmxlZCkge1xuICB2YXIgekRlcHRoID0gZGlzYWJsZWQgPyAwIDogMjtcbiAgcmV0dXJuIHtcbiAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICBpbml0aWFsWkRlcHRoOiB6RGVwdGhcbiAgfTtcbn07XG5cbnZhciBSYWlzZWRCdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmFpc2VkQnV0dG9uJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtaW5pOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbk1vdXNlRG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZVVwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlT3V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblRvdWNoRW5kOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblRvdWNoU3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHNlY29uZGFyeTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICB2YXIgekRlcHRoID0gdGhpcy5wcm9wcy5kaXNhYmxlZCA/IDAgOiAyO1xuICAgIHJldHVybiB7XG4gICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgIGluaXRpYWxaRGVwdGg6IHpEZXB0aCxcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKGdldFpEZXB0aCh0aGlzLnByb3BzLmRpc2FibGVkKSk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcykge1xuICAgIGlmIChuZXdQcm9wcy5kaXNhYmxlZCAhPT0gdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShnZXRaRGVwdGgobmV3UHJvcHMuZGlzYWJsZWQpKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lICYmIHRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIHdhcm5pbmcgPSAnWW91IGhhdmUgc2V0IGJvdGggYW4gaWNvbkNsYXNzTmFtZSBhbmQgYSBjaGlsZCBpY29uLiAnICsgJ0l0IGlzIHJlY29tbWVuZGVkIHlvdSB1c2Ugb25seSBvbmUgbWV0aG9kIHdoZW4gYWRkaW5nICcgKyAnaWNvbnMgdG8gRmxvYXRpbmdBY3Rpb25CdXR0b25zLic7XG4gICAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX2dldEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24gX2dldEJhY2tncm91bmRDb2xvcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXNhYmxlZCA/IHRoaXMuZ2V0VGhlbWUoKS5kaXNhYmxlZENvbG9yIDogdGhpcy5wcm9wcy5zZWNvbmRhcnkgPyB0aGlzLmdldFRoZW1lKCkuc2Vjb25kYXJ5Q29sb3IgOiB0aGlzLmdldFRoZW1lKCkuY29sb3I7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmZsb2F0aW5nQWN0aW9uQnV0dG9uO1xuICB9LFxuXG4gIF9nZXRJY29uQ29sb3I6IGZ1bmN0aW9uIF9nZXRJY29uQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRUZXh0Q29sb3IgOiB0aGlzLnByb3BzLnNlY29uZGFyeSA/IHRoaXMuZ2V0VGhlbWUoKS5zZWNvbmRhcnlJY29uQ29sb3IgOiB0aGlzLmdldFRoZW1lKCkuaWNvbkNvbG9yO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgICAgIH0sXG4gICAgICBjb250YWluZXI6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuYnV0dG9uU2l6ZSxcbiAgICAgICAgd2lkdGg6IHRoaXMuZ2V0VGhlbWUoKS5idXR0b25TaXplLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKCksXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdib3R0b20nLFxuICAgICAgICAvL1RoaXMgaXMgbmVlZCBzbyB0aGF0IHJpcHBsZXMgZG8gbm90IGJsZWVkXG4gICAgICAgIC8vcGFzdCBib3JkZXIgcmFkaXVzLlxuICAgICAgICAvL1NlZTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNzI5ODczOS9jc3Mtb3ZlcmZsb3ctaGlkZGVuLW5vdC13b3JraW5nLWluLWNocm9tZS13aGVuLXBhcmVudC1oYXMtYm9yZGVyLXJhZGl1cy1hbmQtY2hpbFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKSdcbiAgICAgIH0sXG4gICAgICBpY29uOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5idXR0b25TaXplICsgJ3B4JyxcbiAgICAgICAgZmlsbDogdGhpcy5nZXRUaGVtZSgpLmljb25Db2xvcixcbiAgICAgICAgY29sb3I6IHRoaXMuX2dldEljb25Db2xvcigpXG4gICAgICB9LFxuICAgICAgb3ZlcmxheToge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHRvcDogMFxuICAgICAgfSxcbiAgICAgIGNvbnRhaW5lcldoZW5NaW5pOiB7XG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRUaGVtZSgpLm1pbmlTaXplLFxuICAgICAgICB3aWR0aDogdGhpcy5nZXRUaGVtZSgpLm1pbmlTaXplXG4gICAgICB9LFxuICAgICAgaWNvbldoZW5NaW5pOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5taW5pU2l6ZSArICdweCdcbiAgICAgIH0sXG4gICAgICBvdmVybGF5V2hlbkhvdmVyZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmZhZGUodGhpcy5fZ2V0SWNvbkNvbG9yKCksIDAuNClcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkO1xuICAgIHZhciBpY29uID0gX3Byb3BzLmljb247XG4gICAgdmFyIG1pbmkgPSBfcHJvcHMubWluaTtcbiAgICB2YXIgc2Vjb25kYXJ5ID0gX3Byb3BzLnNlY29uZGFyeTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnZGlzYWJsZWQnLCAnaWNvbicsICdtaW5pJywgJ3NlY29uZGFyeSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGljb25FbGVtZW50O1xuICAgIGlmICh0aGlzLnByb3BzLmljb25DbGFzc05hbWUpIHtcbiAgICAgIGljb25FbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChGb250SWNvbiwge1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb24sIG1pbmkgJiYgc3R5bGVzLmljb25XaGVuTWluaSwgdGhpcy5wcm9wcy5pY29uU3R5bGUpIH0pO1xuICAgIH1cblxuICAgIHZhciByaXBwbGVDb2xvciA9IHN0eWxlcy5pY29uLmNvbG9yO1xuXG4gICAgdmFyIGJ1dHRvbkV2ZW50SGFuZGxlcnMgPSBkaXNhYmxlZCA/IG51bGwgOiB7XG4gICAgICBvbk1vdXNlRG93bjogdGhpcy5faGFuZGxlTW91c2VEb3duLFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLl9oYW5kbGVNb3VzZVVwLFxuICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQsXG4gICAgICBvbk1vdXNlT3ZlcjogdGhpcy5faGFuZGxlTW91c2VPdmVyLFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlVG91Y2hFbmQsXG4gICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuX2hhbmRsZUtleWJvYXJkRm9jdXNcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBQYXBlcixcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpLFxuICAgICAgICB6RGVwdGg6IHRoaXMuc3RhdGUuekRlcHRoLFxuICAgICAgICBjaXJjbGU6IHRydWUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEVuaGFuY2VkQnV0dG9uLFxuICAgICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIGJ1dHRvbkV2ZW50SGFuZGxlcnMsIHtcbiAgICAgICAgICByZWY6ICdjb250YWluZXInLFxuICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuY29udGFpbmVyLCB0aGlzLnByb3BzLm1pbmkgJiYgc3R5bGVzLmNvbnRhaW5lcldoZW5NaW5pKSxcbiAgICAgICAgICBmb2N1c1JpcHBsZUNvbG9yOiByaXBwbGVDb2xvcixcbiAgICAgICAgICB0b3VjaFJpcHBsZUNvbG9yOiByaXBwbGVDb2xvciB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZWY6ICdvdmVybGF5JyxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5vdmVybGF5LCB0aGlzLnN0YXRlLmhvdmVyZWQgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLm92ZXJsYXlXaGVuSG92ZXJlZCkgfSxcbiAgICAgICAgICBpY29uRWxlbWVudCxcbiAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZURvd246IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZURvd24oZSkge1xuICAgIC8vb25seSBsaXN0ZW4gdG8gbGVmdCBjbGlja3NcbiAgICBpZiAoZS5idXR0b24gPT09IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDEgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VEb3duKSB0aGlzLnByb3BzLm9uTW91c2VEb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZVVwOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VVcChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VVcCkgdGhpcy5wcm9wcy5vbk1vdXNlVXAoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoZSkge1xuICAgIGlmICghdGhpcy5yZWZzLmNvbnRhaW5lci5pc0tleWJvYXJkRm9jdXNlZCgpKSB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGgsIGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VPdXQpIHRoaXMucHJvcHMub25Nb3VzZU91dChlKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdmVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyKGUpIHtcbiAgICBpZiAoIXRoaXMucmVmcy5jb250YWluZXIuaXNLZXlib2FyZEZvY3VzZWQoKSkgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU92ZXIpIHRoaXMucHJvcHMub25Nb3VzZU92ZXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggKyAxIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uVG91Y2hTdGFydCkgdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hFbmQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vblRvdWNoRW5kKSB0aGlzLnByb3BzLm9uVG91Y2hFbmQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZEZvY3VzKGUsIGtleWJvYXJkRm9jdXNlZCkge1xuICAgIGlmIChrZXlib2FyZEZvY3VzZWQgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDEgfSk7XG4gICAgICBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMub3ZlcmxheSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKHRoaXMuZ2V0U3R5bGVzKCkuaWNvbi5jb2xvciwgMC40KTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmhvdmVyZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCB9KTtcbiAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5vdmVybGF5KS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSYWlzZWRCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgRm9udEljb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRm9udEljb24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaG92ZXJDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbk1vdXNlT3V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlT3ZlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjb2xvciA9IF9wcm9wcy5jb2xvcjtcbiAgICB2YXIgaG92ZXJDb2xvciA9IF9wcm9wcy5ob3ZlckNvbG9yO1xuICAgIHZhciBvbk1vdXNlT3V0ID0gX3Byb3BzLm9uTW91c2VPdXQ7XG4gICAgdmFyIG9uTW91c2VPdmVyID0gX3Byb3BzLm9uTW91c2VPdmVyO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29sb3InLCAnaG92ZXJDb2xvcicsICdvbk1vdXNlT3V0JywgJ29uTW91c2VPdmVyJywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIHNwYWNpbmcgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgICB2YXIgb2ZmQ29sb3IgPSBjb2xvciA/IGNvbG9yIDogc3R5bGUgJiYgc3R5bGUuY29sb3IgPyBzdHlsZS5jb2xvciA6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvcjtcbiAgICB2YXIgb25Db2xvciA9IGhvdmVyQ29sb3IgPyBob3ZlckNvbG9yIDogb2ZmQ29sb3I7XG5cbiAgICB2YXIgbWVyZ2VkU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGZvbnRTaXplOiBzcGFjaW5nLmljb25TaXplLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KClcbiAgICB9LCBzdHlsZSwge1xuICAgICAgY29sb3I6IHRoaXMuc3RhdGUuaG92ZXJlZCA/IG9uQ29sb3IgOiBvZmZDb2xvclxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0LFxuICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgIHN0eWxlOiBtZXJnZWRTdHlsZXMgfSkpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU91dDogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3V0KGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU91dCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdmVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlT3Zlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcihlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvbnRJY29uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBFbmhhbmNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4vZW5oYW5jZWQtYnV0dG9uJyk7XG52YXIgRm9udEljb24gPSByZXF1aXJlKCcuL2ZvbnQtaWNvbicpO1xudmFyIFRvb2x0aXAgPSByZXF1aXJlKCcuL3Rvb2x0aXAnKTtcblxudmFyIEljb25CdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnSWNvbkJ1dHRvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGljb25DbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvblN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uQmx1cjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdG9vbHRpcDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b3VjaDogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9vbHRpcFNob3duOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb25TdHlsZToge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy50b29sdGlwKSB7XG4gICAgICB0aGlzLl9wb3NpdGlvblRvb2x0aXAoKTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmljb25DbGFzc05hbWUgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICB2YXIgd2FybmluZyA9ICdZb3UgaGF2ZSBzZXQgYm90aCBhbiBpY29uQ2xhc3NOYW1lIGFuZCBhIGNoaWxkIGljb24uICcgKyAnSXQgaXMgcmVjb21tZW5kZWQgeW91IHVzZSBvbmx5IG9uZSBtZXRob2Qgd2hlbiBhZGRpbmcgJyArICdpY29ucyB0byBJY29uQnV0dG9ucy4nO1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzcGFjaW5nID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gICAgdmFyIHBhbGV0dGUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBwYWRkaW5nOiBzcGFjaW5nLmljb25TaXplIC8gMixcbiAgICAgICAgd2lkdGg6IHNwYWNpbmcuaWNvblNpemUgKiAyLFxuICAgICAgICBoZWlnaHQ6IHNwYWNpbmcuaWNvblNpemUgKiAyXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmJ1dHRvbi5pY29uQnV0dG9uU2l6ZSArIDRcbiAgICAgIH0sXG4gICAgICBpY29uOiB7XG4gICAgICAgIGNvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgZmlsbDogcGFsZXR0ZS50ZXh0Q29sb3JcbiAgICAgIH0sXG4gICAgICBvdmVybGF5OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBiYWNrZ3JvdW5kOiBwYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlZDoge1xuICAgICAgICBjb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgICBmaWxsOiBwYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkO1xuICAgIHZhciBpY29uQ2xhc3NOYW1lID0gX3Byb3BzLmljb25DbGFzc05hbWU7XG4gICAgdmFyIHRvb2x0aXAgPSBfcHJvcHMudG9vbHRpcDtcbiAgICB2YXIgdG91Y2ggPSBfcHJvcHMudG91Y2g7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2Rpc2FibGVkJywgJ2ljb25DbGFzc05hbWUnLCAndG9vbHRpcCcsICd0b3VjaCddKTtcblxuICAgIHZhciBmb250aWNvbjtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHRvb2x0aXBFbGVtZW50ID0gdG9vbHRpcCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbHRpcCwge1xuICAgICAgcmVmOiAndG9vbHRpcCcsXG4gICAgICBsYWJlbDogdG9vbHRpcCxcbiAgICAgIHNob3c6IHRoaXMuc3RhdGUudG9vbHRpcFNob3duLFxuICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnRvb2x0aXApIH0pIDogbnVsbDtcblxuICAgIGlmIChpY29uQ2xhc3NOYW1lKSB7XG4gICAgICB2YXIgX3Byb3BzJGljb25TdHlsZSA9IHRoaXMucHJvcHMuaWNvblN0eWxlO1xuICAgICAgdmFyIGljb25Ib3ZlckNvbG9yID0gX3Byb3BzJGljb25TdHlsZS5pY29uSG92ZXJDb2xvcjtcblxuICAgICAgdmFyIGljb25TdHlsZSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMkaWNvblN0eWxlLCBbJ2ljb25Ib3ZlckNvbG9yJ10pO1xuXG4gICAgICBmb250aWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9udEljb24sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBpY29uQ2xhc3NOYW1lLFxuICAgICAgICBob3ZlckNvbG9yOiBkaXNhYmxlZCA/IG51bGwgOiBpY29uSG92ZXJDb2xvcixcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmljb24sIGRpc2FibGVkID8gc3R5bGVzLmRpc2FibGVkIDoge30sIGljb25TdHlsZSkgfSk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gZGlzYWJsZWQgPyB0aGlzLl9hZGRTdHlsZXNUb0NoaWxkcmVuKHN0eWxlcy5kaXNhYmxlZCkgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBFbmhhbmNlZEJ1dHRvbixcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICByZWY6ICdidXR0b24nLFxuICAgICAgICBjZW50ZXJSaXBwbGU6IHRydWUsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpLFxuICAgICAgICBvbkJsdXI6IHRoaXMuX2hhbmRsZUJsdXIsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuX2hhbmRsZUZvY3VzLFxuICAgICAgICBvbk1vdXNlT3V0OiB0aGlzLl9oYW5kbGVNb3VzZU91dCxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25LZXlib2FyZEZvY3VzOiB0aGlzLl9oYW5kbGVLZXlib2FyZEZvY3VzIH0pLFxuICAgICAgdG9vbHRpcEVsZW1lbnQsXG4gICAgICBmb250aWNvbixcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBfYWRkU3R5bGVzVG9DaGlsZHJlbjogZnVuY3Rpb24gX2FkZFN0eWxlc1RvQ2hpbGRyZW4oc3R5bGVzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG5cbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgY2hpbGRyZW4ucHVzaChSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAga2V5OiBjaGlsZC5wcm9wcy5rZXkgPyBjaGlsZC5wcm9wcy5rZXkgOiBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIHN0eWxlOiBzdHlsZXNcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfSxcblxuICBfcG9zaXRpb25Ub29sdGlwOiBmdW5jdGlvbiBfcG9zaXRpb25Ub29sdGlwKCkge1xuICAgIHZhciB0b29sdGlwID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnRvb2x0aXApO1xuICAgIHZhciB0b29sdGlwV2lkdGggPSB0b29sdGlwLm9mZnNldFdpZHRoO1xuICAgIHZhciBidXR0b25XaWR0aCA9IDQ4O1xuXG4gICAgdG9vbHRpcC5zdHlsZS5sZWZ0ID0gKHRvb2x0aXBXaWR0aCAtIGJ1dHRvbldpZHRoKSAvIDIgKiAtMSArICdweCc7XG4gIH0sXG5cbiAgX3Nob3dUb29sdGlwOiBmdW5jdGlvbiBfc2hvd1Rvb2x0aXAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMudG9vbHRpcCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRvb2x0aXBTaG93bjogdHJ1ZSB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hpZGVUb29sdGlwOiBmdW5jdGlvbiBfaGlkZVRvb2x0aXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCkgdGhpcy5zZXRTdGF0ZSh7IHRvb2x0aXBTaG93bjogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZUJsdXI6IGZ1bmN0aW9uIF9oYW5kbGVCbHVyKGUpIHtcbiAgICB0aGlzLl9oaWRlVG9vbHRpcCgpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQmx1cikgdGhpcy5wcm9wcy5vbkJsdXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUZvY3VzOiBmdW5jdGlvbiBfaGFuZGxlRm9jdXMoZSkge1xuICAgIHRoaXMuX3Nob3dUb29sdGlwKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU91dDogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3V0KGUpIHtcbiAgICBpZiAoIXRoaXMucmVmcy5idXR0b24uaXNLZXlib2FyZEZvY3VzZWQoKSkgdGhpcy5faGlkZVRvb2x0aXAoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlT3V0KSB0aGlzLnByb3BzLm9uTW91c2VPdXQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3ZlcihlKSB7XG4gICAgdGhpcy5fc2hvd1Rvb2x0aXAoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlT3ZlcikgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcihlKTtcbiAgfSxcblxuICBfaGFuZGxlS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUtleWJvYXJkRm9jdXMoZSwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgaWYgKGtleWJvYXJkRm9jdXNlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5fc2hvd1Rvb2x0aXAoKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRm9jdXMpIHRoaXMucHJvcHMub25Gb2N1cyhlKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmhvdmVyZWQpIHtcbiAgICAgIHRoaXMuX2hpZGVUb29sdGlwKCk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkJsdXIpIHRoaXMucHJvcHMub25CbHVyKGUpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJY29uQnV0dG9uOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFwcEJhcjogcmVxdWlyZSgnLi9hcHAtYmFyJyksXG4gIEFwcENhbnZhczogcmVxdWlyZSgnLi9hcHAtY2FudmFzJyksXG4gIEF2YXRhcjogcmVxdWlyZSgnLi9hdmF0YXInKSxcbiAgQmVmb3JlQWZ0ZXJXcmFwcGVyOiByZXF1aXJlKCcuL2JlZm9yZS1hZnRlci13cmFwcGVyJyksXG4gIENhcmQ6IHJlcXVpcmUoJy4vY2FyZC9jYXJkJyksXG4gIENhcmRBY3Rpb25zOiByZXF1aXJlKCcuL2NhcmQvY2FyZC1hY3Rpb25zJyksXG4gIENhcmRIZWFkZXI6IHJlcXVpcmUoJy4vY2FyZC9jYXJkLWhlYWRlcicpLFxuICBDYXJkTWVkaWE6IHJlcXVpcmUoJy4vY2FyZC9jYXJkLW1lZGlhJyksXG4gIENhcmRUZXh0OiByZXF1aXJlKCcuL2NhcmQvY2FyZC10ZXh0JyksXG4gIENhcmRUaXRsZTogcmVxdWlyZSgnLi9jYXJkL2NhcmQtdGl0bGUnKSxcbiAgQ2hlY2tib3g6IHJlcXVpcmUoJy4vY2hlY2tib3gnKSxcbiAgQ2lyY3VsYXJQcm9ncmVzczogcmVxdWlyZSgnLi9jaXJjdWxhci1wcm9ncmVzcycpLFxuICBDbGVhckZpeDogcmVxdWlyZSgnLi9jbGVhcmZpeCcpLFxuICBEYXRlUGlja2VyOiByZXF1aXJlKCcuL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyJyksXG4gIERpYWxvZzogcmVxdWlyZSgnLi9kaWFsb2cnKSxcbiAgRGlhbG9nV2luZG93OiByZXF1aXJlKCcuL2RpYWxvZy13aW5kb3cnKSxcbiAgRHJvcERvd25JY29uOiByZXF1aXJlKCcuL2Ryb3AtZG93bi1pY29uJyksXG4gIERyb3BEb3duTWVudTogcmVxdWlyZSgnLi9kcm9wLWRvd24tbWVudScpLFxuICBFbmhhbmNlZEJ1dHRvbjogcmVxdWlyZSgnLi9lbmhhbmNlZC1idXR0b24nKSxcbiAgRmxhdEJ1dHRvbjogcmVxdWlyZSgnLi9mbGF0LWJ1dHRvbicpLFxuICBGbG9hdGluZ0FjdGlvbkJ1dHRvbjogcmVxdWlyZSgnLi9mbG9hdGluZy1hY3Rpb24tYnV0dG9uJyksXG4gIEZvbnRJY29uOiByZXF1aXJlKCcuL2ZvbnQtaWNvbicpLFxuICBJY29uQnV0dG9uOiByZXF1aXJlKCcuL2ljb24tYnV0dG9uJyksXG4gIExlZnROYXY6IHJlcXVpcmUoJy4vbGVmdC1uYXYnKSxcbiAgTGluZWFyUHJvZ3Jlc3M6IHJlcXVpcmUoJy4vbGluZWFyLXByb2dyZXNzJyksXG4gIExpc3Q6IHJlcXVpcmUoJy4vbGlzdHMvbGlzdCcpLFxuICBMaXN0RGl2aWRlcjogcmVxdWlyZSgnLi9saXN0cy9saXN0LWRpdmlkZXInKSxcbiAgTGlzdEl0ZW06IHJlcXVpcmUoJy4vbGlzdHMvbGlzdC1pdGVtJyksXG4gIE1lbnU6IHJlcXVpcmUoJy4vbWVudS9tZW51JyksXG4gIE1lbnVJdGVtOiByZXF1aXJlKCcuL21lbnUvbWVudS1pdGVtJyksXG4gIE1peGluczoge1xuICAgIENsYXNzYWJsZTogcmVxdWlyZSgnLi9taXhpbnMvY2xhc3NhYmxlJyksXG4gICAgQ2xpY2tBd2F5YWJsZTogcmVxdWlyZSgnLi9taXhpbnMvY2xpY2stYXdheWFibGUnKSxcbiAgICBXaW5kb3dMaXN0ZW5hYmxlOiByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpLFxuICAgIFN0eWxlUHJvcGFibGU6IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyksXG4gICAgU3R5bGVSZXNpemFibGU6IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXJlc2l6YWJsZScpXG4gIH0sXG4gIFBhcGVyOiByZXF1aXJlKCcuL3BhcGVyJyksXG4gIFJhZGlvQnV0dG9uOiByZXF1aXJlKCcuL3JhZGlvLWJ1dHRvbicpLFxuICBSYWRpb0J1dHRvbkdyb3VwOiByZXF1aXJlKCcuL3JhZGlvLWJ1dHRvbi1ncm91cCcpLFxuICBSYWlzZWRCdXR0b246IHJlcXVpcmUoJy4vcmFpc2VkLWJ1dHRvbicpLFxuICBTZWxlY3RGaWVsZDogcmVxdWlyZSgnLi9zZWxlY3QtZmllbGQnKSxcbiAgU2xpZGVyOiByZXF1aXJlKCcuL3NsaWRlcicpLFxuICBTdmdJY29uOiByZXF1aXJlKCcuL3N2Zy1pY29uJyksXG4gIEljb25zOiB7XG4gICAgTmF2aWdhdGlvbk1lbnU6IHJlcXVpcmUoJy4vc3ZnLWljb25zL25hdmlnYXRpb24tbWVudScpLFxuICAgIE5hdmlnYXRpb25DaGV2cm9uTGVmdDogcmVxdWlyZSgnLi9zdmctaWNvbnMvbmF2aWdhdGlvbi1jaGV2cm9uLWxlZnQnKSxcbiAgICBOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0OiByZXF1aXJlKCcuL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tcmlnaHQnKVxuICB9LFxuICBTdHlsZXM6IHtcbiAgICBBdXRvUHJlZml4OiByZXF1aXJlKCcuL3N0eWxlcy9hdXRvLXByZWZpeCcpLFxuICAgIENvbG9yczogcmVxdWlyZSgnLi9zdHlsZXMvY29sb3JzJyksXG4gICAgU3BhY2luZzogcmVxdWlyZSgnLi9zdHlsZXMvc3BhY2luZycpLFxuICAgIFRoZW1lTWFuYWdlcjogcmVxdWlyZSgnLi9zdHlsZXMvdGhlbWUtbWFuYWdlcicpLFxuICAgIFRyYW5zaXRpb25zOiByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpLFxuICAgIFR5cG9ncmFwaHk6IHJlcXVpcmUoJy4vc3R5bGVzL3R5cG9ncmFwaHknKVxuICB9LFxuICBTbmFja2JhcjogcmVxdWlyZSgnLi9zbmFja2JhcicpLFxuICBUYWI6IHJlcXVpcmUoJy4vdGFicy90YWInKSxcbiAgVGFibGU6IHJlcXVpcmUoJy4vdGFibGUvdGFibGUnKSxcbiAgVGFiczogcmVxdWlyZSgnLi90YWJzL3RhYnMnKSxcbiAgVGhlbWU6IHJlcXVpcmUoJy4vdGhlbWUnKSxcbiAgVG9nZ2xlOiByZXF1aXJlKCcuL3RvZ2dsZScpLFxuICBUaW1lUGlja2VyOiByZXF1aXJlKCcuL3RpbWUtcGlja2VyJyksXG4gIFRleHRGaWVsZDogcmVxdWlyZSgnLi90ZXh0LWZpZWxkJyksXG4gIFRvb2xiYXI6IHJlcXVpcmUoJy4vdG9vbGJhci90b29sYmFyJyksXG4gIFRvb2xiYXJHcm91cDogcmVxdWlyZSgnLi90b29sYmFyL3Rvb2xiYXItZ3JvdXAnKSxcbiAgVG9vbGJhclNlcGFyYXRvcjogcmVxdWlyZSgnLi90b29sYmFyL3Rvb2xiYXItc2VwYXJhdG9yJyksXG4gIFRvb2xiYXJUaXRsZTogcmVxdWlyZSgnLi90b29sYmFyL3Rvb2xiYXItdGl0bGUnKSxcbiAgVG9vbHRpcDogcmVxdWlyZSgnLi90b29sdGlwJyksXG4gIFV0aWxzOiB7XG4gICAgQ3NzRXZlbnQ6IHJlcXVpcmUoJy4vdXRpbHMvY3NzLWV2ZW50JyksXG4gICAgRG9tOiByZXF1aXJlKCcuL3V0aWxzL2RvbScpLFxuICAgIEV2ZW50czogcmVxdWlyZSgnLi91dGlscy9ldmVudHMnKSxcbiAgICBLZXlDb2RlOiByZXF1aXJlKCcuL3V0aWxzL2tleS1jb2RlJyksXG4gICAgS2V5TGluZTogcmVxdWlyZSgnLi91dGlscy9rZXktbGluZScpLFxuICAgIENvbG9yTWFuaXB1bGF0b3I6IHJlcXVpcmUoJy4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKSxcbiAgICBFeHRlbmQ6IHJlcXVpcmUoJy4vdXRpbHMvZXh0ZW5kJyksXG4gICAgVW5pcXVlSWQ6IHJlcXVpcmUoJy4vdXRpbHMvdW5pcXVlLWlkJylcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgSW5rQmFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0lua0JhcicsXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBsZWZ0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgd2lkdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9LFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwYWxldHRlID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGU7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBsZWZ0OiB0aGlzLnByb3BzLmxlZnQsXG4gICAgICB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgaGVpZ2h0OiAyLFxuICAgICAgbWFyZ2luVG9wOiAtMixcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMXMnLCAnbGVmdCcpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzIH0sXG4gICAgICAnwqAnXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmtCYXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIEtleUNvZGUgPSByZXF1aXJlKCcuL3V0aWxzL2tleS1jb2RlJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4vc3R5bGVzL2F1dG8tcHJlZml4Jyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIE92ZXJsYXkgPSByZXF1aXJlKCcuL292ZXJsYXknKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcbnZhciBNZW51ID0gcmVxdWlyZSgnLi9tZW51L21lbnUnKTtcblxudmFyIExlZnROYXYgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTGVmdE5hdicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgV2luZG93TGlzdGVuYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZG9ja2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBoZWFkZXI6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIG1lbnVJdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTmF2T3BlbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25OYXZDbG9zZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb3BlblJpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RlZEluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAgJ2tleXVwJzogJ19vbldpbmRvd0tleVVwJyxcbiAgICAncmVzaXplJzogJ19vbldpbmRvd1Jlc2l6ZSdcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9ja2VkOiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogdGhpcy5wcm9wcy5kb2NrZWQsXG4gICAgICBtYXliZVN3aXBpbmc6IGZhbHNlLFxuICAgICAgc3dpcGluZzogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl91cGRhdGVNZW51SGVpZ2h0KCk7XG4gICAgdGhpcy5fZW5hYmxlU3dpcGVIYW5kbGluZygpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdGhpcy5fdXBkYXRlTWVudUhlaWdodCgpO1xuICAgIHRoaXMuX2VuYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fZGlzYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgfSxcblxuICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogIXRoaXMuc3RhdGUub3BlbiB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTmF2Q2xvc2UpIHRoaXMucHJvcHMub25OYXZDbG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9wZW46IGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25OYXZPcGVuKSB0aGlzLnByb3BzLm9uTmF2T3BlbigpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGdldFRoZW1lUGFsZXR0ZTogZnVuY3Rpb24gZ2V0VGhlbWVQYWxldHRlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubGVmdE5hdjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgeCA9IHRoaXMuX2dldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSAqICh0aGlzLnN0YXRlLm9wZW4gPyAwIDogdGhpcy5fZ2V0TWF4VHJhbnNsYXRlWCgpKSArICdweCc7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiB0aGlzLmdldFRoZW1lKCkud2lkdGgsXG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgMCwgMCknLFxuICAgICAgICB0cmFuc2l0aW9uOiAhdGhpcy5zdGF0ZS5zd2lwaW5nICYmIFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuY29sb3IsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgbWVudUl0ZW06IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZy5kZXNrdG9wTGVmdE5hdk1lbnVJdGVtSGVpZ2h0LFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZy5kZXNrdG9wTGVmdE5hdk1lbnVJdGVtSGVpZ2h0ICsgJ3B4J1xuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuT3BlblJpZ2h0OiB7XG4gICAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgICAgcmlnaHQ6ICcwJ1xuICAgICAgfVxuICAgIH07XG4gICAgc3R5bGVzLm1lbnVJdGVtTGluayA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtLCB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lUGFsZXR0ZSgpLnRleHRDb2xvclxuICAgIH0pO1xuICAgIHN0eWxlcy5tZW51SXRlbVN1YmhlYWRlciA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtLCB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9KTtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSB0aGlzLnByb3BzLnNlbGVjdGVkSW5kZXg7XG4gICAgdmFyIG92ZXJsYXk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB7XG4gICAgICBvdmVybGF5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChPdmVybGF5LCB7IHJlZjogJ292ZXJsYXknLFxuICAgICAgICBzaG93OiB0aGlzLnN0YXRlLm9wZW4sXG4gICAgICAgIHRyYW5zaXRpb25FbmFibGVkOiAhdGhpcy5zdGF0ZS5zd2lwaW5nLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vbk92ZXJsYXlUb3VjaFRhcCB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lIH0sXG4gICAgICBvdmVybGF5LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgUGFwZXIsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6ICdjbGlja0F3YXlhYmxlRWxlbWVudCcsXG4gICAgICAgICAgekRlcHRoOiAyLFxuICAgICAgICAgIHJvdW5kZWQ6IGZhbHNlLFxuICAgICAgICAgIHRyYW5zaXRpb25FbmFibGVkOiAhdGhpcy5zdGF0ZS5zd2lwaW5nLFxuICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLm9wZW5SaWdodCAmJiBzdHlsZXMucm9vdFdoZW5PcGVuUmlnaHQsIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICAgIHRoaXMucHJvcHMuaGVhZGVyLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnUsIHtcbiAgICAgICAgICByZWY6ICdtZW51SXRlbXMnLFxuICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5tZW51KSxcbiAgICAgICAgICB6RGVwdGg6IDAsXG4gICAgICAgICAgbWVudUl0ZW1zOiB0aGlzLnByb3BzLm1lbnVJdGVtcyxcbiAgICAgICAgICBtZW51SXRlbVN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5tZW51SXRlbSksXG4gICAgICAgICAgbWVudUl0ZW1TdHlsZUxpbms6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtTGluayksXG4gICAgICAgICAgbWVudUl0ZW1TdHlsZVN1YmhlYWRlcjogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubWVudUl0ZW1TdWJoZWFkZXIpLFxuICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgb25JdGVtVGFwOiB0aGlzLl9vbk1lbnVJdGVtQ2xpY2sgfSlcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF91cGRhdGVNZW51SGVpZ2h0OiBmdW5jdGlvbiBfdXBkYXRlTWVudUhlaWdodCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oZWFkZXIpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuY2xpY2tBd2F5YWJsZUVsZW1lbnQpO1xuICAgICAgdmFyIG1lbnUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMubWVudUl0ZW1zKTtcbiAgICAgIHZhciBtZW51SGVpZ2h0ID0gY29udGFpbmVyLmNsaWVudEhlaWdodCAtIG1lbnUub2Zmc2V0VG9wO1xuICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBtZW51SGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gIH0sXG5cbiAgX29uTWVudUl0ZW1DbGljazogZnVuY3Rpb24gX29uTWVudUl0ZW1DbGljayhlLCBrZXksIHBheWxvYWQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSAmJiB0aGlzLnByb3BzLnNlbGVjdGVkSW5kZXggIT09IGtleSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShlLCBrZXksIHBheWxvYWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB0aGlzLmNsb3NlKCk7XG4gIH0sXG5cbiAgX29uT3ZlcmxheVRvdWNoVGFwOiBmdW5jdGlvbiBfb25PdmVybGF5VG91Y2hUYXAoKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9LFxuXG4gIF9vbldpbmRvd0tleVVwOiBmdW5jdGlvbiBfb25XaW5kb3dLZXlVcChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PSBLZXlDb2RlLkVTQyAmJiAhdGhpcy5wcm9wcy5kb2NrZWQgJiYgdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9LFxuXG4gIF9vbldpbmRvd1Jlc2l6ZTogZnVuY3Rpb24gX29uV2luZG93UmVzaXplKGUpIHtcbiAgICB0aGlzLl91cGRhdGVNZW51SGVpZ2h0KCk7XG4gIH0sXG5cbiAgX2dldE1heFRyYW5zbGF0ZVg6IGZ1bmN0aW9uIF9nZXRNYXhUcmFuc2xhdGVYKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRoZW1lKCkud2lkdGggKyAxMDtcbiAgfSxcblxuICBfZ2V0VHJhbnNsYXRlTXVsdGlwbGllcjogZnVuY3Rpb24gX2dldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMub3BlblJpZ2h0ID8gMSA6IC0xO1xuICB9LFxuXG4gIF9lbmFibGVTd2lwZUhhbmRsaW5nOiBmdW5jdGlvbiBfZW5hYmxlU3dpcGVIYW5kbGluZygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5vcGVuICYmICF0aGlzLnByb3BzLmRvY2tlZCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25Cb2R5VG91Y2hTdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2Rpc2FibGVTd2lwZUhhbmRsaW5nKCk7XG4gICAgfVxuICB9LFxuXG4gIF9kaXNhYmxlU3dpcGVIYW5kbGluZzogZnVuY3Rpb24gX2Rpc2FibGVTd2lwZUhhbmRsaW5nKCkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX29uQm9keVRvdWNoU3RhcnQpO1xuICB9LFxuXG4gIF9vbkJvZHlUb3VjaFN0YXJ0OiBmdW5jdGlvbiBfb25Cb2R5VG91Y2hTdGFydChlKSB7XG4gICAgdmFyIHRvdWNoU3RhcnRYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgIHZhciB0b3VjaFN0YXJ0WSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1heWJlU3dpcGluZzogdHJ1ZSxcbiAgICAgIHRvdWNoU3RhcnRYOiB0b3VjaFN0YXJ0WCxcbiAgICAgIHRvdWNoU3RhcnRZOiB0b3VjaFN0YXJ0WVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9vbkJvZHlUb3VjaE1vdmUpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9vbkJvZHlUb3VjaEVuZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuX29uQm9keVRvdWNoRW5kKTtcbiAgfSxcblxuICBfb25Cb2R5VG91Y2hNb3ZlOiBmdW5jdGlvbiBfb25Cb2R5VG91Y2hNb3ZlKGUpIHtcbiAgICB2YXIgY3VycmVudFggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgdmFyIGN1cnJlbnRZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuc3dpcGluZykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIHRyYW5zbGF0ZVggPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLl9nZXRUcmFuc2xhdGVNdWx0aXBsaWVyKCkgKiAoY3VycmVudFggLSB0aGlzLnN0YXRlLnN3aXBlU3RhcnRYKSwgMCksIHRoaXMuX2dldE1heFRyYW5zbGF0ZVgoKSk7XG5cbiAgICAgIHZhciBsZWZ0TmF2ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmNsaWNrQXdheWFibGVFbGVtZW50KTtcbiAgICAgIGxlZnROYXYuc3R5bGVbQXV0b1ByZWZpeC5zaW5nbGUoJ3RyYW5zZm9ybScpXSA9ICd0cmFuc2xhdGUzZCgnICsgdGhpcy5fZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpICogdHJhbnNsYXRlWCArICdweCwgMCwgMCknO1xuICAgICAgdGhpcy5yZWZzLm92ZXJsYXkuc2V0T3BhY2l0eSgxIC0gdHJhbnNsYXRlWCAvIHRoaXMuX2dldE1heFRyYW5zbGF0ZVgoKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLm1heWJlU3dpcGluZykge1xuICAgICAgdmFyIGRYQWJzID0gTWF0aC5hYnMoY3VycmVudFggLSB0aGlzLnN0YXRlLnRvdWNoU3RhcnRYKTtcbiAgICAgIHZhciBkWUFicyA9IE1hdGguYWJzKGN1cnJlbnRZIC0gdGhpcy5zdGF0ZS50b3VjaFN0YXJ0WSk7XG4gICAgICAvLyBJZiB0aGUgdXNlciBoYXMgbW92ZWQgaGlzIHRodW1iIHRlbiBwaXhlbHMgaW4gZWl0aGVyIGRpcmVjdGlvbixcbiAgICAgIC8vIHdlIGNhbiBzYWZlbHkgbWFrZSBhbiBhc3N1bXB0aW9uIGFib3V0IHdoZXRoZXIgaGUgd2FzIGludGVuZGluZ1xuICAgICAgLy8gdG8gc3dpcGUgb3Igc2Nyb2xsLlxuICAgICAgdmFyIHRocmVzaG9sZCA9IDEwO1xuXG4gICAgICBpZiAoZFhBYnMgPiB0aHJlc2hvbGQgJiYgZFlBYnMgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHN3aXBpbmc6IHRydWUsXG4gICAgICAgICAgc3dpcGVTdGFydFg6IGN1cnJlbnRYXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChkWEFicyA8PSB0aHJlc2hvbGQgJiYgZFlBYnMgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgdGhpcy5fb25Cb2R5VG91Y2hFbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uQm9keVRvdWNoRW5kOiBmdW5jdGlvbiBfb25Cb2R5VG91Y2hFbmQoKSB7XG4gICAgdmFyIHNob3VsZENsb3NlID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zd2lwaW5nKSBzaG91bGRDbG9zZSA9IHRydWU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1heWJlU3dpcGluZzogZmFsc2UsXG4gICAgICBzd2lwaW5nOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gV2UgaGF2ZSB0byBjYWxsIGNsb3NlKCkgYWZ0ZXIgc2V0dGluZyBzd2lwaW5nIHRvIGZhbHNlLFxuICAgIC8vIGJlY2F1c2Ugb25seSB0aGVuIENTUyB0cmFuc2l0aW9uIGlzIGVuYWJsZWQuXG4gICAgaWYgKHNob3VsZENsb3NlKSB0aGlzLmNsb3NlKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uQm9keVRvdWNoTW92ZSk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX29uQm9keVRvdWNoRW5kKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Cb2R5VG91Y2hFbmQpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExlZnROYXY7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgTGluZWFyUHJvZ3Jlc3MgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTGluZWFyUHJvZ3Jlc3MnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIG1vZGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSksXG4gICAgdmFsdWU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWluOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG1heDogUmVhY3QuUHJvcFR5cGVzLm51bWJlclxuICB9LFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgX2dldFJlbGF0aXZlVmFsdWU6IGZ1bmN0aW9uIF9nZXRSZWxhdGl2ZVZhbHVlKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgdmFyIG1pbiA9IHRoaXMucHJvcHMubWluO1xuICAgIHZhciBtYXggPSB0aGlzLnByb3BzLm1heDtcblxuICAgIHZhciBjbGFtcGVkVmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbiAgICB2YXIgcmFuZ2VWYWx1ZSA9IG1heCAtIG1pbjtcbiAgICB2YXIgcmVsVmFsdWUgPSBNYXRoLnJvdW5kKGNsYW1wZWRWYWx1ZSAvIHJhbmdlVmFsdWUgKiAxMDAwMCkgLyAxMDAwMDtcbiAgICByZXR1cm4gcmVsVmFsdWUgKiAxMDA7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXG4gICAgdmFyIGJhcjEgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuYmFyMSk7XG4gICAgdmFyIGJhcjIgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuYmFyMik7XG5cbiAgICB0aGlzLl9iYXJVcGRhdGUoMCwgYmFyMSwgW1stMzUsIDEwMF0sIFsxMDAsIC05MF1dKTtcblxuICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgdGhpcy5fYmFyVXBkYXRlKDAsIGJhcjIsIFtbLTIwMCwgMTAwXSwgWzEwNywgLThdXSk7XG4gICAgfSkuYmluZCh0aGlzKSwgODUwKTtcbiAgfSxcblxuICBfYmFyVXBkYXRlOiBmdW5jdGlvbiBfYmFyVXBkYXRlKHN0ZXAsIGJhckVsZW1lbnQsIHN0ZXBWYWx1ZXMpIHtcbiAgICBzdGVwID0gc3RlcCB8fCAwO1xuICAgIHN0ZXAgJT0gNDtcbiAgICBzZXRUaW1lb3V0KHRoaXMuX2JhclVwZGF0ZS5iaW5kKHRoaXMsIHN0ZXAgKyAxLCBiYXJFbGVtZW50LCBzdGVwVmFsdWVzKSwgNDIwKTtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcbiAgICBpZiAodGhpcy5wcm9wcy5tb2RlICE9ICdpbmRldGVybWluYXRlJykgcmV0dXJuO1xuXG4gICAgaWYgKHN0ZXAgPT09IDApIHtcbiAgICAgIGJhckVsZW1lbnQuc3R5bGUubGVmdCA9IHN0ZXBWYWx1ZXNbMF1bMF0gKyAnJSc7XG4gICAgICBiYXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gc3RlcFZhbHVlc1swXVsxXSArICclJztcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPT0gMSkge1xuXG4gICAgICBiYXJFbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICc4NDBtcyc7XG4gICAgfSBlbHNlIGlmIChzdGVwID09IDIpIHtcblxuICAgICAgYmFyRWxlbWVudC5zdHlsZS5sZWZ0ID0gc3RlcFZhbHVlc1sxXVswXSArICclJztcbiAgICAgIGJhckVsZW1lbnQuc3R5bGUucmlnaHQgPSBzdGVwVmFsdWVzWzFdWzFdICsgJyUnO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA9PSAzKSB7XG4gICAgICBiYXJFbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgIH1cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogJ2luZGV0ZXJtaW5hdGUnLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBtaW46IDAsXG4gICAgICBtYXg6IDEwMFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBoZWlnaHQ6ICc0cHgnLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5M0NvbG9yLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIGJhcjoge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIGJhckZyYWdtZW50MToge30sXG4gICAgICBiYXJGcmFnbWVudDI6IHt9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICBzdHlsZXMuYmFyRnJhZ21lbnQxID0ge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkucHJpbWFyeTFDb2xvcixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmNyZWF0ZSgnYWxsJywgJzg0MG1zJywgbnVsbCwgJ2N1YmljLWJlemllcigwLjY1MCwgMC44MTUsIDAuNzM1LCAwLjM5NSknKVxuICAgICAgfTtcblxuICAgICAgc3R5bGVzLmJhckZyYWdtZW50MiA9IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5jcmVhdGUoJ2FsbCcsICc4NDBtcycsIG51bGwsICdjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQwLCAwLjQ0MCwgMS4wMDApJylcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcy5iYXIuYmFja2dyb3VuZENvbG9yID0gdGhpcy5nZXRUaGVtZSgpLnByaW1hcnkxQ29sb3I7XG4gICAgICBzdHlsZXMuYmFyLnRyYW5zaXRpb24gPSBUcmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJywgJy4zcycsIG51bGwsICdsaW5lYXInKTtcbiAgICAgIHN0eWxlcy5iYXIud2lkdGggPSB0aGlzLl9nZXRSZWxhdGl2ZVZhbHVlKCkgKyAnJSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3N0eWxlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCBzdHlsZSkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuYmFyKSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogJ2JhcjEnLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuYmFyRnJhZ21lbnQxKSB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdiYXIyJywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmJhckZyYWdtZW50MikgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lYXJQcm9ncmVzczsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgTGlzdERpdmlkZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTGlzdERpdmlkZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5zZXQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGluc2V0ID0gX3Byb3BzLmluc2V0O1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaW5zZXQnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgbWVyZ2VkU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBtYXJnaW5Ub3A6IC0xLFxuICAgICAgbWFyZ2luTGVmdDogaW5zZXQgPyA3MiA6IDAsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUuYm9yZGVyQ29sb3JcbiAgICB9LCBzdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnaHInLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IG1lcmdlZFN0eWxlcyB9KSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3REaXZpZGVyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBDb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NvbG9ycycpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgVHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4uL3N0eWxlcy90eXBvZ3JhcGh5Jyk7XG52YXIgRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9lbmhhbmNlZC1idXR0b24nKTtcblxudmFyIExpc3RJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0xpc3RJdGVtJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRpc2FibGVUb3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaW5zZXRDaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbGVmdEF2YXRhcjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgbGVmdENoZWNrYm94OiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICBsZWZ0SWNvbjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgb25Nb3VzZU91dDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZU92ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHJpZ2h0QXZhdGFyOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICByaWdodEljb246IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIHJpZ2h0SWNvbkJ1dHRvbjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgcmlnaHRUb2dnbGU6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIHNlY29uZGFyeVRleHQ6IFJlYWN0LlByb3BUeXBlcy5ub2RlLFxuICAgIHNlY29uZGFyeVRleHRMaW5lczogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsxLCAyXSlcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vjb25kYXJ5VGV4dExpbmVzOiAxXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICByaWdodEljb25CdXR0b25Ib3ZlcmVkOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRpc2FibGVUb3VjaFRhcCA9IF9wcm9wcy5kaXNhYmxlVG91Y2hUYXA7XG4gICAgdmFyIGluc2V0Q2hpbGRyZW4gPSBfcHJvcHMuaW5zZXRDaGlsZHJlbjtcbiAgICB2YXIgbGVmdEF2YXRhciA9IF9wcm9wcy5sZWZ0QXZhdGFyO1xuICAgIHZhciBsZWZ0Q2hlY2tib3ggPSBfcHJvcHMubGVmdENoZWNrYm94O1xuICAgIHZhciBsZWZ0SWNvbiA9IF9wcm9wcy5sZWZ0SWNvbjtcbiAgICB2YXIgb25Nb3VzZU91dCA9IF9wcm9wcy5vbk1vdXNlT3V0O1xuICAgIHZhciBvbk1vdXNlT3ZlciA9IF9wcm9wcy5vbk1vdXNlT3ZlcjtcbiAgICB2YXIgcmlnaHRBdmF0YXIgPSBfcHJvcHMucmlnaHRBdmF0YXI7XG4gICAgdmFyIHJpZ2h0SWNvbiA9IF9wcm9wcy5yaWdodEljb247XG4gICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbiA9IF9wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgdmFyIHJpZ2h0VG9nZ2xlID0gX3Byb3BzLnJpZ2h0VG9nZ2xlO1xuICAgIHZhciBzZWNvbmRhcnlUZXh0ID0gX3Byb3BzLnNlY29uZGFyeVRleHQ7XG4gICAgdmFyIHNlY29uZGFyeVRleHRMaW5lcyA9IF9wcm9wcy5zZWNvbmRhcnlUZXh0TGluZXM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydkaXNhYmxlVG91Y2hUYXAnLCAnaW5zZXRDaGlsZHJlbicsICdsZWZ0QXZhdGFyJywgJ2xlZnRDaGVja2JveCcsICdsZWZ0SWNvbicsICdvbk1vdXNlT3V0JywgJ29uTW91c2VPdmVyJywgJ3JpZ2h0QXZhdGFyJywgJ3JpZ2h0SWNvbicsICdyaWdodEljb25CdXR0b24nLCAncmlnaHRUb2dnbGUnLCAnc2Vjb25kYXJ5VGV4dCcsICdzZWNvbmRhcnlUZXh0TGluZXMnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgdGV4dENvbG9yID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUudGV4dENvbG9yO1xuICAgIHZhciBob3ZlckNvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKHRleHRDb2xvciwgMC4wMyk7XG4gICAgdmFyIHNpbmdsZUF2YXRhciA9ICFzZWNvbmRhcnlUZXh0ICYmIChsZWZ0QXZhdGFyIHx8IHJpZ2h0QXZhdGFyKTtcbiAgICB2YXIgc2luZ2xlTm9BdmF0YXIgPSAhc2Vjb25kYXJ5VGV4dCAmJiAhKGxlZnRBdmF0YXIgfHwgcmlnaHRBdmF0YXIpO1xuICAgIHZhciB0d29MaW5lID0gc2Vjb25kYXJ5VGV4dCAmJiBzZWNvbmRhcnlUZXh0TGluZXMgPT09IDE7XG4gICAgdmFyIHRocmVlTGluZSA9IHNlY29uZGFyeVRleHQgJiYgc2Vjb25kYXJ5VGV4dExpbmVzID4gMTtcbiAgICB2YXIgaGFzQ2hlY2tib3ggPSBsZWZ0Q2hlY2tib3ggfHwgcmlnaHRUb2dnbGU7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuc3RhdGUuaG92ZXJlZCAmJiAhdGhpcy5zdGF0ZS5yaWdodEljb25CdXR0b25Ib3ZlcmVkID8gaG92ZXJDb2xvciA6IG51bGwsXG4gICAgICAgIGNvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgICAgbGluZUhlaWdodDogJzE2cHgnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KClcbiAgICAgIH0sXG5cbiAgICAgIC8vVGhpcyBpbm5lciBkaXYgaXMgbmVlZCBzbyB0aGF0IHJpcHBsZXMgd2lsbCBzcGFuIHRoZSBlbnRpcmUgY29udGFpbmVyXG4gICAgICBpbm5lckRpdjoge1xuICAgICAgICBwYWRkaW5nTGVmdDogbGVmdEljb24gfHwgbGVmdEF2YXRhciB8fCBsZWZ0Q2hlY2tib3ggfHwgaW5zZXRDaGlsZHJlbiA/IDcyIDogMTYsXG4gICAgICAgIHBhZGRpbmdSaWdodDogcmlnaHRJY29uIHx8IHJpZ2h0QXZhdGFyIHx8IHJpZ2h0SWNvbkJ1dHRvbiA/IDU2IDogcmlnaHRUb2dnbGUgPyA3MiA6IDE2LFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBzaW5nbGVBdmF0YXIgPyAyMCA6IDE2LFxuICAgICAgICBwYWRkaW5nVG9wOiBzaW5nbGVOb0F2YXRhciB8fCB0aHJlZUxpbmUgPyAxNiA6IDIwXG4gICAgICB9LFxuXG4gICAgICBsYWJlbDoge1xuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcblxuICAgICAgaWNvbnM6IHtcbiAgICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiB0d29MaW5lID8gMTIgOiBzaW5nbGVBdmF0YXIgPyA0IDogMCxcbiAgICAgICAgcGFkZGluZzogMTJcbiAgICAgIH0sXG5cbiAgICAgIGxlZnRJY29uOiB7XG4gICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleTYwMCxcbiAgICAgICAgZmlsbDogQ29sb3JzLmdyZXk2MDAsXG4gICAgICAgIGxlZnQ6IDRcbiAgICAgIH0sXG5cbiAgICAgIHJpZ2h0SWNvbjoge1xuICAgICAgICBjb2xvcjogQ29sb3JzLmdyZXk0MDAsXG4gICAgICAgIGZpbGw6IENvbG9ycy5ncmV5NDAwLFxuICAgICAgICByaWdodDogNFxuICAgICAgfSxcblxuICAgICAgYXZhdGFyczoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiBzaW5nbGVBdmF0YXIgPyA4IDogMTZcbiAgICAgIH0sXG5cbiAgICAgIGxlZnRBdmF0YXI6IHtcbiAgICAgICAgbGVmdDogMTZcbiAgICAgIH0sXG5cbiAgICAgIHJpZ2h0QXZhdGFyOiB7XG4gICAgICAgIHJpZ2h0OiAxNlxuICAgICAgfSxcblxuICAgICAgbGVmdENoZWNrYm94OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgIHRvcDogdHdvTGluZSA/IDI0IDogc2luZ2xlQXZhdGFyID8gMTYgOiAxMixcbiAgICAgICAgbGVmdDogMTZcbiAgICAgIH0sXG5cbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbjoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgdG9wOiB0d29MaW5lID8gMTIgOiBzaW5nbGVBdmF0YXIgPyA0IDogMCxcbiAgICAgICAgcmlnaHQ6IDRcbiAgICAgIH0sXG5cbiAgICAgIHJpZ2h0VG9nZ2xlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB3aWR0aDogNTQsXG4gICAgICAgIHRvcDogdHdvTGluZSA/IDI1IDogc2luZ2xlQXZhdGFyID8gMTcgOiAxMyxcbiAgICAgICAgcmlnaHQ6IDhcbiAgICAgIH0sXG5cbiAgICAgIHNlY29uZGFyeVRleHQ6IHtcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aHJlZUxpbmUgPyAnMThweCcgOiAnMTZweCcsXG4gICAgICAgIGhlaWdodDogdGhyZWVMaW5lID8gMzYgOiAxNixcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBtYXJnaW5Ub3A6IDQsXG4gICAgICAgIGNvbG9yOiBUeXBvZ3JhcGh5LnRleHRMaWdodEJsYWNrLFxuXG4gICAgICAgIC8vbmVlZGVkIGZvciAyIGFuZCAzIGxpbmUgZWxsaXBzaXNcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIHdoaXRlU3BhY2U6IHRocmVlTGluZSA/IG51bGwgOiAnbm93cmFwJyxcbiAgICAgICAgZGlzcGxheTogdGhyZWVMaW5lID8gJy13ZWJraXQtYm94JyA6IG51bGwsXG4gICAgICAgIFdlYmtpdExpbmVDbGFtcDogdGhyZWVMaW5lID8gMiA6IG51bGwsXG4gICAgICAgIFdlYmtpdEJveE9yaWVudDogdGhyZWVMaW5lID8gJ3ZlcnRpY2FsJyA6IG51bGxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNlY29uZGFyeVRleHRJc0FuRWxlbWVudCA9IFJlYWN0LmlzVmFsaWRFbGVtZW50KHNlY29uZGFyeVRleHQpO1xuXG4gICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCBzdHlsZSk7XG4gICAgdmFyIG1lcmdlZERpdlN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHN0eWxlcy5pbm5lckRpdiwgc3R5bGUpO1xuICAgIHZhciBtZXJnZWRMYWJlbFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHN0eWxlcy5pbm5lckRpdiwgc3R5bGVzLmxhYmVsLCBzdHlsZSk7XG4gICAgdmFyIG1lcmdlZFNlY29uZGFyeVRleHRTdHlsZXMgPSBzZWNvbmRhcnlUZXh0SXNBbkVsZW1lbnQgPyB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0LnByb3BzLnN0eWxlKSA6IG51bGw7XG5cbiAgICB2YXIgY29udGVudENoaWxkcmVuID0gW107XG5cbiAgICB0aGlzLl9wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIGxlZnRJY29uLCB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5pY29ucywgc3R5bGVzLmxlZnRJY29uKSk7XG4gICAgdGhpcy5fcHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodEljb24sIHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmljb25zLCBzdHlsZXMucmlnaHRJY29uKSk7XG4gICAgdGhpcy5fcHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0QXZhdGFyLCB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5hdmF0YXJzLCBzdHlsZXMubGVmdEF2YXRhcikpO1xuICAgIHRoaXMuX3B1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRBdmF0YXIsIHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmF2YXRhcnMsIHN0eWxlcy5yaWdodEF2YXRhcikpO1xuICAgIHRoaXMuX3B1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgbGVmdENoZWNrYm94LCB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5sZWZ0Q2hlY2tib3gpKTtcbiAgICB0aGlzLl9wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0SWNvbkJ1dHRvbiwgdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMucmlnaHRJY29uQnV0dG9uKSwge1xuICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlT3ZlcixcbiAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlT3V0LFxuICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAsXG4gICAgICBvbk1vdXNlRG93bjogdGhpcy5faGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCxcbiAgICAgIG9uTW91c2VVcDogdGhpcy5faGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcFxuICAgIH0pO1xuICAgIHRoaXMuX3B1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRUb2dnbGUsIHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnJpZ2h0VG9nZ2xlKSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbikgY29udGVudENoaWxkcmVuLnB1c2godGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKHNlY29uZGFyeVRleHQpIGNvbnRlbnRDaGlsZHJlbi5wdXNoKFJlYWN0LmlzVmFsaWRFbGVtZW50KHNlY29uZGFyeVRleHQpID8gUmVhY3QuY2xvbmVFbGVtZW50KHNlY29uZGFyeVRleHQsIHsga2V5OiAnc2Vjb25kYXJ5VGV4dCcsIHN0eWxlOiBtZXJnZWRTZWNvbmRhcnlUZXh0U3R5bGVzIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBrZXk6ICdzZWNvbmRhcnlUZXh0Jywgc3R5bGU6IHN0eWxlcy5zZWNvbmRhcnlUZXh0IH0sXG4gICAgICBzZWNvbmRhcnlUZXh0XG4gICAgKSk7XG5cbiAgICByZXR1cm4gaGFzQ2hlY2tib3ggfHwgZGlzYWJsZVRvdWNoVGFwID8gUmVhY3QuY3JlYXRlRWxlbWVudChoYXNDaGVja2JveCA/ICdsYWJlbCcgOiAnZGl2JywgeyBzdHlsZTogaGFzQ2hlY2tib3ggPyBtZXJnZWRMYWJlbFN0eWxlcyA6IG1lcmdlZERpdlN0eWxlcyB9LCBjb250ZW50Q2hpbGRyZW4pIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEVuaGFuY2VkQnV0dG9uLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIGxpbmtCdXR0b246IHRydWUsXG4gICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0LFxuICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5faGFuZGxlTW91c2VPdmVyLFxuICAgICAgICBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaW5uZXJEaXYgfSxcbiAgICAgICAgY29udGVudENoaWxkcmVuXG4gICAgICApXG4gICAgKTtcbiAgfSxcblxuICBfcHVzaEVsZW1lbnQ6IGZ1bmN0aW9uIF9wdXNoRWxlbWVudChjaGlsZHJlbiwgZWxlbWVudCwgYmFzZVN0eWxlcywgYWRkaXRpb25hbFByb3BzKSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBzdHlsZXMgPSB0aGlzLm1lcmdlU3R5bGVzKGJhc2VTdHlsZXMsIGVsZW1lbnQucHJvcHMuc3R5bGUpO1xuICAgICAgY2hpbGRyZW4ucHVzaChSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgc3R5bGU6IHN0eWxlc1xuICAgICAgfSwgYWRkaXRpb25hbFByb3BzKSkpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VEb3duOiBmdW5jdGlvbiBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VEb3duKGUpIHtcbiAgICB2YXIgaWNvbkJ1dHRvbiA9IHRoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKGljb25CdXR0b24ub25Nb3VzZURvd24pIGljb25CdXR0b24ub25Eb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZU91dDogZnVuY3Rpb24gX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlT3V0KGUpIHtcbiAgICB2YXIgaWNvbkJ1dHRvbiA9IHRoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgIHRoaXMuc2V0U3RhdGUoeyByaWdodEljb25CdXR0b25Ib3ZlcmVkOiBmYWxzZSB9KTtcbiAgICBpZiAoaWNvbkJ1dHRvbi5vbk1vdXNlT3V0KSBpY29uQnV0dG9uLm9uTW91c2VPdXQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlT3ZlcjogZnVuY3Rpb24gX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlT3ZlcihlKSB7XG4gICAgdmFyIGljb25CdXR0b24gPSB0aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcbiAgICB0aGlzLnNldFN0YXRlKHsgcmlnaHRJY29uQnV0dG9uSG92ZXJlZDogdHJ1ZSB9KTtcbiAgICBpZiAoaWNvbkJ1dHRvbi5vbk1vdXNlT3ZlcikgaWNvbkJ1dHRvbi5vbk1vdXNlT3ZlcihlKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcDogZnVuY3Rpb24gX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAoZSkge1xuICAgIHZhciBpY29uQnV0dG9uID0gdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoaWNvbkJ1dHRvbi5vbk1vdXNlVXApIGljb25CdXR0b24ub25VcChlKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVSaWdodEljb25CdXR0b25Ub3VjaFRhcChlKSB7XG4gICAgdmFyIGljb25CdXR0b24gPSB0aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcblxuICAgIC8vU3RvcCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byB0aGUgbGlzdC1pdGVtXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoaWNvbkJ1dHRvbi5vblRvdWNoVGFwKSBpY29uQnV0dG9uLm9uVG91Y2hUYXAoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3ZlcihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU92ZXIpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VzZU92ZXIoZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU91dDogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3V0KGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU91dCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGUpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SXRlbTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFR5cG9ncmFwaHkgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHlwb2dyYXBoeScpO1xuXG52YXIgTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdMaXN0JyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluc2V0U3ViaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzdWJoZWFkZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3ViaGVhZGVyU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGluc2V0U3ViaGVhZGVyID0gX3Byb3BzLmluc2V0U3ViaGVhZGVyO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICB2YXIgc3ViaGVhZGVyID0gX3Byb3BzLnN1YmhlYWRlcjtcbiAgICB2YXIgc3ViaGVhZGVyU3R5bGUgPSBfcHJvcHMuc3ViaGVhZGVyU3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2luc2V0U3ViaGVhZGVyJywgJ3N0eWxlJywgJ3N1YmhlYWRlcicsICdzdWJoZWFkZXJTdHlsZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDgsXG4gICAgICAgIHBhZGRpbmdUb3A6IHN1YmhlYWRlciA/IDAgOiA4XG4gICAgICB9LFxuXG4gICAgICBzdWJoZWFkZXI6IHtcbiAgICAgICAgY29sb3I6IFR5cG9ncmFwaHkudGV4dExpZ2h0QmxhY2ssXG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgZm9udFdlaWdodDogVHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnNDhweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiBpbnNldFN1YmhlYWRlciA/IDcyIDogMTZcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCBzdHlsZSk7XG4gICAgdmFyIG1lcmdlZFN1YmhlYWRlclN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnN1YmhlYWRlciwgc3ViaGVhZGVyU3R5bGUpO1xuXG4gICAgdmFyIHN1YmhlYWRlckVsZW1lbnQgPSBzdWJoZWFkZXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBtZXJnZWRTdWJoZWFkZXJTdHlsZXMgfSxcbiAgICAgIHN1YmhlYWRlclxuICAgICkgOiBudWxsO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyB9KSxcbiAgICAgIHN1YmhlYWRlckVsZW1lbnQsXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgTGlua01lbnVJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0xpbmtNZW51SXRlbScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHBheWxvYWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGFyZ2V0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5tZW51SXRlbTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgKyAncHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhpcy5nZXRUaGVtZSgpLnBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5nZXRUaGVtZSgpLnBhZGRpbmdcbiAgICAgIH0sXG4gICAgICByb290V2hlbkhvdmVyZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuaG92ZXJDb2xvclxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuU2VsZWN0ZWQ6IHtcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RlZFRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG9uQ2xpY2tIYW5kbGVyID0gdGhpcy5wcm9wcy5kaXNhYmxlZCA/IHRoaXMuX3N0b3BMaW5rIDogdW5kZWZpbmVkO1xuICAgIC8vIFByZXZlbnQgY29udGV4dCBtZW51ICdPcGVuIEluIE5ldyBUYWIvV2luZG93J1xuICAgIHZhciBsaW5rQXR0cmlidXRlID0gdGhpcy5wcm9wcy5kaXNhYmxlZCA/ICdkYXRhLWhyZWYnIDogJ2hyZWYnO1xuICAgIHZhciBsaW5rID0ge307XG4gICAgbGlua1tsaW5rQXR0cmlidXRlXSA9IHRoaXMucHJvcHMucGF5bG9hZDtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGxpbmtTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHN0eWxlcy5yb290V2hlblNlbGVjdGVkLCB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHN0eWxlcy5yb290V2hlblNlbGVjdGVkLCB0aGlzLnByb3BzLmFjdGl2ZSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMucm9vdFdoZW5Ib3ZlcmVkLCB0aGlzLnByb3BzLnN0eWxlLCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5yb290V2hlbkRpc2FibGVkKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2EnLFxuICAgICAgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgIHRhcmdldDogdGhpcy5wcm9wcy50YXJnZXQsXG4gICAgICAgIHN0eWxlOiBsaW5rU3R5bGVzIH0sIGxpbmssIHtcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgb25DbGljazogb25DbGlja0hhbmRsZXIsXG4gICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLl9oYW5kbGVNb3VzZU92ZXIsXG4gICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0IH0pLFxuICAgICAgdGhpcy5wcm9wcy50ZXh0XG4gICAgKTtcbiAgfSxcblxuICBfc3RvcExpbms6IGZ1bmN0aW9uIF9zdG9wTGluayhldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3ZlcihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMub25Nb3VzZU92ZXIpIHRoaXMucHJvcHMub25Nb3VzZU92ZXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KSB0aGlzLnByb3BzLm9uTW91c2VPdXQoZSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtNZW51SXRlbTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgRm9udEljb24gPSByZXF1aXJlKCcuLi9mb250LWljb24nKTtcbnZhciBUb2dnbGUgPSByZXF1aXJlKCcuLi90b2dnbGUnKTtcblxudmFyIFR5cGVzID0ge1xuICBMSU5LOiAnTElOSycsXG4gIFNVQkhFQURFUjogJ1NVQkhFQURFUicsXG4gIE5FU1RFRDogJ05FU1RFRCdcbn07XG5cbnZhciBNZW51SXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdNZW51SXRlbScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25SaWdodENsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgaWNvblJpZ2h0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgYXR0cmlidXRlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG51bWJlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkYXRhOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvZ2dsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG9uVG91Y2hUYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG9nZ2xlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgYWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIHN0YXRpY3M6IHtcbiAgICBUeXBlczogVHlwZXNcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9nZ2xlOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIGFjdGl2ZTogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5tZW51SXRlbTtcbiAgfSxcblxuICBnZXRTcGFjaW5nOiBmdW5jdGlvbiBnZXRTcGFjaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoaXMuZ2V0VGhlbWUoKS5wYWRkaW5nLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5wYWRkaW5nLFxuICAgICAgICBjb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUudGV4dENvbG9yXG4gICAgICB9LFxuICAgICAgbnVtYmVyOiB7XG4gICAgICAgIGZsb2F0OiAncmlnaHQnLFxuICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgZmxvYXQ6ICdyaWdodCdcbiAgICAgIH0sXG4gICAgICBpY29uUmlnaHQ6IHtcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICAgIGZsb2F0OiAncmlnaHQnXG4gICAgICB9LFxuICAgICAgaWNvbjoge1xuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXJcbiAgICAgIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyICogMixcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmRhdGFIZWlnaHQgKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5kYXRhSGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgIHRvcDogLTEyLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZm9udFdlaWdodDogMzAwLFxuICAgICAgICBjb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUudGV4dENvbG9yXG4gICAgICB9LFxuICAgICAgdG9nZ2xlOiB7XG4gICAgICAgIG1hcmdpblRvcDogKHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgLSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnJhZGlvQnV0dG9uLnNpemUpIC8gMixcbiAgICAgICAgZmxvYXQ6ICdyaWdodCcsXG4gICAgICAgIHdpZHRoOiA0MlxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuSG92ZXJlZDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5ob3ZlckNvbG9yXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5TZWxlY3RlZDoge1xuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdGVkVGV4dENvbG9yXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5EaXNhYmxlZDoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGljb247XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIGljb25SaWdodDtcbiAgICB2YXIgYXR0cmlidXRlO1xuICAgIHZhciBudW1iZXI7XG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQ7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmljb25DbGFzc05hbWUpIGljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KEZvbnRJY29uLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uLCB0aGlzLnByb3BzLmljb25TdHlsZSksIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLmljb25SaWdodENsYXNzTmFtZSkgaWNvblJpZ2h0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChGb250SWNvbiwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvblJpZ2h0LCB0aGlzLnByb3BzLmljb25SaWdodFN0eWxlKSwgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmljb25SaWdodENsYXNzTmFtZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5kYXRhKSBkYXRhID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmRhdGEpIH0sXG4gICAgICB0aGlzLnByb3BzLmRhdGFcbiAgICApO1xuICAgIGlmICh0aGlzLnByb3BzLm51bWJlciAhPT0gdW5kZWZpbmVkKSBudW1iZXIgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubnVtYmVyKSB9LFxuICAgICAgdGhpcy5wcm9wcy5udW1iZXJcbiAgICApO1xuICAgIGlmICh0aGlzLnByb3BzLmF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuc3R5bGUpIH0sXG4gICAgICB0aGlzLnByb3BzLmF0dHJpYnV0ZVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy50b2dnbGUpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIHRvZ2dsZSA9IF9wcm9wcy50b2dnbGU7XG4gICAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgICAgdmFyIG9uVG9nZ2xlID0gX3Byb3BzLm9uVG9nZ2xlO1xuICAgICAgdmFyIG9uTW91c2VPdmVyID0gX3Byb3BzLm9uTW91c2VPdmVyO1xuICAgICAgdmFyIG9uTW91c2VPdXQgPSBfcHJvcHMub25Nb3VzZU91dDtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcbiAgICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWyd0b2dnbGUnLCAnb25Ub3VjaFRhcCcsICdvblRvZ2dsZScsICdvbk1vdXNlT3ZlcicsICdvbk1vdXNlT3V0JywgJ2NoaWxkcmVuJywgJ2xhYmVsJywgJ3N0eWxlJ10pO1xuXG4gICAgICB0b2dnbGVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChUb2dnbGUsIF9leHRlbmRzKHt9LCBvdGhlciwgeyBvblRvZ2dsZTogdGhpcy5faGFuZGxlVG9nZ2xlLCBzdHlsZTogc3R5bGVzLnRvZ2dsZSB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHtcbiAgICAgICAga2V5OiB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVUb3VjaFRhcCxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQsIGY6IHRydWUsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHN0eWxlcy5yb290V2hlblNlbGVjdGVkLCB0aGlzLnByb3BzLmFjdGl2ZSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMucm9vdFdoZW5Ib3ZlcmVkLCB0aGlzLnByb3BzLnN0eWxlLCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5yb290V2hlbkRpc2FibGVkKSB9LFxuICAgICAgaWNvbixcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICBkYXRhLFxuICAgICAgYXR0cmlidXRlLFxuICAgICAgbnVtYmVyLFxuICAgICAgdG9nZ2xlRWxlbWVudCxcbiAgICAgIGljb25SaWdodFxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hUYXAoZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnByb3BzLm9uVG91Y2hUYXApIHRoaXMucHJvcHMub25Ub3VjaFRhcChlLCB0aGlzLnByb3BzLmluZGV4KTtcbiAgfSxcblxuICBfaGFuZGxlVG9nZ2xlOiBmdW5jdGlvbiBfaGFuZGxlVG9nZ2xlKGUsIHRvZ2dsZWQpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vblRvZ2dsZSkgdGhpcy5wcm9wcy5vblRvZ2dsZShlLCB0aGlzLnByb3BzLmluZGV4LCB0b2dnbGVkKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdmVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcikgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcihlLCB0aGlzLnByb3BzLmluZGV4KTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dChlKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMub25Nb3VzZU91dCkgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGUsIHRoaXMucHJvcHMuaW5kZXgpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZW51SXRlbTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBDc3NFdmVudCA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nzcy1ldmVudCcpO1xudmFyIERvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xudmFyIEtleUxpbmUgPSByZXF1aXJlKCcuLi91dGlscy9rZXktbGluZScpO1xudmFyIEtleUNvZGUgPSByZXF1aXJlKCcuLi91dGlscy9rZXktY29kZScpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENsaWNrQXdheWFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvY2xpY2stYXdheWFibGUnKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4uL3BhcGVyJyk7XG52YXIgTWVudUl0ZW0gPSByZXF1aXJlKCcuL21lbnUtaXRlbScpO1xudmFyIExpbmtNZW51SXRlbSA9IHJlcXVpcmUoJy4vbGluay1tZW51LWl0ZW0nKTtcbnZhciBTdWJoZWFkZXJNZW51SXRlbSA9IHJlcXVpcmUoJy4vc3ViaGVhZGVyLW1lbnUtaXRlbScpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGUnKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqXG4qIE5lc3RlZCBNZW51IENvbXBvbmVudFxuKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgTmVzdGVkTWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmVzdGVkTWVudUl0ZW0nLFxuXG4gIG1peGluczogW0NsaWNrQXdheWFibGUsIFN0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgekRlcHRoOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBhY3RpdmU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG9uSXRlbVRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICAgIGFjdGl2ZUluZGV4OiAwXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRDbGlja0F3YXk6IGZ1bmN0aW9uIGNvbXBvbmVudENsaWNrQXdheSgpIHtcbiAgICB0aGlzLl9jbG9zZU5lc3RlZE1lbnUoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fcG9zaXRpb25OZXN0ZWRNZW51KCk7XG4gICAgdmFyIGVsID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgZWwuZm9jdXMoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9wb3NpdGlvbk5lc3RlZE1lbnUoKTtcbiAgfSxcblxuICBnZXRTcGFjaW5nOiBmdW5jdGlvbiBnZXRTcGFjaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIGljb246IHtcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICAgIG1hcmdpblJpZ2h0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyXG4gICAgICB9LFxuICAgICAgdG9nZ2xlOiB7XG4gICAgICAgIG1hcmdpblRvcDogKHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgLSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnJhZGlvQnV0dG9uLnNpemUpIC8gMixcbiAgICAgICAgZmxvYXQ6ICdyaWdodCcsXG4gICAgICAgIHdpZHRoOiA0MlxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuSG92ZXJlZDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5ob3ZlckNvbG9yXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5TZWxlY3RlZDoge1xuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdGVkVGV4dENvbG9yXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5EaXNhYmxlZDoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50Lm1lbnVJdGVtO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5hY3RpdmUgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLnJvb3RXaGVuSG92ZXJlZCwge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIHZhciBpY29uQ3VzdG9tQXJyb3dEcm9wUmlnaHQgPSB7XG4gICAgICBtYXJnaW5SaWdodDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1pbmkgKiAtMSxcbiAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmRyb3BEb3duTWVudS5hY2NlbnRDb2xvclxuICAgIH07XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaW5kZXggPSBfcHJvcHMuaW5kZXg7XG4gICAgdmFyIG1lbnVJdGVtU3R5bGUgPSBfcHJvcHMubWVudUl0ZW1TdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaW5kZXgnLCAnbWVudUl0ZW1TdHlsZSddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIHJlZjogJ3Jvb3QnLFxuICAgICAgICBzdHlsZTogc3R5bGVzLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX29wZW5OZXN0ZWRNZW51LFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2Nsb3NlTmVzdGVkTWVudSxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIE1lbnVJdGVtLFxuICAgICAgICB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIHN0eWxlOiBtZW51SXRlbVN0eWxlLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGljb25SaWdodFN0eWxlOiBpY29uQ3VzdG9tQXJyb3dEcm9wUmlnaHQsXG4gICAgICAgICAgaWNvblJpZ2h0Q2xhc3NOYW1lOiAnbXVpZG9jcy1pY29uLWN1c3RvbS1hcnJvdy1kcm9wLXJpZ2h0JyxcbiAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vblBhcmVudEl0ZW1UYXAgfSxcbiAgICAgICAgdGhpcy5wcm9wcy50ZXh0XG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnbmVzdGVkTWVudScsXG4gICAgICAgIG1lbnVJdGVtczogdGhpcy5wcm9wcy5tZW51SXRlbXMsXG4gICAgICAgIG1lbnVJdGVtU3R5bGU6IG1lbnVJdGVtU3R5bGUsXG4gICAgICAgIG9uSXRlbVRhcDogdGhpcy5fb25NZW51SXRlbVRhcCxcbiAgICAgICAgaGlkZWFibGU6IHRydWUsXG4gICAgICAgIHZpc2libGU6IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgb25SZXF1ZXN0Q2xvc2U6IHRoaXMuX2Nsb3NlTmVzdGVkTWVudSxcbiAgICAgICAgekRlcHRoOiB0aGlzLnByb3BzLnpEZXB0aCArIDEgfSkpXG4gICAgKTtcbiAgfSxcblxuICB0b2dnbGVOZXN0ZWRNZW51OiBmdW5jdGlvbiB0b2dnbGVOZXN0ZWRNZW51KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkgdGhpcy5zZXRTdGF0ZSh7IG9wZW46ICF0aGlzLnN0YXRlLm9wZW4gfSk7XG4gIH0sXG5cbiAgaXNPcGVuOiBmdW5jdGlvbiBpc09wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUub3BlbjtcbiAgfSxcblxuICBfcG9zaXRpb25OZXN0ZWRNZW51OiBmdW5jdGlvbiBfcG9zaXRpb25OZXN0ZWRNZW51KCkge1xuICAgIHZhciBlbCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBuZXN0ZWRNZW51ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm5lc3RlZE1lbnUpO1xuICAgIG5lc3RlZE1lbnUuc3R5bGUubGVmdCA9IGVsLm9mZnNldFdpZHRoICsgJ3B4JztcbiAgfSxcblxuICBfb3Blbk5lc3RlZE1lbnU6IGZ1bmN0aW9uIF9vcGVuTmVzdGVkTWVudSgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pO1xuICB9LFxuXG4gIF9jbG9zZU5lc3RlZE1lbnU6IGZ1bmN0aW9uIF9jbG9zZU5lc3RlZE1lbnUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLmZvY3VzKCk7XG4gIH0sXG5cbiAgX29uUGFyZW50SXRlbVRhcDogZnVuY3Rpb24gX29uUGFyZW50SXRlbVRhcCgpIHtcbiAgICB0aGlzLnRvZ2dsZU5lc3RlZE1lbnUoKTtcbiAgfSxcblxuICBfb25NZW51SXRlbVRhcDogZnVuY3Rpb24gX29uTWVudUl0ZW1UYXAoZSwgaW5kZXgsIG1lbnVJdGVtKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25JdGVtVGFwKSB0aGlzLnByb3BzLm9uSXRlbVRhcChlLCBpbmRleCwgbWVudUl0ZW0pO1xuICAgIHRoaXMuX2Nsb3NlTmVzdGVkTWVudSgpO1xuICB9LFxuICBfaGFuZGxlTW91c2VPdmVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcikgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcihlLCB0aGlzLnByb3BzLmluZGV4KTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dChlKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMub25Nb3VzZU91dCkgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGUsIHRoaXMucHJvcHMuaW5kZXgpO1xuICB9XG5cbn0pO1xuXG4vKioqKioqKioqKioqKioqKlxuKiBNZW51IENvbXBvbmVudFxuKioqKioqKioqKioqKioqKi9cbnZhciBNZW51ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ01lbnUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYXV0b1dpZHRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkl0ZW1UYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG9nZ2xlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblJlcXVlc3RDbG9zZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBzZWxlY3RlZEluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGhpZGVhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB2aXNpYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB6RGVwdGg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWVudUl0ZW1TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZW51SXRlbVN0eWxlU3ViaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lbnVJdGVtU3R5bGVMaW5rOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lU3ViaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lTGluazogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXN0ZWRNZW51U2hvd246IGZhbHNlLFxuICAgICAgYWN0aXZlSW5kZXg6IDBcbiAgICB9O1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdXRvV2lkdGg6IHRydWUsXG4gICAgICBoaWRlYWJsZTogZmFsc2UsXG4gICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgekRlcHRoOiAxLFxuICAgICAgb25SZXF1ZXN0Q2xvc2U6IGZ1bmN0aW9uIG9uUmVxdWVzdENsb3NlKCkge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgZWwgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgIC8vU2V0IHRoZSBtZW51IHdpZHRoXG4gICAgdGhpcy5fc2V0S2V5V2lkdGgoZWwpO1xuXG4gICAgLy9TYXZlIHRoZSBpbml0aWFsIG1lbnUgaXRlbSBoZWlnaHQgZm9yIGxhdGVyXG4gICAgdGhpcy5faW5pdGlhbE1lbnVJdGVtSGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0IC8gTWF0aC5tYXgoMSwgdGhpcy5wcm9wcy5tZW51SXRlbXMubGVuZ3RoKTtcblxuICAgIC8vU2hvdyBvciBIaWRlIHRoZSBtZW51IGFjY29yZGluZyB0byB2aXNpYmlsaXR5XG4gICAgdGhpcy5fcmVuZGVyVmlzaWJpbGl0eSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnZpc2libGUgIT09IHByZXZQcm9wcy52aXNpYmxlKSB0aGlzLl9yZW5kZXJWaXNpYmlsaXR5KCk7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50Lm1lbnU7XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuY29udGFpbmVyQmFja2dyb3VuZENvbG9yLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyTWluaSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1pbmksXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQobnVsbCwgJ2hlaWdodCcpLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZSAhaW1wb3J0YW50J1xuICAgICAgfSxcbiAgICAgIHN1YmhlYWRlcjoge1xuICAgICAgICBwYWRkaW5nTGVmdDogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5tZW51U3ViaGVhZGVyLnBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5tZW51U3ViaGVhZGVyLnBhZGRpbmdcbiAgICAgIH0sXG4gICAgICBoaWRlYWJsZToge1xuICAgICAgICBvcGFjaXR5OiB0aGlzLnByb3BzLnZpc2libGUgPyAxIDogMCxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICB6SW5kZXg6IDFcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBQYXBlcixcbiAgICAgIHtcbiAgICAgICAgcmVmOiAncGFwZXJDb250YWluZXInLFxuICAgICAgICB0YWJJbmRleDogJzAnLFxuICAgICAgICBvbktleURvd246IHRoaXMuX29uS2V5RG93bixcbiAgICAgICAgekRlcHRoOiB0aGlzLnByb3BzLnpEZXB0aCxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuaGlkZWFibGUgJiYgc3R5bGVzLmhpZGVhYmxlLCB0aGlzLnByb3BzLnN0eWxlKSB9LFxuICAgICAgdGhpcy5fZ2V0Q2hpbGRyZW4oKVxuICAgICk7XG4gIH0sXG5cbiAgX2dldENoaWxkcmVuOiBmdW5jdGlvbiBfZ2V0Q2hpbGRyZW4oKSB7XG4gICAgdmFyIG1lbnVJdGVtLCBpdGVtQ29tcG9uZW50LCBpc1NlbGVjdGVkLCBpc0Rpc2FibGVkO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgIC8vVGhpcyBhcnJheSBpcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgYWxsIG5lc3RlZCBtZW51IHJlZnNcbiAgICB0aGlzLl9uZXN0ZWRDaGlsZHJlbiA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnByb3BzLm1lbnVJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgbWVudUl0ZW0gPSB0aGlzLnByb3BzLm1lbnVJdGVtc1tpXTtcbiAgICAgIGlzU2VsZWN0ZWQgPSBpID09PSB0aGlzLnByb3BzLnNlbGVjdGVkSW5kZXg7XG4gICAgICBpc0Rpc2FibGVkID0gbWVudUl0ZW0uZGlzYWJsZWQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWVudUl0ZW0uZGlzYWJsZWQ7XG5cbiAgICAgIHZhciBpY29uID0gbWVudUl0ZW0uaWNvbjtcbiAgICAgIHZhciBkYXRhID0gbWVudUl0ZW0uZGF0YTtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBtZW51SXRlbS5hdHRyaWJ1dGU7XG4gICAgICB2YXIgbnVtYmVyID0gbWVudUl0ZW0ubnVtYmVyO1xuICAgICAgdmFyIHRvZ2dsZSA9IG1lbnVJdGVtLnRvZ2dsZTtcbiAgICAgIHZhciBvblRvdWNoVGFwID0gbWVudUl0ZW0ub25Ub3VjaFRhcDtcblxuICAgICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG1lbnVJdGVtLCBbJ2ljb24nLCAnZGF0YScsICdhdHRyaWJ1dGUnLCAnbnVtYmVyJywgJ3RvZ2dsZScsICdvblRvdWNoVGFwJ10pO1xuXG4gICAgICBzd2l0Y2ggKG1lbnVJdGVtLnR5cGUpIHtcblxuICAgICAgICBjYXNlIE1lbnVJdGVtLlR5cGVzLkxJTks6XG4gICAgICAgICAgaXRlbUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlua01lbnVJdGVtLCB7XG4gICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5zdGF0ZS5hY3RpdmVJbmRleCA9PSBpLFxuICAgICAgICAgICAgdGV4dDogbWVudUl0ZW0udGV4dCxcbiAgICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLm1lbnVJdGVtQ2xhc3NOYW1lTGluayxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLm1lbnVJdGVtU3R5bGVMaW5rLFxuICAgICAgICAgICAgcGF5bG9hZDogbWVudUl0ZW0ucGF5bG9hZCxcbiAgICAgICAgICAgIHRhcmdldDogbWVudUl0ZW0udGFyZ2V0IH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTWVudUl0ZW0uVHlwZXMuU1VCSEVBREVSOlxuICAgICAgICAgIGl0ZW1Db21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFN1YmhlYWRlck1lbnVJdGVtLCB7XG4gICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5tZW51SXRlbUNsYXNzTmFtZVN1YmhlYWRlcixcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5zdWJoZWFkZXIpLFxuICAgICAgICAgICAgZmlyc3RDaGlsZDogaSA9PT0gMCxcbiAgICAgICAgICAgIHRleHQ6IG1lbnVJdGVtLnRleHQgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNZW51SXRlbS5UeXBlcy5ORVNURUQ6XG4gICAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZWYgPSBfcHJvcHMyLnJlZixcbiAgICAgICAgICAgICAga2V5ID0gX3Byb3BzMi5rZXksXG4gICAgICAgICAgICAgIGluZGV4ID0gX3Byb3BzMi5pbmRleCxcbiAgICAgICAgICAgICAgekRlcHRoID0gX3Byb3BzMi56RGVwdGgsXG4gICAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsncmVmJywgJ2tleScsICdpbmRleCcsICd6RGVwdGgnXSk7XG5cbiAgICAgICAgICBpdGVtQ29tcG9uZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChOZXN0ZWRNZW51SXRlbSwgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgICAgICByZWY6IGksXG4gICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIG5lc3RlZDogdHJ1ZSxcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5zdGF0ZS5hY3RpdmVJbmRleCA9PSBpLFxuICAgICAgICAgICAgdGV4dDogbWVudUl0ZW0udGV4dCxcbiAgICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAgbWVudUl0ZW1zOiBtZW51SXRlbS5pdGVtcyxcbiAgICAgICAgICAgIG1lbnVJdGVtU3R5bGU6IHRoaXMucHJvcHMubWVudUl0ZW1TdHlsZSxcbiAgICAgICAgICAgIHpEZXB0aDogdGhpcy5wcm9wcy56RGVwdGgsXG4gICAgICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5fb25JdGVtQWN0aXZhdGVkLFxuICAgICAgICAgICAgb25Nb3VzZU91dDogdGhpcy5fb25JdGVtRGVhY3RpdmF0ZWQsXG4gICAgICAgICAgICBvbkl0ZW1UYXA6IHRoaXMuX29uTmVzdGVkSXRlbVRhcCB9KSk7XG4gICAgICAgICAgdGhpcy5fbmVzdGVkQ2hpbGRyZW4ucHVzaChpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGl0ZW1Db21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgTWVudUl0ZW0sXG4gICAgICAgICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5zdGF0ZS5hY3RpdmVJbmRleCA9PSBpLFxuICAgICAgICAgICAgICBpY29uOiBtZW51SXRlbS5pY29uLFxuICAgICAgICAgICAgICBkYXRhOiBtZW51SXRlbS5kYXRhLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMubWVudUl0ZW1DbGFzc05hbWUsXG4gICAgICAgICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLm1lbnVJdGVtU3R5bGUsXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZTogbWVudUl0ZW0uYXR0cmlidXRlLFxuICAgICAgICAgICAgICBudW1iZXI6IG1lbnVJdGVtLm51bWJlcixcbiAgICAgICAgICAgICAgdG9nZ2xlOiBtZW51SXRlbS50b2dnbGUsXG4gICAgICAgICAgICAgIG9uVG9nZ2xlOiB0aGlzLnByb3BzLm9uVG9nZ2xlLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5fb25JdGVtVGFwLFxuICAgICAgICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5fb25JdGVtQWN0aXZhdGVkLFxuICAgICAgICAgICAgICBvbk1vdXNlT3V0OiB0aGlzLl9vbkl0ZW1EZWFjdGl2YXRlZFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtZW51SXRlbS50ZXh0XG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goaXRlbUNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICB9LFxuXG4gIF9zZXRLZXlXaWR0aDogZnVuY3Rpb24gX3NldEtleVdpZHRoKGVsKSB7XG4gICAgdmFyIG1lbnVXaWR0aCA9IHRoaXMucHJvcHMuYXV0b1dpZHRoID8gS2V5TGluZS5nZXRJbmNyZW1lbnRhbERpbShlbC5vZmZzZXRXaWR0aCkgKyAncHgnIDogJzEwMCUnO1xuXG4gICAgLy9VcGRhdGUgdGhlIG1lbnUgd2lkdGhcbiAgICBEb20ud2l0aG91dFRyYW5zaXRpb24oZWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsLnN0eWxlLndpZHRoID0gbWVudVdpZHRoO1xuICAgIH0pO1xuICB9LFxuXG4gIF9nZXRDdXJyZW50SGVpZ2h0OiBmdW5jdGlvbiBfZ2V0Q3VycmVudEhlaWdodCgpIHtcbiAgICB2YXIgdG90YWxJdGVucyA9IE1hdGgubWF4KDEsIHRoaXMucHJvcHMubWVudUl0ZW1zLmxlbmd0aCk7XG4gICAgdmFyIG5ld0hlaWdodCA9IHRoaXMuX2luaXRpYWxNZW51SXRlbUhlaWdodCAqIHRvdGFsSXRlbnM7XG5cbiAgICByZXR1cm4gbmV3SGVpZ2h0O1xuICB9LFxuXG4gIF9yZW5kZXJWaXNpYmlsaXR5OiBmdW5jdGlvbiBfcmVuZGVyVmlzaWJpbGl0eSgpIHtcbiAgICB2YXIgZWw7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5oaWRlYWJsZSkge1xuICAgICAgZWwgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgIHZhciBjb250YWluZXIgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMucGFwZXJDb250YWluZXIpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy52aXNpYmxlKSB7XG4gICAgICAgIC8vT3BlbiB0aGUgbWVudVxuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gVHJhbnNpdGlvbnMuZWFzZU91dCgpO1xuICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSB0aGlzLl9nZXRDdXJyZW50SGVpZ2h0KCkgKyAncHgnO1xuXG4gICAgICAgIC8vU2V0IHRoZSBvdmVyZmxvdyB0byB2aXNpYmxlIGFmdGVyIHRoZSBhbmltYXRpb24gaXMgZG9uZSBzb1xuICAgICAgICAvL3RoYXQgb3RoZXIgbmVzdGVkIG1lbnVzIGNhbiBiZSBzaG93blxuICAgICAgICBDc3NFdmVudC5vblRyYW5zaXRpb25FbmQoZWwsIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy9NYWtlIHN1cmUgdGhlIG1lbnUgaXMgb3BlbiBiZWZvcmUgc2V0dGluZyB0aGUgb3ZlcmZsb3cuXG4gICAgICAgICAgLy9UaGlzIGlzIHRvIGFjY291dCBmb3IgZmFzdCBjbGlja3NcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy52aXNpYmxlKSBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSc7XG4gICAgICAgICAgZWwuZm9jdXMoKTtcbiAgICAgICAgfSkuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vQ2xvc2UgdGhlIG1lbnVcbiAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XG5cbiAgICAgICAgLy9TZXQgdGhlIG92ZXJmbG93IHRvIGhpZGRlbiBzbyB0aGF0IGFuaW1hdGlvbiB3b3JrcyBwcm9wZXJseVxuICAgICAgICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uTmVzdGVkSXRlbVRhcDogZnVuY3Rpb24gX29uTmVzdGVkSXRlbVRhcChlLCBpbmRleCwgbWVudUl0ZW0pIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkl0ZW1UYXApIHRoaXMucHJvcHMub25JdGVtVGFwKGUsIGluZGV4LCBtZW51SXRlbSk7XG4gIH0sXG5cbiAgX29uSXRlbVRhcDogZnVuY3Rpb24gX29uSXRlbVRhcChlLCBpbmRleCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uSXRlbVRhcCkgdGhpcy5wcm9wcy5vbkl0ZW1UYXAoZSwgaW5kZXgsIHRoaXMucHJvcHMubWVudUl0ZW1zW2luZGV4XSk7XG4gIH0sXG5cbiAgX29uSXRlbVRvZ2dsZTogZnVuY3Rpb24gX29uSXRlbVRvZ2dsZShlLCBpbmRleCwgdG9nZ2xlZCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uSXRlbVRvZ2dsZSkgdGhpcy5wcm9wcy5vbkl0ZW1Ub2dnbGUoZSwgaW5kZXgsIHRoaXMucHJvcHMubWVudUl0ZW1zW2luZGV4XSwgdG9nZ2xlZCk7XG4gIH0sXG4gIF9vbkl0ZW1BY3RpdmF0ZWQ6IGZ1bmN0aW9uIF9vbkl0ZW1BY3RpdmF0ZWQoZSwgaW5kZXgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlSW5kZXg6IGluZGV4IH0pO1xuICB9LFxuICBfb25JdGVtRGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uIF9vbkl0ZW1EZWFjdGl2YXRlZChlLCBpbmRleCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PSBpbmRleCkgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUluZGV4OiAwIH0pO1xuICB9LFxuXG4gIF9vbktleURvd246IGZ1bmN0aW9uIF9vbktleURvd24oZSkge1xuICAgIGlmICghKHRoaXMuc3RhdGUub3BlbiB8fCB0aGlzLnByb3BzLnZpc2libGUpKSByZXR1cm47XG5cbiAgICB2YXIgbmVzdGVkID0gdGhpcy5fY2hpbGRyZW5bdGhpcy5zdGF0ZS5hY3RpdmVJbmRleF07XG4gICAgaWYgKG5lc3RlZCAmJiBuZXN0ZWQucHJvcHMubmVzdGVkICYmIHRoaXMucmVmc1t0aGlzLnN0YXRlLmFjdGl2ZUluZGV4XS5pc09wZW4oKSkgcmV0dXJuO1xuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIEtleUNvZGUuVVA6XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlUHJldmlvdXNJdGVtKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlDb2RlLkRPV046XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTmV4dEl0ZW0oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtleUNvZGUuUklHSFQ6XG4gICAgICAgIHRoaXMuX3RyeVRvZ2dsZU5lc3RlZCh0aGlzLnN0YXRlLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtleUNvZGUuTEVGVDpcbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtleUNvZGUuRVNDOlxuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS2V5Q29kZS5UQUI6XG4gICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgICAgIHJldHVybjsgLy8gc28gdGhlIHRhYiBrZXkgY2FuIHByb3BhZ2F0ZVxuICAgICAgY2FzZSBLZXlDb2RlLkVOVEVSOlxuICAgICAgY2FzZSBLZXlDb2RlLlNQQUNFOlxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAvLyBuZWVkcyBjYWxsZWQgYmVmb3JlIHRoZSBjbG9zZVxuICAgICAgICB0aGlzLl90cmlnZ2VyU2VsZWN0aW9uKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjsgLy9pbXBvcnRhbnRcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0sXG5cbiAgX2FjdGl2YXRlUHJldmlvdXNJdGVtOiBmdW5jdGlvbiBfYWN0aXZhdGVQcmV2aW91c0l0ZW0oKSB7XG4gICAgdmFyIGFjdGl2ZSA9IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggfHwgMDtcbiAgICBhY3RpdmUgPSBNYXRoLm1heChhY3RpdmUgLSAxLCAwKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlSW5kZXg6IGFjdGl2ZSB9KTtcbiAgfSxcblxuICBfYWN0aXZhdGVOZXh0SXRlbTogZnVuY3Rpb24gX2FjdGl2YXRlTmV4dEl0ZW0oKSB7XG4gICAgdmFyIGFjdGl2ZSA9IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggfHwgMDtcbiAgICBhY3RpdmUgPSBNYXRoLm1pbihhY3RpdmUgKyAxLCB0aGlzLl9jaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlSW5kZXg6IGFjdGl2ZSB9KTtcbiAgfSxcblxuICBfdHJpZ2dlclNlbGVjdGlvbjogZnVuY3Rpb24gX3RyaWdnZXJTZWxlY3Rpb24oZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB0aGlzLl9vbkl0ZW1UYXAoZSwgaW5kZXgpO1xuICB9LFxuXG4gIF9jbG9zZTogZnVuY3Rpb24gX2Nsb3NlKCkge1xuICAgIHRoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2UoKTtcbiAgfSxcblxuICBfdHJ5VG9nZ2xlTmVzdGVkOiBmdW5jdGlvbiBfdHJ5VG9nZ2xlTmVzdGVkKGluZGV4KSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLnJlZnNbaW5kZXhdO1xuICAgIHZhciB0b2dnbGVNZW51ID0gaXRlbS50b2dnbGVOZXN0ZWRNZW51O1xuICAgIGlmIChpdGVtICYmIGl0ZW0udG9nZ2xlTmVzdGVkTWVudSkgaXRlbS50b2dnbGVOZXN0ZWRNZW51KCk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVudTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFR5cG9ncmFwaHkgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHlwb2dyYXBoeScpO1xuXG52YXIgU3ViaGVhZGVyTWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU3ViaGVhZGVyTWVudUl0ZW0nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgZmlyc3RDaGlsZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50Lm1lbnVTdWJoZWFkZXI7XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIGd1dHRlck1pbmkgPSB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyTWluaTtcbiAgICB2YXIgc3ViaGVhZGVySGVpZ2h0ID0gdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcFN1YmhlYWRlckhlaWdodDtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMCxcbiAgICAgICAgZm9udFdlaWdodDogVHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIGhlaWdodDogc3ViaGVhZGVySGVpZ2h0ICsgZ3V0dGVyTWluaSxcbiAgICAgICAgbGluZUhlaWdodDogc3ViaGVhZGVySGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3IsXG4gICAgICAgIGJvcmRlclRvcDogJ3NvbGlkIDFweCAnICsgdGhpcy5nZXRUaGVtZSgpLmJvcmRlckNvbG9yLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXJNaW5pLFxuICAgICAgICBtYXJnaW5Ub3A6IGd1dHRlck1pbmlcbiAgICAgIH0sXG4gICAgICByb290V2hlbkZpcnN0Q2hpbGQ6IHtcbiAgICAgICAgaGVpZ2h0OiBzdWJoZWFkZXJIZWlnaHQsXG4gICAgICAgIGJvcmRlclRvcDogJ25vbmUnLFxuICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICBtYXJnaW5Ub3A6IDBcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHtcbiAgICAgICAga2V5OiB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeCh0aGlzLmdldFN0eWxlcygpLnJvb3QsIHRoaXMucHJvcHMuZmlyc3RDaGlsZCAmJiB0aGlzLmdldFN0eWxlcygpLnJvb3RXaGVuRmlyc3RDaGlsZCwgdGhpcy5wcm9wcy5zdHlsZSkgfSxcbiAgICAgIHRoaXMucHJvcHMudGV4dFxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ViaGVhZGVyTWVudUl0ZW07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIHByb3BUeXBlczoge1xuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6ICcnXG4gICAgfTtcbiAgfSxcblxuICBnZXRDbGFzc2VzOiBmdW5jdGlvbiBnZXRDbGFzc2VzKGluaXRpYWxDbGFzc2VzLCBhZGRpdGlvbmFsQ2xhc3NPYmopIHtcbiAgICB2YXIgY2xhc3NTdHJpbmcgPSAnJztcblxuICAgIC8vSW5pdGlhbGl6ZSB0aGUgY2xhc3NTdHJpbmcgd2l0aCB0aGUgY2xhc3NOYW1lcyB0aGF0IHdlcmUgcGFzc2VkIGluXG4gICAgaWYgKHRoaXMucHJvcHMuY2xhc3NOYW1lLmxlbmd0aCkgY2xhc3NTdHJpbmcgKz0gJyAnICsgdGhpcy5wcm9wcy5jbGFzc05hbWU7XG5cbiAgICAvL0FkZCBpbiBpbml0aWFsIGNsYXNzZXNcbiAgICBpZiAodHlwZW9mIGluaXRpYWxDbGFzc2VzID09PSAnb2JqZWN0Jykge1xuICAgICAgY2xhc3NTdHJpbmcgKz0gJyAnICsgY2xhc3NOYW1lcyhpbml0aWFsQ2xhc3Nlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzU3RyaW5nICs9ICcgJyArIGluaXRpYWxDbGFzc2VzO1xuICAgIH1cblxuICAgIC8vQWRkIGluIGFkZGl0aW9uYWwgY2xhc3Nlc1xuICAgIGlmIChhZGRpdGlvbmFsQ2xhc3NPYmopIGNsYXNzU3RyaW5nICs9ICcgJyArIGNsYXNzTmFtZXMoYWRkaXRpb25hbENsYXNzT2JqKTtcblxuICAgIC8vQ29udmVydCB0aGUgY2xhc3Mgc3RyaW5nIGludG8gYW4gb2JqZWN0IGFuZCBydW4gaXQgdGhyb3VnaCB0aGUgY2xhc3Mgc2V0XG4gICAgcmV0dXJuIGNsYXNzTmFtZXModGhpcy5nZXRDbGFzc1NldChjbGFzc1N0cmluZykpO1xuICB9LFxuXG4gIGdldENsYXNzU2V0OiBmdW5jdGlvbiBnZXRDbGFzc1NldChjbGFzc1N0cmluZykge1xuICAgIHZhciBjbGFzc09iaiA9IHt9O1xuXG4gICAgaWYgKGNsYXNzU3RyaW5nKSB7XG4gICAgICBjbGFzc1N0cmluZy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoY2xhc3NOYW1lKSBjbGFzc09ialtjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc09iajtcbiAgfVxuXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcbnZhciBEb20gPSByZXF1aXJlKCcuLi91dGlscy9kb20nKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLy9XaGVuIHRoZSBjb21wb25lbnQgbW91bnRzLCBsaXN0ZW4gdG8gY2xpY2sgZXZlbnRzIGFuZCBjaGVjayBpZiB3ZSBuZWVkIHRvXG4gIC8vQ2FsbCB0aGUgY29tcG9uZW50Q2xpY2tBd2F5IGZ1bmN0aW9uLlxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLm1hbnVhbGx5QmluZENsaWNrQXdheSkgdGhpcy5fYmluZENsaWNrQXdheSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl91bmJpbmRDbGlja0F3YXkoKTtcbiAgfSxcblxuICBfY2hlY2tDbGlja0F3YXk6IGZ1bmN0aW9uIF9jaGVja0NsaWNrQXdheShlKSB7XG4gICAgdmFyIGVsID0gUmVhY3QuZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0IGlzIGluc2lkZSB0aGUgY3VycmVudCBjb21wb25lbnRcbiAgICBpZiAoZS50YXJnZXQgIT0gZWwgJiYgIURvbS5pc0Rlc2NlbmRhbnQoZWwsIGUudGFyZ2V0KSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICBpZiAodGhpcy5jb21wb25lbnRDbGlja0F3YXkpIHRoaXMuY29tcG9uZW50Q2xpY2tBd2F5KCk7XG4gICAgfVxuICB9LFxuXG4gIF9iaW5kQ2xpY2tBd2F5OiBmdW5jdGlvbiBfYmluZENsaWNrQXdheSgpIHtcbiAgICAvLyBPbiB0b3VjaC1lbmFibGVkIGRldmljZXMsIGJvdGggZXZlbnRzIGZpcmUsIGFuZCB0aGUgaGFuZGxlciBpcyBjYWxsZWQgdHdpY2UsXG4gICAgLy8gYnV0IGl0J3MgZmluZSBzaW5jZSBhbGwgb3BlcmF0aW9ucyBmb3Igd2hpY2ggdGhlIG1peGluIGlzIHVzZWRcbiAgICAvLyBhcmUgaWRlbXBvdGVudC5cbiAgICBFdmVudHMub24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fY2hlY2tDbGlja0F3YXkpO1xuICAgIEV2ZW50cy5vbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fY2hlY2tDbGlja0F3YXkpO1xuICB9LFxuXG4gIF91bmJpbmRDbGlja0F3YXk6IGZ1bmN0aW9uIF91bmJpbmRDbGlja0F3YXkoKSB7XG4gICAgRXZlbnRzLm9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9jaGVja0NsaWNrQXdheSk7XG4gICAgRXZlbnRzLm9mZihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fY2hlY2tDbGlja0F3YXkpO1xuICB9XG5cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vc3R5bGVzL2F1dG8tcHJlZml4Jyk7XG52YXIgRXh0ZW5kID0gcmVxdWlyZSgnLi4vdXRpbHMvZXh0ZW5kJyk7XG5cbi8qKlxuICpcdEBwYXJhbXM6XG4gKlx0c3R5bGVzID0gQ3VycmVudCBzdHlsZXMuXG4gKiAgcHJvcHMgPSBOZXcgc3R5bGUgcHJvcGVydGllcyB0aGF0IHdpbGwgb3ZlcnJpZGUgdGhlIGN1cnJlbnQgc3R5bGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIHByb3BUeXBlczoge1xuICAgIHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgbWVyZ2VTdHlsZXM6IGZ1bmN0aW9uIG1lcmdlU3R5bGVzKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICB2YXIgYmFzZSA9IGFyZ3NbMF07XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJnc1tpXSkgYmFzZSA9IEV4dGVuZChiYXNlLCBhcmdzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG4gIH0sXG5cbiAgLyoqIFxuICAgKiBsb29wcyB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIGZpcnN0IGFyZ3VtZW50LCBzbyBvdmVycmlkZXNcbiAgICogb2YgdW5kZWZpbmVkIHByb3BlcnRpZXMgd2lsbCBub3QgdGFrZSBwbGFjZS5cbiAgICovXG4gIG1lcmdlQW5kUHJlZml4OiBmdW5jdGlvbiBtZXJnZUFuZFByZWZpeCgpIHtcbiAgICB2YXIgbWVyZ2VkU3R5bGVzID0gdGhpcy5tZXJnZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBBdXRvUHJlZml4LmFsbChtZXJnZWRTdHlsZXMpO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50cycpO1xuXG52YXIgU2l6ZXMgPSB7XG4gIFNNQUxMOiAxLFxuICBNRURJVU06IDIsXG4gIExBUkdFOiAzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBzdGF0aWNzOiB7XG4gICAgU2l6ZXM6IFNpemVzXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRldmljZVNpemU6IFNpemVzLlNNQUxMXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fdXBkYXRlRGV2aWNlU2l6ZSgpO1xuICAgIGlmICghdGhpcy5tYW51YWxseUJpbmRSZXNpemUpIHRoaXMuX2JpbmRSZXNpemUoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fdW5iaW5kUmVzaXplKCk7XG4gIH0sXG5cbiAgaXNEZXZpY2VTaXplOiBmdW5jdGlvbiBpc0RldmljZVNpemUoZGVzaXJlZFNpemUpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5kZXZpY2VTaXplID49IGRlc2lyZWRTaXplO1xuICB9LFxuXG4gIF91cGRhdGVEZXZpY2VTaXplOiBmdW5jdGlvbiBfdXBkYXRlRGV2aWNlU2l6ZSgpIHtcbiAgICB2YXIgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBpZiAod2lkdGggPj0gOTkyKSB0aGlzLnNldFN0YXRlKHsgZGV2aWNlU2l6ZTogU2l6ZXMuTEFSR0UgfSk7ZWxzZSBpZiAod2lkdGggPj0gNzY4KSB0aGlzLnNldFN0YXRlKHsgZGV2aWNlU2l6ZTogU2l6ZXMuTUVESVVNIH0pO2Vsc2UgdGhpcy5zZXRTdGF0ZSh7IGRldmljZVNpemU6IFNpemVzLlNNQUxMIH0pOyAvLyB3aWR0aCA+PSAzNzVcbiAgfSxcblxuICBfYmluZFJlc2l6ZTogZnVuY3Rpb24gX2JpbmRSZXNpemUoKSB7XG4gICAgRXZlbnRzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZURldmljZVNpemUpO1xuICB9LFxuXG4gIF91bmJpbmRSZXNpemU6IGZ1bmN0aW9uIF91bmJpbmRSZXNpemUoKSB7XG4gICAgRXZlbnRzLm9mZih3aW5kb3csICdyZXNpemUnLCB0aGlzLl91cGRhdGVEZXZpY2VTaXplKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLndpbmRvd0xpc3RlbmVycztcblxuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBjYWxsYmFja05hbWUgPSBsaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICAgIEV2ZW50cy5vbih3aW5kb3csIGV2ZW50TmFtZSwgdGhpc1tjYWxsYmFja05hbWVdKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLndpbmRvd0xpc3RlbmVycztcblxuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBjYWxsYmFja05hbWUgPSBsaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICAgIEV2ZW50cy5vZmYod2luZG93LCBldmVudE5hbWUsIHRoaXNbY2FsbGJhY2tOYW1lXSk7XG4gICAgfVxuICB9XG5cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4vc3R5bGVzL2NvbG9ycycpO1xuXG52YXIgT3ZlcmxheSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdPdmVybGF5JyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBzaG93OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBhdXRvTG9ja1Njcm9sbGluZzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdHJhbnNpdGlvbkVuYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF1dG9Mb2NrU2Nyb2xsaW5nOiB0cnVlLFxuICAgICAgdHJhbnNpdGlvbkVuYWJsZWQ6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Mb2NrU2Nyb2xsaW5nKSB0aGlzLnByb3BzLnNob3cgPyB0aGlzLl9wcmV2ZW50U2Nyb2xsaW5nKCkgOiB0aGlzLl9hbGxvd1Njcm9sbGluZygpO1xuICB9LFxuXG4gIHNldE9wYWNpdHk6IGZ1bmN0aW9uIHNldE9wYWNpdHkob3BhY2l0eSkge1xuICAgIHZhciBvdmVybGF5ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcyk7XG4gICAgb3ZlcmxheS5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHpJbmRleDogOSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAnLTEwMCUnLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5saWdodEJsYWNrLFxuICAgICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxuXG4gICAgICAgIC8vIFR3byB3YXlzIHRvIHByb21vdGUgb3ZlcmxheSB0byBpdHMgb3duIHJlbmRlciBsYXllclxuICAgICAgICB3aWxsQ2hhbmdlOiAnb3BhY2l0eScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuXG4gICAgICAgIHRyYW5zaXRpb246IHRoaXMucHJvcHMudHJhbnNpdGlvbkVuYWJsZWQgJiYgVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ2xlZnQnLCAnNDAwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQwMG1zJywgJ29wYWNpdHknKVxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuU2hvd246IHtcbiAgICAgICAgbGVmdDogJzAnLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGlzLnByb3BzLnRyYW5zaXRpb25FbmFibGVkICYmIFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICdsZWZ0JykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JylcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHNob3cgPSBfcHJvcHMuc2hvdztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3Nob3cnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh0aGlzLmdldFN0eWxlcygpLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUsIHRoaXMucHJvcHMuc2hvdyAmJiB0aGlzLmdldFN0eWxlcygpLnJvb3RXaGVuU2hvd24pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogc3R5bGVzIH0pKTtcbiAgfSxcblxuICBwcmV2ZW50U2Nyb2xsaW5nOiBmdW5jdGlvbiBwcmV2ZW50U2Nyb2xsaW5nKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5hdXRvTG9ja1Njcm9sbGluZykgdGhpcy5fcHJldmVudFNjcm9sbGluZygpO1xuICB9LFxuXG4gIGFsbG93U2Nyb2xsaW5nOiBmdW5jdGlvbiBhbGxvd1Njcm9sbGluZygpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuYXV0b0xvY2tTY3JvbGxpbmcpIHRoaXMuX2FsbG93U2Nyb2xsaW5nKCk7XG4gIH0sXG5cbiAgX3ByZXZlbnRTY3JvbGxpbmc6IGZ1bmN0aW9uIF9wcmV2ZW50U2Nyb2xsaW5nKCkge1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIH0sXG5cbiAgX2FsbG93U2Nyb2xsaW5nOiBmdW5jdGlvbiBfYWxsb3dTY3JvbGxpbmcoKSB7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgIGJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPdmVybGF5OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBQYXBlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdQYXBlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjaXJjbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHJvdW5kZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHpEZXB0aDogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFswLCAxLCAyLCAzLCA0LCA1XSksXG4gICAgdHJhbnNpdGlvbkVuYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdW5kZWQ6IHRydWUsXG4gICAgICB6RGVwdGg6IDEsXG4gICAgICB0cmFuc2l0aW9uRW5hYmxlZDogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnBhcGVyLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgdHJhbnNpdGlvbjogdGhpcy5wcm9wcy50cmFuc2l0aW9uRW5hYmxlZCAmJiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29udGVudEZvbnRGYW1pbHksXG4gICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIGJveFNoYWRvdzogdGhpcy5fZ2V0WkRlcHRoU2hhZG93cyh0aGlzLnByb3BzLnpEZXB0aCksXG4gICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5jaXJjbGUgPyAnNTAlJyA6IHRoaXMucHJvcHMucm91bmRlZCA/ICcycHgnIDogJzBweCdcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciBjaXJjbGUgPSBfcHJvcHMuY2lyY2xlO1xuICAgIHZhciByb3VuZGVkID0gX3Byb3BzLnJvdW5kZWQ7XG4gICAgdmFyIHpEZXB0aCA9IF9wcm9wcy56RGVwdGg7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3N0eWxlJywgJ2NpcmNsZScsICdyb3VuZGVkJywgJ3pEZXB0aCddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSkgfSksXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0WkRlcHRoU2hhZG93czogZnVuY3Rpb24gX2dldFpEZXB0aFNoYWRvd3MoekRlcHRoKSB7XG4gICAgdmFyIHNoYWRvd3MgPSBbJycsICcwIDFweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCAxcHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNCknLCAnMCAzcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTYpLCAwIDNweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yMyknLCAnMCAxMHB4IDMwcHggcmdiYSgwLCAwLCAwLCAwLjE5KSwgMCA2cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMjMpJywgJzAgMTRweCA0NXB4IHJnYmEoMCwgMCwgMCwgMC4yNSksIDAgMTBweCAxOHB4IHJnYmEoMCwgMCwgMCwgMC4yMiknLCAnMCAxOXB4IDYwcHggcmdiYSgwLCAwLCAwLCAwLjMwKSwgMCAxNXB4IDIwcHggcmdiYSgwLCAwLCAwLCAwLjIyKSddO1xuXG4gICAgcmV0dXJuIHNoYWRvd3NbekRlcHRoXTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXBlcjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSYWRpb0J1dHRvbiA9IHJlcXVpcmUoJy4vcmFkaW8tYnV0dG9uJyk7XG5cbnZhciBSYWRpb0J1dHRvbkdyb3VwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JhZGlvQnV0dG9uR3JvdXAnLFxuXG4gIHByb3BUeXBlczoge1xuICAgIG5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZVNlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlZmF1bHRTZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbFBvc2l0aW9uOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLFxuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIF9oYXNDaGVja0F0dHJpYnV0ZTogZnVuY3Rpb24gX2hhc0NoZWNrQXR0cmlidXRlKHJhZGlvQnV0dG9uKSB7XG4gICAgcmV0dXJuIHJhZGlvQnV0dG9uLnByb3BzLmhhc093blByb3BlcnR5KCdjaGVja2VkJykgJiYgcmFkaW9CdXR0b24ucHJvcHMuY2hlY2tlZDtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyQ2hlY2tlZFJhZGlvQnV0dG9uczogMCxcbiAgICAgIHNlbGVjdGVkOiB0aGlzLnByb3BzLnZhbHVlU2VsZWN0ZWQgfHwgdGhpcy5wcm9wcy5kZWZhdWx0U2VsZWN0ZWQgfHwgJydcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBjbnQgPSAwO1xuXG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICBpZiAodGhpcy5faGFzQ2hlY2tBdHRyaWJ1dGUob3B0aW9uKSkgY250Kys7XG4gICAgfSwgdGhpcyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgbnVtYmVyQ2hlY2tlZFJhZGlvQnV0dG9uczogY250IH0pO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVTZWxlY3RlZCcpKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWQ6IG5leHRQcm9wcy52YWx1ZVNlbGVjdGVkIH0pO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgIHZhciBvcHRpb25zID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgIHZhciBfb3B0aW9uJHByb3BzID0gb3B0aW9uLnByb3BzO1xuICAgICAgdmFyIG5hbWUgPSBfb3B0aW9uJHByb3BzLm5hbWU7XG4gICAgICB2YXIgdmFsdWUgPSBfb3B0aW9uJHByb3BzLnZhbHVlO1xuICAgICAgdmFyIGxhYmVsID0gX29wdGlvbiRwcm9wcy5sYWJlbDtcbiAgICAgIHZhciBvbkNoZWNrID0gX29wdGlvbiRwcm9wcy5vbkNoZWNrO1xuXG4gICAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX29wdGlvbiRwcm9wcywgWyduYW1lJywgJ3ZhbHVlJywgJ2xhYmVsJywgJ29uQ2hlY2snXSk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJhZGlvQnV0dG9uLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiBvcHRpb24ucHJvcHMudmFsdWUsXG4gICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAga2V5OiBvcHRpb24ucHJvcHMudmFsdWUsXG4gICAgICAgIHZhbHVlOiBvcHRpb24ucHJvcHMudmFsdWUsXG4gICAgICAgIGxhYmVsOiBvcHRpb24ucHJvcHMubGFiZWwsXG4gICAgICAgIGxhYmVsUG9zaXRpb246IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbixcbiAgICAgICAgb25DaGVjazogdGhpcy5fb25DaGFuZ2UsXG4gICAgICAgIGNoZWNrZWQ6IG9wdGlvbi5wcm9wcy52YWx1ZSA9PSB0aGlzLnN0YXRlLnNlbGVjdGVkIH0pKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8ICcnIH0sXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfSxcblxuICBfdXBkYXRlUmFkaW9CdXR0b25zOiBmdW5jdGlvbiBfdXBkYXRlUmFkaW9CdXR0b25zKG5ld1NlbGVjdGlvbikge1xuICAgIGlmICh0aGlzLnN0YXRlLm51bWJlckNoZWNrZWRSYWRpb0J1dHRvbnMgPT09IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZDogbmV3U2VsZWN0aW9uIH0pO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnQ2Fubm90IHNlbGVjdCBhIGRpZmZlcmVudCByYWRpbyBidXR0b24gd2hpbGUgYW5vdGhlciByYWRpbyBidXR0b24gJyArICdoYXMgdGhlIFxcJ2NoZWNrZWRcXCcgcHJvcGVydHkgc2V0IHRvIHRydWUuJztcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICB9LFxuXG4gIF9vbkNoYW5nZTogZnVuY3Rpb24gX29uQ2hhbmdlKGUsIG5ld1NlbGVjdGlvbikge1xuICAgIHRoaXMuX3VwZGF0ZVJhZGlvQnV0dG9ucyhuZXdTZWxlY3Rpb24pO1xuXG4gICAgLy8gU3VjY2Vzc2Z1bCB1cGRhdGVcbiAgICBpZiAodGhpcy5zdGF0ZS5udW1iZXJDaGVja2VkUmFkaW9CdXR0b25zID09PSAwKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShlLCBuZXdTZWxlY3Rpb24pO1xuICAgIH1cbiAgfSxcblxuICBnZXRTZWxlY3RlZFZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3RlZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnNlbGVjdGVkO1xuICB9LFxuXG4gIHNldFNlbGVjdGVkVmFsdWU6IGZ1bmN0aW9uIHNldFNlbGVjdGVkVmFsdWUobmV3U2VsZWN0aW9uVmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVSYWRpb0J1dHRvbnMobmV3U2VsZWN0aW9uVmFsdWUpO1xuICB9LFxuXG4gIGNsZWFyVmFsdWU6IGZ1bmN0aW9uIGNsZWFyVmFsdWUoKSB7XG4gICAgdGhpcy5zZXRTZWxlY3RlZFZhbHVlKCcnKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSYWRpb0J1dHRvbkdyb3VwOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBFbmhhbmNlZFN3aXRjaCA9IHJlcXVpcmUoJy4vZW5oYW5jZWQtc3dpdGNoJyk7XG52YXIgUmFkaW9CdXR0b25PZmYgPSByZXF1aXJlKCcuL3N2Zy1pY29ucy90b2dnbGUtcmFkaW8tYnV0dG9uLW9mZicpO1xudmFyIFJhZGlvQnV0dG9uT24gPSByZXF1aXJlKCcuL3N2Zy1pY29ucy90b2dnbGUtcmFkaW8tYnV0dG9uLW9uJyk7XG5cbnZhciBSYWRpb0J1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSYWRpb0J1dHRvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNoZWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5yYWRpb0J1dHRvbjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgaWNvbjoge1xuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5zaXplLFxuICAgICAgICB3aWR0aDogdGhpcy5nZXRUaGVtZSgpLnNpemVcbiAgICAgIH0sXG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5jaGVja2VkQ29sb3JcbiAgICAgIH0sXG4gICAgICB0YXJnZXRXaGVuQ2hlY2tlZDoge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSdcbiAgICAgIH0sXG4gICAgICBmaWxsV2hlbkNoZWNrZWQ6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgdGFyZ2V0V2hlbkRpc2FibGVkOiB7XG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5kaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgZmlsbFdoZW5EaXNhYmxlZDoge1xuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmRpc2FibGVkID8gdGhpcy5nZXRUaGVtZSgpLmxhYmVsRGlzYWJsZWRDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5sYWJlbENvbG9yXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBvbkNoZWNrID0gX3Byb3BzLm9uQ2hlY2s7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ29uQ2hlY2snXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgb25TdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50YXJnZXQsIHRoaXMucHJvcHMuY2hlY2tlZCAmJiBzdHlsZXMudGFyZ2V0V2hlbkNoZWNrZWQsIHRoaXMucHJvcHMuaWNvblN0eWxlLCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy50YXJnZXRXaGVuRGlzYWJsZWQpO1xuICAgIHZhciBvZmZTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5maWxsLCB0aGlzLnByb3BzLmNoZWNrZWQgJiYgc3R5bGVzLmZpbGxXaGVuQ2hlY2tlZCwgdGhpcy5wcm9wcy5pY29uU3R5bGUsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLmZpbGxXaGVuRGlzYWJsZWQpO1xuXG4gICAgdmFyIHJhZGlvQnV0dG9uRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJhZGlvQnV0dG9uT2ZmLCB7IHN0eWxlOiBvblN0eWxlcyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFkaW9CdXR0b25PbiwgeyBzdHlsZTogb2ZmU3R5bGVzIH0pXG4gICAgKTtcblxuICAgIHZhciByaXBwbGVDb2xvciA9IHRoaXMucHJvcHMuY2hlY2tlZCA/IHRoaXMuZ2V0VGhlbWUoKS5jaGVja2VkQ29sb3IgOiB0aGlzLmdldFRoZW1lKCkuYm9yZGVyQ29sb3I7XG5cbiAgICB2YXIgaWNvblN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgdGhpcy5wcm9wcy5pY29uU3R5bGUpO1xuXG4gICAgdmFyIGxhYmVsU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5sYWJlbCwgdGhpcy5wcm9wcy5sYWJlbFN0eWxlKTtcblxuICAgIHZhciBlbmhhbmNlZFN3aXRjaFByb3BzID0ge1xuICAgICAgcmVmOiAnZW5oYW5jZWRTd2l0Y2gnLFxuICAgICAgaW5wdXRUeXBlOiAncmFkaW8nLFxuICAgICAgc3dpdGNoZWQ6IHRoaXMucHJvcHMuY2hlY2tlZCB8fCBmYWxzZSxcbiAgICAgIHN3aXRjaEVsZW1lbnQ6IHJhZGlvQnV0dG9uRWxlbWVudCxcbiAgICAgIHJpcHBsZUNvbG9yOiByaXBwbGVDb2xvcixcbiAgICAgIGljb25TdHlsZTogaWNvblN0eWxlLFxuICAgICAgbGFiZWxTdHlsZTogbGFiZWxTdHlsZSxcbiAgICAgIG9uU3dpdGNoOiB0aGlzLl9oYW5kbGVDaGVjayxcbiAgICAgIG9uUGFyZW50U2hvdWxkVXBkYXRlOiB0aGlzLl9oYW5kbGVTdGF0ZUNoYW5nZSxcbiAgICAgIGxhYmVsUG9zaXRpb246IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA/IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA6ICdyaWdodCdcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW5oYW5jZWRTd2l0Y2gsIF9leHRlbmRzKHt9LCBvdGhlciwgZW5oYW5jZWRTd2l0Y2hQcm9wcykpO1xuICB9LFxuXG4gIC8vIE9ubHkgY2FsbGVkIHdoZW4gc2VsZWN0ZWQsIG5vdCB3aGVuIHVuc2VsZWN0ZWQuXG4gIF9oYW5kbGVDaGVjazogZnVuY3Rpb24gX2hhbmRsZUNoZWNrKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoZWNrKSB0aGlzLnByb3BzLm9uQ2hlY2soZSwgdGhpcy5wcm9wcy52YWx1ZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVN0YXRlQ2hhbmdlOiBmdW5jdGlvbiBfaGFuZGxlU3RhdGVDaGFuZ2UoKSB7fSxcblxuICBpc0NoZWNrZWQ6IGZ1bmN0aW9uIGlzQ2hlY2tlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZzLmVuaGFuY2VkU3dpdGNoLmlzU3dpdGNoZWQoKTtcbiAgfSxcblxuICAvLyBVc2UgUmFkaW9CdXR0b25Hcm91cC5zZXRTZWxlY3RlZFZhbHVlKG5ld1NlbGVjdGlvblZhbHVlKSB0byBzZXQgYVxuICAvLyBSYWRpb0J1dHRvbidzIGNoZWNrZWQgdmFsdWUuXG4gIHNldENoZWNrZWQ6IGZ1bmN0aW9uIHNldENoZWNrZWQobmV3Q2hlY2tlZFZhbHVlKSB7XG4gICAgdGhpcy5yZWZzLmVuaGFuY2VkU3dpdGNoLnNldFN3aXRjaGVkKG5ld0NoZWNrZWRWYWx1ZSk7XG4gIH0sXG5cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guZ2V0VmFsdWUoKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSYWRpb0J1dHRvbjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQ29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoJy4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKTtcbnZhciBUeXBvZ3JhcGh5ID0gcmVxdWlyZSgnLi9zdHlsZXMvdHlwb2dyYXBoeScpO1xudmFyIEVuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi9lbmhhbmNlZC1idXR0b24nKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcblxudmFyIFJhaXNlZEJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSYWlzZWRCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBsYWJlbDogZnVuY3Rpb24gbGFiZWwocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgICBpZiAoIXByb3BzLmNoaWxkcmVuICYmICFwcm9wcy5sYWJlbCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdXYXJuaW5nOiBSZXF1aXJlZCBwcm9wIGBsYWJlbGAgb3IgYGNoaWxkcmVuYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uTW91c2VEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlVXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VPdXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG91Y2hFbmQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG91Y2hTdGFydDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgcHJpbWFyeTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2Vjb25kYXJ5OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBsYWJlbFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgdmFyIHpEZXB0aCA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICByZXR1cm4ge1xuICAgICAgekRlcHRoOiB6RGVwdGgsXG4gICAgICBpbml0aWFsWkRlcHRoOiB6RGVwdGgsXG4gICAgICBob3ZlcmVkOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgekRlcHRoID0gbmV4dFByb3BzLmRpc2FibGVkID8gMCA6IDE7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgIGluaXRpYWxaRGVwdGg6IHpEZXB0aFxuICAgIH0pO1xuICB9LFxuXG4gIF9nZXRCYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIF9nZXRCYWNrZ3JvdW5kQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRDb2xvciA6IHRoaXMucHJvcHMucHJpbWFyeSA/IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5Q29sb3IgOiB0aGlzLnByb3BzLnNlY29uZGFyeSA/IHRoaXMuZ2V0VGhlbWUoKS5zZWNvbmRhcnlDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5jb2xvcjtcbiAgfSxcblxuICBfZ2V0TGFiZWxDb2xvcjogZnVuY3Rpb24gX2dldExhYmVsQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRUZXh0Q29sb3IgOiB0aGlzLnByb3BzLnByaW1hcnkgPyB0aGlzLmdldFRoZW1lKCkucHJpbWFyeVRleHRDb2xvciA6IHRoaXMucHJvcHMuc2Vjb25kYXJ5ID8gdGhpcy5nZXRUaGVtZSgpLnNlY29uZGFyeVRleHRDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3I7XG4gIH0sXG5cbiAgZ2V0VGhlbWVCdXR0b246IGZ1bmN0aW9uIGdldFRoZW1lQnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmJ1dHRvbjtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQucmFpc2VkQnV0dG9uO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBhbW91bnQgPSB0aGlzLnByb3BzLnByaW1hcnkgfHwgdGhpcy5wcm9wcy5zZWNvbmRhcnkgPyAwLjQgOiAwLjA4O1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBtaW5XaWR0aDogdGhpcy5nZXRUaGVtZUJ1dHRvbigpLm1pbldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWVCdXR0b24oKS5oZWlnaHQsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKVxuICAgICAgfSxcbiAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKCksXG5cbiAgICAgICAgLy9UaGlzIGlzIG5lZWQgc28gdGhhdCByaXBwbGVzIGRvIG5vdCBibGVlZFxuICAgICAgICAvL3Bhc3QgYm9yZGVyIHJhZGl1cy5cbiAgICAgICAgLy9TZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTcyOTg3MzkvY3NzLW92ZXJmbG93LWhpZGRlbi1ub3Qtd29ya2luZy1pbi1jaHJvbWUtd2hlbi1wYXJlbnQtaGFzLWJvcmRlci1yYWRpdXMtYW5kLWNoaWxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250V2VpZ2h0OiBUeXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgcGFkZGluZzogJzBweCAnICsgdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MgKyAncHgnLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWVCdXR0b24oKS5oZWlnaHQgKyAncHgnLFxuICAgICAgICBjb2xvcjogdGhpcy5fZ2V0TGFiZWxDb2xvcigpXG4gICAgICB9LFxuICAgICAgb3ZlcmxheToge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHRvcDogMFxuICAgICAgfSxcbiAgICAgIG92ZXJsYXlXaGVuSG92ZXJlZDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yTWFuaXB1bGF0b3IuZmFkZSh0aGlzLl9nZXRMYWJlbENvbG9yKCksIGFtb3VudClcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkO1xuICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcbiAgICB2YXIgcHJpbWFyeSA9IF9wcm9wcy5wcmltYXJ5O1xuICAgIHZhciBzZWNvbmRhcnkgPSBfcHJvcHMuc2Vjb25kYXJ5O1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydkaXNhYmxlZCcsICdsYWJlbCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGxhYmVsRWxlbWVudDtcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGxhYmVsRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwsIHRoaXMucHJvcHMubGFiZWxTdHlsZSkgfSxcbiAgICAgICAgbGFiZWxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJpcHBsZUNvbG9yID0gc3R5bGVzLmxhYmVsLmNvbG9yO1xuICAgIHZhciByaXBwbGVPcGFjaXR5ID0gIShwcmltYXJ5IHx8IHNlY29uZGFyeSkgPyAwLjEgOiAwLjE2O1xuXG4gICAgdmFyIGJ1dHRvbkV2ZW50SGFuZGxlcnMgPSBkaXNhYmxlZCA/IG51bGwgOiB7XG4gICAgICBvbk1vdXNlRG93bjogdGhpcy5faGFuZGxlTW91c2VEb3duLFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLl9oYW5kbGVNb3VzZVVwLFxuICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQsXG4gICAgICBvbk1vdXNlT3ZlcjogdGhpcy5faGFuZGxlTW91c2VPdmVyLFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlVG91Y2hFbmQsXG4gICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuX2hhbmRsZUtleWJvYXJkRm9jdXNcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBQYXBlcixcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpLFxuICAgICAgICB6RGVwdGg6IHRoaXMuc3RhdGUuekRlcHRoIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBFbmhhbmNlZEJ1dHRvbixcbiAgICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCBidXR0b25FdmVudEhhbmRsZXJzLCB7XG4gICAgICAgICAgcmVmOiAnY29udGFpbmVyJyxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRhaW5lciksXG4gICAgICAgICAgZm9jdXNSaXBwbGVDb2xvcjogcmlwcGxlQ29sb3IsXG4gICAgICAgICAgdG91Y2hSaXBwbGVDb2xvcjogcmlwcGxlQ29sb3IsXG4gICAgICAgICAgZm9jdXNSaXBwbGVPcGFjaXR5OiByaXBwbGVPcGFjaXR5LFxuICAgICAgICAgIHRvdWNoUmlwcGxlT3BhY2l0eTogcmlwcGxlT3BhY2l0eSB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHJlZjogJ292ZXJsYXknLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMub3ZlcmxheSwgdGhpcy5zdGF0ZS5ob3ZlcmVkICYmICF0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5vdmVybGF5V2hlbkhvdmVyZWQpIH0sXG4gICAgICAgICAgbGFiZWxFbGVtZW50LFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy9vbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoICsgMSB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZURvd24pIHRoaXMucHJvcHMub25Nb3VzZURvd24oZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlVXA6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZVVwKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZVVwKSB0aGlzLnByb3BzLm9uTW91c2VVcChlKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dChlKSB7XG4gICAgaWYgKCF0aGlzLnJlZnMuY29udGFpbmVyLmlzS2V5Ym9hcmRGb2N1c2VkKCkpIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCwgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU91dCkgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZU92ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU92ZXIoZSkge1xuICAgIGlmICghdGhpcy5yZWZzLmNvbnRhaW5lci5pc0tleWJvYXJkRm9jdXNlZCgpKSB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlT3ZlcikgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcihlKTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gX2hhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDEgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Ub3VjaFN0YXJ0KSB0aGlzLnByb3BzLm9uVG91Y2hTdGFydChlKTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaEVuZChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uVG91Y2hFbmQpIHRoaXMucHJvcHMub25Ub3VjaEVuZChlKTtcbiAgfSxcblxuICBfaGFuZGxlS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUtleWJvYXJkRm9jdXMoZSwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgaWYgKGtleWJvYXJkRm9jdXNlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoICsgMSB9KTtcbiAgICAgIHZhciBhbW91bnQgPSB0aGlzLnByb3BzLnByaW1hcnkgfHwgdGhpcy5wcm9wcy5zZWNvbmRhcnkgPyAwLjQgOiAwLjA4O1xuICAgICAgUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm92ZXJsYXkpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IENvbG9yTWFuaXB1bGF0b3IuZmFkZSh0aGlzLm1lcmdlQW5kUHJlZml4KHRoaXMuZ2V0U3R5bGVzKCkubGFiZWwsIHRoaXMucHJvcHMubGFiZWxTdHlsZSkuY29sb3IsIGFtb3VudCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZS5ob3ZlcmVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggfSk7XG4gICAgICBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMub3ZlcmxheSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhaXNlZEJ1dHRvbjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY29sb3JzJyk7XG5cbnZhciBSaXBwbGVDaXJjbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmlwcGxlQ2lyY2xlJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvcGFjaXR5OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHN0YXJ0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGVuZGluZzogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3I6IENvbG9ycy5kYXJrQmxhY2tcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjb2xvciA9IF9wcm9wcy5jb2xvcjtcbiAgICB2YXIgc3RhcnRlZCA9IF9wcm9wcy5zdGFydGVkO1xuICAgIHZhciBlbmRpbmcgPSBfcHJvcHMuZW5kaW5nO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29sb3InLCAnc3RhcnRlZCcsICdlbmRpbmcnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBvcGFjaXR5OiB0aGlzLnByb3BzLmVuZGluZyA/IDAgOiB0aGlzLnByb3BzLm9wYWNpdHkgPyB0aGlzLnByb3BzLm9wYWNpdHkgOiAwLjE2LFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIHRyYW5zZm9ybTogdGhpcy5wcm9wcy5zdGFydGVkID8gJ3NjYWxlKDEpJyA6ICdzY2FsZSgwKScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMuY29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcycycsICdvcGFjaXR5JykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCcxcycsICd0cmFuc2Zvcm0nKVxuICAgIH0sIHRoaXMucHJvcHMuc3R5bGUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogc3R5bGVzIH0pKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSaXBwbGVDaXJjbGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4uL3N0eWxlcy9jb2xvcnMnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vc3R5bGVzL2F1dG8tcHJlZml4Jyk7XG5cbnZhciBwdWxzYXRlRHVyYXRpb24gPSA3NTA7XG5cbnZhciBGb2N1c1JpcHBsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdGb2N1c1JpcHBsZScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3BhY2l0eTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBzaG93OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBpbm5lclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbG9yOiBDb2xvcnMuZGFya0JsYWNrXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc2V0UmlwcGxlU2l6ZSgpO1xuICAgIHRoaXMuX3B1bHNhdGUoKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgIHZhciBvdXRlclN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgdHJhbnNmb3JtOiB0aGlzLnByb3BzLnNob3cgPyAnc2NhbGUoMSknIDogJ3NjYWxlKDApJyxcbiAgICAgIG9wYWNpdHk6IHRoaXMucHJvcHMuc2hvdyA/IDEgOiAwXG4gICAgfSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICB2YXIgaW5uZXJTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIG9wYWNpdHk6IHRoaXMucHJvcHMub3BhY2l0eSA/IHRoaXMucHJvcHMub3BhY2l0eSA6IDAuMTYsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMucHJvcHMuY29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KHB1bHNhdGVEdXJhdGlvbiArICdtcycsIG51bGwsIG51bGwsIFRyYW5zaXRpb25zLmVhc2VJbk91dEZ1bmN0aW9uKVxuICAgIH0sIHRoaXMucHJvcHMuaW5uZXJTdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogb3V0ZXJTdHlsZXMgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiAnaW5uZXJDaXJjbGUnLCBzdHlsZTogaW5uZXJTdHlsZXMgfSlcbiAgICApO1xuICB9LFxuXG4gIF9wdWxzYXRlOiBmdW5jdGlvbiBfcHVsc2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkgfHwgIXRoaXMucHJvcHMuc2hvdykgcmV0dXJuO1xuXG4gICAgdmFyIHN0YXJ0U2NhbGUgPSAnc2NhbGUoMC43NSknO1xuICAgIHZhciBlbmRTY2FsZSA9ICdzY2FsZSgwLjg1KSc7XG4gICAgdmFyIGlubmVyQ2lyY2xlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmlubmVyQ2lyY2xlKTtcbiAgICB2YXIgY3VycmVudFNjYWxlID0gaW5uZXJDaXJjbGUuc3R5bGVbQXV0b1ByZWZpeC5zaW5nbGUoJ3RyYW5zZm9ybScpXTtcbiAgICB2YXIgbmV4dFNjYWxlO1xuXG4gICAgY3VycmVudFNjYWxlID0gY3VycmVudFNjYWxlIHx8IHN0YXJ0U2NhbGU7XG4gICAgbmV4dFNjYWxlID0gY3VycmVudFNjYWxlID09PSBzdGFydFNjYWxlID8gZW5kU2NhbGUgOiBzdGFydFNjYWxlO1xuXG4gICAgaW5uZXJDaXJjbGUuc3R5bGVbQXV0b1ByZWZpeC5zaW5nbGUoJ3RyYW5zZm9ybScpXSA9IG5leHRTY2FsZTtcbiAgICBzZXRUaW1lb3V0KHRoaXMuX3B1bHNhdGUsIHB1bHNhdGVEdXJhdGlvbik7XG4gIH0sXG5cbiAgX3NldFJpcHBsZVNpemU6IGZ1bmN0aW9uIF9zZXRSaXBwbGVTaXplKCkge1xuICAgIHZhciBlbCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBoZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIHdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgdmFyIHNpemUgPSBNYXRoLm1heChoZWlnaHQsIHdpZHRoKTtcblxuICAgIGVsLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnO1xuICAgIGVsLnN0eWxlLnRvcCA9IHNpemUgLyAyICogLTEgKyBoZWlnaHQgLyAyICsgJ3B4JztcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb2N1c1JpcHBsZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIERvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xudmFyIFJpcHBsZUNpcmNsZSA9IHJlcXVpcmUoJy4vY2lyY2xlJyk7XG52YXIgVG91Y2hSaXBwbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG91Y2hSaXBwbGUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNlbnRlclJpcHBsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3BhY2l0eTogUmVhY3QuUHJvcFR5cGVzLm51bWJlclxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByaXBwbGVzOiBbe1xuICAgICAgICBrZXk6IDAsXG4gICAgICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuICAgICAgICBlbmRpbmc6IGZhbHNlXG4gICAgICB9XVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDBcbiAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5faGFuZGxlTW91c2VVcCxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuX2hhbmRsZU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQsXG4gICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5faGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlVG91Y2hFbmQgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMgfSxcbiAgICAgICAgdGhpcy5fZ2V0UmlwcGxlRWxlbWVudHMoKVxuICAgICAgKSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChlLCBpc1JpcHBsZVRvdWNoR2VuZXJhdGVkKSB7XG4gICAgdmFyIHJpcHBsZXMgPSB0aGlzLnN0YXRlLnJpcHBsZXM7XG4gICAgdmFyIG5leHRLZXkgPSByaXBwbGVzW3JpcHBsZXMubGVuZ3RoIC0gMV0ua2V5ICsgMTtcbiAgICB2YXIgc3R5bGUgPSAhdGhpcy5wcm9wcy5jZW50ZXJSaXBwbGUgPyB0aGlzLl9nZXRSaXBwbGVTdHlsZShlKSA6IHt9O1xuICAgIHZhciByaXBwbGU7XG5cbiAgICAvL0RvIG5vdGhpbmcgaWYgd2UncmUgc3RhcnRpbmcgYSBjbGljay1ldmVudC1nZW5lcmF0ZWQgcmlwcGxlXG4gICAgLy93aGlsZSBoYXZpbmcgdG91Y2gtZ2VuZXJhdGVkIHJpcHBsZXNcbiAgICBpZiAoIWlzUmlwcGxlVG91Y2hHZW5lcmF0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmlwcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmlwcGxlc1tpXS50b3VjaEdlbmVyYXRlZCkgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vU3RhcnQgdGhlIG5leHQgdW5zdGFydGVkIHJpcHBsZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmlwcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmlwcGxlID0gcmlwcGxlc1tpXTtcbiAgICAgIGlmICghcmlwcGxlLnN0YXJ0ZWQpIHtcbiAgICAgICAgcmlwcGxlLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICByaXBwbGUudG91Y2hHZW5lcmF0ZWQgPSBpc1JpcHBsZVRvdWNoR2VuZXJhdGVkO1xuICAgICAgICByaXBwbGUuc3R5bGUgPSBzdHlsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9BZGQgYW4gdW5zdGFydGVkIHJpcHBsZSBhdCB0aGUgZW5kXG4gICAgcmlwcGxlcy5wdXNoKHtcbiAgICAgIGtleTogbmV4dEtleSxcbiAgICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuICAgICAgZW5kaW5nOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy9SZS1yZW5kZXJcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHJpcHBsZXM6IHJpcHBsZXNcbiAgICB9KTtcbiAgfSxcblxuICBlbmQ6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICB2YXIgcmlwcGxlcyA9IHRoaXMuc3RhdGUucmlwcGxlcztcbiAgICB2YXIgcmlwcGxlO1xuICAgIHZhciBlbmRpbmdSaXBwbGU7XG5cbiAgICAvL0VuZCB0aGUgdGhlIG5leHQgdW4tZW5kZWQgcmlwcGxlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByaXBwbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByaXBwbGUgPSByaXBwbGVzW2ldO1xuICAgICAgaWYgKHJpcHBsZS5zdGFydGVkICYmICFyaXBwbGUuZW5kaW5nKSB7XG4gICAgICAgIHJpcHBsZS5lbmRpbmcgPSB0cnVlO1xuICAgICAgICBlbmRpbmdSaXBwbGUgPSByaXBwbGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vT25seSB1cGRhdGUgaWYgYSByaXBwbGUgd2FzIGZvdW5kXG4gICAgaWYgKGVuZGluZ1JpcHBsZSkge1xuICAgICAgLy9SZS1yZW5kZXJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICByaXBwbGVzOiByaXBwbGVzXG4gICAgICB9KTtcblxuICAgICAgLy9XYWl0IDIgc2Vjb25kcyBhbmQgcmVtb3ZlIHRoZSByaXBwbGUgZnJvbSBET01cbiAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmlwcGxlcy5zaGlmdCgpO1xuICAgICAgICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcmlwcGxlczogcmlwcGxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KS5iaW5kKHRoaXMpLCAyMDAwKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy9vbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkgdGhpcy5zdGFydChlLCBmYWxzZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlVXA6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZVVwKCkge1xuICAgIHRoaXMuZW5kKCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdXQoKSB7XG4gICAgdGhpcy5lbmQoKTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gX2hhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgIHRoaXMuc3RhcnQoZSwgdHJ1ZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hFbmQoKSB7XG4gICAgdGhpcy5lbmQoKTtcbiAgfSxcblxuICBfZ2V0UmlwcGxlU3R5bGU6IGZ1bmN0aW9uIF9nZXRSaXBwbGVTdHlsZShlKSB7XG4gICAgdmFyIHN0eWxlID0ge307XG4gICAgdmFyIGVsID0gUmVhY3QuZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGVsSGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciBlbFdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgdmFyIG9mZnNldCA9IERvbS5vZmZzZXQoZWwpO1xuICAgIHZhciBpc1RvdWNoRXZlbnQgPSBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aDtcbiAgICB2YXIgcGFnZVggPSBpc1RvdWNoRXZlbnQgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgIHZhciBwYWdlWSA9IGlzVG91Y2hFdmVudCA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgdmFyIHBvaW50ZXJYID0gcGFnZVggLSBvZmZzZXQubGVmdDtcbiAgICB2YXIgcG9pbnRlclkgPSBwYWdlWSAtIG9mZnNldC50b3A7XG4gICAgdmFyIHRvcExlZnREaWFnID0gdGhpcy5fY2FsY0RpYWcocG9pbnRlclgsIHBvaW50ZXJZKTtcbiAgICB2YXIgdG9wUmlnaHREaWFnID0gdGhpcy5fY2FsY0RpYWcoZWxXaWR0aCAtIHBvaW50ZXJYLCBwb2ludGVyWSk7XG4gICAgdmFyIGJvdFJpZ2h0RGlhZyA9IHRoaXMuX2NhbGNEaWFnKGVsV2lkdGggLSBwb2ludGVyWCwgZWxIZWlnaHQgLSBwb2ludGVyWSk7XG4gICAgdmFyIGJvdExlZnREaWFnID0gdGhpcy5fY2FsY0RpYWcocG9pbnRlclgsIGVsSGVpZ2h0IC0gcG9pbnRlclkpO1xuICAgIHZhciByaXBwbGVSYWRpdXMgPSBNYXRoLm1heCh0b3BMZWZ0RGlhZywgdG9wUmlnaHREaWFnLCBib3RSaWdodERpYWcsIGJvdExlZnREaWFnKTtcbiAgICB2YXIgcmlwcGxlU2l6ZSA9IHJpcHBsZVJhZGl1cyAqIDI7XG4gICAgdmFyIGxlZnQgPSBwb2ludGVyWCAtIHJpcHBsZVJhZGl1cztcbiAgICB2YXIgdG9wID0gcG9pbnRlclkgLSByaXBwbGVSYWRpdXM7XG5cbiAgICBzdHlsZS5oZWlnaHQgPSByaXBwbGVTaXplICsgJ3B4JztcbiAgICBzdHlsZS53aWR0aCA9IHJpcHBsZVNpemUgKyAncHgnO1xuICAgIHN0eWxlLnRvcCA9IHRvcCArICdweCc7XG4gICAgc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuXG4gIF9jYWxjRGlhZzogZnVuY3Rpb24gX2NhbGNEaWFnKGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICB9LFxuXG4gIF9nZXRSaXBwbGVFbGVtZW50czogZnVuY3Rpb24gX2dldFJpcHBsZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnJpcHBsZXMubWFwKChmdW5jdGlvbiAocmlwcGxlKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSaXBwbGVDaXJjbGUsIHtcbiAgICAgICAga2V5OiByaXBwbGUua2V5LFxuICAgICAgICBzdGFydGVkOiByaXBwbGUuc3RhcnRlZCxcbiAgICAgICAgZW5kaW5nOiByaXBwbGUuZW5kaW5nLFxuICAgICAgICBzdHlsZTogcmlwcGxlLnN0eWxlLFxuICAgICAgICBjb2xvcjogdGhpcy5wcm9wcy5jb2xvcixcbiAgICAgICAgb3BhY2l0eTogdGhpcy5wcm9wcy5vcGFjaXR5IH0pO1xuICAgIH0pLmJpbmQodGhpcykpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvdWNoUmlwcGxlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgVGV4dEZpZWxkID0gcmVxdWlyZSgnLi90ZXh0LWZpZWxkJyk7XG52YXIgRHJvcERvd25NZW51ID0gcmVxdWlyZSgnLi9kcm9wLWRvd24tbWVudScpO1xuXG52YXIgU2VsZWN0RmllbGQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU2VsZWN0RmllbGQnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZXJyb3JUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZsb2F0aW5nTGFiZWxUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhpbnRUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG11bHRpTGluZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb25CbHVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25LZXlEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkVudGVyS2V5RG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICByb3dzOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGlucHV0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZmxvYXRpbmdMYWJlbFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGF1dG9XaWR0aDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVudUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBtZW51SXRlbVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbGVjdGVkSW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHNlbGVjdGZpZWxkOiB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICAgICAgdG9wOiA0LFxuICAgICAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIHRvcDogMjAsXG4gICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgdW5kZXJsaW5lOiB7XG4gICAgICAgICAgYm9yZGVyVG9wOiAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSwgaW5kZXgsIHBheWxvYWQpIHtcbiAgICBlLnRhcmdldC52YWx1ZSA9IHBheWxvYWQ7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UoZSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUZXh0RmllbGQsXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wRG93bk1lbnUsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnNlbGVjdGZpZWxkLnJvb3QsXG4gICAgICAgIGxhYmVsU3R5bGU6IHN0eWxlcy5zZWxlY3RmaWVsZC5sYWJlbCxcbiAgICAgICAgaWNvblN0eWxlOiBzdHlsZXMuc2VsZWN0ZmllbGQuaWNvbixcbiAgICAgICAgdW5kZXJsaW5lU3R5bGU6IHN0eWxlcy5zZWxlY3RmaWVsZC51bmRlcmxpbmUsXG4gICAgICAgIGF1dG9XaWR0aDogZmFsc2VcbiAgICAgIH0pKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEZpZWxkOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBEcmFnZ2FibGUgPSByZXF1aXJlKCdyZWFjdC1kcmFnZ2FibGUyJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucy5qcycpO1xudmFyIEZvY3VzUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZScpO1xuXG52YXIgU2xpZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1NsaWRlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICByZXF1aXJlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG1pbjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBtYXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgc3RlcDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBlcnJvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXNjcmlwdGlvbjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBuYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQmx1cjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25EcmFnU3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRHJhZ1N0b3A6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdFZhbHVlOiAwLFxuICAgICAgc3RlcDogMC4wMSxcbiAgICAgIG1pbjogMCxcbiAgICAgIG1heDogMSxcbiAgICAgIGRyYWdnaW5nOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgdmFsdWUgPSB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICB2YXIgcGVyY2VudCA9ICh2YWx1ZSAtIHRoaXMucHJvcHMubWluKSAvICh0aGlzLnByb3BzLm1heCAtIHRoaXMucHJvcHMubWluKTtcbiAgICBpZiAoaXNOYU4ocGVyY2VudCkpIHBlcmNlbnQgPSAwO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBwZXJjZW50OiBwZXJjZW50LFxuICAgICAgZm9jdXNlZDogZmFsc2UsXG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnNldFZhbHVlKG5leHRQcm9wcy52YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5zbGlkZXI7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZSArIHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemU7XG4gICAgdmFyIGd1dHRlciA9ICh0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZURpc2FibGVkICsgdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZSkgLyAyO1xuICAgIHZhciBmaWxsR3V0dGVyID0gdGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVEaXNhYmxlZCAtIHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemU7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgdG91Y2hDYWxsb3V0OiAnbm9uZScsXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVBY3RpdmUsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBtYXJnaW5Ub3A6IDI0LFxuICAgICAgICBtYXJnaW5Cb3R0b206IDQ4XG4gICAgICB9LFxuICAgICAgdHJhY2s6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogKHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplQWN0aXZlIC0gdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZSkgLyAyLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemVcbiAgICAgIH0sXG4gICAgICBmaWxsZWRBbmRSZW1haW5pbmc6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQobnVsbCwgJ21hcmdpbicpXG4gICAgICB9LFxuICAgICAgcGVyY2VudFplcm9SZW1haW5pbmc6IHtcbiAgICAgICAgbGVmdDogMSxcbiAgICAgICAgbWFyZ2luTGVmdDogZ3V0dGVyXG4gICAgICB9LFxuICAgICAgaGFuZGxlOiB7XG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdpbmhlcml0JyxcbiAgICAgICAgdG9wOiAodGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVBY3RpdmUgLSB0aGlzLmdldFRoZW1lKCkudHJhY2tTaXplKSAvIDIgKyAncHgnLFxuICAgICAgICBsZWZ0OiAnMCUnLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIG1hcmdpbjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZSAvIDIgKyAncHggMCAwIDAnLFxuICAgICAgICB3aWR0aDogdGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemUsXG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdGlvbkNvbG9yLFxuICAgICAgICBiYWNrZ3JvdW5kQ2xpcDogJ3BhZGRpbmctYm94JyxcbiAgICAgICAgYm9yZGVyOiAnMHB4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnYm9yZGVyJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICd3aWR0aCcpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnaGVpZ2h0JyksXG4gICAgICAgIG92ZXJmbG93OiAndmlzaWJsZSdcbiAgICAgIH0sXG4gICAgICBoYW5kbGVXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrQ29sb3IsXG4gICAgICAgIHdpZHRoOiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZURpc2FibGVkLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplRGlzYWJsZWQsXG4gICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCB3aGl0ZSdcbiAgICAgIH0sXG4gICAgICBoYW5kbGVXaGVuUGVyY2VudFplcm86IHtcbiAgICAgICAgYm9yZGVyOiB0aGlzLmdldFRoZW1lKCkudHJhY2tTaXplICsgJ3B4IHNvbGlkICcgKyB0aGlzLmdldFRoZW1lKCkudHJhY2tDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlRmlsbENvbG9yLFxuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIGhhbmRsZVdoZW5BY3RpdmU6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50cmFja0NvbG9yU2VsZWN0ZWQsXG4gICAgICAgIHdpZHRoOiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZUFjdGl2ZSxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZUFjdGl2ZSxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnYmFja2dyb3VuZENvbG9yJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICd3aWR0aCcpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnaGVpZ2h0JylcbiAgICAgIH0sXG4gICAgICByaXBwbGVzOiB7XG4gICAgICAgIGhlaWdodDogJzMwMCUnLFxuICAgICAgICB3aWR0aDogJzMwMCUnLFxuICAgICAgICB0b3A6ICctMTJweCcsXG4gICAgICAgIGxlZnQ6ICctMTJweCdcbiAgICAgIH0sXG4gICAgICBoYW5kbGVXaGVuRGlzYWJsZWRBbmRaZXJvOiB7XG4gICAgICAgIHdpZHRoOiBzaXplIC8gMiArICdweCcsXG4gICAgICAgIGhlaWdodDogc2l6ZSAvIDIgKyAncHgnXG4gICAgICB9LFxuICAgICAgaGFuZGxlV2hlblBlcmNlbnRaZXJvQW5kSG92ZXJlZDoge1xuICAgICAgICBib3JkZXI6IHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemUgKyAncHggc29saWQgJyArIHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVDb2xvclplcm8sXG4gICAgICAgIHdpZHRoOiBzaXplICsgJ3B4JyxcbiAgICAgICAgaGVpZ2h0OiBzaXplICsgJ3B4J1xuICAgICAgfVxuICAgIH07XG4gICAgc3R5bGVzLmZpbGxlZCA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmZpbGxlZEFuZFJlbWFpbmluZywge1xuICAgICAgbGVmdDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5wcm9wcy5kaXNhYmxlZCA/IHRoaXMuZ2V0VGhlbWUoKS50cmFja0NvbG9yIDogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdGlvbkNvbG9yLFxuICAgICAgbWFyZ2luUmlnaHQ6IGZpbGxHdXR0ZXIsXG4gICAgICB3aWR0aDogdGhpcy5zdGF0ZS5wZXJjZW50ICogMTAwICsgKHRoaXMucHJvcHMuZGlzYWJsZWQgPyAtMSA6IDApICsgJyUnXG4gICAgfSk7XG4gICAgc3R5bGVzLnJlbWFpbmluZyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmZpbGxlZEFuZFJlbWFpbmluZywge1xuICAgICAgcmlnaHQ6IDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50cmFja0NvbG9yLFxuICAgICAgbWFyZ2luTGVmdDogZmlsbEd1dHRlcixcbiAgICAgIHdpZHRoOiAoMSAtIHRoaXMuc3RhdGUucGVyY2VudCkgKiAxMDAgKyAodGhpcy5wcm9wcy5kaXNhYmxlZCA/IC0xIDogMCkgKyAnJSdcbiAgICB9KTtcblxuICAgIHN0eWxlcy5wZXJjZW50WmVyb1JlbWFpbmluZy53aWR0aCA9IHN0eWxlcy5yZW1haW5pbmcud2lkdGggLSBzdHlsZXMucGVyY2VudFplcm9SZW1haW5pbmcubGVmdDtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHBlcmNlbnQgPSB0aGlzLnN0YXRlLnBlcmNlbnQ7XG4gICAgaWYgKHBlcmNlbnQgPiAxKSBwZXJjZW50ID0gMTtlbHNlIGlmIChwZXJjZW50IDwgMCkgcGVyY2VudCA9IDA7XG4gICAgdmFyIGd1dHRlciA9ICh0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZURpc2FibGVkICsgdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZSkgLyAyO1xuICAgIHZhciBmaWxsR3V0dGVyID0gdGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVEaXNhYmxlZCAtIHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemU7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgc2xpZGVyU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSk7XG4gICAgdmFyIHRyYWNrU3R5bGVzID0gc3R5bGVzLnRyYWNrO1xuICAgIHZhciBmaWxsZWRTdHlsZXMgPSBzdHlsZXMuZmlsbGVkO1xuICAgIHZhciByZW1haW5pbmdTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yZW1haW5pbmcsIHBlcmNlbnQgPT09IDAgJiYgc3R5bGVzLnBlcmNlbnRaZXJvUmVtYWluaW5nKTtcbiAgICB2YXIgaGFuZGxlU3R5bGVzID0gcGVyY2VudCA9PT0gMCA/IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmhhbmRsZSwgc3R5bGVzLmhhbmRsZVdoZW5QZXJjZW50WmVybywgdGhpcy5zdGF0ZS5hY3RpdmUgJiYgc3R5bGVzLmhhbmRsZVdoZW5BY3RpdmUsIHRoaXMuc3RhdGUuZm9jdXNlZCAmJiB7IG91dGxpbmU6ICdub25lJyB9LCB0aGlzLnN0YXRlLmhvdmVyZWQgJiYgc3R5bGVzLmhhbmRsZVdoZW5QZXJjZW50WmVyb0FuZEhvdmVyZWQsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLmhhbmRsZVdoZW5EaXNhYmxlZEFuZFplcm8pIDogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaGFuZGxlLCB0aGlzLnN0YXRlLmFjdGl2ZSAmJiBzdHlsZXMuaGFuZGxlV2hlbkFjdGl2ZSwgdGhpcy5zdGF0ZS5mb2N1c2VkICYmIHsgb3V0bGluZTogJ25vbmUnIH0sIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLmhhbmRsZVdoZW5EaXNhYmxlZCk7XG5cbiAgICB2YXIgcmlwcGxlU3R5bGUgPSB7IGhlaWdodDogJzEycHgnLCB3aWR0aDogJzEycHgnIH07XG5cbiAgICBpZiAoKHRoaXMuc3RhdGUuaG92ZXJlZCB8fCB0aGlzLnN0YXRlLmZvY3VzZWQpICYmICF0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZW1haW5pbmdTdHlsZXMuYmFja2dyb3VuZENvbG9yID0gdGhpcy5nZXRUaGVtZSgpLnRyYWNrQ29sb3JTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBpZiAocGVyY2VudCA9PT0gMCkgZmlsbGVkU3R5bGVzLm1hcmdpblJpZ2h0ID0gZ3V0dGVyO1xuICAgIGlmICh0aGlzLnN0YXRlLnBlcmNlbnQgPT09IDAgJiYgdGhpcy5zdGF0ZS5hY3RpdmUpIHJlbWFpbmluZ1N0eWxlcy5tYXJnaW5MZWZ0ID0gZmlsbEd1dHRlcjtcblxuICAgIHZhciByaXBwbGVTaG93Q29uZGl0aW9uID0gKHRoaXMuc3RhdGUuaG92ZXJlZCB8fCB0aGlzLnN0YXRlLmZvY3VzZWQpICYmICF0aGlzLnN0YXRlLmFjdGl2ZSAmJiB0aGlzLnN0YXRlLnBlcmNlbnQgIT09IDA7XG4gICAgdmFyIHJpcHBsZUNvbG9yID0gdGhpcy5zdGF0ZS5wZXJjZW50ID09PSAwID8gdGhpcy5nZXRUaGVtZSgpLmhhbmRsZUNvbG9yWmVybyA6IHRoaXMuZ2V0VGhlbWUoKS5yaXBwbGVDb2xvcjtcbiAgICB2YXIgZm9jdXNSaXBwbGU7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmICF0aGlzLnByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSkge1xuICAgICAgZm9jdXNSaXBwbGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEZvY3VzUmlwcGxlLCB7XG4gICAgICAgIHJlZjogJ2ZvY3VzUmlwcGxlJyxcbiAgICAgICAga2V5OiAnZm9jdXNSaXBwbGUnLFxuICAgICAgICBzdHlsZTogcmlwcGxlU3R5bGUsXG4gICAgICAgIGlubmVyU3R5bGU6IHN0eWxlcy5yaXBwbGVzLFxuICAgICAgICBzaG93OiByaXBwbGVTaG93Q29uZGl0aW9uLFxuICAgICAgICBjb2xvcjogcmlwcGxlQ29sb3IgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHRoaXMucHJvcHMuc3R5bGUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ211aS1pbnB1dC1oaWdobGlnaHQnIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnbXVpLWlucHV0LWJhcicgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnbXVpLWlucHV0LWRlc2NyaXB0aW9uJyB9LFxuICAgICAgICB0aGlzLnByb3BzLmRlc2NyaXB0aW9uXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ211aS1pbnB1dC1lcnJvcicgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5lcnJvclxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzbGlkZXJTdHlsZXMsXG4gICAgICAgICAgb25Gb2N1czogdGhpcy5fb25Gb2N1cyxcbiAgICAgICAgICBvbkJsdXI6IHRoaXMuX29uQmx1cixcbiAgICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5fb25Nb3VzZU92ZXIsXG4gICAgICAgICAgb25Nb3VzZU91dDogdGhpcy5fb25Nb3VzZU91dCxcbiAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuX29uTW91c2VVcCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgcmVmOiAndHJhY2snLCBzdHlsZTogdHJhY2tTdHlsZXMgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBmaWxsZWRTdHlsZXMgfSksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogcmVtYWluaW5nU3R5bGVzIH0pLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBEcmFnZ2FibGUsXG4gICAgICAgICAgICB7IGF4aXM6ICd4JywgYm91bmQ6ICdwb2ludCcsXG4gICAgICAgICAgICAgIGNhbmNlbDogdGhpcy5wcm9wcy5kaXNhYmxlZCA/ICcqJyA6IG51bGwsXG4gICAgICAgICAgICAgIHN0YXJ0OiB7IHg6IHBlcmNlbnQgKiAxMDAgKyAnJScgfSxcbiAgICAgICAgICAgICAgY29uc3RyYWluOiB0aGlzLl9jb25zdHJhaW4oKSxcbiAgICAgICAgICAgICAgb25TdGFydDogdGhpcy5fb25EcmFnU3RhcnQsXG4gICAgICAgICAgICAgIG9uU3RvcDogdGhpcy5fb25EcmFnU3RvcCxcbiAgICAgICAgICAgICAgb25EcmFnOiB0aGlzLl9vbkRyYWdVcGRhdGUsXG4gICAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLl9vbk1vdXNlRG93biB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgc3R5bGU6IGhhbmRsZVN0eWxlcywgdGFiSW5kZXg6IDAgfSxcbiAgICAgICAgICAgICAgZm9jdXNSaXBwbGVcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgcmVmOiAnaW5wdXQnLCB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgcmVxdWlyZWQ6IHRoaXMucHJvcHMucmVxdWlyZWQsXG4gICAgICAgIG1pbjogdGhpcy5wcm9wcy5taW4sXG4gICAgICAgIG1heDogdGhpcy5wcm9wcy5tYXgsXG4gICAgICAgIHN0ZXA6IHRoaXMucHJvcHMuc3RlcCB9KVxuICAgICk7XG4gIH0sXG5cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnZhbHVlO1xuICB9LFxuXG4gIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZShpKSB7XG4gICAgLy8gY2FsY3VsYXRlIHBlcmNlbnRhZ2VcbiAgICB2YXIgcGVyY2VudCA9IChpIC0gdGhpcy5wcm9wcy5taW4pIC8gKHRoaXMucHJvcHMubWF4IC0gdGhpcy5wcm9wcy5taW4pO1xuICAgIGlmIChpc05hTihwZXJjZW50KSkgcGVyY2VudCA9IDA7XG4gICAgLy8gdXBkYXRlIHN0YXRlXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB2YWx1ZTogaSxcbiAgICAgIHBlcmNlbnQ6IHBlcmNlbnRcbiAgICB9KTtcbiAgfSxcblxuICBnZXRQZXJjZW50OiBmdW5jdGlvbiBnZXRQZXJjZW50KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnBlcmNlbnQ7XG4gIH0sXG5cbiAgc2V0UGVyY2VudDogZnVuY3Rpb24gc2V0UGVyY2VudChwZXJjZW50KSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fYWxpZ25WYWx1ZSh0aGlzLl9wZXJjZW50VG9WYWx1ZShwZXJjZW50KSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiB2YWx1ZSwgcGVyY2VudDogcGVyY2VudCB9KTtcbiAgfSxcblxuICBjbGVhclZhbHVlOiBmdW5jdGlvbiBjbGVhclZhbHVlKCkge1xuICAgIHRoaXMuc2V0VmFsdWUoMCk7XG4gIH0sXG5cbiAgX2FsaWduVmFsdWU6IGZ1bmN0aW9uIF9hbGlnblZhbHVlKHZhbCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzdGVwID0gX3Byb3BzLnN0ZXA7XG4gICAgdmFyIG1pbiA9IF9wcm9wcy5taW47XG5cbiAgICB2YXIgdmFsTW9kU3RlcCA9ICh2YWwgLSBtaW4pICUgc3RlcDtcbiAgICB2YXIgYWxpZ25WYWx1ZSA9IHZhbCAtIHZhbE1vZFN0ZXA7XG5cbiAgICBpZiAoTWF0aC5hYnModmFsTW9kU3RlcCkgKiAyID49IHN0ZXApIHtcbiAgICAgIGFsaWduVmFsdWUgKz0gdmFsTW9kU3RlcCA+IDAgPyBzdGVwIDogLXN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoYWxpZ25WYWx1ZS50b0ZpeGVkKDUpKTtcbiAgfSxcblxuICBfY29uc3RyYWluOiBmdW5jdGlvbiBfY29uc3RyYWluKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG1pbiA9IF9wcm9wczIubWluO1xuICAgIHZhciBtYXggPSBfcHJvcHMyLm1heDtcbiAgICB2YXIgc3RlcCA9IF9wcm9wczIuc3RlcDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICB2YXIgcGl4ZWxNYXggPSBSZWFjdC5maW5kRE9NTm9kZShfdGhpcy5yZWZzLnRyYWNrKS5jbGllbnRXaWR0aDtcbiAgICAgIHZhciBwaXhlbFN0ZXAgPSBwaXhlbE1heCAvICgobWF4IC0gbWluKSAvIHN0ZXApO1xuXG4gICAgICB2YXIgY3Vyc29yID0gbWluO1xuICAgICAgdmFyIGk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgKG1heCAtIG1pbikgLyBzdGVwOyBpKyspIHtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gcG9zLmxlZnQgLSBjdXJzb3I7XG4gICAgICAgIHZhciBuZXh0RGlzdGFuY2UgPSBjdXJzb3IgKyBwaXhlbFN0ZXAgLSBwb3MubGVmdDtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA+IE1hdGguYWJzKG5leHREaXN0YW5jZSkpIHtcbiAgICAgICAgICBjdXJzb3IgKz0gcGl4ZWxTdGVwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBjdXJzb3JcbiAgICAgIH07XG4gICAgfTtcbiAgfSxcblxuICBfb25Gb2N1czogZnVuY3Rpb24gX29uRm9jdXMoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBmb2N1c2VkOiB0cnVlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uRm9jdXMpIHRoaXMucHJvcHMub25Gb2N1cyhlKTtcbiAgfSxcblxuICBfb25CbHVyOiBmdW5jdGlvbiBfb25CbHVyKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZm9jdXNlZDogZmFsc2UsIGFjdGl2ZTogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgfSxcblxuICBfb25Nb3VzZU92ZXI6IGZ1bmN0aW9uIF9vbk1vdXNlT3ZlcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgfSxcblxuICBfb25Nb3VzZU91dDogZnVuY3Rpb24gX29uTW91c2VPdXQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICB9LFxuXG4gIF9vbk1vdXNlVXA6IGZ1bmN0aW9uIF9vbk1vdXNlVXAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB0aGlzLnNldFN0YXRlKHsgYWN0aXZlOiBmYWxzZSB9KTtcbiAgfSxcblxuICBfb25Nb3VzZURvd246IGZ1bmN0aW9uIF9vbk1vdXNlRG93bigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmU6IHRydWUgfSk7XG4gIH0sXG5cbiAgX29uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfb25EcmFnU3RhcnQoZSwgdWkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyYWdnaW5nOiB0cnVlLFxuICAgICAgYWN0aXZlOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25EcmFnU3RhcnQpIHRoaXMucHJvcHMub25EcmFnU3RhcnQoZSwgdWkpO1xuICB9LFxuXG4gIF9vbkRyYWdTdG9wOiBmdW5jdGlvbiBfb25EcmFnU3RvcChlLCB1aSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgYWN0aXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uRHJhZ1N0b3ApIHRoaXMucHJvcHMub25EcmFnU3RvcChlLCB1aSk7XG4gIH0sXG5cbiAgX29uRHJhZ1VwZGF0ZTogZnVuY3Rpb24gX29uRHJhZ1VwZGF0ZShlLCB1aSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnZ2luZykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkgdGhpcy5fZHJhZ1goZSwgdWkucG9zaXRpb24ubGVmdCk7XG4gIH0sXG5cbiAgX2RyYWdYOiBmdW5jdGlvbiBfZHJhZ1goZSwgcG9zKSB7XG4gICAgdmFyIG1heCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy50cmFjaykuY2xpZW50V2lkdGg7XG4gICAgaWYgKHBvcyA8IDApIHBvcyA9IDA7ZWxzZSBpZiAocG9zID4gbWF4KSBwb3MgPSBtYXg7XG4gICAgdGhpcy5fdXBkYXRlV2l0aENoYW5nZUV2ZW50KGUsIHBvcyAvIG1heCk7XG4gIH0sXG5cbiAgX3VwZGF0ZVdpdGhDaGFuZ2VFdmVudDogZnVuY3Rpb24gX3VwZGF0ZVdpdGhDaGFuZ2VFdmVudChlLCBwZXJjZW50KSB7XG4gICAgaWYgKHRoaXMuc3RhdGUucGVyY2VudCA9PT0gcGVyY2VudCkgcmV0dXJuO1xuICAgIHRoaXMuc2V0UGVyY2VudChwZXJjZW50KTtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLl9hbGlnblZhbHVlKHRoaXMuX3BlcmNlbnRUb1ZhbHVlKHBlcmNlbnQpKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShlLCB2YWx1ZSk7XG4gIH0sXG5cbiAgX3BlcmNlbnRUb1ZhbHVlOiBmdW5jdGlvbiBfcGVyY2VudFRvVmFsdWUocGVyY2VudCkge1xuICAgIHJldHVybiBwZXJjZW50ICogKHRoaXMucHJvcHMubWF4IC0gdGhpcy5wcm9wcy5taW4pICsgdGhpcy5wcm9wcy5taW47XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2xpZGVyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBDc3NFdmVudCA9IHJlcXVpcmUoJy4vdXRpbHMvY3NzLWV2ZW50Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENsaWNrQXdheWFibGUgPSByZXF1aXJlKCcuL21peGlucy9jbGljay1hd2F5YWJsZScpO1xudmFyIEZsYXRCdXR0b24gPSByZXF1aXJlKCcuL2ZsYXQtYnV0dG9uJyk7XG5cbnZhciBTbmFja2JhciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdTbmFja2JhcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgQ2xpY2tBd2F5YWJsZV0sXG5cbiAgbWFudWFsbHlCaW5kQ2xpY2tBd2F5OiB0cnVlLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lc3NhZ2U6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBvcGVuT25Nb3VudDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb25BY3Rpb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogdGhpcy5wcm9wcy5vcGVuT25Nb3VudCB8fCBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50Q2xpY2tBd2F5OiBmdW5jdGlvbiBjb21wb25lbnRDbGlja0F3YXkoKSB7XG4gICAgdGhpcy5kaXNtaXNzKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICBpZiAocHJldlN0YXRlLm9wZW4gIT0gdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIC8vT25seSBCaW5kIGNsaWNrYXdheSBhZnRlciB0cmFuc2l0aW9uIGZpbmlzaGVzXG4gICAgICAgIENzc0V2ZW50Lm9uVHJhbnNpdGlvbkVuZChSZWFjdC5maW5kRE9NTm9kZSh0aGlzKSwgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLl9iaW5kQ2xpY2tBd2F5KCk7XG4gICAgICAgIH0pLmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdW5iaW5kQ2xpY2tBd2F5KCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5zbmFja2JhcjtcbiAgfSxcblxuICBnZXRTcGFjaW5nOiBmdW5jdGlvbiBnZXRTcGFjaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRleHRDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgIHBhZGRpbmc6ICcwcHggJyArIHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIgKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BTdWJoZWFkZXJIZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BTdWJoZWFkZXJIZWlnaHQgKyAncHgnLFxuICAgICAgICBtaW5XaWR0aDogMjg4LFxuICAgICAgICBtYXhXaWR0aDogNTY4LFxuXG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICBib3R0b206IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIsXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIsXG5cbiAgICAgICAgbGVmdDogLTEwMDAwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAyMHB4LCAwKScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICdsZWZ0JywgJzQwMG1zJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0MDBtcycsICd0cmFuc2Zvcm0nKVxuICAgICAgfSxcbiAgICAgIGFjdGlvbjoge1xuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLmFjdGlvbkNvbG9yLFxuICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcbiAgICAgICAgbWFyZ2luVG9wOiA2LFxuICAgICAgICBtYXJnaW5SaWdodDogLTE2LFxuICAgICAgICBtYXJnaW5MZWZ0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH0sXG4gICAgICByb290V2hlbk9wZW46IHtcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ2xlZnQnLCAnMG1zJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDAwbXMnLCAndHJhbnNmb3JtJywgJzBtcycpXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICB2YXIgYWN0aW9uO1xuICAgIGlmICh0aGlzLnByb3BzLmFjdGlvbikge1xuICAgICAgYWN0aW9uID0gUmVhY3QuY3JlYXRlRWxlbWVudChGbGF0QnV0dG9uLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuYWN0aW9uLFxuICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy5hY3Rpb24sXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMucHJvcHMub25BY3Rpb25Ub3VjaFRhcCB9KTtcbiAgICB9XG5cbiAgICB2YXIgcm9vdFN0eWxlcyA9IHN0eWxlcy5yb290O1xuICAgIGlmICh0aGlzLnN0YXRlLm9wZW4pIHJvb3RTdHlsZXMgPSB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5yb290LCBzdHlsZXMucm9vdFdoZW5PcGVuLCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgeyBzdHlsZTogcm9vdFN0eWxlcyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLnByb3BzLm1lc3NhZ2VcbiAgICAgICksXG4gICAgICBhY3Rpb25cbiAgICApO1xuICB9LFxuXG4gIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSk7XG4gIH0sXG5cbiAgZGlzbWlzczogZnVuY3Rpb24gZGlzbWlzcygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU25hY2tiYXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgTW9kZXJuaXpyID0gaXNCcm93c2VyID8gcmVxdWlyZSgnLi4vdXRpbHMvbW9kZXJuaXpyLmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBhbGw6IGZ1bmN0aW9uIGFsbChzdHlsZXMpIHtcbiAgICB2YXIgcHJlZml4ZWRTdHlsZSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICAgIHByZWZpeGVkU3R5bGVbdGhpcy5zaW5nbGUoa2V5KV0gPSBzdHlsZXNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeGVkU3R5bGU7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3R5bGUsIGtleSwgdmFsdWUpIHtcbiAgICBzdHlsZVt0aGlzLnNpbmdsZShrZXkpXSA9IHZhbHVlO1xuICB9LFxuXG4gIHNpbmdsZTogZnVuY3Rpb24gc2luZ2xlKGtleSkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgPyBNb2Rlcm5penIucHJlZml4ZWQoa2V5KSA6IGtleTtcbiAgfSxcblxuICBzaW5nbGVIeXBoZW5lZDogZnVuY3Rpb24gc2luZ2xlSHlwaGVuZWQoa2V5KSB7XG4gICAgdmFyIHN0ciA9IHRoaXMuc2luZ2xlKGtleSk7XG5cbiAgICByZXR1cm4gIXN0ciA/IGtleSA6IHN0ci5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uIChzdHIsIG0xKSB7XG4gICAgICByZXR1cm4gJy0nICsgbTEudG9Mb3dlckNhc2UoKTtcbiAgICB9KS5yZXBsYWNlKC9ebXMtLywgJy1tcy0nKTtcbiAgfVxuXG59OyIsIi8vIFRvIGluY2x1ZGUgdGhpcyBmaWxlIGluIHlvdXIgcHJvamVjdDpcbi8vIHZhciBtdWkgPSByZXF1aXJlKCdtdWknKTtcbi8vIHZhciBDb2xvcnMgPSBtdWkuU3R5bGVzLkNvbG9ycztcblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICByZWQ1MDogJyNmZmViZWUnLFxuICByZWQxMDA6ICcjZmZjZGQyJyxcbiAgcmVkMjAwOiAnI2VmOWE5YScsXG4gIHJlZDMwMDogJyNlNTczNzMnLFxuICByZWQ0MDA6ICcjZWY1MzUwJyxcbiAgcmVkNTAwOiAnI2Y0NDMzNicsXG4gIHJlZDYwMDogJyNlNTM5MzUnLFxuICByZWQ3MDA6ICcjZDMyZjJmJyxcbiAgcmVkODAwOiAnI2M2MjgyOCcsXG4gIHJlZDkwMDogJyNiNzFjMWMnLFxuICByZWRBMTAwOiAnI2ZmOGE4MCcsXG4gIHJlZEEyMDA6ICcjZmY1MjUyJyxcbiAgcmVkQTQwMDogJyNmZjE3NDQnLFxuICByZWRBNzAwOiAnI2Q1MDAwMCcsXG5cbiAgcGluazUwOiAnI2ZjZTRlYycsXG4gIHBpbmsxMDA6ICcjZjhiYmQwJyxcbiAgcGluazIwMDogJyNmNDhmYjEnLFxuICBwaW5rMzAwOiAnI2YwNjI5MicsXG4gIHBpbms0MDA6ICcjZWM0MDdhJyxcbiAgcGluazUwMDogJyNlOTFlNjMnLFxuICBwaW5rNjAwOiAnI2Q4MWI2MCcsXG4gIHBpbms3MDA6ICcjYzIxODViJyxcbiAgcGluazgwMDogJyNhZDE0NTcnLFxuICBwaW5rOTAwOiAnIzg4MGU0ZicsXG4gIHBpbmtBMTAwOiAnI2ZmODBhYicsXG4gIHBpbmtBMjAwOiAnI2ZmNDA4MScsXG4gIHBpbmtBNDAwOiAnI2Y1MDA1NycsXG4gIHBpbmtBNzAwOiAnI2M1MTE2MicsXG5cbiAgcHVycGxlNTA6ICcjZjNlNWY1JyxcbiAgcHVycGxlMTAwOiAnI2UxYmVlNycsXG4gIHB1cnBsZTIwMDogJyNjZTkzZDgnLFxuICBwdXJwbGUzMDA6ICcjYmE2OGM4JyxcbiAgcHVycGxlNDAwOiAnI2FiNDdiYycsXG4gIHB1cnBsZTUwMDogJyM5YzI3YjAnLFxuICBwdXJwbGU2MDA6ICcjOGUyNGFhJyxcbiAgcHVycGxlNzAwOiAnIzdiMWZhMicsXG4gIHB1cnBsZTgwMDogJyM2YTFiOWEnLFxuICBwdXJwbGU5MDA6ICcjNGExNDhjJyxcbiAgcHVycGxlQTEwMDogJyNlYTgwZmMnLFxuICBwdXJwbGVBMjAwOiAnI2UwNDBmYicsXG4gIHB1cnBsZUE0MDA6ICcjZDUwMGY5JyxcbiAgcHVycGxlQTcwMDogJyNhYTAwZmYnLFxuXG4gIGRlZXBQdXJwbGU1MDogJyNlZGU3ZjYnLFxuICBkZWVwUHVycGxlMTAwOiAnI2QxYzRlOScsXG4gIGRlZXBQdXJwbGUyMDA6ICcjYjM5ZGRiJyxcbiAgZGVlcFB1cnBsZTMwMDogJyM5NTc1Y2QnLFxuICBkZWVwUHVycGxlNDAwOiAnIzdlNTdjMicsXG4gIGRlZXBQdXJwbGU1MDA6ICcjNjczYWI3JyxcbiAgZGVlcFB1cnBsZTYwMDogJyM1ZTM1YjEnLFxuICBkZWVwUHVycGxlNzAwOiAnIzUxMmRhOCcsXG4gIGRlZXBQdXJwbGU4MDA6ICcjNDUyN2EwJyxcbiAgZGVlcFB1cnBsZTkwMDogJyMzMTFiOTInLFxuICBkZWVwUHVycGxlQTEwMDogJyNiMzg4ZmYnLFxuICBkZWVwUHVycGxlQTIwMDogJyM3YzRkZmYnLFxuICBkZWVwUHVycGxlQTQwMDogJyM2NTFmZmYnLFxuICBkZWVwUHVycGxlQTcwMDogJyM2MjAwZWEnLFxuXG4gIGluZGlnbzUwOiAnI2U4ZWFmNicsXG4gIGluZGlnbzEwMDogJyNjNWNhZTknLFxuICBpbmRpZ28yMDA6ICcjOWZhOGRhJyxcbiAgaW5kaWdvMzAwOiAnIzc5ODZjYicsXG4gIGluZGlnbzQwMDogJyM1YzZiYzAnLFxuICBpbmRpZ281MDA6ICcjM2Y1MWI1JyxcbiAgaW5kaWdvNjAwOiAnIzM5NDlhYicsXG4gIGluZGlnbzcwMDogJyMzMDNmOWYnLFxuICBpbmRpZ284MDA6ICcjMjgzNTkzJyxcbiAgaW5kaWdvOTAwOiAnIzFhMjM3ZScsXG4gIGluZGlnb0ExMDA6ICcjOGM5ZWZmJyxcbiAgaW5kaWdvQTIwMDogJyM1MzZkZmUnLFxuICBpbmRpZ29BNDAwOiAnIzNkNWFmZScsXG4gIGluZGlnb0E3MDA6ICcjMzA0ZmZlJyxcblxuICBibHVlNTA6ICcjZTNmMmZkJyxcbiAgYmx1ZTEwMDogJyNiYmRlZmInLFxuICBibHVlMjAwOiAnIzkwY2FmOScsXG4gIGJsdWUzMDA6ICcjNjRiNWY2JyxcbiAgYmx1ZTQwMDogJyM0MmE1ZjUnLFxuICBibHVlNTAwOiAnIzIxOTZmMycsXG4gIGJsdWU2MDA6ICcjMWU4OGU1JyxcbiAgYmx1ZTcwMDogJyMxOTc2ZDInLFxuICBibHVlODAwOiAnIzE1NjVjMCcsXG4gIGJsdWU5MDA6ICcjMGQ0N2ExJyxcbiAgYmx1ZUExMDA6ICcjODJiMWZmJyxcbiAgYmx1ZUEyMDA6ICcjNDQ4YWZmJyxcbiAgYmx1ZUE0MDA6ICcjMjk3OWZmJyxcbiAgYmx1ZUE3MDA6ICcjMjk2MmZmJyxcblxuICBsaWdodEJsdWU1MDogJyNlMWY1ZmUnLFxuICBsaWdodEJsdWUxMDA6ICcjYjNlNWZjJyxcbiAgbGlnaHRCbHVlMjAwOiAnIzgxZDRmYScsXG4gIGxpZ2h0Qmx1ZTMwMDogJyM0ZmMzZjcnLFxuICBsaWdodEJsdWU0MDA6ICcjMjliNmY2JyxcbiAgbGlnaHRCbHVlNTAwOiAnIzAzYTlmNCcsXG4gIGxpZ2h0Qmx1ZTYwMDogJyMwMzliZTUnLFxuICBsaWdodEJsdWU3MDA6ICcjMDI4OGQxJyxcbiAgbGlnaHRCbHVlODAwOiAnIzAyNzdiZCcsXG4gIGxpZ2h0Qmx1ZTkwMDogJyMwMTU3OWInLFxuICBsaWdodEJsdWVBMTAwOiAnIzgwZDhmZicsXG4gIGxpZ2h0Qmx1ZUEyMDA6ICcjNDBjNGZmJyxcbiAgbGlnaHRCbHVlQTQwMDogJyMwMGIwZmYnLFxuICBsaWdodEJsdWVBNzAwOiAnIzAwOTFlYScsXG5cbiAgY3lhbjUwOiAnI2UwZjdmYScsXG4gIGN5YW4xMDA6ICcjYjJlYmYyJyxcbiAgY3lhbjIwMDogJyM4MGRlZWEnLFxuICBjeWFuMzAwOiAnIzRkZDBlMScsXG4gIGN5YW40MDA6ICcjMjZjNmRhJyxcbiAgY3lhbjUwMDogJyMwMGJjZDQnLFxuICBjeWFuNjAwOiAnIzAwYWNjMScsXG4gIGN5YW43MDA6ICcjMDA5N2E3JyxcbiAgY3lhbjgwMDogJyMwMDgzOGYnLFxuICBjeWFuOTAwOiAnIzAwNjA2NCcsXG4gIGN5YW5BMTAwOiAnIzg0ZmZmZicsXG4gIGN5YW5BMjAwOiAnIzE4ZmZmZicsXG4gIGN5YW5BNDAwOiAnIzAwZTVmZicsXG4gIGN5YW5BNzAwOiAnIzAwYjhkNCcsXG5cbiAgdGVhbDUwOiAnI2UwZjJmMScsXG4gIHRlYWwxMDA6ICcjYjJkZmRiJyxcbiAgdGVhbDIwMDogJyM4MGNiYzQnLFxuICB0ZWFsMzAwOiAnIzRkYjZhYycsXG4gIHRlYWw0MDA6ICcjMjZhNjlhJyxcbiAgdGVhbDUwMDogJyMwMDk2ODgnLFxuICB0ZWFsNjAwOiAnIzAwODk3YicsXG4gIHRlYWw3MDA6ICcjMDA3OTZiJyxcbiAgdGVhbDgwMDogJyMwMDY5NWMnLFxuICB0ZWFsOTAwOiAnIzAwNGQ0MCcsXG4gIHRlYWxBMTAwOiAnI2E3ZmZlYicsXG4gIHRlYWxBMjAwOiAnIzY0ZmZkYScsXG4gIHRlYWxBNDAwOiAnIzFkZTliNicsXG4gIHRlYWxBNzAwOiAnIzAwYmZhNScsXG5cbiAgZ3JlZW41MDogJyNlOGY1ZTknLFxuICBncmVlbjEwMDogJyNjOGU2YzknLFxuICBncmVlbjIwMDogJyNhNWQ2YTcnLFxuICBncmVlbjMwMDogJyM4MWM3ODQnLFxuICBncmVlbjQwMDogJyM2NmJiNmEnLFxuICBncmVlbjUwMDogJyM0Y2FmNTAnLFxuICBncmVlbjYwMDogJyM0M2EwNDcnLFxuICBncmVlbjcwMDogJyMzODhlM2MnLFxuICBncmVlbjgwMDogJyMyZTdkMzInLFxuICBncmVlbjkwMDogJyMxYjVlMjAnLFxuICBncmVlbkExMDA6ICcjYjlmNmNhJyxcbiAgZ3JlZW5BMjAwOiAnIzY5ZjBhZScsXG4gIGdyZWVuQTQwMDogJyMwMGU2NzYnLFxuICBncmVlbkE3MDA6ICcjMDBjODUzJyxcblxuICBsaWdodEdyZWVuNTA6ICcjZjFmOGU5JyxcbiAgbGlnaHRHcmVlbjEwMDogJyNkY2VkYzgnLFxuICBsaWdodEdyZWVuMjAwOiAnI2M1ZTFhNScsXG4gIGxpZ2h0R3JlZW4zMDA6ICcjYWVkNTgxJyxcbiAgbGlnaHRHcmVlbjQwMDogJyM5Y2NjNjUnLFxuICBsaWdodEdyZWVuNTAwOiAnIzhiYzM0YScsXG4gIGxpZ2h0R3JlZW42MDA6ICcjN2NiMzQyJyxcbiAgbGlnaHRHcmVlbjcwMDogJyM2ODlmMzgnLFxuICBsaWdodEdyZWVuODAwOiAnIzU1OGIyZicsXG4gIGxpZ2h0R3JlZW45MDA6ICcjMzM2OTFlJyxcbiAgbGlnaHRHcmVlbkExMDA6ICcjY2NmZjkwJyxcbiAgbGlnaHRHcmVlbkEyMDA6ICcjYjJmZjU5JyxcbiAgbGlnaHRHcmVlbkE0MDA6ICcjNzZmZjAzJyxcbiAgbGlnaHRHcmVlbkE3MDA6ICcjNjRkZDE3JyxcblxuICBsaW1lNTA6ICcjZjlmYmU3JyxcbiAgbGltZTEwMDogJyNmMGY0YzMnLFxuICBsaW1lMjAwOiAnI2U2ZWU5YycsXG4gIGxpbWUzMDA6ICcjZGNlNzc1JyxcbiAgbGltZTQwMDogJyNkNGUxNTcnLFxuICBsaW1lNTAwOiAnI2NkZGMzOScsXG4gIGxpbWU2MDA6ICcjYzBjYTMzJyxcbiAgbGltZTcwMDogJyNhZmI0MmInLFxuICBsaW1lODAwOiAnIzllOWQyNCcsXG4gIGxpbWU5MDA6ICcjODI3NzE3JyxcbiAgbGltZUExMDA6ICcjZjRmZjgxJyxcbiAgbGltZUEyMDA6ICcjZWVmZjQxJyxcbiAgbGltZUE0MDA6ICcjYzZmZjAwJyxcbiAgbGltZUE3MDA6ICcjYWVlYTAwJyxcblxuICB5ZWxsb3c1MDogJyNmZmZkZTcnLFxuICB5ZWxsb3cxMDA6ICcjZmZmOWM0JyxcbiAgeWVsbG93MjAwOiAnI2ZmZjU5ZCcsXG4gIHllbGxvdzMwMDogJyNmZmYxNzYnLFxuICB5ZWxsb3c0MDA6ICcjZmZlZTU4JyxcbiAgeWVsbG93NTAwOiAnI2ZmZWIzYicsXG4gIHllbGxvdzYwMDogJyNmZGQ4MzUnLFxuICB5ZWxsb3c3MDA6ICcjZmJjMDJkJyxcbiAgeWVsbG93ODAwOiAnI2Y5YTgyNScsXG4gIHllbGxvdzkwMDogJyNmNTdmMTcnLFxuICB5ZWxsb3dBMTAwOiAnI2ZmZmY4ZCcsXG4gIHllbGxvd0EyMDA6ICcjZmZmZjAwJyxcbiAgeWVsbG93QTQwMDogJyNmZmVhMDAnLFxuICB5ZWxsb3dBNzAwOiAnI2ZmZDYwMCcsXG5cbiAgYW1iZXI1MDogJyNmZmY4ZTEnLFxuICBhbWJlcjEwMDogJyNmZmVjYjMnLFxuICBhbWJlcjIwMDogJyNmZmUwODInLFxuICBhbWJlcjMwMDogJyNmZmQ1NGYnLFxuICBhbWJlcjQwMDogJyNmZmNhMjgnLFxuICBhbWJlcjUwMDogJyNmZmMxMDcnLFxuICBhbWJlcjYwMDogJyNmZmIzMDAnLFxuICBhbWJlcjcwMDogJyNmZmEwMDAnLFxuICBhbWJlcjgwMDogJyNmZjhmMDAnLFxuICBhbWJlcjkwMDogJyNmZjZmMDAnLFxuICBhbWJlckExMDA6ICcjZmZlNTdmJyxcbiAgYW1iZXJBMjAwOiAnI2ZmZDc0MCcsXG4gIGFtYmVyQTQwMDogJyNmZmM0MDAnLFxuICBhbWJlckE3MDA6ICcjZmZhYjAwJyxcblxuICBvcmFuZ2U1MDogJyNmZmYzZTAnLFxuICBvcmFuZ2UxMDA6ICcjZmZlMGIyJyxcbiAgb3JhbmdlMjAwOiAnI2ZmY2M4MCcsXG4gIG9yYW5nZTMwMDogJyNmZmI3NGQnLFxuICBvcmFuZ2U0MDA6ICcjZmZhNzI2JyxcbiAgb3JhbmdlNTAwOiAnI2ZmOTgwMCcsXG4gIG9yYW5nZTYwMDogJyNmYjhjMDAnLFxuICBvcmFuZ2U3MDA6ICcjZjU3YzAwJyxcbiAgb3JhbmdlODAwOiAnI2VmNmMwMCcsXG4gIG9yYW5nZTkwMDogJyNlNjUxMDAnLFxuICBvcmFuZ2VBMTAwOiAnI2ZmZDE4MCcsXG4gIG9yYW5nZUEyMDA6ICcjZmZhYjQwJyxcbiAgb3JhbmdlQTQwMDogJyNmZjkxMDAnLFxuICBvcmFuZ2VBNzAwOiAnI2ZmNmQwMCcsXG5cbiAgZGVlcE9yYW5nZTUwOiAnI2ZiZTllNycsXG4gIGRlZXBPcmFuZ2UxMDA6ICcjZmZjY2JjJyxcbiAgZGVlcE9yYW5nZTIwMDogJyNmZmFiOTEnLFxuICBkZWVwT3JhbmdlMzAwOiAnI2ZmOGE2NScsXG4gIGRlZXBPcmFuZ2U0MDA6ICcjZmY3MDQzJyxcbiAgZGVlcE9yYW5nZTUwMDogJyNmZjU3MjInLFxuICBkZWVwT3JhbmdlNjAwOiAnI2Y0NTExZScsXG4gIGRlZXBPcmFuZ2U3MDA6ICcjZTY0YTE5JyxcbiAgZGVlcE9yYW5nZTgwMDogJyNkODQzMTUnLFxuICBkZWVwT3JhbmdlOTAwOiAnI2JmMzYwYycsXG4gIGRlZXBPcmFuZ2VBMTAwOiAnI2ZmOWU4MCcsXG4gIGRlZXBPcmFuZ2VBMjAwOiAnI2ZmNmU0MCcsXG4gIGRlZXBPcmFuZ2VBNDAwOiAnI2ZmM2QwMCcsXG4gIGRlZXBPcmFuZ2VBNzAwOiAnI2RkMmMwMCcsXG5cbiAgYnJvd241MDogJyNlZmViZTknLFxuICBicm93bjEwMDogJyNkN2NjYzgnLFxuICBicm93bjIwMDogJyNiY2FhYTQnLFxuICBicm93bjMwMDogJyNhMTg4N2YnLFxuICBicm93bjQwMDogJyM4ZDZlNjMnLFxuICBicm93bjUwMDogJyM3OTU1NDgnLFxuICBicm93bjYwMDogJyM2ZDRjNDEnLFxuICBicm93bjcwMDogJyM1ZDQwMzcnLFxuICBicm93bjgwMDogJyM0ZTM0MmUnLFxuICBicm93bjkwMDogJyMzZTI3MjMnLFxuXG4gIGJsdWVHcmV5NTA6ICcjZWNlZmYxJyxcbiAgYmx1ZUdyZXkxMDA6ICcjY2ZkOGRjJyxcbiAgYmx1ZUdyZXkyMDA6ICcjYjBiZWM1JyxcbiAgYmx1ZUdyZXkzMDA6ICcjOTBhNGFlJyxcbiAgYmx1ZUdyZXk0MDA6ICcjNzg5MDljJyxcbiAgYmx1ZUdyZXk1MDA6ICcjNjA3ZDhiJyxcbiAgYmx1ZUdyZXk2MDA6ICcjNTQ2ZTdhJyxcbiAgYmx1ZUdyZXk3MDA6ICcjNDU1YTY0JyxcbiAgYmx1ZUdyZXk4MDA6ICcjMzc0NzRmJyxcbiAgYmx1ZUdyZXk5MDA6ICcjMjYzMjM4JyxcblxuICBncmV5NTA6ICcjZmFmYWZhJyxcbiAgZ3JleTEwMDogJyNmNWY1ZjUnLFxuICBncmV5MjAwOiAnI2VlZWVlZScsXG4gIGdyZXkzMDA6ICcjZTBlMGUwJyxcbiAgZ3JleTQwMDogJyNiZGJkYmQnLFxuICBncmV5NTAwOiAnIzllOWU5ZScsXG4gIGdyZXk2MDA6ICcjNzU3NTc1JyxcbiAgZ3JleTcwMDogJyM2MTYxNjEnLFxuICBncmV5ODAwOiAnIzQyNDI0MicsXG4gIGdyZXk5MDA6ICcjMjEyMTIxJyxcblxuICBibGFjazogJyMwMDAwMDAnLFxuICB3aGl0ZTogJyNmZmZmZmYnLFxuXG4gIHRyYW5zcGFyZW50OiAncmdiYSgwLCAwLCAwLCAwKScsXG4gIGZ1bGxCbGFjazogJ3JnYmEoMCwgMCwgMCwgMSknLFxuICBkYXJrQmxhY2s6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgbGlnaHRCbGFjazogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICBtaW5CbGFjazogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICBmYWludEJsYWNrOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIGZ1bGxXaGl0ZTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxuICBkYXJrV2hpdGU6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODcpJyxcbiAgbGlnaHRXaGl0ZTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41NCknXG5cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXV0b1ByZWZpeDogcmVxdWlyZSgnLi9hdXRvLXByZWZpeCcpLFxuICBDb2xvcnM6IHJlcXVpcmUoJy4vY29sb3JzJyksXG4gIFNwYWNpbmc6IHJlcXVpcmUoJy4vc3BhY2luZycpLFxuICBUaGVtZU1hbmFnZXI6IHJlcXVpcmUoJy4vdGhlbWUtbWFuYWdlcicpLFxuICBUcmFuc2l0aW9uczogcmVxdWlyZSgnLi90cmFuc2l0aW9ucycpLFxuICBUeXBvZ3JhcGh5OiByZXF1aXJlKCcuL3R5cG9ncmFwaHknKVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGljb25TaXplOiAyNCxcblxuICBkZXNrdG9wR3V0dGVyOiAyNCxcbiAgZGVza3RvcEd1dHRlck1vcmU6IDMyLFxuICBkZXNrdG9wR3V0dGVyTGVzczogMTYsXG4gIGRlc2t0b3BHdXR0ZXJNaW5pOiA4LFxuICBkZXNrdG9wS2V5bGluZUluY3JlbWVudDogNjQsXG4gIGRlc2t0b3BEcm9wRG93bk1lbnVJdGVtSGVpZ2h0OiAzMixcbiAgZGVza3RvcERyb3BEb3duTWVudUZvbnRTaXplOiAxNSxcbiAgZGVza3RvcExlZnROYXZNZW51SXRlbUhlaWdodDogNDgsXG4gIGRlc2t0b3BTdWJoZWFkZXJIZWlnaHQ6IDQ4LFxuICBkZXNrdG9wVG9vbGJhckhlaWdodDogNTZcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXh0ZW5kID0gcmVxdWlyZSgnLi4vdXRpbHMvZXh0ZW5kJyk7XG5cbnZhciBUeXBlcyA9IHtcbiAgTElHSFQ6IHJlcXVpcmUoJy4vdGhlbWVzL2xpZ2h0LXRoZW1lJyksXG4gIERBUks6IHJlcXVpcmUoJy4vdGhlbWVzL2RhcmstdGhlbWUnKVxufTtcblxudmFyIFRoZW1lTWFuYWdlciA9IGZ1bmN0aW9uIFRoZW1lTWFuYWdlcigpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlczogVHlwZXMsXG4gICAgdGVtcGxhdGU6IFR5cGVzLkxJR0hULFxuXG4gICAgc3BhY2luZzogVHlwZXMuTElHSFQuc3BhY2luZyxcbiAgICBjb250ZW50Rm9udEZhbWlseTogJ1JvYm90bywgc2Fucy1zZXJpZicsXG5cbiAgICBwYWxldHRlOiBUeXBlcy5MSUdIVC5nZXRQYWxldHRlKCksXG4gICAgY29tcG9uZW50OiBUeXBlcy5MSUdIVC5nZXRDb21wb25lbnRUaGVtZXMoVHlwZXMuTElHSFQuZ2V0UGFsZXR0ZSgpKSxcblxuICAgIGdldEN1cnJlbnRUaGVtZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRoZW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIENvbXBvbmVudCBnZXRzIHVwZGF0ZWQgdG8gcmVmbGVjdCBwYWxldHRlIGNoYW5nZXMuXG4gICAgc2V0VGhlbWU6IGZ1bmN0aW9uIHNldFRoZW1lKG5ld1RoZW1lKSB7XG4gICAgICB0aGlzLnNldFNwYWNpbmcobmV3VGhlbWUuc3BhY2luZyk7XG4gICAgICB0aGlzLnNldFBhbGV0dGUobmV3VGhlbWUuZ2V0UGFsZXR0ZSgpKTtcbiAgICAgIHRoaXMuc2V0Q29tcG9uZW50VGhlbWVzKG5ld1RoZW1lLmdldENvbXBvbmVudFRoZW1lcyhuZXdUaGVtZS5nZXRQYWxldHRlKCkpKTtcbiAgICB9LFxuXG4gICAgc2V0U3BhY2luZzogZnVuY3Rpb24gc2V0U3BhY2luZyhuZXdTcGFjaW5nKSB7XG4gICAgICB0aGlzLnNwYWNpbmcgPSBFeHRlbmQodGhpcy5zcGFjaW5nLCBuZXdTcGFjaW5nKTtcbiAgICAgIHRoaXMuY29tcG9uZW50ID0gRXh0ZW5kKHRoaXMuY29tcG9uZW50LCB0aGlzLnRlbXBsYXRlLmdldENvbXBvbmVudFRoZW1lcyh0aGlzLnBhbGV0dGUsIHRoaXMuc3BhY2luZykpO1xuICAgIH0sXG5cbiAgICBzZXRQYWxldHRlOiBmdW5jdGlvbiBzZXRQYWxldHRlKG5ld1BhbGV0dGUpIHtcbiAgICAgIHRoaXMucGFsZXR0ZSA9IEV4dGVuZCh0aGlzLnBhbGV0dGUsIG5ld1BhbGV0dGUpO1xuICAgICAgdGhpcy5jb21wb25lbnQgPSBFeHRlbmQodGhpcy5jb21wb25lbnQsIHRoaXMudGVtcGxhdGUuZ2V0Q29tcG9uZW50VGhlbWVzKHRoaXMucGFsZXR0ZSkpO1xuICAgIH0sXG5cbiAgICBzZXRDb21wb25lbnRUaGVtZXM6IGZ1bmN0aW9uIHNldENvbXBvbmVudFRoZW1lcyhvdmVycmlkZXMpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50ID0gRXh0ZW5kKHRoaXMuY29tcG9uZW50LCBvdmVycmlkZXMpO1xuICAgIH1cbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGhlbWVNYW5hZ2VyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4uL2NvbG9ycycpO1xudmFyIENvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi8uLi91dGlscy9jb2xvci1tYW5pcHVsYXRvcicpO1xuXG52YXIgRGFya1RoZW1lID0ge1xuICBnZXRQYWxldHRlOiBmdW5jdGlvbiBnZXRQYWxldHRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0Q29sb3I6IENvbG9ycy5mdWxsV2hpdGUsXG4gICAgICBjYW52YXNDb2xvcjogJyMzMDMwMzAnLFxuICAgICAgYm9yZGVyQ29sb3I6IENvbG9yTWFuaXB1bGF0b3IuZmFkZShDb2xvcnMuZnVsbFdoaXRlLCAwLjMpLCAvL0NvbG9ycy5ncmV5MzAwXG4gICAgICBkaXNhYmxlZENvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmZhZGUoQ29sb3JzLmZ1bGxXaGl0ZSwgMC4zKVxuICAgIH07XG4gIH0sXG4gIGdldENvbXBvbmVudFRoZW1lczogZnVuY3Rpb24gZ2V0Q29tcG9uZW50VGhlbWVzKHBhbGV0dGUpIHtcbiAgICB2YXIgY2FyZENvbG9yID0gQ29sb3JzLmdyZXk4MDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiB7XG4gICAgICAgIGRpc2FibGVkQ29sb3I6IENvbG9yTWFuaXB1bGF0b3IuZmFkZShwYWxldHRlLnRleHRDb2xvciwgMC4xMilcbiAgICAgIH0sXG4gICAgICBsZWZ0TmF2OiB7XG4gICAgICAgIGNvbG9yOiBjYXJkQ29sb3JcbiAgICAgIH0sXG4gICAgICBtZW51OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY2FyZENvbG9yLFxuICAgICAgICBjb250YWluZXJCYWNrZ3JvdW5kQ29sb3I6IGNhcmRDb2xvclxuICAgICAgfSxcbiAgICAgIG1lbnVJdGVtOiB7XG4gICAgICAgIGhvdmVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIC4wMyknXG4gICAgICB9LFxuICAgICAgbWVudVN1YmhlYWRlcjoge1xuICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKSdcbiAgICAgIH0sXG4gICAgICBwYXBlcjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNhcmRDb2xvclxuICAgICAgfSxcbiAgICAgIHJhaXNlZEJ1dHRvbjoge1xuICAgICAgICBjb2xvcjogQ29sb3JzLmdyZXk1MDBcbiAgICAgIH0sXG4gICAgICB0b2dnbGU6IHtcbiAgICAgICAgdGh1bWJPbkNvbG9yOiBDb2xvcnMuY3lhbjIwMCxcbiAgICAgICAgdGh1bWJPZmZDb2xvcjogQ29sb3JzLmdyZXk0MDAsXG4gICAgICAgIHRodW1iRGlzYWJsZWRDb2xvcjogQ29sb3JzLmdyZXk4MDAsXG4gICAgICAgIHRodW1iUmVxdWlyZWRDb2xvcjogQ29sb3JzLmN5YW4yMDAsXG4gICAgICAgIHRyYWNrT25Db2xvcjogQ29sb3JNYW5pcHVsYXRvci5mYWRlKENvbG9ycy5jeWFuMjAwLCAwLjUpLFxuICAgICAgICB0cmFja09mZkNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICAgICAgdHJhY2tEaXNhYmxlZENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJ1xuICAgICAgfSxcbiAgICAgIHNsaWRlcjoge1xuICAgICAgICB0cmFja0NvbG9yOiBDb2xvcnMubWluQmxhY2ssXG4gICAgICAgIGhhbmRsZUNvbG9yWmVybzogY2FyZENvbG9yLFxuICAgICAgICBoYW5kbGVGaWxsQ29sb3I6IGNhcmRDb2xvcixcbiAgICAgICAgc2VsZWN0aW9uQ29sb3I6IENvbG9ycy5jeWFuMjAwXG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXJrVGhlbWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vY29sb3JzJyk7XG52YXIgU3BhY2luZyA9IHJlcXVpcmUoJy4uL3NwYWNpbmcnKTtcbnZhciBDb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKTtcblxuLyoqXG4gKiAgTGlnaHQgVGhlbWUgaXMgdGhlIGRlZmF1bHQgdGhlbWUgdXNlZCBpbiBtYXRlcmlhbC11aS4gSXQgaXMgZ3VhcmFudGVlZCB0b1xuICogIGhhdmUgYWxsIHRoZW1lIHZhcmlhYmxlcyBuZWVkZWQgZm9yIGV2ZXJ5IGNvbXBvbmVudC4gVmFyaWFibGVzIG5vdCBkZWZpbmVkXG4gKiAgaW4gYSBjdXN0b20gdGhlbWUgd2lsbCBkZWZhdWx0IHRvIHRoZXNlIHZhbHVlcy5cbiAqL1xuXG52YXIgTGlnaHRUaGVtZSA9IHtcbiAgc3BhY2luZzogU3BhY2luZyxcbiAgY29udGVudEZvbnRGYW1pbHk6ICdSb2JvdG8sIHNhbnMtc2VyaWYnLFxuICBnZXRQYWxldHRlOiBmdW5jdGlvbiBnZXRQYWxldHRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmltYXJ5MUNvbG9yOiBDb2xvcnMuY3lhbjUwMCxcbiAgICAgIHByaW1hcnkyQ29sb3I6IENvbG9ycy5jeWFuNzAwLFxuICAgICAgcHJpbWFyeTNDb2xvcjogQ29sb3JzLmN5YW4xMDAsXG4gICAgICBhY2NlbnQxQ29sb3I6IENvbG9ycy5waW5rQTIwMCxcbiAgICAgIGFjY2VudDJDb2xvcjogQ29sb3JzLnBpbmtBNDAwLFxuICAgICAgYWNjZW50M0NvbG9yOiBDb2xvcnMucGlua0ExMDAsXG4gICAgICB0ZXh0Q29sb3I6IENvbG9ycy5kYXJrQmxhY2ssXG4gICAgICBjYW52YXNDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgYm9yZGVyQ29sb3I6IENvbG9ycy5ncmV5MzAwLFxuICAgICAgZGlzYWJsZWRDb2xvcjogQ29sb3JNYW5pcHVsYXRvci5mYWRlKENvbG9ycy5kYXJrQmxhY2ssIDAuMylcbiAgICB9O1xuICB9LFxuICBnZXRDb21wb25lbnRUaGVtZXM6IGZ1bmN0aW9uIGdldENvbXBvbmVudFRoZW1lcyhwYWxldHRlLCBzcGFjaW5nKSB7XG4gICAgc3BhY2luZyA9IHNwYWNpbmcgfHwgU3BhY2luZztcbiAgICB2YXIgb2JqID0ge1xuICAgICAgYXBwQmFyOiB7XG4gICAgICAgIGNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogQ29sb3JzLmRhcmtXaGl0ZSxcbiAgICAgICAgaGVpZ2h0OiBzcGFjaW5nLmRlc2t0b3BLZXlsaW5lSW5jcmVtZW50XG4gICAgICB9LFxuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGhlaWdodDogMzYsXG4gICAgICAgIG1pbldpZHRoOiA4OCxcbiAgICAgICAgaWNvbkJ1dHRvblNpemU6IHNwYWNpbmcuaWNvblNpemUgKiAyXG4gICAgICB9LFxuICAgICAgY2hlY2tib3g6IHtcbiAgICAgICAgYm94Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBjaGVja2VkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgcmVxdWlyZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBkaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICAgIGxhYmVsQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBsYWJlbERpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGRhdGVQaWNrZXI6IHtcbiAgICAgICAgY29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgdGV4dENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIGNhbGVuZGFyVGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgc2VsZWN0Q29sb3I6IHBhbGV0dGUucHJpbWFyeTJDb2xvcixcbiAgICAgICAgc2VsZWN0VGV4dENvbG9yOiBDb2xvcnMud2hpdGVcbiAgICAgIH0sXG4gICAgICBkcm9wRG93bk1lbnU6IHtcbiAgICAgICAgYWNjZW50Q29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICBmbGF0QnV0dG9uOiB7XG4gICAgICAgIGNvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yLFxuICAgICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBwcmltYXJ5VGV4dENvbG9yOiBwYWxldHRlLmFjY2VudDFDb2xvcixcbiAgICAgICAgc2Vjb25kYXJ5VGV4dENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3JcbiAgICAgIH0sXG4gICAgICBmbG9hdGluZ0FjdGlvbkJ1dHRvbjoge1xuICAgICAgICBidXR0b25TaXplOiA1NixcbiAgICAgICAgbWluaVNpemU6IDQwLFxuICAgICAgICBjb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3IsXG4gICAgICAgIGljb25Db2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICBzZWNvbmRhcnlDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBzZWNvbmRhcnlJY29uQ29sb3I6IENvbG9ycy53aGl0ZVxuICAgICAgfSxcbiAgICAgIGxlZnROYXY6IHtcbiAgICAgICAgd2lkdGg6IHNwYWNpbmcuZGVza3RvcEtleWxpbmVJbmNyZW1lbnQgKiA0LFxuICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlXG4gICAgICB9LFxuICAgICAgbWVudToge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgY29udGFpbmVyQmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGVcbiAgICAgIH0sXG4gICAgICBtZW51SXRlbToge1xuICAgICAgICBkYXRhSGVpZ2h0OiAzMixcbiAgICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgICAgaG92ZXJDb2xvcjogJ3JnYmEoMCwgMCwgMCwgLjAzNSknLFxuICAgICAgICBwYWRkaW5nOiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXIsXG4gICAgICAgIHNlbGVjdGVkVGV4dENvbG9yOiBwYWxldHRlLmFjY2VudDFDb2xvclxuICAgICAgfSxcbiAgICAgIG1lbnVTdWJoZWFkZXI6IHtcbiAgICAgICAgcGFkZGluZzogc3BhY2luZy5kZXNrdG9wR3V0dGVyLFxuICAgICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvcixcbiAgICAgICAgdGV4dENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3JcbiAgICAgIH0sXG4gICAgICBwYXBlcjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZVxuICAgICAgfSxcbiAgICAgIHJhZGlvQnV0dG9uOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIGNoZWNrZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICByZXF1aXJlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIGRpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgICAgc2l6ZTogMjQsXG4gICAgICAgIGxhYmVsQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBsYWJlbERpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIHJhaXNlZEJ1dHRvbjoge1xuICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBwcmltYXJ5Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgICBwcmltYXJ5VGV4dENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIHNlY29uZGFyeUNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIHNlY29uZGFyeVRleHRDb2xvcjogQ29sb3JzLndoaXRlXG4gICAgICB9LFxuICAgICAgc2xpZGVyOiB7XG4gICAgICAgIHRyYWNrU2l6ZTogMixcbiAgICAgICAgdHJhY2tDb2xvcjogQ29sb3JzLm1pbkJsYWNrLFxuICAgICAgICB0cmFja0NvbG9yU2VsZWN0ZWQ6IENvbG9ycy5ncmV5NTAwLFxuICAgICAgICBoYW5kbGVTaXplOiAxMixcbiAgICAgICAgaGFuZGxlU2l6ZURpc2FibGVkOiA4LFxuICAgICAgICBoYW5kbGVDb2xvclplcm86IENvbG9ycy5ncmV5NDAwLFxuICAgICAgICBoYW5kbGVGaWxsQ29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgc2VsZWN0aW9uQ29sb3I6IHBhbGV0dGUucHJpbWFyeTNDb2xvcixcbiAgICAgICAgcmlwcGxlQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgICAgfSxcbiAgICAgIHNuYWNrYmFyOiB7XG4gICAgICAgIHRleHRDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMzIzMjMyJyxcbiAgICAgICAgYWN0aW9uQ29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yXG4gICAgICB9LFxuICAgICAgdGFibGU6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGVcbiAgICAgIH0sXG4gICAgICB0YWJsZUhlYWRlcjoge1xuICAgICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvclxuICAgICAgfSxcbiAgICAgIHRhYmxlSGVhZGVyQ29sdW1uOiB7XG4gICAgICAgIHRleHRDb2xvcjogQ29sb3JzLmxpZ2h0QmxhY2ssXG4gICAgICAgIGhlaWdodDogNTYsXG4gICAgICAgIHNwYWNpbmc6IDI4XG4gICAgICB9LFxuICAgICAgdGFibGVGb290ZXI6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogQ29sb3JzLmxpZ2h0QmxhY2tcbiAgICAgIH0sXG4gICAgICB0YWJsZVJvdzoge1xuICAgICAgICBob3ZlckNvbG9yOiBDb2xvcnMuZ3JleTIwMCxcbiAgICAgICAgc3RyaXBlQ29sb3I6IENvbG9yTWFuaXB1bGF0b3IubGlnaHRlbihwYWxldHRlLnByaW1hcnkxQ29sb3IsIDAuNTUpLFxuICAgICAgICBzZWxlY3RlZENvbG9yOiBDb2xvcnMuZ3JleTMwMCxcbiAgICAgICAgdGV4dENvbG9yOiBDb2xvcnMuZGFya0JsYWNrLFxuICAgICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvclxuICAgICAgfSxcbiAgICAgIHRhYmxlUm93Q29sdW1uOiB7XG4gICAgICAgIGhlaWdodDogNDgsXG4gICAgICAgIHNwYWNpbmc6IDI4XG4gICAgICB9LFxuICAgICAgdGltZVBpY2tlcjoge1xuICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICB0ZXh0Q29sb3I6IENvbG9ycy5ncmV5NjAwLFxuICAgICAgICBhY2NlbnRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBjbG9ja0NvbG9yOiBDb2xvcnMuYmxhY2ssXG4gICAgICAgIHNlbGVjdENvbG9yOiBwYWxldHRlLnByaW1hcnkyQ29sb3IsXG4gICAgICAgIHNlbGVjdFRleHRDb2xvcjogQ29sb3JzLndoaXRlXG4gICAgICB9LFxuICAgICAgdG9nZ2xlOiB7XG4gICAgICAgIHRodW1iT25Db2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICB0aHVtYk9mZkNvbG9yOiBDb2xvcnMuZ3JleTUwLFxuICAgICAgICB0aHVtYkRpc2FibGVkQ29sb3I6IENvbG9ycy5ncmV5NDAwLFxuICAgICAgICB0aHVtYlJlcXVpcmVkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgdHJhY2tPbkNvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmZhZGUocGFsZXR0ZS5wcmltYXJ5MUNvbG9yLCAwLjUpLFxuICAgICAgICB0cmFja09mZkNvbG9yOiBDb2xvcnMubWluQmxhY2ssXG4gICAgICAgIHRyYWNrRGlzYWJsZWRDb2xvcjogQ29sb3JzLmZhaW50QmxhY2ssXG4gICAgICAgIGxhYmVsQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBsYWJlbERpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmRhcmtlbignI2VlZWVlZScsIDAuMDUpLFxuICAgICAgICBoZWlnaHQ6IDU2LFxuICAgICAgICB0aXRsZUZvbnRTaXplOiAyMCxcbiAgICAgICAgaWNvbkNvbG9yOiAncmdiYSgwLCAwLCAwLCAuNDApJyxcbiAgICAgICAgc2VwYXJhdG9yQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIC4xNzUpJyxcbiAgICAgICAgbWVudUhvdmVyQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIC4xMCknXG4gICAgICB9LFxuICAgICAgdGFiczoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgICAgfSxcbiAgICAgIHRleHRGaWVsZDoge1xuICAgICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBoaW50Q29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgICAgZmxvYXRpbmdMYWJlbENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgZGlzYWJsZWRUZXh0Q29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgICAgZXJyb3JDb2xvcjogQ29sb3JzLnJlZDUwMCxcbiAgICAgICAgZm9jdXNDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFByb3BlcnRpZXMgYmFzZWQgb24gcHJldmlvdXMgcHJvcGVydGllc1xuICAgIG9iai5mbGF0QnV0dG9uLmRpc2FibGVkVGV4dENvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKG9iai5mbGF0QnV0dG9uLnRleHRDb2xvciwgMC4zKSwgb2JqLmZsb2F0aW5nQWN0aW9uQnV0dG9uLmRpc2FibGVkQ29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmRhcmtlbihDb2xvcnMud2hpdGUsIDAuMSksIG9iai5mbG9hdGluZ0FjdGlvbkJ1dHRvbi5kaXNhYmxlZFRleHRDb2xvciA9IENvbG9yTWFuaXB1bGF0b3IuZmFkZShwYWxldHRlLnRleHRDb2xvciwgMC4zKTtcbiAgICBvYmoucmFpc2VkQnV0dG9uLmRpc2FibGVkQ29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmRhcmtlbihvYmoucmFpc2VkQnV0dG9uLmNvbG9yLCAwLjEpLCBvYmoucmFpc2VkQnV0dG9uLmRpc2FibGVkVGV4dENvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKG9iai5yYWlzZWRCdXR0b24udGV4dENvbG9yLCAwLjMpO1xuICAgIG9iai5zbGlkZXIuaGFuZGxlU2l6ZUFjdGl2ZSA9IG9iai5zbGlkZXIuaGFuZGxlU2l6ZSAqIDI7XG4gICAgb2JqLnRvZ2dsZS50cmFja1JlcXVpcmVkQ29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmZhZGUob2JqLnRvZ2dsZS50aHVtYlJlcXVpcmVkQ29sb3IsIDAuNSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpZ2h0VGhlbWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4vYXV0by1wcmVmaXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgZWFzZU91dEZ1bmN0aW9uOiAnY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpJyxcbiAgZWFzZUluT3V0RnVuY3Rpb246ICdjdWJpYy1iZXppZXIoMC40NDUsIDAuMDUsIDAuNTUsIDAuOTUpJyxcblxuICBlYXNlT3V0OiBmdW5jdGlvbiBlYXNlT3V0KGR1cmF0aW9uLCBwcm9wZXJ0eSwgZGVsYXksIGVhc2VGdW5jdGlvbikge1xuXG4gICAgZWFzZUZ1bmN0aW9uID0gZWFzZUZ1bmN0aW9uIHx8IHRoaXMuZWFzZU91dEZ1bmN0aW9uO1xuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKGR1cmF0aW9uLCBwcm9wZXJ0eSwgZGVsYXksIGVhc2VGdW5jdGlvbik7XG4gIH0sXG5cbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoZHVyYXRpb24sIHByb3BlcnR5LCBkZWxheSwgZWFzZUZ1bmN0aW9uKSB7XG5cbiAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8ICc0NTBtcyc7XG4gICAgcHJvcGVydHkgPSBwcm9wZXJ0eSB8fCAnYWxsJztcbiAgICBkZWxheSA9IGRlbGF5IHx8ICcwbXMnO1xuICAgIGVhc2VGdW5jdGlvbiA9IGVhc2VGdW5jdGlvbiB8fCAnbGluZWFyJztcblxuICAgIHJldHVybiBBdXRvUHJlZml4LnNpbmdsZUh5cGhlbmVkKHByb3BlcnR5KSArICcgJyArIGR1cmF0aW9uICsgJyAnICsgZWFzZUZ1bmN0aW9uICsgJyAnICsgZGVsYXk7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi9jb2xvcnMnKTtcblxudmFyIFR5cG9ncmFwaHkgPSBmdW5jdGlvbiBUeXBvZ3JhcGh5KCkge1xuXG4gIC8vIHRleHQgY29sb3JzXG4gIHRoaXMudGV4dEZ1bGxCbGFjayA9IENvbG9ycy5mdWxsQmxhY2s7XG4gIHRoaXMudGV4dERhcmtCbGFjayA9IENvbG9ycy5kYXJrQmxhY2s7XG4gIHRoaXMudGV4dExpZ2h0QmxhY2sgPSBDb2xvcnMubGlnaHRCbGFjaztcbiAgdGhpcy50ZXh0TWluQmxhY2sgPSBDb2xvcnMubWluQmxhY2s7XG4gIHRoaXMudGV4dEZ1bGxXaGl0ZSA9IENvbG9ycy5mdWxsV2hpdGU7XG4gIHRoaXMudGV4dERhcmtXaGl0ZSA9IENvbG9ycy5kYXJrV2hpdGU7XG4gIHRoaXMudGV4dExpZ2h0V2hpdGUgPSBDb2xvcnMubGlnaHRXaGl0ZTtcblxuICAvLyBmb250IHdlaWdodFxuICB0aGlzLmZvbnRXZWlnaHRMaWdodCA9IDMwMDtcbiAgdGhpcy5mb250V2VpZ2h0Tm9ybWFsID0gNDAwO1xuICB0aGlzLmZvbnRXZWlnaHRNZWRpdW0gPSA1MDA7XG5cbiAgdGhpcy5mb250U3R5bGVCdXR0b25Gb250U2l6ZSA9IDE0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwb2dyYXBoeSgpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBTdmdJY29uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1N2Z0ljb24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaG92ZXJDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbk1vdXNlT3V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlT3ZlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdmlld0JveDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3ZlcmVkOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZXdCb3g6ICcwIDAgMjQgMjQnXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY29sb3IgPSBfcHJvcHMuY29sb3I7XG4gICAgdmFyIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcjtcbiAgICB2YXIgdmlld0JveCA9IF9wcm9wcy52aWV3Qm94O1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY29sb3InLCAnaG92ZXJDb2xvcicsICd2aWV3Qm94JywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIG9mZkNvbG9yID0gY29sb3IgPyBjb2xvciA6IHN0eWxlICYmIHN0eWxlLmZpbGwgPyBzdHlsZS5maWxsIDogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUudGV4dENvbG9yO1xuICAgIHZhciBvbkNvbG9yID0gaG92ZXJDb2xvciA/IGhvdmVyQ29sb3IgOiBvZmZDb2xvcjtcblxuICAgIC8vcmVtb3ZlIHRoZSBmaWxsIHByb3Agc28gdGhhdCBpdCBkb2Vzbid0IG92ZXJyaWRlIG91ciBjb21wdXRlZFxuICAgIC8vZmlsbCBmcm9tIGFib3ZlXG4gICAgaWYgKHN0eWxlKSBkZWxldGUgc3R5bGUuZmlsbDtcblxuICAgIHZhciBtZXJnZWRTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIHdpZHRoOiAyNCxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgIGZpbGw6IHRoaXMuc3RhdGUuaG92ZXJlZCA/IG9uQ29sb3IgOiBvZmZDb2xvclxuICAgIH0sIHN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3N2ZycsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQsXG4gICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLl9oYW5kbGVNb3VzZU92ZXIsXG4gICAgICAgIHN0eWxlOiBtZXJnZWRTdHlsZXMsXG4gICAgICAgIHZpZXdCb3g6IHZpZXdCb3ggfSksXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VPdXQpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VzZU91dChlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3ZlcihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZU92ZXIpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VzZU92ZXIoZSk7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdmdJY29uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb24nKTtcblxudmFyIERyb3BEb3duQXJyb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRHJvcERvd25BcnJvdycsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BvbHlnb24nLCB7IHBvaW50czogJzcsOS41IDEyLDE0LjUgMTcsOS41ICcgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BEb3duQXJyb3c7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbicpO1xuXG52YXIgTmF2aWdhdGlvbkNoZXZyb25MZWZ0RG91YmxlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ05hdmlnYXRpb25DaGV2cm9uTGVmdERvdWJsZScsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTEuNDEgNy40MSBMMTAgNiBsLTYgNiA2IDYgMS40MS0xLjQxIEw2LjgzIDEyeicgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE4LjQxIDcuNDEgTDE3IDYgbC02IDYgNiA2IDEuNDEtMS40MSBMMTMuODMgMTJ6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkNoZXZyb25MZWZ0RG91YmxlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb24nKTtcblxudmFyIE5hdmlnYXRpb25DaGV2cm9uTGVmdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOYXZpZ2F0aW9uQ2hldnJvbkxlZnQnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE1LjQxIDcuNDFMMTQgNmwtNiA2IDYgNiAxLjQxLTEuNDFMMTAuODMgMTJ6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkNoZXZyb25MZWZ0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb24nKTtcblxudmFyIE5hdmlnYXRpb25DaGV2cm9uUmlnaHREb3VibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmF2aWdhdGlvbkNoZXZyb25SaWdodERvdWJsZScsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNNiA2IEw0LjU5ICA3LjQxIDkuMTcgMTIgbC00LjU4IDQuNTkgTDYgMTggbDYgLTZ6JyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTMgNiBMMTEuNTkgNy40MSAxNi4xNyAxMiBsLTQuNTggNC41OSBMMTMgMTggbDYgLTZ6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkNoZXZyb25SaWdodERvdWJsZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uL3N2Zy1pY29uJyk7XG5cbnZhciBOYXZpZ2F0aW9uQ2hldnJvbkxlZnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmF2aWdhdGlvbkNoZXZyb25MZWZ0JyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN2Z0ljb24sXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xMCA2TDguNTkgNy40MSAxMy4xNyAxMmwtNC41OCA0LjU5TDEwIDE4bDYtNnonIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0aW9uQ2hldnJvbkxlZnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbicpO1xuXG52YXIgTmF2aWdhdGlvbk1lbnUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmF2aWdhdGlvbk1lbnUnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTMgMThoMTh2LTJIM3Yyem0wLTVoMTh2LTJIM3Yyem0wLTd2MmgxOFY2SDN6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbk1lbnU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbicpO1xuXG52YXIgVG9nZ2xlQ2hlY2tCb3hDaGVja2VkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RvZ2dsZUNoZWNrQm94Q2hlY2tlZCcsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTksM0g1QzMuOSwzLDMsMy45LDMsNXYxNGMwLDEuMSwwLjksMiwyLDJoMTRjMS4xLDAsMi0wLjksMi0yVjVDMjEsMy45LDIwLjEsMywxOSwzeiBNMTAsMTdsLTUtNWwxLjQtMS40IGwzLjYsMy42bDcuNi03LjZMMTksOEwxMCwxN3onIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVDaGVja0JveENoZWNrZWQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbicpO1xuXG52YXIgVG9nZ2xlQ2hlY2tCb3hPdXRsaW5lQmxhbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG9nZ2xlQ2hlY2tCb3hPdXRsaW5lQmxhbmsnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE5LDV2MTRINVY1SDE5IE0xOSwzSDVDMy45LDMsMywzLjksMyw1djE0YzAsMS4xLDAuOSwyLDIsMmgxNGMxLjEsMCwyLTAuOSwyLTJWNUMyMSwzLjksMjAuMSwzLDE5LDN6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9nZ2xlQ2hlY2tCb3hPdXRsaW5lQmxhbms7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbicpO1xuXG52YXIgUmFkaW9CdXR0b25PZmYgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmFkaW9CdXR0b25PZmYnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDIgMC04LTMuNTgtOC04czMuNTgtOCA4LTggOCAzLjU4IDggOC0zLjU4IDgtOCA4eicgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhZGlvQnV0dG9uT2ZmOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb24nKTtcblxudmFyIFJhZGlvQnV0dG9uT24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmFkaW9CdXR0b25PbicsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgN2MtMi43NiAwLTUgMi4yNC01IDVzMi4yNCA1IDUgNSA1LTIuMjQgNS01LTIuMjQtNS01LTV6bTAtNUM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmFkaW9CdXR0b25PbjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUYWJsZUZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJsZUZvb3RlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFibGVGb290ZXI7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgY2VsbDoge1xuICAgICAgICBib3JkZXJUb3A6ICcxcHggc29saWQgJyArIHRoaXMuZ2V0VGhlbWUoKS5ib3JkZXJDb2xvcixcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ2JvdHRvbScsXG4gICAgICAgIHBhZGRpbmc6IDIwLFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gJ211aS10YWJsZS1mb290ZXInO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGZvb3QnLFxuICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSB9LFxuICAgICAgdGhpcy5fZ2V0Rm9vdGVyUm93KClcbiAgICApO1xuICB9LFxuXG4gIF9nZXRGb290ZXJSb3c6IGZ1bmN0aW9uIF9nZXRGb290ZXJSb3coKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndHInLFxuICAgICAgeyBjbGFzc05hbWU6ICdtdWktdGFibGUtZm9vdGVyLXJvdycgfSxcbiAgICAgIHRoaXMuX2dldENvbHVtbkhlYWRlcnModGhpcy5wcm9wcy5jb2x1bW5zLCAnZicpXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0Q29sdW1uSGVhZGVyczogZnVuY3Rpb24gX2dldENvbHVtbkhlYWRlcnMoZm9vdGVyRGF0YSwga2V5UHJlZml4KSB7XG4gICAgdmFyIGZvb3RlcnMgPSBbXTtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmb290ZXJEYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIF9mb290ZXJEYXRhJGluZGV4ID0gZm9vdGVyRGF0YVtpbmRleF07XG4gICAgICB2YXIgY29udGVudCA9IF9mb290ZXJEYXRhJGluZGV4LmNvbnRlbnQ7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfZm9vdGVyRGF0YSRpbmRleCwgWydjb250ZW50J10pO1xuXG4gICAgICBpZiAoY29udGVudCA9PT0gdW5kZWZpbmVkKSBjb250ZW50ID0gZm9vdGVyRGF0YVtpbmRleF07XG4gICAgICB2YXIga2V5ID0ga2V5UHJlZml4ICsgaW5kZXg7XG4gICAgICBwcm9wcy5zdHlsZSA9IHByb3BzLnN0eWxlICE9PSB1bmRlZmluZWQgPyB0aGlzLm1lcmdlQW5kUHJlZml4KHByb3BzLnN0eWxlLCBzdHlsZXMuY2VsbCkgOiBzdHlsZXMuY2VsbDtcblxuICAgICAgZm9vdGVycy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICd0ZCcsXG4gICAgICAgIF9leHRlbmRzKHsga2V5OiBrZXksIGNsYXNzTmFtZTogJ211aS10YWJsZS1mb290ZXItY29sdW1uJyB9LCBwcm9wcyksXG4gICAgICAgIGNvbnRlbnRcbiAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiBmb290ZXJzO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlRm9vdGVyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBDaGVja2JveCA9IHJlcXVpcmUoJy4uL2NoZWNrYm94Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRvb2x0aXAgPSByZXF1aXJlKCcuLi90b29sdGlwJyk7XG5cbnZhciBUYWJsZUhlYWRlckNvbHVtbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJsZUhlYWRlckNvbHVtbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICB0b29sdGlwOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbHVtbk51bWJlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFibGVIZWFkZXJDb2x1bW47XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHRoZW1lID0gdGhpcy5nZXRUaGVtZSgpO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U2l6ZTogMTIsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcsXG4gICAgICAgIGhlaWdodDogdGhlbWUuaGVpZ2h0LFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3IsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5oZWlnaHRcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gJ211aS10YWJsZS1oZWFkZXItY29sdW1uJztcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgaGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlT3ZlcjogdGhpcy5fb25Nb3VzZU92ZXIsXG4gICAgICBvbk1vdXNlT3V0OiB0aGlzLl9vbk1vdXNlT3V0LFxuICAgICAgb25DbGljazogdGhpcy5fb25DbGlja1xuICAgIH07XG4gICAgdmFyIHRvb2x0aXAgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGhpcy5wcm9wcy50b29sdGlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRvb2x0aXAgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRvb2x0aXAsIHtcbiAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMudG9vbHRpcCxcbiAgICAgICAgc2hvdzogdGhpcy5zdGF0ZS5ob3ZlcmVkLFxuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMudG9vbHRpcCkgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGgnLFxuICAgICAgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IHRoaXMucHJvcHMua2V5LFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpXG4gICAgICB9LCBoYW5kbGVycyksXG4gICAgICB0b29sdGlwLFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgX29uTW91c2VPdmVyOiBmdW5jdGlvbiBfb25Nb3VzZU92ZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgfSxcblxuICBfb25Nb3VzZU91dDogZnVuY3Rpb24gX29uTW91c2VPdXQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX29uQ2xpY2s6IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB0aGlzLnByb3BzLm9uQ2xpY2soZSwgdGhpcy5wcm9wcy5jb2x1bW5OdW1iZXIpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlSGVhZGVyQ29sdW1uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIENoZWNrYm94ID0gcmVxdWlyZSgnLi4vY2hlY2tib3gnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVGFibGVIZWFkZXJDb2x1bW4gPSByZXF1aXJlKCcuL3RhYmxlLWhlYWRlci1jb2x1bW4nKTtcblxudmFyIFRhYmxlSGVhZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RhYmxlSGVhZGVyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIHN1cGVySGVhZGVyQ29sdW1uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuICAgIG9uU2VsZWN0QWxsOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBkaXNwbGF5U2VsZWN0QWxsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBlbmFibGVTZWxlY3RBbGw6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGZpeGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwbGF5U2VsZWN0QWxsOiB0cnVlLFxuICAgICAgZW5hYmxlU2VsZWN0QWxsOiB0cnVlLFxuICAgICAgZml4ZWQ6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50YWJsZUhlYWRlcjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgJyArIHRoaXMuZ2V0VGhlbWUoKS5ib3JkZXJDb2xvclxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAnbXVpLXRhYmxlLWhlYWRlcic7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICd0aGVhZCcsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogdGhpcy5nZXRTdHlsZXMoKS5yb290IH0sXG4gICAgICB0aGlzLl9nZXRTdXBlckhlYWRlclJvdygpLFxuICAgICAgdGhpcy5fZ2V0SGVhZGVyUm93KClcbiAgICApO1xuICB9LFxuXG4gIGdldFN1cGVySGVhZGVyUm93OiBmdW5jdGlvbiBnZXRTdXBlckhlYWRlclJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZzLnN1cGVySGVhZGVyO1xuICB9LFxuXG4gIGdldEhlYWRlclJvdzogZnVuY3Rpb24gZ2V0SGVhZGVyUm93KCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuaGVhZGVyO1xuICB9LFxuXG4gIF9nZXRTdXBlckhlYWRlclJvdzogZnVuY3Rpb24gX2dldFN1cGVySGVhZGVyUm93KCkge1xuICAgIGlmICh0aGlzLnByb3BzLnN1cGVySGVhZGVyQ29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3RyJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdtdWktdGFibGUtc3VwZXItaGVhZGVyLXJvdycsIHJlZjogJ3N1cGVySGVhZGVyJyB9LFxuICAgICAgICB0aGlzLl9nZXRDb2x1bW5IZWFkZXJzKHRoaXMucHJvcHMuc3VwZXJIZWFkZXJDb2x1bW5zLCAnc2gnKVxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgX2dldEhlYWRlclJvdzogZnVuY3Rpb24gX2dldEhlYWRlclJvdygpIHtcbiAgICB2YXIgY29sdW1ucyA9IHRoaXMucHJvcHMuY29sdW1ucy5zbGljZSgpO1xuICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlTZWxlY3RBbGwpIHtcbiAgICAgIGNvbHVtbnMuc3BsaWNlKDAsIDAsIHRoaXMuX2dldFNlbGVjdEFsbENoZWNrYm94KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RyJyxcbiAgICAgIHsgY2xhc3NOYW1lOiAnbXVpLXRhYmxlLWhlYWRlci1yb3cnLCByZWY6ICdoZWFkZXInIH0sXG4gICAgICB0aGlzLl9nZXRIZWFkZXJDb2x1bW5zKGNvbHVtbnMsICdoJylcbiAgICApO1xuICB9LFxuXG4gIF9nZXRIZWFkZXJDb2x1bW5zOiBmdW5jdGlvbiBfZ2V0SGVhZGVyQ29sdW1ucyhoZWFkZXJEYXRhLCBrZXlQcmVmaXgpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgaGVhZGVycyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGhlYWRlckRhdGEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgX2hlYWRlckRhdGEkaW5kZXggPSBoZWFkZXJEYXRhW2luZGV4XTtcbiAgICAgIHZhciBjb250ZW50ID0gX2hlYWRlckRhdGEkaW5kZXguY29udGVudDtcbiAgICAgIHZhciB0b29sdGlwID0gX2hlYWRlckRhdGEkaW5kZXgudG9vbHRpcDtcbiAgICAgIHZhciBzdHlsZSA9IF9oZWFkZXJEYXRhJGluZGV4LnN0eWxlO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX2hlYWRlckRhdGEkaW5kZXgsIFsnY29udGVudCcsICd0b29sdGlwJywgJ3N0eWxlJ10pO1xuXG4gICAgICB2YXIga2V5ID0ga2V5UHJlZml4ICsgaW5kZXg7XG5cbiAgICAgIGhlYWRlcnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUYWJsZUhlYWRlckNvbHVtbixcbiAgICAgICAgX2V4dGVuZHMoeyBrZXk6IGtleSwgc3R5bGU6IHN0eWxlLCB0b29sdGlwOiB0b29sdGlwLCBjb2x1bW5OdW1iZXI6IGluZGV4IH0sIHByb3BzKSxcbiAgICAgICAgY29udGVudFxuICAgICAgKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH0sXG5cbiAgX2dldFNlbGVjdEFsbENoZWNrYm94OiBmdW5jdGlvbiBfZ2V0U2VsZWN0QWxsQ2hlY2tib3goKSB7XG4gICAgdmFyIGNoZWNrYm94ID0gUmVhY3QuY3JlYXRlRWxlbWVudChDaGVja2JveCwge1xuICAgICAgbmFtZTogJ3NlbGVjdGFsbGNiJyxcbiAgICAgIHZhbHVlOiAnc2VsZWN0ZWQnLFxuICAgICAgZGlzYWJsZWQ6ICF0aGlzLnByb3BzLmVuYWJsZVNlbGVjdEFsbCxcbiAgICAgIG9uQ2hlY2s6IHRoaXMuX29uU2VsZWN0QWxsIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IGNoZWNrYm94LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDI0LFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IDI0XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICBfb25TZWxlY3RBbGw6IGZ1bmN0aW9uIF9vblNlbGVjdEFsbCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdEFsbCkgdGhpcy5wcm9wcy5vblNlbGVjdEFsbCgpO1xuICB9LFxuXG4gIF9vbkNvbHVtbkNsaWNrOiBmdW5jdGlvbiBfb25Db2x1bW5DbGljayhlLCBjb2x1bW5OdW1iZXIpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNvbHVtbkNsaWNrKSB0aGlzLnByb3BzLm9uQ29sdW1uQ2xpY2soZSwgY29sdW1uTnVtYmVyKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZUhlYWRlcjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgVGFibGVSb3dDb2x1bW4gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFibGVSb3dDb2x1bW4nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY29sdW1uTnVtYmVyOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgb25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ib3ZlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ib3ZlckV4aXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIGhvdmVyYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJhYmxlOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFibGVSb3dDb2x1bW47XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHRoZW1lID0gdGhpcy5nZXRUaGVtZSgpO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZyxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZyxcbiAgICAgIGhlaWdodDogdGhlbWUuaGVpZ2h0LFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBmb250U2l6ZTogMTMsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJ1xuICAgIH07XG5cbiAgICBpZiAoUmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPT09IDEgJiYgIWlzTmFOKHRoaXMucHJvcHMuY2hpbGRyZW4pKSB7XG4gICAgICBzdHlsZXMudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAnbXVpLXRhYmxlLXJvdy1jb2x1bW4nO1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciBoYW5kbGVycyA9IHtcbiAgICAgIG9uQ2xpY2s6IHRoaXMuX29uQ2xpY2ssXG4gICAgICBvbk1vdXNlT3ZlcjogdGhpcy5fb25Nb3VzZU92ZXIsXG4gICAgICBvbk1vdXNlT3V0OiB0aGlzLl9vbk1vdXNlT3V0XG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RkJyxcbiAgICAgIF9leHRlbmRzKHtcbiAgICAgICAga2V5OiB0aGlzLnByb3BzLmtleSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcywgdGhpcy5wcm9wcy5zdHlsZSlcbiAgICAgIH0sIGhhbmRsZXJzKSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIF9vbkNsaWNrOiBmdW5jdGlvbiBfb25DbGljayhlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DbGljaykgdGhpcy5wcm9wcy5vbkNsaWNrKGUsIHRoaXMucHJvcHMuY29sdW1uTnVtYmVyKTtcbiAgfSxcblxuICBfb25Nb3VzZU92ZXI6IGZ1bmN0aW9uIF9vbk1vdXNlT3ZlcihlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaG92ZXJhYmxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uSG92ZXIpIHRoaXMucHJvcHMub25Ib3ZlcihlLCB0aGlzLnByb3BzLmNvbHVtbk51bWJlcik7XG4gICAgfVxuICB9LFxuXG4gIF9vbk1vdXNlT3V0OiBmdW5jdGlvbiBfb25Nb3VzZU91dChlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaG92ZXJhYmxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkhvdmVyRXhpdCkgdGhpcy5wcm9wcy5vbkhvdmVyRXhpdChlLCB0aGlzLnByb3BzLmNvbHVtbk51bWJlcik7XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlUm93Q29sdW1uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBDaGVja2JveCA9IHJlcXVpcmUoJy4uL2NoZWNrYm94Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRhYmxlUm93Q29sdW1uID0gcmVxdWlyZSgnLi90YWJsZS1yb3ctY29sdW1uJyk7XG52YXIgVG9vbHRpcCA9IHJlcXVpcmUoJy4uL3Rvb2x0aXAnKTtcblxudmFyIFRhYmxlUm93ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RhYmxlUm93JyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHJvd051bWJlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIG9uUm93Q2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2VsbENsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblJvd0hvdmVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblJvd0hvdmVyRXhpdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DZWxsSG92ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2VsbEhvdmVyRXhpdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHN0cmlwZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGhvdmVyYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzcGxheUJvcmRlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzcGxheVJvd0NoZWNrYm94OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICBzZWxlY3RhYmxlOiB0cnVlLFxuICAgICAgc3RyaXBlZDogZmFsc2UsXG4gICAgICBob3ZlcmFibGU6IGZhbHNlLFxuICAgICAgZGlzcGxheUJvcmRlcjogdHJ1ZSxcbiAgICAgIGRpc3BsYXlSb3dDaGVja2JveDogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFibGVSb3c7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHRoZW1lID0gdGhpcy5nZXRUaGVtZSgpO1xuICAgIHZhciBjZWxsQmdDb2xvciA9ICdpbmhlcml0JztcbiAgICBpZiAodGhpcy5zdGF0ZS5ob3ZlcmVkKSB7XG4gICAgICBjZWxsQmdDb2xvciA9IHRoZW1lLmhvdmVyQ29sb3I7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICBjZWxsQmdDb2xvciA9IHRoZW1lLnNlbGVjdGVkQ29sb3I7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnN0cmlwZWQpIHtcbiAgICAgIGNlbGxCZ0NvbG9yID0gdGhlbWUuc3RyaXBlQ29sb3I7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkICcgKyB0aGlzLmdldFRoZW1lKCkuYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICBjZWxsOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY2VsbEJnQ29sb3IsXG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkudGV4dENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghdGhpcy5wcm9wcy5kaXNwbGF5Qm9yZGVyKSB7XG4gICAgICBzdHlsZXMucm9vdC5ib3JkZXJCb3R0b20gPSAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAnbXVpLXRhYmxlLXJvdyc7XG4gICAgdmFyIGNvbHVtbnMgPSB0aGlzLnByb3BzLmNvbHVtbnMuc2xpY2UoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNwbGF5Um93Q2hlY2tib3gpIHtcbiAgICAgIGNvbHVtbnMuc3BsaWNlKDAsIDAsIHRoaXMuX2dldFJvd0NoZWNrYm94KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RyJyxcbiAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIG9uQ2xpY2s6IHRoaXMuX29uUm93Q2xpY2ssIHN0eWxlOiB0aGlzLmdldFN0eWxlcygpLnJvb3QgfSxcbiAgICAgIHRoaXMuX2dldENvbHVtbnMoY29sdW1ucylcbiAgICApO1xuICB9LFxuXG4gIF9nZXRDb2x1bW5zOiBmdW5jdGlvbiBfZ2V0Q29sdW1ucyhjb2x1bW5zKSB7XG4gICAgdmFyIHJvd0NvbHVtbnMgPSBbXTtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjb2x1bW5zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGtleSA9IHRoaXMucHJvcHMucm93TnVtYmVyICsgJy0nICsgaW5kZXg7XG4gICAgICB2YXIgX2NvbHVtbnMkaW5kZXggPSBjb2x1bW5zW2luZGV4XTtcbiAgICAgIHZhciBjb250ZW50ID0gX2NvbHVtbnMkaW5kZXguY29udGVudDtcbiAgICAgIHZhciBzdHlsZSA9IF9jb2x1bW5zJGluZGV4LnN0eWxlO1xuXG4gICAgICBpZiAoY29udGVudCA9PT0gdW5kZWZpbmVkKSBjb250ZW50ID0gY29sdW1uc1tpbmRleF07XG5cbiAgICAgIHZhciBjb2x1bW5Db21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUYWJsZVJvd0NvbHVtbixcbiAgICAgICAge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGNvbHVtbk51bWJlcjogaW5kZXgsXG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmNlbGwsIHN0eWxlKSxcbiAgICAgICAgICBob3ZlcmFibGU6IHRoaXMucHJvcHMuaG92ZXJhYmxlLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uQ2VsbENsaWNrLFxuICAgICAgICAgIG9uSG92ZXI6IHRoaXMuX29uQ2VsbEhvdmVyLFxuICAgICAgICAgIG9uSG92ZXJFeGl0OiB0aGlzLl9vbkNlbGxIb3ZlckV4aXQgfSxcbiAgICAgICAgY29udGVudFxuICAgICAgKTtcblxuICAgICAgcm93Q29sdW1ucy5wdXNoKGNvbHVtbkNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd0NvbHVtbnM7XG4gIH0sXG5cbiAgX2dldFJvd0NoZWNrYm94OiBmdW5jdGlvbiBfZ2V0Um93Q2hlY2tib3goKSB7XG4gICAgdmFyIGtleSA9IHRoaXMucHJvcHMucm93TnVtYmVyICsgJy1jYic7XG4gICAgdmFyIGNoZWNrYm94ID0gUmVhY3QuY3JlYXRlRWxlbWVudChDaGVja2JveCwge1xuICAgICAgcmVmOiAncm93U2VsZWN0Q0InLFxuICAgICAgbmFtZToga2V5LFxuICAgICAgdmFsdWU6ICdzZWxlY3RlZCcsXG4gICAgICBkaXNhYmxlZDogIXRoaXMucHJvcHMuc2VsZWN0YWJsZSxcbiAgICAgIGRlZmF1bHRDaGVja2VkOiB0aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgb25DaGVjazogdGhpcy5fb25DaGVjayB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiBjaGVja2JveCxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiAyNCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNFxuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgX29uUm93Q2xpY2s6IGZ1bmN0aW9uIF9vblJvd0NsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblJvd0NsaWNrKSB0aGlzLnByb3BzLm9uUm93Q2xpY2soZSwgdGhpcy5wcm9wcy5yb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9vblJvd0hvdmVyOiBmdW5jdGlvbiBfb25Sb3dIb3ZlcihlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dIb3ZlcikgdGhpcy5wcm9wcy5vblJvd0hvdmVyKGUsIHRoaXMucHJvcHMucm93TnVtYmVyKTtcbiAgfSxcblxuICBfb25Sb3dIb3ZlckV4aXQ6IGZ1bmN0aW9uIF9vblJvd0hvdmVyRXhpdChlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQpIHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQoZSwgdGhpcy5wcm9wcy5yb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9vbkNlbGxDbGljazogZnVuY3Rpb24gX29uQ2VsbENsaWNrKGUsIGNvbHVtbkluZGV4KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0YWJsZSAmJiB0aGlzLnByb3BzLm9uQ2VsbENsaWNrKSB0aGlzLnByb3BzLm9uQ2VsbENsaWNrKGUsIHRoaXMucHJvcHMucm93TnVtYmVyLCBjb2x1bW5JbmRleCk7XG4gICAgaWYgKHRoaXMucmVmcy5yb3dTZWxlY3RDQiAhPT0gdW5kZWZpbmVkKSB0aGlzLnJlZnMucm93U2VsZWN0Q0Iuc2V0Q2hlY2tlZCghdGhpcy5yZWZzLnJvd1NlbGVjdENCLmlzQ2hlY2tlZCgpKTtcbiAgICB0aGlzLl9vblJvd0NsaWNrKGUpO1xuICB9LFxuXG4gIF9vbkNlbGxIb3ZlcjogZnVuY3Rpb24gX29uQ2VsbEhvdmVyKGUsIGNvbHVtbkluZGV4KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaG92ZXJhYmxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2VsbEhvdmVyKSB0aGlzLnByb3BzLm9uQ2VsbEhvdmVyKGUsIHRoaXMucHJvcHMucm93TnVtYmVyLCBjb2x1bW5JbmRleCk7XG4gICAgICB0aGlzLl9vblJvd0hvdmVyKGUpO1xuICAgIH1cbiAgfSxcblxuICBfb25DZWxsSG92ZXJFeGl0OiBmdW5jdGlvbiBfb25DZWxsSG92ZXJFeGl0KGUsIGNvbHVtbkluZGV4KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaG92ZXJhYmxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkNlbGxIb3ZlckV4aXQpIHRoaXMucHJvcHMub25DZWxsSG92ZXJFeGl0KGUsIHRoaXMucHJvcHMucm93TnVtYmVyLCBjb2x1bW5JbmRleCk7XG4gICAgICB0aGlzLl9vblJvd0hvdmVyRXhpdChlKTtcbiAgICB9XG4gIH0sXG5cbiAgX29uQ2hlY2s6IGZ1bmN0aW9uIF9vbkNoZWNrKGUpIHtcbiAgICBlLmN0cmxLZXkgPSB0cnVlO1xuICAgIHRoaXMuX29uQ2VsbENsaWNrKGUsIDApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlUm93OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ2xpY2tBd2F5YWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9jbGljay1hd2F5YWJsZScpO1xudmFyIFRhYmxlSGVhZGVyID0gcmVxdWlyZSgnLi90YWJsZS1oZWFkZXInKTtcbnZhciBUYWJsZVJvdyA9IHJlcXVpcmUoJy4vdGFibGUtcm93Jyk7XG52YXIgVGFibGVGb290ZXIgPSByZXF1aXJlKCcuL3RhYmxlLWZvb3RlcicpO1xudmFyIERPTSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xuXG52YXIgVGFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFibGUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIENsaWNrQXdheWFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgcm93RGF0YTogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgY29sdW1uT3JkZXI6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcbiAgICBoZWFkZXJDb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGZvb3RlckNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICBmb290ZXI6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIGhlaWdodDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0Q29sdW1uV2lkdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZml4ZWRIZWFkZXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGZpeGVkRm9vdGVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpcGVkUm93czogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1Jvd0hvdmVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBtdWx0aVNlbGVjdGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHNob3dSb3dTZWxlY3RDaGVja2JveDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgY2FuU2VsZWN0QWxsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5U2VsZWN0QWxsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvblJvd1NlbGVjdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DZWxsQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUm93SG92ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUm93SG92ZXJFeGl0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNlbGxIb3ZlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DZWxsSG92ZXJFeGl0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaXhlZEhlYWRlcjogdHJ1ZSxcbiAgICAgIGZpeGVkRm9vdGVyOiB0cnVlLFxuICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBkZWZhdWx0Q29sdW1uV2lkdGg6ICc1MHB4JyxcbiAgICAgIHN0cmlwZWRSb3dzOiBmYWxzZSxcbiAgICAgIHNob3dSb3dIb3ZlcjogZmFsc2UsXG4gICAgICBzZWxlY3RhYmxlOiB0cnVlLFxuICAgICAgc2hvd1Jvd1NlbGVjdENoZWNrYm94OiB0cnVlLFxuICAgICAgbXVsdGlTZWxlY3RhYmxlOiBmYWxzZSxcbiAgICAgIGNhblNlbGVjdEFsbDogZmFsc2UsXG4gICAgICBkaXNwbGF5U2VsZWN0QWxsOiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWRSb3dzOiBbXVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRhYmxlO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgcGFkZGluZzogJzAgJyArIHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BHdXR0ZXIgKyAncHgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXJDb2xsYXBzZTogJ2NvbGxhcHNlJyxcbiAgICAgICAgYm9yZGVyU3BhY2luZzogMCxcbiAgICAgICAgdGFibGVMYXlvdXQ6ICdmaXhlZCdcbiAgICAgIH0sXG4gICAgICBib2R5VGFibGU6IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmZpeGVkSGVhZGVyIHx8IHRoaXMucHJvcHMuZml4ZWRGb290ZXIgPyB0aGlzLnByb3BzLmhlaWdodCA6ICdhdXRvJyxcbiAgICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcbiAgICAgIH0sXG4gICAgICB0YWJsZVdyYXBwZXI6IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmZpeGVkSGVhZGVyIHx8IHRoaXMucHJvcHMuZml4ZWRGb290ZXIgPyAnYXV0bycgOiB0aGlzLnByb3BzLmhlaWdodCxcbiAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIGNvbXBvbmVudENsaWNrQXdheTogZnVuY3Rpb24gY29tcG9uZW50Q2xpY2tBd2F5KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkUm93cy5sZW5ndGgpIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFJvd3M6IFtdIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSAnbXVpLXRhYmxlJztcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIHZhciB0SGVhZCA9IHRoaXMuX2dldEhlYWRlcigpO1xuICAgIHZhciB0Qm9keSA9IHRoaXMuX2dldEJvZHkoKTtcbiAgICB2YXIgdEZvb3QgPSB0aGlzLl9nZXRGb290ZXIoKTtcblxuICAgIHZhciBoZWFkZXJUYWJsZSA9IHVuZGVmaW5lZCxcbiAgICAgICAgZm9vdGVyVGFibGUgPSB1bmRlZmluZWQ7XG4gICAgdmFyIGlubGluZUhlYWRlciA9IHVuZGVmaW5lZCxcbiAgICAgICAgaW5saW5lRm9vdGVyID0gdW5kZWZpbmVkO1xuICAgIGlmICh0SGVhZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5maXhlZEhlYWRlcikge1xuICAgICAgICBoZWFkZXJUYWJsZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdtdWktaGVhZGVyLXRhYmxlJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAndGFibGUnLFxuICAgICAgICAgICAgeyByZWY6ICdoZWFkZXJUYWJsZScsIGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgICAgICAgIHRIZWFkXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5saW5lSGVhZGVyID0gdEhlYWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0Rm9vdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5maXhlZEZvb3Rlcikge1xuICAgICAgICBmb290ZXJUYWJsZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdtdWktZm9vdGVyLXRhYmxlJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAndGFibGUnLFxuICAgICAgICAgICAgeyByZWY6ICdmb290ZXJUYWJsZScsIGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgICAgICAgIHRGb290XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5saW5lRm9vdGVyID0gdEZvb3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiAnbXVpLXRhYmxlLXdyYXBwZXInLCBzdHlsZTogc3R5bGVzLnRhYmxlV3JhcHBlciB9LFxuICAgICAgaGVhZGVyVGFibGUsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdtdWktYm9keS10YWJsZScsIHN0eWxlOiBzdHlsZXMuYm9keVRhYmxlIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3RhYmxlJyxcbiAgICAgICAgICB7IHJlZjogJ2JvZHlUYWJsZScsIGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgICAgICBpbmxpbmVIZWFkZXIsXG4gICAgICAgICAgaW5saW5lRm9vdGVyLFxuICAgICAgICAgIHRCb2R5XG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBmb290ZXJUYWJsZVxuICAgICk7XG4gIH0sXG5cbiAgX2dldEhlYWRlcjogZnVuY3Rpb24gX2dldEhlYWRlcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oZWFkZXIpIHJldHVybiB0aGlzLnByb3BzLmhlYWRlcjtcblxuICAgIGlmICh0aGlzLnByb3BzLmhlYWRlckNvbHVtbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG9yZGVyZWRIZWFkZXJDb2x1bW5zID0gdGhpcy5fb3JkZXJDb2x1bW5CYXNlZERhdGEodGhpcy5wcm9wcy5oZWFkZXJDb2x1bW5zKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlSGVhZGVyLCB7XG4gICAgICAgIGNvbHVtbnM6IG9yZGVyZWRIZWFkZXJDb2x1bW5zLFxuICAgICAgICBlbmFibGVTZWxlY3RBbGw6IHRoaXMucHJvcHMuY2FuU2VsZWN0QWxsICYmIHRoaXMucHJvcHMuc2VsZWN0YWJsZSxcbiAgICAgICAgZGlzcGxheVNlbGVjdEFsbDogdGhpcy5wcm9wcy5kaXNwbGF5U2VsZWN0QWxsLFxuICAgICAgICBvblNlbGVjdEFsbDogdGhpcy5fb25TZWxlY3RBbGwgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9nZXRGb290ZXI6IGZ1bmN0aW9uIF9nZXRGb290ZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZm9vdGVyKSByZXR1cm4gdGhpcy5wcm9wcy5mb290ZXI7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5mb290ZXJDb2x1bW5zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBvcmRlcmVkRm9vdGVyQ29sdW1ucyA9IHRoaXMuX29yZGVyQ29sdW1uQmFzZWREYXRhKHRoaXMucHJvcHMuZm9vdGVyQ29sdW1ucyk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5kaXNwbGF5U2VsZWN0QWxsKSB7XG4gICAgICAgIG9yZGVyZWRGb290ZXJDb2x1bW5zLnNwbGljZSgwLCAwLCB7IGNvbnRlbnQ6ICcnIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUZvb3RlciwgeyBjb2x1bW5zOiBvcmRlcmVkRm9vdGVyQ29sdW1ucyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX2dldEJvZHk6IGZ1bmN0aW9uIF9nZXRCb2R5KCkge1xuICAgIHZhciBib2R5ID0gdGhpcy5fb3JkZXJDb2x1bW5CYXNlZERhdGEodGhpcy5wcm9wcy5yb3dEYXRhLCAoZnVuY3Rpb24gKHJvd0RhdGEsIHJvd051bWJlcikge1xuICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5faXNSb3dTZWxlY3RlZChyb3dOdW1iZXIpO1xuICAgICAgdmFyIHN0cmlwZWQgPSB0aGlzLnByb3BzLnN0cmlwZWRSb3dzICYmIHJvd051bWJlciAlIDIgPT09IDA7XG4gICAgICB2YXIgYm9yZGVyID0gdHJ1ZTtcbiAgICAgIGlmIChyb3dOdW1iZXIgPT09IHRoaXMucHJvcHMucm93RGF0YS5sZW5ndGggLSAxKSB7XG4gICAgICAgIGJvcmRlciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcm93ID0gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZVJvdywge1xuICAgICAgICBrZXk6ICdyLScgKyByb3dOdW1iZXIsXG4gICAgICAgIHJvd051bWJlcjogcm93TnVtYmVyLFxuICAgICAgICBjb2x1bW5zOiByb3dEYXRhLFxuICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICAgIHN0cmlwZWQ6IHN0cmlwZWQsXG4gICAgICAgIGhvdmVyYWJsZTogdGhpcy5wcm9wcy5zaG93Um93SG92ZXIsXG4gICAgICAgIGRpc3BsYXlCb3JkZXI6IGJvcmRlcixcbiAgICAgICAgc2VsZWN0YWJsZTogdGhpcy5wcm9wcy5zZWxlY3RhYmxlLFxuICAgICAgICBvblJvd0NsaWNrOiB0aGlzLl9oYW5kbGVSb3dDbGljayxcbiAgICAgICAgb25DZWxsQ2xpY2s6IHRoaXMuX2hhbmRsZUNlbGxDbGljayxcbiAgICAgICAgb25Sb3dIb3ZlcjogdGhpcy5faGFuZGxlUm93SG92ZXIsXG4gICAgICAgIG9uUm93SG92ZXJFeGl0OiB0aGlzLl9oYW5kbGVSb3dIb3ZlckV4aXQsXG4gICAgICAgIG9uQ2VsbEhvdmVyOiB0aGlzLl9oYW5kbGVDZWxsSG92ZXIsXG4gICAgICAgIG9uQ2VsbEhvdmVyRXhpdDogdGhpcy5faGFuZGxlQ2VsbEhvdmVyRXhpdCB9KTtcblxuICAgICAgcmV0dXJuIHJvdztcbiAgICB9KS5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3Rib2R5JyxcbiAgICAgIHsgc3R5bGU6IHsgaGVpZ2h0OiB0aGlzLnByb3BzLmhlaWdodCB9IH0sXG4gICAgICBib2R5XG4gICAgKTtcbiAgfSxcblxuICBfb3JkZXJDb2x1bW5CYXNlZERhdGE6IGZ1bmN0aW9uIF9vcmRlckNvbHVtbkJhc2VkRGF0YShjb2x1bW5CYXNlZERhdGEsIGNiKSB7XG4gICAgLy8gSWYgd2UgZG8gbm90IGhhdmUgYSBjb2x1bW5PcmRlciwgcmV0dXJuLlxuICAgIGlmICh0aGlzLnByb3BzLmNvbHVtbk9yZGVyID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBkYXRhID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGNvbHVtbkJhc2VkRGF0YSkgIT09ICdbb2JqZWN0IEFycmF5XScgPyBbY29sdW1uQmFzZWREYXRhXSA6IGNvbHVtbkJhc2VkRGF0YTtcbiAgICB2YXIgb3JkZXJlZERhdGEgPSBbXTtcblxuICAgIGZvciAodmFyIHJvd0lkeCA9IDA7IHJvd0lkeCA8IGRhdGEubGVuZ3RoOyByb3dJZHgrKykge1xuICAgICAgdmFyIHJvd0RhdGEgPSBkYXRhW3Jvd0lkeF07XG4gICAgICB2YXIgb3JkZXJlZFJvd0RhdGEgPSBbXTtcblxuICAgICAgZm9yICh2YXIgY29sSWR4ID0gMDsgY29sSWR4IDwgdGhpcy5wcm9wcy5jb2x1bW5PcmRlci5sZW5ndGg7IGNvbElkeCsrKSB7XG4gICAgICAgIHZhciBjb2x1bW5JZCA9IHRoaXMucHJvcHMuY29sdW1uT3JkZXJbY29sSWR4XTtcbiAgICAgICAgdmFyIGNvbHVtbkRhdGEgPSByb3dEYXRhW2NvbHVtbklkXSB8fCB7fTtcblxuICAgICAgICBvcmRlcmVkUm93RGF0YS5wdXNoKGNvbHVtbkRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3JkZXJlZFJvd0RhdGEubGVuZ3RoKSB7XG4gICAgICAgIHJvd0RhdGEgPSBvcmRlcmVkUm93RGF0YTtcbiAgICAgIH1cblxuICAgICAgLy8gRml4ZWQgdGFibGUgbGF5b3V0IG9ubHkgcmVxdWlyZXMgd2lkdGhzIG9uIGZpcnN0IHJvdy5cbiAgICAgIGlmIChyb3dJZHggPT09IDEgJiYgZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJvd0RhdGEgPSB0aGlzLl9zZXRDb2x1bW5XaWR0aHMocm93RGF0YSk7XG4gICAgICB9XG5cbiAgICAgIG9yZGVyZWREYXRhLnB1c2goY2IgIT09IHVuZGVmaW5lZCA/IGNiKHJvd0RhdGEsIHJvd0lkeCkgOiByb3dEYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YS5sZW5ndGggPT09IDEgPyBvcmRlcmVkRGF0YVswXSA6IG9yZGVyZWREYXRhO1xuICB9LFxuXG4gIF9zZXRDb2x1bW5XaWR0aHM6IGZ1bmN0aW9uIF9zZXRDb2x1bW5XaWR0aHMoY29sdW1uRGF0YSkge1xuICAgIGNvbHVtbkRhdGEuZm9yRWFjaCgoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgaWYgKGNvbHVtbi5zdHlsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbHVtbi5zdHlsZSA9IHtcbiAgICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy5kZWZhdWx0Q29sdW1uV2lkdGgsXG4gICAgICAgICAgbWF4V2lkdGg6IHRoaXMucHJvcHMuZGVmYXVsdENvbHVtbldpZHRoXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29sdW1uLnN0eWxlLndpZHRoID09PSB1bmRlZmluZWQpIGNvbHVtbi5zdHlsZS53aWR0aCA9IHRoaXMucHJvcHMuZGVmYXVsdENvbHVtbldpZHRoO1xuICAgICAgICBpZiAoY29sdW1uLnN0eWxlLm1heFdpZHRoID09PSB1bmRlZmluZWQpIGNvbHVtbi5zdHlsZS5tYXhXaWR0aCA9IHRoaXMucHJvcHMuZGVmYXVsdENvbHVtbldpZHRoO1xuICAgICAgfVxuICAgIH0pLmJpbmQodGhpcykpO1xuXG4gICAgcmV0dXJuIGNvbHVtbkRhdGE7XG4gIH0sXG5cbiAgX2lzUm93U2VsZWN0ZWQ6IGZ1bmN0aW9uIF9pc1Jvd1NlbGVjdGVkKHJvd051bWJlcikge1xuICAgIGlmICh0aGlzLnN0YXRlLmFsbFJvd3NTZWxlY3RlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLnNlbGVjdGVkUm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlbGVjdGlvbiA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRSb3dzW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVmFsdWVJblJhbmdlKHJvd051bWJlciwgc2VsZWN0aW9uKSkgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VsZWN0aW9uID09PSByb3dOdW1iZXIpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBfaXNWYWx1ZUluUmFuZ2U6IGZ1bmN0aW9uIF9pc1ZhbHVlSW5SYW5nZSh2YWx1ZSwgcmFuZ2UpIHtcbiAgICBpZiAocmFuZ2Uuc3RhcnQgPD0gdmFsdWUgJiYgdmFsdWUgPD0gcmFuZ2UuZW5kIHx8IHJhbmdlLmVuZCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSByYW5nZS5zdGFydCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIF9oYW5kbGVSb3dDbGljazogZnVuY3Rpb24gX2hhbmRsZVJvd0NsaWNrKGUsIHJvd051bWJlcikge1xuICAgIC8vIFByZXZlbnQgdGV4dCBzZWxlY3Rpb24gd2hpbGUgc2VsZWN0aW5nIHJvd3MuXG4gICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0YWJsZSkge1xuICAgICAgdGhpcy5fcHJvY2Vzc1Jvd1NlbGVjdGlvbihlLCByb3dOdW1iZXIpO1xuICAgIH1cbiAgfSxcblxuICBfcHJvY2Vzc1Jvd1NlbGVjdGlvbjogZnVuY3Rpb24gX3Byb2Nlc3NSb3dTZWxlY3Rpb24oZSwgcm93TnVtYmVyKSB7XG4gICAgdmFyIHNlbGVjdGVkUm93cyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRSb3dzO1xuXG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgdGhpcy5wcm9wcy5tdWx0aVNlbGVjdGFibGUgJiYgc2VsZWN0ZWRSb3dzLmxlbmd0aCkge1xuICAgICAgdmFyIGxhc3RTZWxlY3Rpb24gPSBzZWxlY3RlZFJvd3Nbc2VsZWN0ZWRSb3dzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHN0YXJ0ID0gdW5kZWZpbmVkLFxuICAgICAgICAgIGVuZCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBkaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0eXBlb2YgbGFzdFNlbGVjdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbGFzdFNlbGVjdGlvbi5lbmQgPSByb3dOdW1iZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFJvd3MucHVzaCh7IHN0YXJ0OiBsYXN0U2VsZWN0aW9uLCBlbmQ6IHJvd051bWJlciB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChlLmN0cmxLZXkgJiYgIWUubWV0YUtleSB8fCBlLm1ldGFLZXkgJiYgIWUuY3RybEtleSkgJiYgdGhpcy5wcm9wcy5tdWx0aVNlbGVjdGFibGUpIHtcbiAgICAgIHZhciBpZHggPSBzZWxlY3RlZFJvd3MuaW5kZXhPZihyb3dOdW1iZXIpO1xuICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgc2VsZWN0ZWRSb3dzLnB1c2gocm93TnVtYmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkUm93cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNlbGVjdGVkUm93cy5sZW5ndGggPT09IDEgJiYgc2VsZWN0ZWRSb3dzWzBdID09PSByb3dOdW1iZXIpIHtcbiAgICAgICAgc2VsZWN0ZWRSb3dzID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFJvd3MgPSBbcm93TnVtYmVyXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSb3dzOiBzZWxlY3RlZFJvd3MgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dTZWxlY3Rpb24pIHRoaXMucHJvcHMub25Sb3dTZWxlY3Rpb24oc2VsZWN0ZWRSb3dzKTtcbiAgfSxcblxuICBfaGFuZGxlQ2VsbENsaWNrOiBmdW5jdGlvbiBfaGFuZGxlQ2VsbENsaWNrKGUsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DZWxsQ2xpY2spIHRoaXMucHJvcHMub25DZWxsQ2xpY2socm93TnVtYmVyLCB0aGlzLl9nZXRDb2x1bW5JZChjb2x1bW5OdW1iZXIpKTtcbiAgICB0aGlzLl9oYW5kbGVSb3dDbGljayhlLCByb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9oYW5kbGVSb3dIb3ZlcjogZnVuY3Rpb24gX2hhbmRsZVJvd0hvdmVyKGUsIHJvd051bWJlcikge1xuICAgIGlmICh0aGlzLnByb3BzLm9uUm93SG92ZXIpIHRoaXMucHJvcHMub25Sb3dIb3Zlcihyb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9oYW5kbGVSb3dIb3ZlckV4aXQ6IGZ1bmN0aW9uIF9oYW5kbGVSb3dIb3ZlckV4aXQoZSwgcm93TnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQpIHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQocm93TnVtYmVyKTtcbiAgfSxcblxuICBfaGFuZGxlQ2VsbEhvdmVyOiBmdW5jdGlvbiBfaGFuZGxlQ2VsbEhvdmVyKGUsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DZWxsSG92ZXIpIHRoaXMucHJvcHMub25DZWxsSG92ZXIocm93TnVtYmVyLCB0aGlzLl9nZXRDb2x1bW5JZChjb2x1bW5OdW1iZXIpKTtcbiAgICB0aGlzLl9oYW5kbGVSb3dIb3ZlcihlLCByb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9oYW5kbGVDZWxsSG92ZXJFeGl0OiBmdW5jdGlvbiBfaGFuZGxlQ2VsbEhvdmVyRXhpdChlLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlcikge1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2VsbEhvdmVyRXhpdCkgdGhpcy5wcm9wcy5vbkNlbGxIb3ZlckV4aXQocm93TnVtYmVyLCB0aGlzLl9nZXRDb2x1bW5JZChjb2x1bW5OdW1iZXIpKTtcbiAgICB0aGlzLl9oYW5kbGVSb3dIb3ZlckV4aXQoZSwgcm93TnVtYmVyKTtcbiAgfSxcblxuICBfb25TZWxlY3RBbGw6IGZ1bmN0aW9uIF9vblNlbGVjdEFsbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWxsUm93c1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5hbGxSb3dzU2VsZWN0ZWQgfSk7XG4gIH0sXG5cbiAgX2dldENvbHVtbklkOiBmdW5jdGlvbiBfZ2V0Q29sdW1uSWQoY29sdW1uTnVtYmVyKSB7XG4gICAgdmFyIGNvbHVtbklkID0gY29sdW1uTnVtYmVyO1xuICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlSb3dDaGVja2JveCkgY29sdW1uSWQtLTtcbiAgICBjb2x1bW5JZCA9IHRoaXMucHJvcHMuY29sdW1uT3JkZXIubGVuZ3RoID8gdGhpcy5wcm9wcy5jb2x1bW5PcmRlcltjb2x1bW5JZF0gOiBjb2x1bW5JZDtcblxuICAgIHJldHVybiBjb2x1bW5JZDtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZS5qcycpO1xudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4uL3N0eWxlcy9jb2xvcnMuanMnKTtcbnZhciBUYWIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFiJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGhhbmRsZVRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgd2lkdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgfSxcblxuICBoYW5kbGVUb3VjaFRhcDogZnVuY3Rpb24gaGFuZGxlVG91Y2hUYXAoKSB7XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVUb3VjaFRhcCh0aGlzLnByb3BzLnRhYkluZGV4LCB0aGlzKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICAnZGlzcGxheSc6ICd0YWJsZS1jZWxsJyxcbiAgICAgICdjdXJzb3InOiAncG9pbnRlcicsXG4gICAgICAndGV4dEFsaWduJzogJ2NlbnRlcicsXG4gICAgICAndmVydGljYWxBbGlnbic6ICdtaWRkbGUnLFxuICAgICAgJ2hlaWdodCc6ICc0OHB4JyxcbiAgICAgICdjb2xvcic6IENvbG9ycy53aGl0ZSxcbiAgICAgICdvcGFjaXR5JzogJy42JyxcbiAgICAgICdmb250U2l6ZSc6ICcxNHB4JyxcbiAgICAgICdmb250V2VpZ2h0JzogJzUwMCcsXG4gICAgICAnd2hpdGVTcGFjZSc6ICdpbml0aWFsJyxcbiAgICAgICdmb250RmFtaWx5JzogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbnRlbnRGb250RmFtaWx5LFxuICAgICAgJ2JveFNpemluZyc6ICdib3JkZXItYm94JyxcbiAgICAgICd3aWR0aCc6IHRoaXMucHJvcHMud2lkdGhcbiAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkKSBzdHlsZXMub3BhY2l0eSA9ICcxJztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMsIG9uVG91Y2hUYXA6IHRoaXMuaGFuZGxlVG91Y2hUYXAsIHJvdXRlTmFtZTogdGhpcy5wcm9wcy5yb3V0ZSB9LFxuICAgICAgdGhpcy5wcm9wcy5sYWJlbFxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGFiOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIFRhYlRlbXBsYXRlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RhYlRlbXBsYXRlJyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAnaGVpZ2h0JzogJzBweCcsXG4gICAgICAnb3ZlcmZsb3cnOiAnaGlkZGVuJyxcbiAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZScsXG4gICAgICAndGV4dEFsaWduJzogJ2luaXRpYWwnXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICBkZWxldGUgc3R5bGVzLmhlaWdodDtcbiAgICAgIGRlbGV0ZSBzdHlsZXMub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcyB9LFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYlRlbXBsYXRlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgVGFiVGVtcGxhdGUgPSByZXF1aXJlKCcuL3RhYlRlbXBsYXRlJyk7XG52YXIgSW5rQmFyID0gcmVxdWlyZSgnLi4vaW5rLWJhcicpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUuanMnKTtcbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcblxudmFyIFRhYnMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFicycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbml0aWFsU2VsZWN0ZWRJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkFjdGl2ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGFiV2lkdGg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgdGFiSXRlbUNvbnRhaW5lclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSAwO1xuICAgIGlmICh0aGlzLnByb3BzLmluaXRpYWxTZWxlY3RlZEluZGV4ICYmIHRoaXMucHJvcHMuaW5pdGlhbFNlbGVjdGVkSW5kZXggPCB0aGlzLnByb3BzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgc2VsZWN0ZWRJbmRleCA9IHRoaXMucHJvcHMuaW5pdGlhbFNlbGVjdGVkSW5kZXg7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZEluZGV4OiBzZWxlY3RlZEluZGV4XG4gICAgfTtcbiAgfSxcblxuICBnZXRFdmVuV2lkdGg6IGZ1bmN0aW9uIGdldEV2ZW5XaWR0aCgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoUmVhY3QuZmluZERPTU5vZGUodGhpcykpLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJyksIDEwKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fdXBkYXRlVGFiV2lkdGgoKTtcbiAgICBFdmVudHMub24od2luZG93LCAncmVzaXplJywgdGhpcy5fdXBkYXRlVGFiV2lkdGgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBFdmVudHMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZVRhYldpZHRoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XG4gICAgaWYgKG5ld1Byb3BzLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB0aGlzLl91cGRhdGVUYWJXaWR0aCgpO1xuICB9LFxuXG4gIGhhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBoYW5kbGVUb3VjaFRhcCh0YWJJbmRleCwgdGFiKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ICE9PSB0YWJJbmRleCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0YWJJbmRleCwgdGFiKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogdGFiSW5kZXggfSk7XG4gICAgLy9kZWZhdWx0IENCIGlzIF9vbkFjdGl2ZS4gQ2FuIGJlIHVwZGF0ZWQgaW4gdGFiLmpzeFxuICAgIGlmICh0YWIucHJvcHMub25BY3RpdmUpIHRhYi5wcm9wcy5vbkFjdGl2ZSh0YWIpO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciB0aGVtZVZhcmlhYmxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFicztcblxuICAgIHJldHVybiB7XG4gICAgICB0YWJJdGVtQ29udGFpbmVyOiB7XG4gICAgICAgIG1hcmdpbjogJzAnLFxuICAgICAgICBwYWRkaW5nOiAnMCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzQ4cHgnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lVmFyaWFibGVzLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgIGRpc3BsYXk6ICd0YWJsZSdcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHRhYkNvbnRlbnQgPSBbXTtcbiAgICB2YXIgd2lkdGggPSB0aGlzLnN0YXRlLmZpeGVkV2lkdGggPyAxMDAgLyB0aGlzLnByb3BzLmNoaWxkcmVuLmxlbmd0aCArICclJyA6IHRoaXMucHJvcHMudGFiV2lkdGggKyAncHgnO1xuXG4gICAgdmFyIGxlZnQgPSAnY2FsYygnICsgd2lkdGggKyAnKicgKyB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggKyAnKSc7XG5cbiAgICB2YXIgdGFicyA9IFJlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAodGFiLCBpbmRleCkge1xuICAgICAgaWYgKHRhYi50eXBlLmRpc3BsYXlOYW1lID09PSAnVGFiJykge1xuXG4gICAgICAgIGlmICh0YWIucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICB0YWJDb250ZW50LnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChUYWJUZW1wbGF0ZSwge1xuICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgIHNlbGVjdGVkOiB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggPT09IGluZGV4XG4gICAgICAgICAgfSwgdGFiLnByb3BzLmNoaWxkcmVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFiQ29udGVudC5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVhY3QuYWRkb25zLmNsb25lV2l0aFByb3BzKHRhYiwge1xuICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgc2VsZWN0ZWQ6IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCA9PT0gaW5kZXgsXG4gICAgICAgICAgdGFiSW5kZXg6IGluZGV4LFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoYW5kbGVUb3VjaFRhcDogdGhpcy5oYW5kbGVUb3VjaFRhcFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0eXBlID0gdGFiLnR5cGUuZGlzcGxheU5hbWUgfHwgdGFiLnR5cGU7XG4gICAgICAgIHRocm93ICdUYWJzIG9ubHkgYWNjZXB0cyBUYWIgQ29tcG9uZW50cyBhcyBjaGlsZHJlbi4gRm91bmQgJyArIHR5cGUgKyAnIGFzIGNoaWxkIG51bWJlciAnICsgKGluZGV4ICsgMSkgKyAnIG9mIFRhYnMnO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudGFiSXRlbUNvbnRhaW5lciwgdGhpcy5wcm9wcy50YWJJdGVtQ29udGFpbmVyU3R5bGUpIH0sXG4gICAgICAgIHRhYnNcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElua0JhciwgeyBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGggfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGFiQ29udGVudFxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX3RhYldpZHRoUHJvcElzVmFsaWQ6IGZ1bmN0aW9uIF90YWJXaWR0aFByb3BJc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRhYldpZHRoICYmIHRoaXMucHJvcHMudGFiV2lkdGggKiB0aGlzLnByb3BzLmNoaWxkcmVuLmxlbmd0aCA8PSB0aGlzLmdldEV2ZW5XaWR0aCgpO1xuICB9LFxuXG4gIC8vIFZhbGlkYXRlcyB0aGF0IHRoZSB0YWJXaWR0aCBjYW4gZml0IGFsbCB0YWJzIG9uIHRoZSB0YWIgYmFyLiBJZiBub3QsIHRoZVxuICAvLyB0YWJXaWR0aCBpcyByZWNhbGN1bGF0ZWQgYW5kIGZpeGVkLlxuICBfdXBkYXRlVGFiV2lkdGg6IGZ1bmN0aW9uIF91cGRhdGVUYWJXaWR0aCgpIHtcbiAgICBpZiAodGhpcy5fdGFiV2lkdGhQcm9wSXNWYWxpZCgpKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZml4ZWRXaWR0aDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZml4ZWRXaWR0aDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYnM7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgQ29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoJy4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgVW5pcXVlSWQgPSByZXF1aXJlKCcuL3V0aWxzL3VuaXF1ZS1pZCcpO1xudmFyIEVuaGFuY2VkVGV4dGFyZWEgPSByZXF1aXJlKCcuL2VuaGFuY2VkLXRleHRhcmVhJyk7XG5cbnZhciBUZXh0RmllbGQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGV4dEZpZWxkJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGVycm9yVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmbG9hdGluZ0xhYmVsVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmdWxsV2lkdGg6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGhpbnRUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG11bHRpTGluZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb25CbHVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25LZXlEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkVudGVyS2V5RG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICByb3dzOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGlucHV0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZmxvYXRpbmdMYWJlbFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZ1bGxXaWR0aDogZmFsc2UsXG4gICAgICB0eXBlOiAndGV4dCcsXG4gICAgICByb3dzOiAxXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGlmIChwcm9wcy5jaGlsZHJlbikgcHJvcHMgPSBwcm9wcy5jaGlsZHJlbi5wcm9wcztcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JUZXh0OiB0aGlzLnByb3BzLmVycm9yVGV4dCxcbiAgICAgIGhhc1ZhbHVlOiBwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUgfHwgcHJvcHMudmFsdWVMaW5rICYmIHByb3BzLnZhbHVlTGluay52YWx1ZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRleHRGaWVsZDtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fdW5pcXVlSWQgPSBVbmlxdWVJZC5nZW5lcmF0ZSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIGhhc0Vycm9yUHJvcCA9IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnZXJyb3JUZXh0Jyk7XG4gICAgdmFyIG5ld1N0YXRlID0ge307XG5cbiAgICBpZiAoaGFzRXJyb3JQcm9wKSBuZXdTdGF0ZS5lcnJvclRleHQgPSBuZXh0UHJvcHMuZXJyb3JUZXh0O1xuICAgIGlmIChuZXh0UHJvcHMuY2hpbGRyZW4gJiYgbmV4dFByb3BzLmNoaWxkcmVuLnByb3BzKSB7XG4gICAgICBuZXh0UHJvcHMgPSBuZXh0UHJvcHMuY2hpbGRyZW4ucHJvcHM7XG4gICAgfVxuXG4gICAgdmFyIGhhc1ZhbHVlTGlua1Byb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlTGluaycpO1xuICAgIHZhciBoYXNWYWx1ZVByb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJyk7XG4gICAgdmFyIGhhc05ld0RlZmF1bHRWYWx1ZSA9IG5leHRQcm9wcy5kZWZhdWx0VmFsdWUgIT09IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKGhhc1ZhbHVlTGlua1Byb3ApIHtcbiAgICAgIG5ld1N0YXRlLmhhc1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlUHJvcCkge1xuICAgICAgbmV3U3RhdGUuaGFzVmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgfSBlbHNlIGlmIChoYXNOZXdEZWZhdWx0VmFsdWUpIHtcbiAgICAgIG5ld1N0YXRlLmhhc1ZhbHVlID0gbmV4dFByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUpIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHRoZW1lID0gdGhpcy5nZXRUaGVtZSgpO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjRweCcsXG4gICAgICAgIHdpZHRoOiBwcm9wcy5mdWxsV2lkdGggPyAnMTAwJScgOiAyNTYsXG4gICAgICAgIGhlaWdodDogKHByb3BzLnJvd3MgLSAxKSAqIDI0ICsgKHByb3BzLmZsb2F0aW5nTGFiZWxUZXh0ID8gNzIgOiA0OCksXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZm9udEZhbWlseTogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbnRlbnRGb250RmFtaWx5LFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcyMDBtcycsICdoZWlnaHQnKVxuICAgICAgfSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBib3R0b206IC0xMCxcbiAgICAgICAgZm9udFNpemU6IDEyLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTJweCcsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5lcnJvckNvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KClcbiAgICAgIH0sXG4gICAgICBoaW50OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnNDhweCcsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5oaW50Q29sb3IsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKVxuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5kaXNhYmxlZCA/IHRoZW1lLmRpc2FibGVkVGV4dENvbG9yIDogdGhlbWUudGV4dENvbG9yLFxuICAgICAgICBmb250OiAnaW5oZXJpdCdcbiAgICAgIH0sXG4gICAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJ3NvbGlkIDFweCAnICsgdGhlbWUuYm9yZGVyQ29sb3IsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3R0b206IDgsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgTW96Qm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICAgIGhlaWdodDogMFxuICAgICAgfSxcbiAgICAgIHVuZGVybGluZUFmdGVyOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGJvdHRvbTogOCxcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnZG90dGVkIDJweCAnICsgdGhlbWUuZGlzYWJsZWRUZXh0Q29sb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc3R5bGVzLmZsb2F0aW5nTGFiZWwgPSB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5oaW50LCB7XG4gICAgICB0b3A6IDI0LFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsIDAsIDApJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQgdG9wJ1xuICAgIH0pO1xuXG4gICAgc3R5bGVzLnRleHRhcmVhID0gdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMuaW5wdXQsIHtcbiAgICAgIG1hcmdpblRvcDogcHJvcHMuZmxvYXRpbmdMYWJlbFRleHQgPyAzNiA6IDEyLFxuICAgICAgbWFyZ2luQm90dG9tOiBwcm9wcy5mbG9hdGluZ0xhYmVsVGV4dCA/IC0zNiA6IC0xMixcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZm9udDogJ2luaGVyaXQnXG4gICAgfSk7XG5cbiAgICBzdHlsZXMuZm9jdXNVbmRlcmxpbmUgPSB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy51bmRlcmxpbmUsIHtcbiAgICAgIGJvcmRlckJvdHRvbTogJ3NvbGlkIDJweCcsXG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUuZm9jdXNDb2xvcixcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KClcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmlzRm9jdXNlZCkge1xuICAgICAgc3R5bGVzLmZsb2F0aW5nTGFiZWwuY29sb3IgPSB0aGVtZS5mb2N1c0NvbG9yO1xuICAgICAgc3R5bGVzLmZsb2F0aW5nTGFiZWwudHJhbnNmb3JtID0gJ3BlcnNwZWN0aXZlKDFweCkgc2NhbGUoMC43NSkgdHJhbnNsYXRlM2QoMCwgLTE4cHgsIDApJztcbiAgICAgIHN0eWxlcy5mb2N1c1VuZGVybGluZS50cmFuc2Zvcm0gPSAnc2NhbGVYKDEpJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5oYXNWYWx1ZSkge1xuICAgICAgc3R5bGVzLmZsb2F0aW5nTGFiZWwuY29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmZhZGUocHJvcHMuZGlzYWJsZWQgPyB0aGVtZS5kaXNhYmxlZFRleHRDb2xvciA6IHRoZW1lLmZsb2F0aW5nTGFiZWxDb2xvciwgMC41KTtcbiAgICAgIHN0eWxlcy5mbG9hdGluZ0xhYmVsLnRyYW5zZm9ybSA9ICdwZXJzcGVjdGl2ZSgxcHgpIHNjYWxlKDAuNzUpIHRyYW5zbGF0ZTNkKDAsIC0xOHB4LCAwKSc7XG4gICAgICBzdHlsZXMuaGludC5vcGFjaXR5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZmxvYXRpbmdMYWJlbFRleHQpIHtcbiAgICAgIHN0eWxlcy5oaW50LnRvcCA9IDI0O1xuICAgICAgc3R5bGVzLmhpbnQub3BhY2l0eSA9IDA7XG4gICAgICBzdHlsZXMuaW5wdXQuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNGb2N1c2VkICYmICF0aGlzLnN0YXRlLmhhc1ZhbHVlKSBzdHlsZXMuaGludC5vcGFjaXR5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGUuaGVpZ2h0KSB7XG4gICAgICBzdHlsZXMuaGludC5saW5lSGVpZ2h0ID0gcHJvcHMuc3R5bGUuaGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLmVycm9yVGV4dCAmJiB0aGlzLnN0YXRlLmlzRm9jdXNlZCkgc3R5bGVzLmZsb2F0aW5nTGFiZWwuY29sb3IgPSB0aGVtZS5lcnJvckNvbG9yO1xuICAgIGlmIChwcm9wcy5mbG9hdGluZ0xhYmVsVGV4dCAmJiAhcHJvcHMubXVsdGlMaW5lKSBzdHlsZXMuaW5wdXQucGFkZGluZ1RvcCA9IDI2O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuZXJyb3JUZXh0KSB7XG4gICAgICBzdHlsZXMuZm9jdXNVbmRlcmxpbmUuYm9yZGVyQ29sb3IgPSB0aGVtZS5lcnJvckNvbG9yO1xuICAgICAgc3R5bGVzLmZvY3VzVW5kZXJsaW5lLnRyYW5zZm9ybSA9ICdzY2FsZVgoMSknO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWU7XG4gICAgdmFyIGVycm9yVGV4dCA9IF9wcm9wcy5lcnJvclRleHQ7XG4gICAgdmFyIGZsb2F0aW5nTGFiZWxUZXh0ID0gX3Byb3BzLmZsb2F0aW5nTGFiZWxUZXh0O1xuICAgIHZhciBmdWxsV2lkdGggPSBfcHJvcHMuZnVsbFdpZHRoO1xuICAgIHZhciBoaW50VGV4dCA9IF9wcm9wcy5oaW50VGV4dDtcbiAgICB2YXIgaWQgPSBfcHJvcHMuaWQ7XG4gICAgdmFyIG11bHRpTGluZSA9IF9wcm9wcy5tdWx0aUxpbmU7XG4gICAgdmFyIG9uQmx1ciA9IF9wcm9wcy5vbkJsdXI7XG4gICAgdmFyIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlO1xuICAgIHZhciBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXM7XG4gICAgdmFyIHR5cGUgPSBfcHJvcHMudHlwZTtcbiAgICB2YXIgcm93cyA9IF9wcm9wcy5yb3dzO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAnZXJyb3JUZXh0JywgJ2Zsb2F0aW5nTGFiZWxUZXh0JywgJ2Z1bGxXaWR0aCcsICdoaW50VGV4dCcsICdpZCcsICdtdWx0aUxpbmUnLCAnb25CbHVyJywgJ29uQ2hhbmdlJywgJ29uRm9jdXMnLCAndHlwZScsICdyb3dzJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICB2YXIgaW5wdXRJZCA9IHRoaXMucHJvcHMuaWQgfHwgdGhpcy5fdW5pcXVlSWQ7XG5cbiAgICB2YXIgZXJyb3JUZXh0RWxlbWVudCA9IHRoaXMuc3RhdGUuZXJyb3JUZXh0ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuZXJyb3IpIH0sXG4gICAgICB0aGlzLnN0YXRlLmVycm9yVGV4dFxuICAgICkgOiBudWxsO1xuXG4gICAgdmFyIGhpbnRUZXh0RWxlbWVudCA9IHRoaXMucHJvcHMuaGludFRleHQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5oaW50KSB9LFxuICAgICAgdGhpcy5wcm9wcy5oaW50VGV4dFxuICAgICkgOiBudWxsO1xuXG4gICAgdmFyIGZsb2F0aW5nTGFiZWxUZXh0RWxlbWVudCA9IHRoaXMucHJvcHMuZmxvYXRpbmdMYWJlbFRleHQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xhYmVsJyxcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmZsb2F0aW5nTGFiZWwsIHRoaXMucHJvcHMuZmxvYXRpbmdMYWJlbFN0eWxlKSxcbiAgICAgICAgaHRtbEZvcjogaW5wdXRJZCB9LFxuICAgICAgdGhpcy5wcm9wcy5mbG9hdGluZ0xhYmVsVGV4dFxuICAgICkgOiBudWxsO1xuXG4gICAgdmFyIGlucHV0UHJvcHM7XG4gICAgdmFyIGlucHV0RWxlbWVudDtcblxuICAgIGlucHV0UHJvcHMgPSB7XG4gICAgICBpZDogaW5wdXRJZCxcbiAgICAgIHJlZjogdGhpcy5fZ2V0UmVmKCksXG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaW5wdXQsIHRoaXMucHJvcHMuaW5wdXRTdHlsZSksXG4gICAgICBvbkJsdXI6IHRoaXMuX2hhbmRsZUlucHV0Qmx1cixcbiAgICAgIG9uRm9jdXM6IHRoaXMuX2hhbmRsZUlucHV0Rm9jdXMsXG4gICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcbiAgICAgIG9uS2V5RG93bjogdGhpcy5faGFuZGxlSW5wdXRLZXlEb3duXG4gICAgfTtcblxuICAgIGlmICghdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJykpIHtcbiAgICAgIGlucHV0UHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVJbnB1dENoYW5nZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIGlucHV0RWxlbWVudCA9IFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuLCBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dEVsZW1lbnQgPSB0aGlzLnByb3BzLm11bHRpTGluZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW5oYW5jZWRUZXh0YXJlYSwgX2V4dGVuZHMoe30sIG90aGVyLCBpbnB1dFByb3BzLCB7XG4gICAgICAgIHJvd3M6IHRoaXMucHJvcHMucm93cyxcbiAgICAgICAgb25IZWlnaHRDaGFuZ2U6IHRoaXMuX2hhbmRsZVRleHRBcmVhSGVpZ2h0Q2hhbmdlLFxuICAgICAgICB0ZXh0YXJlYVN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50ZXh0YXJlYSkgfSkpIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIGlucHV0UHJvcHMsIHtcbiAgICAgICAgdHlwZTogdGhpcy5wcm9wcy50eXBlIH0pKTtcbiAgICB9XG5cbiAgICB2YXIgdW5kZXJsaW5lRWxlbWVudCA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy51bmRlcmxpbmVBZnRlcikgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KCdocicsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnVuZGVybGluZSkgfSk7XG4gICAgdmFyIGZvY3VzVW5kZXJsaW5lRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2hyJywgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuZm9jdXNVbmRlcmxpbmUpIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICBmbG9hdGluZ0xhYmVsVGV4dEVsZW1lbnQsXG4gICAgICBoaW50VGV4dEVsZW1lbnQsXG4gICAgICBpbnB1dEVsZW1lbnQsXG4gICAgICB1bmRlcmxpbmVFbGVtZW50LFxuICAgICAgZm9jdXNVbmRlcmxpbmVFbGVtZW50LFxuICAgICAgZXJyb3JUZXh0RWxlbWVudFxuICAgICk7XG4gIH0sXG5cbiAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHtcbiAgICBpZiAodGhpcy5pc01vdW50ZWQoKSkgdGhpcy5fZ2V0SW5wdXROb2RlKCkuYmx1cigpO1xuICB9LFxuXG4gIGNsZWFyVmFsdWU6IGZ1bmN0aW9uIGNsZWFyVmFsdWUoKSB7XG4gICAgdGhpcy5zZXRWYWx1ZSgnJyk7XG4gIH0sXG5cbiAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCgpKSB0aGlzLl9nZXRJbnB1dE5vZGUoKS5mb2N1cygpO1xuICB9LFxuXG4gIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc01vdW50ZWQoKSA/IHRoaXMuX2dldElucHV0Tm9kZSgpLnZhbHVlIDogdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldEVycm9yVGV4dDogZnVuY3Rpb24gc2V0RXJyb3JUZXh0KG5ld0Vycm9yVGV4dCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ2Vycm9yVGV4dCcpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDYW5ub3QgY2FsbCBUZXh0RmllbGQuc2V0RXJyb3JUZXh0IHdoZW4gZXJyb3JUZXh0IGlzIGRlZmluZWQgYXMgYSBwcm9wZXJ0eS4nKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvclRleHQ6IG5ld0Vycm9yVGV4dCB9KTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0VmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5faXNDb250cm9sbGVkKCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBjYWxsIFRleHRGaWVsZC5zZXRWYWx1ZSB3aGVuIHZhbHVlIG9yIHZhbHVlTGluayBpcyBkZWZpbmVkIGFzIGEgcHJvcGVydHkuJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm11bHRpTGluZSkge1xuICAgICAgICB0aGlzLnJlZnNbdGhpcy5fZ2V0UmVmKCldLnNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2dldElucHV0Tm9kZSgpLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBoYXNWYWx1ZTogbmV3VmFsdWUgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9nZXRSZWY6IGZ1bmN0aW9uIF9nZXRSZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucmVmID8gdGhpcy5wcm9wcy5yZWYgOiAnaW5wdXQnO1xuICB9LFxuXG4gIF9nZXRJbnB1dE5vZGU6IGZ1bmN0aW9uIF9nZXRJbnB1dE5vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgdGhpcy5wcm9wcy5tdWx0aUxpbmUgPyB0aGlzLnJlZnNbdGhpcy5fZ2V0UmVmKCldLmdldElucHV0Tm9kZSgpIDogUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzW3RoaXMuX2dldFJlZigpXSk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0Qmx1cjogZnVuY3Rpb24gX2hhbmRsZUlucHV0Qmx1cihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzRm9jdXNlZDogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgfSxcblxuICBfaGFuZGxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVJbnB1dENoYW5nZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhhc1ZhbHVlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShlKTtcbiAgfSxcblxuICBfaGFuZGxlSW5wdXRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUlucHV0Rm9jdXMoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzRm9jdXNlZDogdHJ1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0S2V5RG93bjogZnVuY3Rpb24gX2hhbmRsZUlucHV0S2V5RG93bihlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgdGhpcy5wcm9wcy5vbkVudGVyS2V5RG93bikgdGhpcy5wcm9wcy5vbkVudGVyS2V5RG93bihlKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbktleURvd24pIHRoaXMucHJvcHMub25LZXlEb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVUZXh0QXJlYUhlaWdodENoYW5nZTogZnVuY3Rpb24gX2hhbmRsZVRleHRBcmVhSGVpZ2h0Q2hhbmdlKGUsIGhlaWdodCkge1xuICAgIHZhciBuZXdIZWlnaHQgPSBoZWlnaHQgKyAyNDtcbiAgICBpZiAodGhpcy5wcm9wcy5mbG9hdGluZ0xhYmVsVGV4dCkgbmV3SGVpZ2h0ICs9IDI0O1xuICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG4gIH0sXG5cbiAgX2lzQ29udHJvbGxlZDogZnVuY3Rpb24gX2lzQ29udHJvbGxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fCB0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZUxpbmsnKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0RmllbGQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFRoZW1lTWFuYWdlciA9IHJlcXVpcmUoJy4vc3R5bGVzL3RoZW1lLW1hbmFnZXInKTtcblxudmFyIFRoZW1lID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RoZW1lJyxcblxuICBwcm9wVHlwZXM6IHtcbiAgICB0aGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGNoaWxkQ29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBtdWlUaGVtZU1hbmFnZXI6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBtdWlUaGVtZTogdGhpcy50aGVtZU1hbmFnZXIuZ2V0Q3VycmVudFRoZW1lKCksXG4gICAgICBtdWlUaGVtZU1hbmFnZXI6IHRoaXMudGhlbWVNYW5hZ2VyXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnRoZW1lTWFuYWdlciA9IG5ldyBUaGVtZU1hbmFnZXIoKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnRoZW1lKSB7XG4gICAgICB0aGlzLnRoZW1lTWFuYWdlci5zZXRUaGVtZSh0aGlzLnByb3BzLnRoZW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4oe1xuICAgICAgbXVpVGhlbWU6IHRoaXMudGhlbWVNYW5hZ2VyLmdldEN1cnJlbnRUaGVtZSgpLFxuICAgICAgbXVpVGhlbWVNYW5hZ2VyOiB0aGlzLnRoZW1lTWFuYWdlclxuICAgIH0pO1xuICB9XG59KTtcblxuZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59XG5cbmZ1bmN0aW9uIHRoZW1lKGN1c3RvbVRoZW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICAgICAgZGlzcGxheU5hbWU6ICdUaGVtZSgnICsgZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSArICcpJyxcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFRoZW1lLFxuICAgICAgICAgIHsgdGhlbWU6IGN1c3RvbVRoZW1lIH0sXG4gICAgICAgICAgKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgcHJvcHMpKTtcbiAgICAgICAgICB9KS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGhlbWU7XG5tb2R1bGUuZXhwb3J0cy50aGVtZSA9IHRoZW1lOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBFbmhhbmNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2VuaGFuY2VkLWJ1dHRvbicpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBDbG9ja0J1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDbG9ja0J1dHRvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBwb3NpdGlvbjogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjogJ2xlZnQnXG4gICAgfTtcbiAgfSxcbiAgX2hhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hUYXAoKSB7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5vblRvdWNoVGFwKCk7XG4gIH0sXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50aW1lUGlja2VyO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJvdHRvbTogJzY1cHgnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gICAgICAgIGhlaWdodDogJzUwcHgnLFxuICAgICAgICB3aWR0aDogJzUwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcxMDAlJ1xuICAgICAgfSxcblxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJzE3cHgnLFxuICAgICAgICBsZWZ0OiAnMTRweCdcbiAgICAgIH0sXG5cbiAgICAgIHNlbGVjdDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICB0b3A6ICcwcHgnLFxuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmFjY2VudENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuc2VsZWN0VGV4dENvbG9yO1xuICAgICAgc3R5bGVzLnNlbGVjdC5vcGFjaXR5ID0gMTtcbiAgICAgIHN0eWxlcy5zZWxlY3QudHJhbnNmb3JtID0gJ3NjYWxlKDEpJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5wb3NpdGlvbiA9PSAncmlnaHQnKSB7XG4gICAgICBzdHlsZXMucm9vdC5yaWdodCA9ICc1cHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMucm9vdC5sZWZ0ID0gJzVweCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBFbmhhbmNlZEJ1dHRvbixcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCksXG4gICAgICAgIGRpc2FibGVGb2N1c1JpcHBsZTogdHJ1ZSxcbiAgICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlOiB0cnVlLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVUb3VjaFRhcCB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5zZWxlY3QpIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5sYWJlbCkgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb2NrQnV0dG9uOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ2xvY2tOdW1iZXIgPSByZXF1aXJlKCcuL2Nsb2NrLW51bWJlcicpO1xudmFyIENsb2NrUG9pbnRlciA9IHJlcXVpcmUoJy4vY2xvY2stcG9pbnRlcicpO1xuXG5mdW5jdGlvbiByYWQyZGVnKHJhZCkge1xuICByZXR1cm4gcmFkICogNTcuMjk1Nzc5NTEzMDgyMzI7XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoRXZlbnRPZmZzZXRWYWx1ZXMoZSkge1xuICB2YXIgZWwgPSBlLnRhcmdldDtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgb2Zmc2V0WDogZS5jbGllbnRYIC0gYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgb2Zmc2V0WTogZS5jbGllbnRZIC0gYm91bmRpbmdSZWN0LnRvcFxuICB9O1xuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbnZhciBDbG9ja0hvdXJzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0Nsb2NrSG91cnMnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxIb3VyczogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgZm9ybWF0OiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydhbXBtJywgJzI0aHInXSlcbiAgfSxcblxuICBjZW50ZXI6IHsgeDogMCwgeTogMCB9LFxuICBiYXNlUG9pbnQ6IHsgeDogMCwgeTogMCB9LFxuICBpc01vdXNlUHJlc3NlZDogZnVuY3Rpb24gaXNNb3VzZVByZXNzZWQoZSkge1xuXG4gICAgaWYgKHR5cGVvZiBlLmJ1dHRvbnMgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBlLm5hdGl2ZUV2ZW50LndoaWNoO1xuICAgIH1cblxuICAgIHJldHVybiBlLmJ1dHRvbnM7XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsSG91cnM6IG5ldyBEYXRlKCkuZ2V0SG91cnMoKSxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9LFxuICAgICAgZm9ybWF0OiAnYW1wbSdcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgY2xvY2tFbGVtZW50ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm1hc2spO1xuXG4gICAgdGhpcy5jZW50ZXIgPSB7XG4gICAgICB4OiBjbG9ja0VsZW1lbnQub2Zmc2V0V2lkdGggLyAyLFxuICAgICAgeTogY2xvY2tFbGVtZW50Lm9mZnNldEhlaWdodCAvIDJcbiAgICB9O1xuXG4gICAgdGhpcy5iYXNlUG9pbnQgPSB7XG4gICAgICB4OiB0aGlzLmNlbnRlci54LFxuICAgICAgeTogMFxuICAgIH07XG4gIH0sXG4gIGhhbmRsZVVwOiBmdW5jdGlvbiBoYW5kbGVVcChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0Q2xvY2soZS5uYXRpdmVFdmVudCwgdHJ1ZSk7XG4gIH0sXG4gIGhhbmRsZU1vdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdmUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5pc01vdXNlUHJlc3NlZChlKSAhPSAxKSByZXR1cm47XG4gICAgdGhpcy5zZXRDbG9jayhlLm5hdGl2ZUV2ZW50LCBmYWxzZSk7XG4gIH0sXG4gIGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRDbG9jayhlLmNoYW5nZWRUb3VjaGVzWzBdLCBmYWxzZSk7XG4gIH0sXG4gIGhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0Q2xvY2soZS5jaGFuZ2VkVG91Y2hlc1swXSwgdHJ1ZSk7XG4gIH0sXG4gIHNldENsb2NrOiBmdW5jdGlvbiBzZXRDbG9jayhlLCBmaW5pc2gpIHtcbiAgICBpZiAodHlwZW9mIGUub2Zmc2V0WCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBnZXRUb3VjaEV2ZW50T2Zmc2V0VmFsdWVzKGUpO1xuXG4gICAgICBlLm9mZnNldFggPSBvZmZzZXQub2Zmc2V0WDtcbiAgICAgIGUub2Zmc2V0WSA9IG9mZnNldC5vZmZzZXRZO1xuICAgIH1cblxuICAgIHZhciBob3VycyA9IHRoaXMuZ2V0SG91cnMoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShob3VycywgZmluaXNoKTtcbiAgfSxcbiAgZ2V0SG91cnM6IGZ1bmN0aW9uIGdldEhvdXJzKHgsIHkpIHtcblxuICAgIHZhciBzdGVwID0gMzA7XG4gICAgeCA9IHggLSB0aGlzLmNlbnRlci54O1xuICAgIHkgPSB5IC0gdGhpcy5jZW50ZXIueTtcbiAgICB2YXIgY3ggPSB0aGlzLmJhc2VQb2ludC54IC0gdGhpcy5jZW50ZXIueDtcbiAgICB2YXIgY3kgPSB0aGlzLmJhc2VQb2ludC55IC0gdGhpcy5jZW50ZXIueTtcblxuICAgIHZhciBhdGFuID0gTWF0aC5hdGFuMihjeCwgY3kpIC0gTWF0aC5hdGFuMih4LCB5KTtcblxuICAgIHZhciBkZWcgPSByYWQyZGVnKGF0YW4pO1xuICAgIGRlZyA9IE1hdGgucm91bmQoZGVnIC8gc3RlcCkgKiBzdGVwO1xuICAgIGRlZyAlPSAzNjA7XG5cbiAgICB2YXIgdmFsdWUgPSBNYXRoLmZsb29yKGRlZyAvIHN0ZXApIHx8IDA7XG5cbiAgICB2YXIgZGVsdGEgPSBNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpO1xuICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChkZWx0YSk7XG5cbiAgICB2YWx1ZSA9IHZhbHVlIHx8IDEyO1xuICAgIGlmICh0aGlzLnByb3BzLmZvcm1hdCA9PSAnMjRocicpIHtcbiAgICAgIGlmIChkaXN0YW5jZSA8IDkwKSB7XG4gICAgICAgIHZhbHVlICs9IDEyO1xuICAgICAgICB2YWx1ZSAlPSAyNDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgJT0gMTI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBfZ2V0U2VsZWN0ZWQ6IGZ1bmN0aW9uIF9nZXRTZWxlY3RlZCgpIHtcblxuICAgIHZhciBob3VyID0gdGhpcy5wcm9wcy5pbml0aWFsSG91cnM7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5mb3JtYXQgPT0gJ2FtcG0nKSB7XG4gICAgICBob3VyICU9IDEyO1xuICAgICAgaG91ciA9IGhvdXIgfHwgMTI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvdXI7XG4gIH0sXG4gIF9nZXRIb3VyTnVtYmVyczogZnVuY3Rpb24gX2dldEhvdXJOdW1iZXJzKCkge1xuICAgIHZhciBzdHlsZSA9IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgIH07XG5cbiAgICB2YXIgaG91clNpemUgPSB0aGlzLnByb3BzLmZvcm1hdCA9PSAnYW1wbScgPyAxMiA6IDI0O1xuXG4gICAgdmFyIGhvdXJzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBob3VyU2l6ZTsgaSsrKSB7XG4gICAgICBob3Vycy5wdXNoKGkgJSAyNCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvdXJzLm1hcCgoZnVuY3Rpb24gKGhvdXIpIHtcblxuICAgICAgdmFyIGlzU2VsZWN0ZWQgPSB0aGlzLl9nZXRTZWxlY3RlZCgpID09IGhvdXI7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDbG9ja051bWJlciwgeyBzdHlsZTogc3R5bGUsIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsIHR5cGU6ICdob3VyJywgdmFsdWU6IGhvdXIgfSk7XG4gICAgfSkuYmluZCh0aGlzKSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTAwJScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICB9LFxuXG4gICAgICBoaXRNYXNrOiB7XG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbiAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgaG91cnMgPSB0aGlzLl9nZXRTZWxlY3RlZCgpO1xuICAgIHZhciBudW1iZXJzID0gdGhpcy5fZ2V0SG91ck51bWJlcnMoKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHJlZjogJ2Nsb2NrJywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QpIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENsb2NrUG9pbnRlciwgeyBoYXNTZWxlY3RlZDogdHJ1ZSwgdmFsdWU6IGhvdXJzLCB0eXBlOiAnaG91cicgfSksXG4gICAgICBudW1iZXJzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdtYXNrJywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmhpdE1hc2spLCBvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUsIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsIG9uTW91c2VVcDogdGhpcy5oYW5kbGVVcCwgb25Nb3VzZU1vdmU6IHRoaXMuaGFuZGxlTW92ZSB9KVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb2NrSG91cnM7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENsb2NrTnVtYmVyID0gcmVxdWlyZSgnLi9jbG9jay1udW1iZXInKTtcbnZhciBDbG9ja1BvaW50ZXIgPSByZXF1aXJlKCcuL2Nsb2NrLXBvaW50ZXInKTtcblxuZnVuY3Rpb24gcmFkMmRlZyhyYWQpIHtcbiAgcmV0dXJuIHJhZCAqIDU3LjI5NTc3OTUxMzA4MjMyO1xufVxuXG5mdW5jdGlvbiBnZXRUb3VjaEV2ZW50T2Zmc2V0VmFsdWVzKGUpIHtcbiAgdmFyIGVsID0gZS50YXJnZXQ7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIG9mZnNldFg6IGUuY2xpZW50WCAtIGJvdW5kaW5nUmVjdC5sZWZ0LFxuICAgIG9mZnNldFk6IGUuY2xpZW50WSAtIGJvdW5kaW5nUmVjdC50b3BcbiAgfTtcblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG52YXIgQ2xvY2tNaW51dGVzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0Nsb2NrTWludXRlcycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbml0aWFsTWludXRlczogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgfSxcblxuICBjZW50ZXI6IHsgeDogMCwgeTogMCB9LFxuICBiYXNlUG9pbnQ6IHsgeDogMCwgeTogMCB9LFxuICBpc01vdXNlUHJlc3NlZDogZnVuY3Rpb24gaXNNb3VzZVByZXNzZWQoZSkge1xuXG4gICAgaWYgKHR5cGVvZiBlLmJ1dHRvbnMgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBlLm5hdGl2ZUV2ZW50LndoaWNoO1xuICAgIH1cbiAgICByZXR1cm4gZS5idXR0b25zO1xuICB9LFxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdGlhbE1pbnV0ZXM6IG5ldyBEYXRlKCkuZ2V0TWludXRlcygpLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgY2xvY2tFbGVtZW50ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm1hc2spO1xuXG4gICAgdGhpcy5jZW50ZXIgPSB7XG4gICAgICB4OiBjbG9ja0VsZW1lbnQub2Zmc2V0V2lkdGggLyAyLFxuICAgICAgeTogY2xvY2tFbGVtZW50Lm9mZnNldEhlaWdodCAvIDJcbiAgICB9O1xuXG4gICAgdGhpcy5iYXNlUG9pbnQgPSB7XG4gICAgICB4OiB0aGlzLmNlbnRlci54LFxuICAgICAgeTogMFxuICAgIH07XG4gIH0sXG4gIGhhbmRsZVVwOiBmdW5jdGlvbiBoYW5kbGVVcChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0Q2xvY2soZS5uYXRpdmVFdmVudCwgdHJ1ZSk7XG4gIH0sXG4gIGhhbmRsZU1vdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdmUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5pc01vdXNlUHJlc3NlZChlKSAhPSAxKSByZXR1cm47XG4gICAgdGhpcy5zZXRDbG9jayhlLm5hdGl2ZUV2ZW50LCBmYWxzZSk7XG4gIH0sXG4gIGhhbmRsZVRvdWNoOiBmdW5jdGlvbiBoYW5kbGVUb3VjaChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0Q2xvY2soZS5jaGFuZ2VkVG91Y2hlc1swXSwgZmFsc2UpO1xuICB9LFxuICBzZXRDbG9jazogZnVuY3Rpb24gc2V0Q2xvY2soZSwgZmluaXNoKSB7XG4gICAgaWYgKHR5cGVvZiBlLm9mZnNldFggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gZ2V0VG91Y2hFdmVudE9mZnNldFZhbHVlcyhlKTtcblxuICAgICAgZS5vZmZzZXRYID0gb2Zmc2V0Lm9mZnNldFg7XG4gICAgICBlLm9mZnNldFkgPSBvZmZzZXQub2Zmc2V0WTtcbiAgICB9XG5cbiAgICB2YXIgbWludXRlcyA9IHRoaXMuZ2V0TWludXRlcyhlLm9mZnNldFgsIGUub2Zmc2V0WSk7XG5cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKG1pbnV0ZXMsIGZpbmlzaCk7XG4gIH0sXG4gIGdldE1pbnV0ZXM6IGZ1bmN0aW9uIGdldE1pbnV0ZXMoeCwgeSkge1xuXG4gICAgdmFyIHN0ZXAgPSA2O1xuICAgIHggPSB4IC0gdGhpcy5jZW50ZXIueDtcbiAgICB5ID0geSAtIHRoaXMuY2VudGVyLnk7XG4gICAgdmFyIGN4ID0gdGhpcy5iYXNlUG9pbnQueCAtIHRoaXMuY2VudGVyLng7XG4gICAgdmFyIGN5ID0gdGhpcy5iYXNlUG9pbnQueSAtIHRoaXMuY2VudGVyLnk7XG5cbiAgICB2YXIgYXRhbiA9IE1hdGguYXRhbjIoY3gsIGN5KSAtIE1hdGguYXRhbjIoeCwgeSk7XG5cbiAgICB2YXIgZGVnID0gcmFkMmRlZyhhdGFuKTtcbiAgICBkZWcgPSBNYXRoLnJvdW5kKGRlZyAvIHN0ZXApICogc3RlcDtcbiAgICBkZWcgJT0gMzYwO1xuXG4gICAgdmFyIHZhbHVlID0gTWF0aC5mbG9vcihkZWcgLyBzdGVwKSB8fCAwO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBfZ2V0TWludXRlTnVtYmVyczogZnVuY3Rpb24gX2dldE1pbnV0ZU51bWJlcnMoKSB7XG5cbiAgICB2YXIgbWludXRlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgbWludXRlcy5wdXNoKGkgKiA1KTtcbiAgICB9XG4gICAgdmFyIHNlbGVjdGVkTWludXRlcyA9IHRoaXMucHJvcHMuaW5pdGlhbE1pbnV0ZXM7XG5cbiAgICB2YXIgaGFzU2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgIHZhciBudW1iZXJzID0gbWludXRlcy5tYXAoKGZ1bmN0aW9uIChtaW51dGUpIHtcbiAgICAgIHZhciBpc1NlbGVjdGVkID0gc2VsZWN0ZWRNaW51dGVzID09IG1pbnV0ZTtcbiAgICAgIGlmIChpc1NlbGVjdGVkKSBoYXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDbG9ja051bWJlciwgeyBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkLCB0eXBlOiAnbWludXRlJywgdmFsdWU6IG1pbnV0ZSB9KTtcbiAgICB9KS5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiB7XG4gICAgICBudW1iZXJzOiBudW1iZXJzLFxuICAgICAgaGFzU2VsZWN0ZWQ6IGhhc1NlbGVjdGVkLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkTWludXRlc1xuICAgIH07XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzEwMCUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcblxuICAgICAgaGl0TWFzazoge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIG1pbnV0ZXMgPSB0aGlzLl9nZXRNaW51dGVOdW1iZXJzKCk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyByZWY6ICdjbG9jaycsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9ja1BvaW50ZXIsIHsgdmFsdWU6IG1pbnV0ZXMuc2VsZWN0ZWQsIHR5cGU6ICdtaW51dGUnIH0pLFxuICAgICAgbWludXRlcy5udW1iZXJzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdtYXNrJywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmhpdE1hc2spLCBoYXNTZWxlY3RlZDogbWludXRlcy5oYXNTZWxlY3RlZCwgb25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2gsIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2gsIG9uTW91c2VVcDogdGhpcy5oYW5kbGVVcCwgb25Nb3VzZU1vdmU6IHRoaXMuaGFuZGxlTW92ZSB9KVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb2NrTWludXRlczsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWydyZXR1cm4nXSkgX2lbJ3JldHVybiddKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBDbG9ja051bWJlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDbG9ja051bWJlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICB0eXBlOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydob3VyJywgJ21pbnV0ZSddKSxcbiAgICBvblNlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBpc1NlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IDAsXG4gICAgICB0eXBlOiAnbWludXRlJyxcbiAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRpbWVQaWNrZXI7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXG4gICAgdmFyIHBvcyA9IHRoaXMucHJvcHMudmFsdWU7XG5cbiAgICB2YXIgaW5uZXIgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT0gJ2hvdXInKSB7XG4gICAgICBpbm5lciA9IHBvcyA8IDEgfHwgcG9zID4gMTI7XG4gICAgICBwb3MgJT0gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvcyA9IHBvcyAvIDU7XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9ucyA9IFtbMCwgNV0sIFs1NC41LCAxNi42XSwgWzk0LjQsIDU5LjVdLCBbMTA5LCAxMTRdLCBbOTQuNCwgMTY4LjVdLCBbNTQuNSwgMjA4LjRdLCBbMCwgMjIzXSwgWy01NC41LCAyMDguNF0sIFstOTQuNCwgMTY4LjVdLCBbLTEwOSwgMTE0XSwgWy05NC40LCA1OS41XSwgWy01NC41LCAxOS42XV07XG5cbiAgICB2YXIgaW5uZXJQb3NpdGlvbnMgPSBbWzAsIDQwXSwgWzM2LjksIDQ5LjldLCBbNjQsIDc3XSwgWzc0LCAxMTRdLCBbNjQsIDE1MV0sIFszNywgMTc4XSwgWzAsIDE4OF0sIFstMzcsIDE3OF0sIFstNjQsIDE1MV0sIFstNzQsIDExNF0sIFstNjQsIDc3XSwgWy0zNywgNTBdXTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgd2lkdGg6ICczMnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMzJweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzEwMCUnLFxuICAgICAgICBsZWZ0OiAnY2FsYyg1MCUgLSAxNnB4KScsXG4gICAgICAgIHRvcDogJzEwcHgnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICBwYWRkaW5nVG9wOiAnNXB4JyxcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLCAvKiBDaHJvbWUgYWxsIC8gU2FmYXJpIGFsbCAqL1xuICAgICAgICBmb250U2l6ZTogJzEuMWVtJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3BzLmlzU2VsZWN0ZWQpIHtcbiAgICAgIHN0eWxlcy5yb290LmJhY2tncm91bmRDb2xvciA9IHRoaXMuZ2V0VGhlbWUoKS5hY2NlbnRDb2xvcjtcbiAgICAgIHN0eWxlcy5yb290LmNvbG9yID0gdGhpcy5nZXRUaGVtZSgpLnNlbGVjdFRleHRDb2xvcjtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtUG9zID0gcG9zaXRpb25zW3Bvc107XG5cbiAgICBpZiAoaW5uZXIpIHtcbiAgICAgIHN0eWxlcy5yb290LndpZHRoID0gJzI4cHgnO1xuICAgICAgc3R5bGVzLnJvb3QuaGVpZ2h0ID0gJzI4cHgnO1xuICAgICAgc3R5bGVzLnJvb3QubGVmdCA9ICdjYWxjKDUwJSAtIDE0cHgpJztcbiAgICAgIHRyYW5zZm9ybVBvcyA9IGlubmVyUG9zaXRpb25zW3Bvc107XG4gICAgfVxuXG4gICAgdmFyIF90cmFuc2Zvcm1Qb3MgPSBfc2xpY2VkVG9BcnJheSh0cmFuc2Zvcm1Qb3MsIDIpO1xuXG4gICAgdmFyIHggPSBfdHJhbnNmb3JtUG9zWzBdO1xuICAgIHZhciB5ID0gX3RyYW5zZm9ybVBvc1sxXTtcblxuICAgIHN0eWxlcy5yb290LnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIHggKyAncHgsICcgKyB5ICsgJ3B4KSc7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QpIH0sXG4gICAgICB0aGlzLnByb3BzLnZhbHVlXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvY2tOdW1iZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENsb2NrUG9pbnRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDbG9ja1BvaW50ZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdmFsdWU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgdHlwZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnaG91cicsICdtaW51dGUnXSlcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5uZXI6IHRoaXMuaXNJbm5lcih0aGlzLnByb3BzLnZhbHVlKVxuICAgIH07XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHR5cGU6ICdtaW51dGUnLFxuICAgICAgaGFzU2VsZWN0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW5uZXI6IHRoaXMuaXNJbm5lcihuZXh0UHJvcHMudmFsdWUpXG4gICAgfSk7XG4gIH0sXG4gIGlzSW5uZXI6IGZ1bmN0aW9uIGlzSW5uZXIodmFsdWUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy50eXBlICE9ICdob3VyJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPCAxIHx8IHZhbHVlID4gMTI7XG4gIH0sXG4gIGdldEFuZ2xlOiBmdW5jdGlvbiBnZXRBbmdsZSgpIHtcblxuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT0gJ2hvdXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxjQW5nbGUodGhpcy5wcm9wcy52YWx1ZSwgMTIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhbGNBbmdsZSh0aGlzLnByb3BzLnZhbHVlLCA2MCk7XG4gIH0sXG4gIGNhbGNBbmdsZTogZnVuY3Rpb24gY2FsY0FuZ2xlKHZhbHVlLCBiYXNlKSB7XG4gICAgdmFsdWUgJT0gYmFzZTtcbiAgICB2YXIgYW5nbGUgPSAzNjAgLyBiYXNlICogdmFsdWU7XG4gICAgcmV0dXJuIGFuZ2xlO1xuICB9LFxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGltZVBpY2tlcjtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cbiAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwpO1xuICAgIH1cblxuICAgIHZhciBhbmdsZSA9IHRoaXMuZ2V0QW5nbGUoKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGhlaWdodDogJzMwJScsXG4gICAgICAgIGJhY2tncm91bmQ6IHRoaXMuZ2V0VGhlbWUoKS5hY2NlbnRDb2xvcixcbiAgICAgICAgd2lkdGg6ICcycHgnLFxuICAgICAgICBsZWZ0OiAnY2FsYyg1MCUgLSAxcHgpJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJvdHRvbTogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2JvdHRvbScsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWignICsgYW5nbGUgKyAnZGVnKSdcbiAgICAgIH0sXG4gICAgICBtYXJrOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RUZXh0Q29sb3IsXG4gICAgICAgIGJvcmRlcjogJzRweCBzb2xpZCAnICsgdGhpcy5nZXRUaGVtZSgpLmFjY2VudENvbG9yLFxuICAgICAgICB3aWR0aDogJzdweCcsXG4gICAgICAgIGhlaWdodDogJzdweCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICctNXB4JyxcbiAgICAgICAgbGVmdDogJy02cHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcxMDAlJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuaW5uZXIpIHtcbiAgICAgIHN0eWxlcy5yb290LmhlaWdodCA9ICc0MCUnO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmhhc1NlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMubWFyay5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLm1hcmsgfSlcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbG9ja1BvaW50ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIFRpbWVEaXNwbGF5ID0gcmVxdWlyZSgnLi90aW1lLWRpc3BsYXknKTtcbnZhciBDbG9ja0J1dHRvbiA9IHJlcXVpcmUoJy4vY2xvY2stYnV0dG9uJyk7XG52YXIgQ2xvY2tIb3VycyA9IHJlcXVpcmUoJy4vY2xvY2staG91cnMnKTtcbnZhciBDbG9ja01pbnV0ZXMgPSByZXF1aXJlKCcuL2Nsb2NrLW1pbnV0ZXMnKTtcblxudmFyIENsb2NrID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0Nsb2NrJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbml0aWFsVGltZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtb2RlOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydob3VyJywgJ21pbnV0ZSddKSxcbiAgICBmb3JtYXQ6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2FtcG0nLCAnMjRociddKSxcbiAgICBpc0FjdGl2ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW9kZTogJ2hvdXInXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRpYWxUaW1lOiBuZXcgRGF0ZSgpXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZFRpbWU6IG5leHRQcm9wcy5pbml0aWFsVGltZVxuICAgIH0pO1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdGVkVGltZTogdGhpcy5wcm9wcy5pbml0aWFsVGltZSxcbiAgICAgIG1vZGU6ICdob3VyJ1xuICAgIH07XG4gIH0sXG5cbiAgX3NldE1vZGU6IGZ1bmN0aW9uIF9zZXRNb2RlKG1vZGUpIHtcbiAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbW9kZTogbW9kZVxuICAgICAgfSk7XG4gICAgfSkuYmluZCh0aGlzKSwgMTAwKTtcbiAgfSxcblxuICBfc2V0QWZmaXg6IGZ1bmN0aW9uIF9zZXRBZmZpeChhZmZpeCkge1xuXG4gICAgaWYgKGFmZml4ID09IHRoaXMuX2dldEFmZml4KCkpIHJldHVybjtcblxuICAgIHZhciBob3VycyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRUaW1lLmdldEhvdXJzKCk7XG5cbiAgICBpZiAoYWZmaXggPT0gJ2FtJykge1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2VIb3Vycyhob3VycyAtIDEyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZUNoYW5nZUhvdXJzKGhvdXJzICsgMTIpO1xuICB9LFxuXG4gIF9nZXRBZmZpeDogZnVuY3Rpb24gX2dldEFmZml4KCkge1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0ICE9ICdhbXBtJykgcmV0dXJuICcnO1xuXG4gICAgdmFyIGhvdXJzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWUuZ2V0SG91cnMoKTtcbiAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgcmV0dXJuICdhbSc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdwbSc7XG4gIH0sXG5cbiAgX2dldEJ1dHRvbnM6IGZ1bmN0aW9uIF9nZXRCdXR0b25zKCkge1xuICAgIHZhciBidXR0b25zID0gW107XG4gICAgdmFyIGlzQU0gPSB0aGlzLl9nZXRJc0FNKCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5mb3JtYXQgPT0gJ2FtcG0nKSB7XG4gICAgICBidXR0b25zID0gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIENsb2NrQnV0dG9uLFxuICAgICAgICB7IHBvc2l0aW9uOiAnbGVmdCcsIG9uVG91Y2hUYXA6IHRoaXMuX3NldEFmZml4LmJpbmQodGhpcywgJ2FtJyksIHNlbGVjdGVkOiBpc0FNIH0sXG4gICAgICAgICdBTSdcbiAgICAgICksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIENsb2NrQnV0dG9uLFxuICAgICAgICB7IHBvc2l0aW9uOiAncmlnaHQnLCBvblRvdWNoVGFwOiB0aGlzLl9zZXRBZmZpeC5iaW5kKHRoaXMsICdwbScpLCBzZWxlY3RlZDogIWlzQU0gfSxcbiAgICAgICAgJ1BNJ1xuICAgICAgKV07XG4gICAgfVxuICAgIHJldHVybiBidXR0b25zO1xuICB9LFxuXG4gIF9nZXRJc0FNOiBmdW5jdGlvbiBfZ2V0SXNBTSgpIHtcblxuICAgIHJldHVybiB0aGlzLl9nZXRBZmZpeCgpID09ICdhbSc7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cbiAgICB2YXIgY2xvY2sgPSBudWxsO1xuICAgIHZhciBidXR0b25zID0gdGhpcy5fZ2V0QnV0dG9ucygpO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHt9LFxuXG4gICAgICBjb250YWluZXI6IHtcbiAgICAgICAgaGVpZ2h0OiAnMjgwcHgnLFxuICAgICAgICBwYWRkaW5nOiAnMTBweCdcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUubW9kZSA9PSAnaG91cicpIHtcbiAgICAgIGNsb2NrID0gUmVhY3QuY3JlYXRlRWxlbWVudChDbG9ja0hvdXJzLCB7IGtleTogJ2hvdXJzJyxcbiAgICAgICAgZm9ybWF0OiB0aGlzLnByb3BzLmZvcm1hdCxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlSG91cnMsXG4gICAgICAgIGluaXRpYWxIb3VyczogdGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWUuZ2V0SG91cnMoKSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvY2sgPSBSZWFjdC5jcmVhdGVFbGVtZW50KENsb2NrTWludXRlcywgeyBrZXk6ICdtaW51dGVzJyxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlTWludXRlcyxcbiAgICAgICAgaW5pdGlhbE1pbnV0ZXM6IHRoaXMuc3RhdGUuc2VsZWN0ZWRUaW1lLmdldE1pbnV0ZXMoKSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZURpc3BsYXksIHtcbiAgICAgICAgc2VsZWN0ZWRUaW1lOiB0aGlzLnN0YXRlLnNlbGVjdGVkVGltZSxcbiAgICAgICAgbW9kZTogdGhpcy5zdGF0ZS5tb2RlLFxuICAgICAgICBmb3JtYXQ6IHRoaXMucHJvcHMuZm9ybWF0LFxuICAgICAgICBhZmZpeDogdGhpcy5fZ2V0QWZmaXgoKSxcbiAgICAgICAgb25TZWxlY3RIb3VyOiB0aGlzLl9zZXRNb2RlLmJpbmQodGhpcywgJ2hvdXInKSxcbiAgICAgICAgb25TZWxlY3RNaW46IHRoaXMuX3NldE1vZGUuYmluZCh0aGlzLCAnbWludXRlJylcbiAgICAgIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLmNvbnRhaW5lciB9LFxuICAgICAgICBjbG9ja1xuICAgICAgKSxcbiAgICAgIGJ1dHRvbnNcbiAgICApO1xuICB9LFxuICBoYW5kbGVDaGFuZ2VIb3VyczogZnVuY3Rpb24gaGFuZGxlQ2hhbmdlSG91cnMoaG91cnMsIGZpbmlzaGVkKSB7XG4gICAgdmFyIHRpbWUgPSBuZXcgRGF0ZSh0aGlzLnN0YXRlLnNlbGVjdGVkVGltZSk7XG5cbiAgICB0aW1lLnNldEhvdXJzKGhvdXJzKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkVGltZTogdGltZVxuICAgIH0pO1xuXG4gICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1vZGU6ICdtaW51dGUnXG4gICAgICAgIH0pO1xuICAgICAgfSkuYmluZCh0aGlzKSwgMTAwKTtcbiAgICB9XG4gIH0sXG4gIGhhbmRsZUNoYW5nZU1pbnV0ZXM6IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZU1pbnV0ZXMobWludXRlcykge1xuICAgIHZhciB0aW1lID0gbmV3IERhdGUodGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWUpO1xuICAgIHRpbWUuc2V0TWludXRlcyhtaW51dGVzKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkVGltZTogdGltZVxuICAgIH0pO1xuICB9LFxuICBnZXRTZWxlY3RlZFRpbWU6IGZ1bmN0aW9uIGdldFNlbGVjdGVkVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWU7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb2NrOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3RpbWUtcGlja2VyJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UnKTsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUaW1lRGlzcGxheSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUaW1lRGlzcGxheScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBzZWxlY3RlZFRpbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBmb3JtYXQ6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2FtcG0nLCAnMjRociddKSxcbiAgICBtb2RlOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydob3VyJywgJ21pbnV0ZSddKSxcbiAgICBhZmZpeDogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnJywgJ3BtJywgJ2FtJ10pXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246ICd1cCdcbiAgICB9O1xuICB9LFxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogJ2hvdXInLFxuICAgICAgYWZmaXg6ICcnXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uO1xuXG4gICAgaWYgKG5leHRQcm9wcy5zZWxlY3RlZFRpbWUgIT09IHRoaXMucHJvcHMuc2VsZWN0ZWRUaW1lKSB7XG4gICAgICBkaXJlY3Rpb24gPSBuZXh0UHJvcHMuc2VsZWN0ZWRUaW1lID4gdGhpcy5wcm9wcy5zZWxlY3RlZFRpbWUgPyAndXAnIDogJ2Rvd24nO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBzYW5pdGl6ZVRpbWU6IGZ1bmN0aW9uIHNhbml0aXplVGltZSgpIHtcbiAgICB2YXIgaG91ciA9IHRoaXMucHJvcHMuc2VsZWN0ZWRUaW1lLmdldEhvdXJzKCk7XG4gICAgdmFyIG1pbiA9IHRoaXMucHJvcHMuc2VsZWN0ZWRUaW1lLmdldE1pbnV0ZXMoKS50b1N0cmluZygpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0ID09ICdhbXBtJykge1xuXG4gICAgICBob3VyICU9IDEyO1xuICAgICAgaG91ciA9IGhvdXIgfHwgMTI7XG4gICAgfVxuXG4gICAgaG91ciA9IGhvdXIudG9TdHJpbmcoKTtcbiAgICBpZiAoaG91ci5sZW5ndGggPCAyKSBob3VyID0gJzAnICsgaG91cjtcbiAgICBpZiAobWluLmxlbmd0aCA8IDIpIG1pbiA9ICcwJyArIG1pbjtcblxuICAgIHJldHVybiBbaG91ciwgbWluXTtcbiAgfSxcbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRpbWVQaWNrZXI7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzZWxlY3RlZFRpbWUgPSBfcHJvcHMuc2VsZWN0ZWRUaW1lO1xuICAgIHZhciBtb2RlID0gX3Byb3BzLm1vZGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3NlbGVjdGVkVGltZScsICdtb2RlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHdpZHRoOiAnMjgwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcblxuICAgICAgdGltZToge1xuICAgICAgICBtYXJnaW46ICc2cHggMCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICc1OHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnNThweCcsXG4gICAgICAgIGZvbnRTaXplOiAnNThweCdcbiAgICAgIH0sXG5cbiAgICAgIGJveDoge1xuICAgICAgICBwYWRkaW5nOiAnMTZweCAwJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuY29sb3IsXG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkudGV4dENvbG9yXG4gICAgICB9LFxuXG4gICAgICBob3VyOiB7fSxcblxuICAgICAgbWludXRlOiB7fVxuICAgIH07XG5cbiAgICB2YXIgX3Nhbml0aXplVGltZSA9IHRoaXMuc2FuaXRpemVUaW1lKCk7XG5cbiAgICB2YXIgX3Nhbml0aXplVGltZTIgPSBfc2xpY2VkVG9BcnJheShfc2FuaXRpemVUaW1lLCAyKTtcblxuICAgIHZhciBob3VyID0gX3Nhbml0aXplVGltZTJbMF07XG4gICAgdmFyIG1pbiA9IF9zYW5pdGl6ZVRpbWUyWzFdO1xuXG4gICAgc3R5bGVzW21vZGVdLmNvbG9yID0gdGhpcy5nZXRUaGVtZSgpLmFjY2VudENvbG9yO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuYm94KSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRpbWUpIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmhvdXIpLCBvblRvdWNoVGFwOiB0aGlzLnByb3BzLm9uU2VsZWN0SG91ciB9LFxuICAgICAgICAgICAgaG91clxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnOidcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5taW51dGUpLCBvblRvdWNoVGFwOiB0aGlzLnByb3BzLm9uU2VsZWN0TWluIH0sXG4gICAgICAgICAgICBtaW5cbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgIHsga2V5OiAnYWZmaXgnIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5hZmZpeC50b1VwcGVyQ2FzZSgpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVEaXNwbGF5OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBXaW5kb3dMaXN0ZW5hYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlJyk7XG52YXIgS2V5Q29kZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2tleS1jb2RlJyk7XG52YXIgQ2xvY2sgPSByZXF1aXJlKCcuL2Nsb2NrJyk7XG52YXIgRGlhbG9nV2luZG93ID0gcmVxdWlyZSgnLi4vZGlhbG9nLXdpbmRvdycpO1xudmFyIEZsYXRCdXR0b24gPSByZXF1aXJlKCcuLi9mbGF0LWJ1dHRvbicpO1xuXG52YXIgVGltZVBpY2tlckRpYWxvZyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUaW1lUGlja2VyRGlhbG9nJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlLCBXaW5kb3dMaXN0ZW5hYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxUaW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uQWNjZXB0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblNob3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRGlzbWlzczogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgfSxcblxuICB3aW5kb3dMaXN0ZW5lcnM6IHtcbiAgICAna2V5dXAnOiAnX2hhbmRsZVdpbmRvd0tleVVwJ1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50aW1lUGlja2VyO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaW5pdGlhbFRpbWUgPSBfcHJvcHMuaW5pdGlhbFRpbWU7XG4gICAgdmFyIG9uQWNjZXB0ID0gX3Byb3BzLm9uQWNjZXB0O1xuICAgIHZhciBmb3JtYXQgPSBfcHJvcHMuZm9ybWF0O1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydpbml0aWFsVGltZScsICdvbkFjY2VwdCcsICdmb3JtYXQnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLmNsb2NrQ29sb3JcbiAgICAgIH0sXG4gICAgICBkaWFsb2dDb250ZW50OiB7XG4gICAgICAgIHdpZHRoOiAnMjgwcHgnXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBhY3Rpb25zID0gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmxhdEJ1dHRvbiwge1xuICAgICAga2V5OiAwLFxuICAgICAgbGFiZWw6ICdDYW5jZWwnLFxuICAgICAgc2Vjb25kYXJ5OiB0cnVlLFxuICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlQ2FuY2VsVG91Y2hUYXAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmxhdEJ1dHRvbiwge1xuICAgICAga2V5OiAxLFxuICAgICAgbGFiZWw6ICdPSycsXG4gICAgICBzZWNvbmRhcnk6IHRydWUsXG4gICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVPS1RvdWNoVGFwIH0pXTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgRGlhbG9nV2luZG93LFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHJlZjogJ2RpYWxvZ1dpbmRvdycsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSxcbiAgICAgICAgYWN0aW9uczogYWN0aW9ucyxcbiAgICAgICAgY29udGVudFN0eWxlOiBzdHlsZXMuZGlhbG9nQ29udGVudCxcbiAgICAgICAgb25EaXNtaXNzOiB0aGlzLl9oYW5kbGVEaWFsb2dEaXNtaXNzLFxuICAgICAgICBvblNob3c6IHRoaXMuX2hhbmRsZURpYWxvZ1Nob3csXG4gICAgICAgIHJlcG9zaXRpb25PblVwZGF0ZTogZmFsc2UgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENsb2NrLCB7XG4gICAgICAgIHJlZjogJ2Nsb2NrJyxcbiAgICAgICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgICAgIGluaXRpYWxUaW1lOiBpbml0aWFsVGltZSB9KVxuICAgICk7XG4gIH0sXG5cbiAgc2hvdzogZnVuY3Rpb24gc2hvdygpIHtcbiAgICB0aGlzLnJlZnMuZGlhbG9nV2luZG93LnNob3coKTtcbiAgICB0aGlzLnJlZnMuY2xvY2suaW5pdCgpO1xuICB9LFxuXG4gIGRpc21pc3M6IGZ1bmN0aW9uIGRpc21pc3MoKSB7XG4gICAgdGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5kaXNtaXNzKCk7XG4gIH0sXG5cbiAgX2hhbmRsZUNhbmNlbFRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlQ2FuY2VsVG91Y2hUYXAoKSB7XG4gICAgdGhpcy5kaXNtaXNzKCk7XG4gIH0sXG5cbiAgX2hhbmRsZU9LVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVPS1RvdWNoVGFwKCkge1xuICAgIHRoaXMuZGlzbWlzcygpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQWNjZXB0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uQWNjZXB0KHRoaXMucmVmcy5jbG9jay5nZXRTZWxlY3RlZFRpbWUoKSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dTaG93OiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nU2hvdygpIHtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uU2hvdykge1xuICAgICAgdGhpcy5wcm9wcy5vblNob3coKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZURpYWxvZ0Rpc21pc3M6IGZ1bmN0aW9uIF9oYW5kbGVEaWFsb2dEaXNtaXNzKCkge1xuXG4gICAgaWYgKHRoaXMucHJvcHMub25EaXNtaXNzKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRGlzbWlzcygpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlV2luZG93S2V5VXA6IGZ1bmN0aW9uIF9oYW5kbGVXaW5kb3dLZXlVcChlKSB7XG4gICAgaWYgKHRoaXMucmVmcy5kaWFsb2dXaW5kb3cuaXNPcGVuKCkpIHtcbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgS2V5Q29kZS5FTlRFUjpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVPS1RvdWNoVGFwKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVQaWNrZXJEaWFsb2c7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgV2luZG93TGlzdGVuYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIFRpbWVQaWNrZXJEaWFsb2cgPSByZXF1aXJlKCcuL3RpbWUtcGlja2VyLWRpYWxvZycpO1xudmFyIFRleHRGaWVsZCA9IHJlcXVpcmUoJy4uL3RleHQtZmllbGQnKTtcblxudmFyIGVtcHR5VGltZSA9IG5ldyBEYXRlKCk7XG5lbXB0eVRpbWUuc2V0SG91cnMoMCk7XG5lbXB0eVRpbWUuc2V0TWludXRlcygwKTtcblxudmFyIFRpbWVQaWNrZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGltZVBpY2tlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgV2luZG93TGlzdGVuYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGVmYXVsdFRpbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZm9ybWF0OiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydhbXBtJywgJzI0aHInXSksXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uU2hvdzogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25EaXNtaXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIHdpbmRvd0xpc3RlbmVyczoge1xuICAgICdrZXl1cCc6ICdfaGFuZGxlV2luZG93S2V5VXAnXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHRUaW1lOiBlbXB0eVRpbWUsXG4gICAgICBmb3JtYXQ6ICdhbXBtJ1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWU6IHRoaXMucHJvcHMuZGVmYXVsdFRpbWUsXG4gICAgICBkaWFsb2dUaW1lOiBuZXcgRGF0ZSgpXG4gICAgfTtcbiAgfSxcbiAgZm9ybWF0VGltZTogZnVuY3Rpb24gZm9ybWF0VGltZShkYXRlKSB7XG5cbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgdmFyIG1pbnMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcbiAgICB2YXIgYWRpdGlvbmFsID0gJyc7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5mb3JtYXQgPT0gJ2FtcG0nKSB7XG4gICAgICB2YXIgaXNBTSA9IGhvdXJzIDwgMTI7XG4gICAgICBob3VycyA9IGhvdXJzICUgMTI7XG4gICAgICBhZGl0aW9uYWwgKz0gaXNBTSA/ICcgYW0nIDogJyBwbSc7XG4gICAgICBob3VycyA9IGhvdXJzIHx8IDEyO1xuICAgIH1cblxuICAgIGhvdXJzID0gaG91cnMudG9TdHJpbmcoKTtcbiAgICBtaW5zID0gbWlucy50b1N0cmluZygpO1xuXG4gICAgaWYgKGhvdXJzLmxlbmd0aCA8IDIpIGhvdXJzID0gJzAnICsgaG91cnM7XG4gICAgaWYgKG1pbnMubGVuZ3RoIDwgMikgbWlucyA9ICcwJyArIG1pbnM7XG5cbiAgICByZXR1cm4gaG91cnMgKyAnOicgKyBtaW5zICsgYWRpdGlvbmFsO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgZm9ybWF0ID0gX3Byb3BzLmZvcm1hdDtcbiAgICB2YXIgb25Gb2N1cyA9IF9wcm9wcy5vbkZvY3VzO1xuICAgIHZhciBvblRvdWNoVGFwID0gX3Byb3BzLm9uVG91Y2hUYXA7XG4gICAgdmFyIG9uU2hvdyA9IF9wcm9wcy5vblNob3c7XG4gICAgdmFyIG9uRGlzbWlzcyA9IF9wcm9wcy5vbkRpc21pc3M7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2Zvcm1hdCcsICdvbkZvY3VzJywgJ29uVG91Y2hUYXAnLCAnb25TaG93JywgJ29uRGlzbWlzcyddKTtcblxuICAgIHZhciBkZWZhdWx0SW5wdXRWYWx1ZTtcblxuICAgIGlmICh0aGlzLnByb3BzLmRlZmF1bHRUaW1lKSB7XG4gICAgICBkZWZhdWx0SW5wdXRWYWx1ZSA9IHRoaXMuZm9ybWF0VGltZSh0aGlzLnByb3BzLmRlZmF1bHRUaW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgbnVsbCxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGV4dEZpZWxkLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnaW5wdXQnLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRJbnB1dFZhbHVlLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLl9oYW5kbGVJbnB1dEZvY3VzLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVJbnB1dFRvdWNoVGFwIH0pKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZVBpY2tlckRpYWxvZywge1xuICAgICAgICByZWY6ICdkaWFsb2dXaW5kb3cnLFxuICAgICAgICBpbml0aWFsVGltZTogdGhpcy5zdGF0ZS5kaWFsb2dUaW1lLFxuICAgICAgICBvbkFjY2VwdDogdGhpcy5faGFuZGxlRGlhbG9nQWNjZXB0LFxuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25EaXNtaXNzOiBvbkRpc21pc3MsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0IH0pXG4gICAgKTtcbiAgfSxcblxuICBnZXRUaW1lOiBmdW5jdGlvbiBnZXRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnRpbWU7XG4gIH0sXG5cbiAgc2V0VGltZTogZnVuY3Rpb24gc2V0VGltZSh0KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0aW1lOiB0XG4gICAgfSk7XG4gICAgdGhpcy5yZWZzLmlucHV0LnNldFZhbHVlKHRoaXMuZm9ybWF0VGltZSh0KSk7XG4gIH0sXG5cbiAgX2hhbmRsZURpYWxvZ0FjY2VwdDogZnVuY3Rpb24gX2hhbmRsZURpYWxvZ0FjY2VwdCh0KSB7XG5cbiAgICB0aGlzLnNldFRpbWUodCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UobnVsbCwgdCk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0Rm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVJbnB1dEZvY3VzKGUpIHtcbiAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVJbnB1dFRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlSW5wdXRUb3VjaFRhcChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaWFsb2dUaW1lOiB0aGlzLmdldFRpbWUoKVxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5zaG93KCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Ub3VjaFRhcCkgdGhpcy5wcm9wcy5vblRvdWNoVGFwKGUpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVQaWNrZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xudmFyIEVuaGFuY2VkU3dpdGNoID0gcmVxdWlyZSgnLi9lbmhhbmNlZC1zd2l0Y2gnKTtcblxudmFyIFRvZ2dsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUb2dnbGUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZWxlbWVudFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGxhYmVsU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgb25Ub2dnbGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHRvZ2dsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRlZmF1bHRUb2dnbGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzd2l0Y2hlZDogdGhpcy5wcm9wcy50b2dnbGVkIHx8IHRoaXMucHJvcHMuZGVmYXVsdFRvZ2dsZWQgfHwgdGhpcy5wcm9wcy52YWx1ZUxpbmsgJiYgdGhpcy5wcm9wcy52YWx1ZUxpbmsudmFsdWUgfHwgZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50b2dnbGU7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHRvZ2dsZVNpemUgPSAyMDtcbiAgICB2YXIgdG9nZ2xlVHJhY2tXaWR0aCA9IDM2O1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICBpY29uOiB7XG4gICAgICAgIHdpZHRoOiAzNixcbiAgICAgICAgcGFkZGluZzogJzRweCAwcHggNnB4IDJweCdcbiAgICAgIH0sXG4gICAgICB0b2dnbGVFbGVtZXQ6IHtcbiAgICAgICAgd2lkdGg6IHRvZ2dsZVRyYWNrV2lkdGhcbiAgICAgIH0sXG4gICAgICB0cmFjazoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogMTQsXG4gICAgICAgIGJvcmRlclJhZGl1czogMzAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrT2ZmQ29sb3JcbiAgICAgIH0sXG4gICAgICB0aHVtYjoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDEsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHdpZHRoOiB0b2dnbGVTaXplLFxuICAgICAgICBoZWlnaHQ6IHRvZ2dsZVNpemUsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudGh1bWJPZmZDb2xvclxuICAgICAgfSxcbiAgICAgIHRyYWNrV2hlblN3aXRjaGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrT25Db2xvclxuICAgICAgfSxcbiAgICAgIHRodW1iV2hlblN3aXRjaGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRodW1iT25Db2xvcixcbiAgICAgICAgbGVmdDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgdHJhY2tXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudHJhY2tEaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgdGh1bWJXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudGh1bWJEaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkubGFiZWxEaXNhYmxlZENvbG9yIDogdGhpcy5nZXRUaGVtZSgpLmxhYmVsQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG9uVG9nZ2xlID0gX3Byb3BzLm9uVG9nZ2xlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydvblRvZ2dsZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHRyYWNrU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudHJhY2ssIHRoaXMucHJvcHMudHJhY2tTdHlsZSwgdGhpcy5zdGF0ZS5zd2l0Y2hlZCAmJiBzdHlsZXMudHJhY2tXaGVuU3dpdGNoZWQsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLnRyYWNrV2hlbkRpc2FibGVkKTtcblxuICAgIHZhciB0aHVtYlN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRodW1iLCB0aGlzLnByb3BzLnRodW1iU3R5bGUsIHRoaXMuc3RhdGUuc3dpdGNoZWQgJiYgc3R5bGVzLnRodW1iV2hlblN3aXRjaGVkLCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy50aHVtYldoZW5EaXNhYmxlZCk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zd2l0Y2hlZCkge1xuICAgICAgdGh1bWJTdHlsZXMubWFyZ2luTGVmdCA9ICctJyArIHRodW1iU3R5bGVzLndpZHRoO1xuICAgIH1cblxuICAgIHZhciB0b2dnbGVFbGVtZXRTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50b2dnbGVFbGVtZXQsIHRoaXMucHJvcHMuZWxlbWVudFN0eWxlKTtcblxuICAgIHZhciB0b2dnbGVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogdG9nZ2xlRWxlbWV0U3R5bGVzIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiB0cmFja1N0eWxlcyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIHsgc3R5bGU6IHRodW1iU3R5bGVzLCBjaXJjbGU6IHRydWUsIHpEZXB0aDogMSB9KVxuICAgICk7XG5cbiAgICB2YXIgY3VzdG9tUmlwcGxlU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgIHRvcDogJy0xMCcsXG4gICAgICBsZWZ0OiAnLTEwJ1xuICAgIH0sIHRoaXMucHJvcHMucmlwcGxlU3R5bGUpO1xuXG4gICAgdmFyIHJpcHBsZUNvbG9yID0gdGhpcy5zdGF0ZS5zd2l0Y2hlZCA/IHRoaXMuZ2V0VGhlbWUoKS50aHVtYk9uQ29sb3IgOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRleHRDb2xvcjtcblxuICAgIHZhciBpY29uU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uLCB0aGlzLnByb3BzLmljb25TdHlsZSk7XG5cbiAgICB2YXIgbGFiZWxTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmxhYmVsLCB0aGlzLnByb3BzLmxhYmVsU3R5bGUpO1xuXG4gICAgdmFyIGVuaGFuY2VkU3dpdGNoUHJvcHMgPSB7XG4gICAgICByZWY6ICdlbmhhbmNlZFN3aXRjaCcsXG4gICAgICBpbnB1dFR5cGU6ICdjaGVja2JveCcsXG4gICAgICBzd2l0Y2hFbGVtZW50OiB0b2dnbGVFbGVtZW50LFxuICAgICAgcmlwcGxlU3R5bGU6IGN1c3RvbVJpcHBsZVN0eWxlLFxuICAgICAgcmlwcGxlQ29sb3I6IHJpcHBsZUNvbG9yLFxuICAgICAgaWNvblN0eWxlOiBpY29uU3R5bGUsXG4gICAgICB0cmFja1N0eWxlOiB0cmFja1N0eWxlcyxcbiAgICAgIHRodW1iU3R5bGU6IHRodW1iU3R5bGVzLFxuICAgICAgbGFiZWxTdHlsZTogbGFiZWxTdHlsZSxcbiAgICAgIHN3aXRjaGVkOiB0aGlzLnN0YXRlLnN3aXRjaGVkLFxuICAgICAgb25Td2l0Y2g6IHRoaXMuX2hhbmRsZVRvZ2dsZSxcbiAgICAgIG9uUGFyZW50U2hvdWxkVXBkYXRlOiB0aGlzLl9oYW5kbGVTdGF0ZUNoYW5nZSxcbiAgICAgIGRlZmF1bHRTd2l0Y2hlZDogdGhpcy5wcm9wcy5kZWZhdWx0VG9nZ2xlZCxcbiAgICAgIGxhYmVsUG9zaXRpb246IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA/IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA6ICdsZWZ0J1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndG9nZ2xlZCcpKSBlbmhhbmNlZFN3aXRjaFByb3BzLmNoZWNrZWQgPSB0aGlzLnByb3BzLnRvZ2dsZWQ7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbmhhbmNlZFN3aXRjaCwgX2V4dGVuZHMoe30sIG90aGVyLCBlbmhhbmNlZFN3aXRjaFByb3BzKSk7XG4gIH0sXG5cbiAgaXNUb2dnbGVkOiBmdW5jdGlvbiBpc1RvZ2dsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy5lbmhhbmNlZFN3aXRjaC5pc1N3aXRjaGVkKCk7XG4gIH0sXG5cbiAgc2V0VG9nZ2xlZDogZnVuY3Rpb24gc2V0VG9nZ2xlZChuZXdUb2dnbGVkVmFsdWUpIHtcbiAgICB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guc2V0U3dpdGNoZWQobmV3VG9nZ2xlZFZhbHVlKTtcbiAgfSxcblxuICBfaGFuZGxlVG9nZ2xlOiBmdW5jdGlvbiBfaGFuZGxlVG9nZ2xlKGUsIGlzSW5wdXRDaGVja2VkKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Ub2dnbGUpIHRoaXMucHJvcHMub25Ub2dnbGUoZSwgaXNJbnB1dENoZWNrZWQpO1xuICB9LFxuXG4gIF9oYW5kbGVTdGF0ZUNoYW5nZTogZnVuY3Rpb24gX2hhbmRsZVN0YXRlQ2hhbmdlKG5ld1N3aXRjaGVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN3aXRjaGVkOiBuZXdTd2l0Y2hlZCB9KTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4uL3N0eWxlcy9jb2xvcnMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUb29sYmFyR3JvdXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG9vbGJhckdyb3VwJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmbG9hdDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmbG9hdDogJ2xlZnQnXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudG9vbGJhcjtcbiAgfSxcblxuICBnZXRTcGFjaW5nOiBmdW5jdGlvbiBnZXRTcGFjaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZy5kZXNrdG9wR3V0dGVyO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBtYXJnaW5Ib3Jpem9udGFsID0gdGhpcy5nZXRTcGFjaW5nKCk7XG4gICAgdmFyIG1hcmdpblZlcnRpY2FsID0gKHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgLSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmJ1dHRvbi5oZWlnaHQpIC8gMjtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZmxvYXQ6IHRoaXMucHJvcHMuZmxvYXRcbiAgICAgIH0sXG4gICAgICBkcm9wRG93bk1lbnU6IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgICAgY29sb3I6IENvbG9ycy5saWdodEJsYWNrLCAvLyByZW1vdmVzIGhvdmVyIGNvbG9yIGNoYW5nZSwgd2Ugd2FudCB0byBrZWVwIGl0XG4gICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgbWFyZ2luUmlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xCZzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLm1lbnVIb3ZlckNvbG9yLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMFxuICAgICAgICB9LFxuICAgICAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBtYXJnaW46IG1hcmdpblZlcnRpY2FsICsgJ3B4ICcgKyBtYXJnaW5Ib3Jpem9udGFsICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBpY29uOiB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkuaWNvbkNvbG9yLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgKyAncHgnLFxuICAgICAgICAgIHBhZGRpbmdMZWZ0OiB0aGlzLmdldFNwYWNpbmcoKVxuICAgICAgICB9LFxuICAgICAgICBob3Zlcjoge1xuICAgICAgICAgIHpJbmRleDogMSxcbiAgICAgICAgICBjb2xvcjogQ29sb3JzLmRhcmtCbGFja1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3Bhbjoge1xuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLmljb25Db2xvcixcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCdcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5maXJzdENoaWxkKSBzdHlsZXMubWFyZ2luTGVmdCA9IC0yNDtcbiAgICBpZiAodGhpcy5wcm9wcy5sYXN0Q2hpbGQpIHN0eWxlcy5tYXJnaW5SaWdodCA9IC0yNDtcblxuICAgIHZhciBuZXdDaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY3VycmVudENoaWxkKSB7XG4gICAgICBpZiAoIWN1cnJlbnRDaGlsZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY3VycmVudENoaWxkLnR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgY2FzZSAnRHJvcERvd25NZW51JzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5kcm9wRG93bk1lbnUucm9vdCxcbiAgICAgICAgICAgIHN0eWxlQ29udHJvbEJnOiBzdHlsZXMuZHJvcERvd25NZW51LmNvbnRyb2xCZyxcbiAgICAgICAgICAgIHN0eWxlVW5kZXJsaW5lOiBzdHlsZXMuZHJvcERvd25NZW51LnVuZGVybGluZVxuICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdEcm9wRG93bkljb24nOlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY3VycmVudENoaWxkLCB7XG4gICAgICAgICAgICBzdHlsZTogeyBmbG9hdDogJ2xlZnQnIH0sXG4gICAgICAgICAgICBpY29uU3R5bGU6IHN0eWxlcy5pY29uLnJvb3QsXG4gICAgICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5faGFuZGxlTW91c2VPdmVyRHJvcERvd25NZW51LFxuICAgICAgICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXREcm9wRG93bk1lbnVcbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnUmFpc2VkQnV0dG9uJzpjYXNlICdGbGF0QnV0dG9uJzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5idXR0b25cbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnRm9udEljb24nOlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY3VycmVudENoaWxkLCB7XG4gICAgICAgICAgICBzdHlsZTogc3R5bGVzLmljb24ucm9vdCxcbiAgICAgICAgICAgIG9uTW91c2VPdmVyOiB0aGlzLl9oYW5kbGVNb3VzZU92ZXJGb250SWNvbixcbiAgICAgICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0Rm9udEljb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnVG9vbGJhclNlcGFyYXRvcic6Y2FzZSAnVG9vbGJhclRpdGxlJzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnNwYW4sIGN1cnJlbnRDaGlsZC5wcm9wcy5zdHlsZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY3VycmVudENoaWxkO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICBuZXdDaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlckRyb3BEb3duTWVudTogZnVuY3Rpb24gX2hhbmRsZU1vdXNlT3ZlckRyb3BEb3duTWVudShlKSB7XG4gICAgZS50YXJnZXQuc3R5bGUuekluZGV4ID0gdGhpcy5nZXRTdHlsZXMoKS5pY29uLmhvdmVyLnpJbmRleDtcbiAgICBlLnRhcmdldC5zdHlsZS5jb2xvciA9IHRoaXMuZ2V0U3R5bGVzKCkuaWNvbi5ob3Zlci5jb2xvcjtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXREcm9wRG93bk1lbnU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dERyb3BEb3duTWVudShlKSB7XG4gICAgZS50YXJnZXQuc3R5bGUuekluZGV4ID0gJ2F1dG8nO1xuICAgIGUudGFyZ2V0LnN0eWxlLmNvbG9yID0gdGhpcy5nZXRTdHlsZXMoKS5pY29uLnJvb3QuY29sb3I7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3ZlckZvbnRJY29uOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyRm9udEljb24oZSkge1xuICAgIGUudGFyZ2V0LnN0eWxlLnpJbmRleCA9IHRoaXMuZ2V0U3R5bGVzKCkuaWNvbi5ob3Zlci56SW5kZXg7XG4gICAgZS50YXJnZXQuc3R5bGUuY29sb3IgPSB0aGlzLmdldFN0eWxlcygpLmljb24uaG92ZXIuY29sb3I7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlT3V0Rm9udEljb246IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dEZvbnRJY29uKGUpIHtcbiAgICBlLnRhcmdldC5zdHlsZS56SW5kZXggPSAnYXV0byc7XG4gICAgZS50YXJnZXQuc3R5bGUuY29sb3IgPSB0aGlzLmdldFN0eWxlcygpLmljb24ucm9vdC5jb2xvcjtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbGJhckdyb3VwOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUb29sYmFyU2VwYXJhdG9yID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1Rvb2xiYXJTZXBhcmF0b3InLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRvb2xiYXI7XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZXBhcmF0b3JDb2xvcixcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgaGVpZ2h0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyTW9yZSxcbiAgICAgIG1hcmdpbkxlZnQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRvcDogKHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgLSB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyTW9yZSkgLyAyLFxuICAgICAgd2lkdGg6IDFcbiAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLCBzdHlsZTogc3R5bGVzIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2xiYXJTZXBhcmF0b3I7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgVG9vbGJhclRpdGxlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1Rvb2xiYXJUaXRsZScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRvb2xiYXI7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciB0ZXh0ID0gX3Byb3BzLnRleHQ7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3N0eWxlJywgJ3RleHQnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BHdXR0ZXJMZXNzLFxuICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICBmb250U2l6ZTogdGhpcy5nZXRUaGVtZSgpLnRpdGxlRm9udFNpemUgKyAncHgnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sIHN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgX2V4dGVuZHMoeyBzdHlsZTogc3R5bGVzIH0sIG90aGVyKSxcbiAgICAgIHRleHRcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2xiYXJUaXRsZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgVG9vbGJhciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUb29sYmFyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50b29sYmFyO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHJldHVybiB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmJhY2tncm91bmRDb2xvcixcbiAgICAgIGhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBwYWRkaW5nOiB0aGlzLnByb3BzLm5vR3V0dGVyID8gMCA6ICcwcHggJyArIHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BHdXR0ZXIgKyAncHgnXG4gICAgfSwgdGhpcy5wcm9wcy5zdHlsZSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHRoaXMuZ2V0U3R5bGVzKCkgfSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2xiYXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4vc3R5bGVzL2NvbG9ycycpO1xuXG52YXIgVG9vbHRpcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUb29sdGlwJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHNob3c6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHRvdWNoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9zZXRSaXBwbGVTaXplKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fc2V0UmlwcGxlU2l6ZSgpO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29udGVudEZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiAnMTBweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMnB4JyxcbiAgICAgICAgcGFkZGluZzogJzAgOHB4JyxcbiAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0b3A6IC0xMDAwMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICd0b3AnLCAnNDUwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ3RyYW5zZm9ybScsICcwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ29wYWNpdHknLCAnMG1zJylcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgIH0sXG4gICAgICByaXBwbGU6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ3dpZHRoJywgJzQ1MG1zJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCcwbXMnLCAnaGVpZ2h0JywgJzQ1MG1zJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICdiYWNrZ3JvdW5kQ29sb3InLCAnMG1zJylcbiAgICAgIH0sXG4gICAgICByb290V2hlblNob3duOiB7XG4gICAgICAgIHRvcDogLTE2LFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwcHgsIDE2cHgsIDBweCknLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcwbXMnLCAndG9wJywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAndHJhbnNmb3JtJywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnb3BhY2l0eScsICcwbXMnKVxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuVG91Y2hlZDoge1xuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnNDRweCcsXG4gICAgICAgIHBhZGRpbmc6ICcwIDE2cHgnXG4gICAgICB9LFxuICAgICAgcmlwcGxlV2hlblNob3duOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLmdyZXk2MDAsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ3dpZHRoJywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnaGVpZ2h0JywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnYmFja2dyb3VuZENvbG9yJywgJzBtcycpXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnbGFiZWwnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnNob3cgJiYgc3R5bGVzLnJvb3RXaGVuU2hvd24sIHRoaXMucHJvcHMudG91Y2ggJiYgc3R5bGVzLnJvb3RXaGVuVG91Y2hlZCwgdGhpcy5wcm9wcy5zdHlsZSkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHJlZjogJ3JpcHBsZScsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yaXBwbGUsIHRoaXMucHJvcHMuc2hvdyAmJiBzdHlsZXMucmlwcGxlV2hlblNob3duKSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwpIH0sXG4gICAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF9zZXRSaXBwbGVTaXplOiBmdW5jdGlvbiBfc2V0UmlwcGxlU2l6ZSgpIHtcbiAgICB2YXIgcmlwcGxlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnJpcHBsZSk7XG4gICAgdmFyIHRvb2x0aXAgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShSZWFjdC5maW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgdmFyIHRvb2x0aXBXaWR0aCA9IHBhcnNlSW50KHRvb2x0aXAuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSwgMTApO1xuICAgIHZhciB0b29sdGlwSGVpZ2h0ID0gcGFyc2VJbnQodG9vbHRpcC5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSwgMTApO1xuXG4gICAgdmFyIHJpcHBsZURpYW1ldGVyID0gTWF0aC5zcXJ0KE1hdGgucG93KHRvb2x0aXBIZWlnaHQsIDIpICsgTWF0aC5wb3codG9vbHRpcFdpZHRoIC8gMiwgMikpICogMjtcblxuICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHJpcHBsZS5zdHlsZS5oZWlnaHQgPSByaXBwbGVEaWFtZXRlciArICdweCc7XG4gICAgICByaXBwbGUuc3R5bGUud2lkdGggPSByaXBwbGVEaWFtZXRlciArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpcHBsZS5zdHlsZS53aWR0aCA9ICcwcHgnO1xuICAgICAgcmlwcGxlLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sdGlwOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBTbGlkZUluQ2hpbGQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU2xpZGVJbkNoaWxkJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvL1RoaXMgY2FsbGJhY2sgaXMgbmVlZGVkIGJhY2F1c2UgdGhlIGRpcmVjdGlvbiBjb3VsZCBjaGFuZ2VcbiAgICAvL3doZW4gbGVhdmluZyB0aGUgZG9tXG4gICAgZ2V0TGVhdmVEaXJlY3Rpb246IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSxcblxuICBjb21wb25lbnRXaWxsRW50ZXI6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxFbnRlcihjYWxsYmFjaykge1xuICAgIHZhciBzdHlsZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuICAgIHZhciB4ID0gdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICdsZWZ0JyA/ICcxMDAlJyA6IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAncmlnaHQnID8gJy0xMDAlJyA6ICcwJztcbiAgICB2YXIgeSA9IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAndXAnID8gJzEwMCUnIDogdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICdkb3duJyA/ICctMTAwJScgOiAnMCc7XG5cbiAgICBzdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIEF1dG9QcmVmaXguc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywnICsgeSArICcsMCknKTtcblxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZEVudGVyOiBmdW5jdGlvbiBjb21wb25lbnREaWRFbnRlcigpIHtcbiAgICB2YXIgc3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICBzdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIEF1dG9QcmVmaXguc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxMZWF2ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbExlYXZlKGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMucHJvcHMuZ2V0TGVhdmVEaXJlY3Rpb24oKTtcbiAgICB2YXIgeCA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gJy0xMDAlJyA6IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICcxMDAlJyA6ICcwJztcbiAgICB2YXIgeSA9IGRpcmVjdGlvbiA9PT0gJ3VwJyA/ICctMTAwJScgOiBkaXJlY3Rpb24gPT09ICdkb3duJyA/ICcxMDAlJyA6ICcwJztcblxuICAgIHN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgQXV0b1ByZWZpeC5zZXQoc3R5bGUsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArIHggKyAnLCcgKyB5ICsgJywwKScpO1xuXG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgNDUwKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3R5bGVzID0gX3Byb3BzLnN0eWxlcztcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGVzJ10pO1xuXG4gICAgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIHRvcDogJzBweCcsXG4gICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKVxuICAgIH0sIHRoaXMucHJvcHMuc3R5bGUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogc3R5bGVzIH0pLFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2xpZGVJbkNoaWxkOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBSZWFjdFRyYW5zaXRpb25Hcm91cCA9IFJlYWN0LmFkZG9ucy5UcmFuc2l0aW9uR3JvdXA7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFNsaWRlSW5DaGlsZCA9IHJlcXVpcmUoJy4vc2xpZGUtaW4tY2hpbGQnKTtcblxudmFyIFNsaWRlSW4gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU2xpZGVJbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGlyZWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0JywgJ3VwJywgJ2Rvd24nXSlcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlyZWN0aW9uOiAnbGVmdCdcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcHJvcHMuZGlyZWN0aW9uO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydkaXJlY3Rpb24nXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgfSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFJlYWN0VHJhbnNpdGlvbkdyb3VwLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMsXG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicgfSksXG4gICAgICB0aGlzLl9nZXRTbGlkZUluQ2hpbGRyZW4oKVxuICAgICk7XG4gIH0sXG5cbiAgX2dldFNsaWRlSW5DaGlsZHJlbjogZnVuY3Rpb24gX2dldFNsaWRlSW5DaGlsZHJlbigpIHtcbiAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFNsaWRlSW5DaGlsZCxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogY2hpbGQua2V5LFxuICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy5wcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgICAgZ2V0TGVhdmVEaXJlY3Rpb246IHRoaXMuX2dldExlYXZlRGlyZWN0aW9uIH0sXG4gICAgICAgIGNoaWxkXG4gICAgICApO1xuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIF9nZXRMZWF2ZURpcmVjdGlvbjogZnVuY3Rpb24gX2dldExlYXZlRGlyZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRpcmVjdGlvbjtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbGlkZUluOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yc3BhY2UsIG5vcm1hbGl6ZWQgdG8gMCBmb3IgXG4gICAqIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLiBSR0IgY29sb3JzIG9ubHkuIERvZXMgbm90IHRha2UgXG4gICAqIGludG8gYWNjb3VudCBhbHBoYSB2YWx1ZXMuIFxuICAgKlxuICAgKiBUT0RPOiBcbiAgICogLSBUYWtlIGludG8gYWNjb3VudCBhbHBoYSB2YWx1ZXMuXG4gICAqIC0gSWRlbnRpZnkgd2h5IHRoZXJlIGFyZSBtaW5vciBkaXNjcmVwYW5jaWVzIGZvciBzb21lIHVzZSBjYXNlcyBcbiAgICogICAoaS5lLiAjRjBGICYgI0ZGRikuIE5vdGUgdGhhdCB0aGVzZSBjYXNlcyByYXJlbHkgb2NjdXIuXG4gICAqXG4gICAqIEZvcm11bGE6IGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAgICovXG4gIF9sdW1pbmFuY2U6IGZ1bmN0aW9uIF9sdW1pbmFuY2UoY29sb3IpIHtcbiAgICBjb2xvciA9IHRoaXMuX2RlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICAgIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpID4gLTEpIHtcbiAgICAgIHZhciByZ2IgPSBjb2xvci52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgICAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6IE1hdGgucG93KCh2YWwgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdDYWxjdWxhdGluZyB0aGUgcmVsYXRpdmUgbHVtaW5hbmNlIGlzIG5vdCBhdmFpbGFibGUgZm9yICcgKyAnSFNMIGFuZCBIU0xBLic7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtczpcbiAgICogYWRkaXRpb25hbFZhbHVlID0gQW4gZXh0cmEgdmFsdWUgdGhhdCBoYXMgYmVlbiBjYWxjdWxhdGVkIGJ1dCBub3QgaW5jbHVkZWQgXG4gICAqICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIG9yaWdpbmFsIGNvbG9yIG9iamVjdCwgc3VjaCBhcyBhbiBhbHBoYSB2YWx1ZS5cbiAgICovXG4gIF9jb252ZXJ0Q29sb3JUb1N0cmluZzogZnVuY3Rpb24gX2NvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yLCBhZGRpdG9uYWxWYWx1ZSkge1xuICAgIHZhciBzdHIgPSBjb2xvci50eXBlICsgJygnICsgcGFyc2VJbnQoY29sb3IudmFsdWVzWzBdKSArICcsJyArIHBhcnNlSW50KGNvbG9yLnZhbHVlc1sxXSkgKyAnLCcgKyBwYXJzZUludChjb2xvci52YWx1ZXNbMl0pO1xuXG4gICAgaWYgKGFkZGl0b25hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0ciArPSAnLCcgKyBhZGRpdG9uYWxWYWx1ZSArICcpJztcbiAgICB9IGVsc2UgaWYgKGNvbG9yLnZhbHVlcy5sZW5ndGggPT0gNCkge1xuICAgICAgc3RyICs9ICcsJyArIGNvbG9yLnZhbHVlc1szXSArICcpJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcpJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9LFxuXG4gIC8vIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoZXggZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gIF9jb252ZXJ0SGV4VG9SR0I6IGZ1bmN0aW9uIF9jb252ZXJ0SGV4VG9SR0IoY29sb3IpIHtcbiAgICBpZiAoY29sb3IubGVuZ3RoID09PSA0KSB7XG4gICAgICB2YXIgZXh0ZW5kZWRDb2xvciA9ICcjJztcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY29sb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZXh0ZW5kZWRDb2xvciArPSBjb2xvci5jaGFyQXQoaSkgKyBjb2xvci5jaGFyQXQoaSk7XG4gICAgICB9XG4gICAgICBjb2xvciA9IGV4dGVuZGVkQ29sb3I7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IHtcbiAgICAgIHI6IHBhcnNlSW50KGNvbG9yLnN1YnN0cigxLCAyKSwgMTYpLFxuICAgICAgZzogcGFyc2VJbnQoY29sb3Iuc3Vic3RyKDMsIDIpLCAxNiksXG4gICAgICBiOiBwYXJzZUludChjb2xvci5zdWJzdHIoNSwgMiksIDE2KVxuICAgIH07XG5cbiAgICByZXR1cm4gJ3JnYignICsgdmFsdWVzLnIgKyAnLCcgKyB2YWx1ZXMuZyArICcsJyArIHZhbHVlcy5iICsgJyknO1xuICB9LFxuXG4gIC8vIFJldHVybnMgdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yIG9mIGFueSBnaXZlbiB0eXBlLlxuICBfZGVjb21wb3NlQ29sb3I6IGZ1bmN0aW9uIF9kZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAgIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2RlY29tcG9zZUNvbG9yKHRoaXMuX2NvbnZlcnRIZXhUb1JHQihjb2xvcikpO1xuICAgIH1cblxuICAgIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gICAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG5cbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCB2YWx1ZXM6IHZhbHVlcyB9O1xuICB9LFxuXG4gIC8vIFNldCB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gIC8vIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICBmYWRlOiBmdW5jdGlvbiBmYWRlKGNvbG9yLCBhbW91bnQpIHtcbiAgICBjb2xvciA9IHRoaXMuX2RlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgICBpZiAoY29sb3IudHlwZSA9PSAncmdiJyB8fCBjb2xvci50eXBlID09ICdoc2wnKSBjb2xvci50eXBlICs9ICdhJztcbiAgICByZXR1cm4gdGhpcy5fY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IsIGFtb3VudCk7XG4gIH0sXG5cbiAgLy8gRGVzYXR1cmF0ZXMgcmdiIGFuZCBzZXRzIG9wYWNpdHkgdG8gMC4xNVxuICBsaWdodGVuOiBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBhbW91bnQpIHtcbiAgICBjb2xvciA9IHRoaXMuX2RlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICAgIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1syXSArPSBhbW91bnQ7XG4gICAgICByZXR1cm4gdGhpcy5fZGVjb21wb3NlQ29sb3IodGhpcy5fY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpKTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgKyBhbW91bnQ7XG4gICAgICAgIGlmIChjb2xvci52YWx1ZXNbaV0gPiAyNTUpIGNvbG9yLnZhbHVlc1tpXSA9IDI1NTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdhJykgPD0gLTEpIGNvbG9yLnR5cGUgKz0gJ2EnO1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yLCAnMC4xNScpO1xuICB9LFxuXG4gIGRhcmtlbjogZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBhbW91bnQpIHtcbiAgICBjb2xvciA9IHRoaXMuX2RlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICAgIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1syXSArPSBhbW91bnQ7XG4gICAgICByZXR1cm4gdGhpcy5fZGVjb21wb3NlQ29sb3IodGhpcy5fY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpKTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBhbW91bnQ7XG4gICAgICAgIGlmIChjb2xvci52YWx1ZXNbaV0gPCAwKSBjb2xvci52YWx1ZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jb252ZXJ0Q29sb3JUb1N0cmluZyhjb2xvcik7XG4gIH0sXG5cbiAgLy8gQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICAvL1xuICAvLyBGb3JtdWxhOiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmXG4gIGNvbnRyYXN0UmF0aW86IGZ1bmN0aW9uIGNvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZm9yZWdyb3VuZCkge1xuICAgIHZhciBsdW1BID0gdGhpcy5fbHVtaW5hbmNlKGJhY2tncm91bmQpO1xuICAgIHZhciBsdW1CID0gdGhpcy5fbHVtaW5hbmNlKGZvcmVncm91bmQpO1xuXG4gICAgaWYgKGx1bUEgPj0gbHVtQikge1xuICAgICAgcmV0dXJuICgobHVtQSArIDAuMDUpIC8gKGx1bUIgKyAwLjA1KSkudG9GaXhlZCgyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgobHVtQiArIDAuMDUpIC8gKGx1bUEgKyAwLjA1KSkudG9GaXhlZCgyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqIFxuICAgKiBEZXRlcm1pbmVzIGhvdyByZWFkYWJsZSBhIGNvbG9yIGNvbWJpbmF0aW9uIGlzIGJhc2VkIG9uIGl0cyBsZXZlbC5cbiAgICogTGV2ZWxzIGFyZSBkZWZpbmVkIGZyb20gQExlYVZlcm91OlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vTGVhVmVyb3UvY29udHJhc3QtcmF0aW8vYmxvYi9naC1wYWdlcy9jb250cmFzdC1yYXRpby5qc1xuICAgKi9cbiAgY29udHJhc3RSYXRpb0xldmVsOiBmdW5jdGlvbiBjb250cmFzdFJhdGlvTGV2ZWwoYmFja2dyb3VuZCwgZm9yZWdyb3VuZCkge1xuICAgIHZhciBsZXZlbHMgPSB7XG4gICAgICAnZmFpbCc6IHtcbiAgICAgICAgcmFuZ2U6IFswLCAzXSxcbiAgICAgICAgY29sb3I6ICdoc2woMCwgMTAwJSwgNDAlKSdcbiAgICAgIH0sXG4gICAgICAnYWEtbGFyZ2UnOiB7XG4gICAgICAgIHJhbmdlOiBbMywgNC41XSxcbiAgICAgICAgY29sb3I6ICdoc2woNDAsIDEwMCUsIDQ1JSknXG4gICAgICB9LFxuICAgICAgJ2FhJzoge1xuICAgICAgICByYW5nZTogWzQuNSwgN10sXG4gICAgICAgIGNvbG9yOiAnaHNsKDgwLCA2MCUsIDQ1JSknXG4gICAgICB9LFxuICAgICAgJ2FhYSc6IHtcbiAgICAgICAgcmFuZ2U6IFs3LCAyMl0sXG4gICAgICAgIGNvbG9yOiAnaHNsKDk1LCA2MCUsIDQxJSknXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByYXRpbyA9IHRoaXMuY29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBmb3JlZ3JvdW5kKTtcblxuICAgIGZvciAodmFyIGxldmVsIGluIGxldmVscykge1xuICAgICAgdmFyIHJhbmdlID0gbGV2ZWxzW2xldmVsXS5yYW5nZTtcbiAgICAgIGlmIChyYXRpbyA+PSByYW5nZVswXSAmJiByYXRpbyA8PSByYW5nZVsxXSkgcmV0dXJuIGxldmVsO1xuICAgIH1cbiAgfVxuXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4vZXZlbnRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIF90ZXN0U3VwcG9ydGVkUHJvcHM6IGZ1bmN0aW9uIF90ZXN0U3VwcG9ydGVkUHJvcHMocHJvcHMpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGZvciAoaSBpbiBwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGkpICYmIGVsLnN0eWxlW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvL1JldHVybnMgdGhlIGNvcnJlY3QgZXZlbnQgbmFtZSB0byB1c2VcbiAgdHJhbnNpdGlvbkVuZEV2ZW50TmFtZTogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEV2ZW50TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVzdFN1cHBvcnRlZFByb3BzKHtcbiAgICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ09UcmFuc2l0aW9uJzogJ290cmFuc2l0aW9uZW5kJyxcbiAgICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCdcbiAgICB9KTtcbiAgfSxcblxuICBhbmltYXRpb25FbmRFdmVudE5hbWU6IGZ1bmN0aW9uIGFuaW1hdGlvbkVuZEV2ZW50TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVzdFN1cHBvcnRlZFByb3BzKHtcbiAgICAgICdhbmltYXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICctby1hbmltYXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgICAnLW1vei1hbmltYXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICctd2Via2l0LWFuaW1hdGlvbic6ICd3ZWJraXRBbmltYXRpb25FbmQnXG4gICAgfSk7XG4gIH0sXG5cbiAgb25UcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRyYW5zaXRpb25FbmQgPSB0aGlzLnRyYW5zaXRpb25FbmRFdmVudE5hbWUoKTtcblxuICAgIEV2ZW50cy5vbmNlKGVsLCB0cmFuc2l0aW9uRW5kLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSxcblxuICBvbkFuaW1hdGlvbkVuZDogZnVuY3Rpb24gb25BbmltYXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGFuaW1hdGlvbkVuZCA9IHRoaXMuYW5pbWF0aW9uRW5kRXZlbnROYW1lKCk7XG5cbiAgICBFdmVudHMub25jZShlbCwgYW5pbWF0aW9uRW5kLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgYWRkRGF5czogZnVuY3Rpb24gYWRkRGF5cyhkLCBkYXlzKSB7XG4gICAgdmFyIG5ld0RhdGUgPSB0aGlzLmNsb25lKGQpO1xuICAgIG5ld0RhdGUuc2V0RGF0ZShkLmdldERhdGUoKSArIGRheXMpO1xuICAgIHJldHVybiBuZXdEYXRlO1xuICB9LFxuXG4gIGFkZE1vbnRoczogZnVuY3Rpb24gYWRkTW9udGhzKGQsIG1vbnRocykge1xuICAgIHZhciBuZXdEYXRlID0gdGhpcy5jbG9uZShkKTtcbiAgICBuZXdEYXRlLnNldE1vbnRoKGQuZ2V0TW9udGgoKSArIG1vbnRocyk7XG4gICAgcmV0dXJuIG5ld0RhdGU7XG4gIH0sXG5cbiAgYWRkWWVhcnM6IGZ1bmN0aW9uIGFkZFllYXJzKGQsIHllYXJzKSB7XG4gICAgdmFyIG5ld0RhdGUgPSB0aGlzLmNsb25lKGQpO1xuICAgIG5ld0RhdGUuc2V0RnVsbFllYXIoZC5nZXRGdWxsWWVhcigpICsgeWVhcnMpO1xuICAgIHJldHVybiBuZXdEYXRlO1xuICB9LFxuXG4gIGNsb25lOiBmdW5jdGlvbiBjbG9uZShkKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGQuZ2V0VGltZSgpKTtcbiAgfSxcblxuICBjbG9uZUFzRGF0ZTogZnVuY3Rpb24gY2xvbmVBc0RhdGUoZCkge1xuICAgIHZhciBjbG9uZWREYXRlID0gdGhpcy5jbG9uZShkKTtcbiAgICBjbG9uZWREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgIHJldHVybiBjbG9uZWREYXRlO1xuICB9LFxuXG4gIGdldERheXNJbk1vbnRoOiBmdW5jdGlvbiBnZXREYXlzSW5Nb250aChkKSB7XG4gICAgdmFyIHJlc3VsdERhdGUgPSB0aGlzLmdldEZpcnN0RGF5T2ZNb250aChkKTtcblxuICAgIHJlc3VsdERhdGUuc2V0TW9udGgocmVzdWx0RGF0ZS5nZXRNb250aCgpICsgMSk7XG4gICAgcmVzdWx0RGF0ZS5zZXREYXRlKHJlc3VsdERhdGUuZ2V0RGF0ZSgpIC0gMSk7XG5cbiAgICByZXR1cm4gcmVzdWx0RGF0ZS5nZXREYXRlKCk7XG4gIH0sXG5cbiAgZ2V0Rmlyc3REYXlPZk1vbnRoOiBmdW5jdGlvbiBnZXRGaXJzdERheU9mTW9udGgoZCkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgMSk7XG4gIH0sXG5cbiAgZ2V0RnVsbE1vbnRoOiBmdW5jdGlvbiBnZXRGdWxsTW9udGgoZCkge1xuICAgIHZhciBtb250aCA9IGQuZ2V0TW9udGgoKTtcbiAgICBzd2l0Y2ggKG1vbnRoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiAnSmFudWFyeSc7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiAnRmVicnVhcnknO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gJ01hcmNoJztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuICdBcHJpbCc7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAnTWF5JztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmV0dXJuICdKdW5lJztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgcmV0dXJuICdKdWx5JztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgcmV0dXJuICdBdWd1c3QnO1xuICAgICAgY2FzZSA4OlxuICAgICAgICByZXR1cm4gJ1NlcHRlbWJlcic7XG4gICAgICBjYXNlIDk6XG4gICAgICAgIHJldHVybiAnT2N0b2Jlcic7XG4gICAgICBjYXNlIDEwOlxuICAgICAgICByZXR1cm4gJ05vdmVtYmVyJztcbiAgICAgIGNhc2UgMTE6XG4gICAgICAgIHJldHVybiAnRGVjZW1iZXInO1xuICAgIH1cbiAgfSxcblxuICBnZXRTaG9ydE1vbnRoOiBmdW5jdGlvbiBnZXRTaG9ydE1vbnRoKGQpIHtcbiAgICB2YXIgbW9udGggPSBkLmdldE1vbnRoKCk7XG4gICAgc3dpdGNoIChtb250aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gJ0phbic7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiAnRmViJztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuICdNYXInO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gJ0Fwcic7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAnTWF5JztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmV0dXJuICdKdW4nO1xuICAgICAgY2FzZSA2OlxuICAgICAgICByZXR1cm4gJ0p1bCc7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIHJldHVybiAnQXVnJztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgcmV0dXJuICdTZXAnO1xuICAgICAgY2FzZSA5OlxuICAgICAgICByZXR1cm4gJ09jdCc7XG4gICAgICBjYXNlIDEwOlxuICAgICAgICByZXR1cm4gJ05vdic7XG4gICAgICBjYXNlIDExOlxuICAgICAgICByZXR1cm4gJ0RlYyc7XG4gICAgfVxuICB9LFxuXG4gIGdldERheU9mV2VlazogZnVuY3Rpb24gZ2V0RGF5T2ZXZWVrKGQpIHtcbiAgICB2YXIgZG93ID0gZC5nZXREYXkoKTtcbiAgICBzd2l0Y2ggKGRvdykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gJ1N1bmRheSc7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiAnTW9uZGF5JztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuICdUdWVzZGF5JztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuICdXZWRuZXNkYXknO1xuICAgICAgY2FzZSA0OlxuICAgICAgICByZXR1cm4gJ1RodXJzZGF5JztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmV0dXJuICdGcmlkYXknO1xuICAgICAgY2FzZSA2OlxuICAgICAgICByZXR1cm4gJ1NhdHVyZGF5JztcbiAgICB9XG4gIH0sXG5cbiAgZ2V0V2Vla0FycmF5OiBmdW5jdGlvbiBnZXRXZWVrQXJyYXkoZCkge1xuICAgIHZhciBkYXlBcnJheSA9IFtdO1xuICAgIHZhciBkYXlzSW5Nb250aCA9IHRoaXMuZ2V0RGF5c0luTW9udGgoZCk7XG4gICAgdmFyIGRheXNJbldlZWs7XG4gICAgdmFyIGVtcHR5RGF5cztcbiAgICB2YXIgZmlyc3REYXlPZldlZWs7XG4gICAgdmFyIHdlZWs7XG4gICAgdmFyIHdlZWtBcnJheSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGF5c0luTW9udGg7IGkrKykge1xuICAgICAgZGF5QXJyYXkucHVzaChuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgaSkpO1xuICAgIH1cblxuICAgIHdoaWxlIChkYXlBcnJheS5sZW5ndGgpIHtcbiAgICAgIGZpcnN0RGF5T2ZXZWVrID0gZGF5QXJyYXlbMF0uZ2V0RGF5KCk7XG4gICAgICBkYXlzSW5XZWVrID0gNyAtIGZpcnN0RGF5T2ZXZWVrO1xuICAgICAgZW1wdHlEYXlzID0gNyAtIGRheXNJbldlZWs7XG4gICAgICB3ZWVrID0gZGF5QXJyYXkuc3BsaWNlKDAsIGRheXNJbldlZWspO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVtcHR5RGF5czsgaSsrKSB7XG4gICAgICAgIHdlZWsudW5zaGlmdChudWxsKTtcbiAgICAgIH1cblxuICAgICAgd2Vla0FycmF5LnB1c2god2Vlayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdlZWtBcnJheTtcbiAgfSxcblxuICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgdmFyIG0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgIHZhciBkID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgdmFyIHkgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgcmV0dXJuIG0gKyAnLycgKyBkICsgJy8nICsgeTtcbiAgfSxcblxuICBpc0VxdWFsRGF0ZTogZnVuY3Rpb24gaXNFcXVhbERhdGUoZDEsIGQyKSB7XG4gICAgcmV0dXJuIGQxICYmIGQyICYmIGQxLmdldEZ1bGxZZWFyKCkgPT09IGQyLmdldEZ1bGxZZWFyKCkgJiYgZDEuZ2V0TW9udGgoKSA9PT0gZDIuZ2V0TW9udGgoKSAmJiBkMS5nZXREYXRlKCkgPT09IGQyLmdldERhdGUoKTtcbiAgfSxcblxuICBpc0JlZm9yZURhdGU6IGZ1bmN0aW9uIGlzQmVmb3JlRGF0ZShkMSwgZDIpIHtcbiAgICB2YXIgZGF0ZTEgPSB0aGlzLmNsb25lQXNEYXRlKGQxKTtcbiAgICB2YXIgZGF0ZTIgPSB0aGlzLmNsb25lQXNEYXRlKGQyKTtcblxuICAgIHJldHVybiBkYXRlMS5nZXRUaW1lKCkgPCBkYXRlMi5nZXRUaW1lKCk7XG4gIH0sXG5cbiAgaXNBZnRlckRhdGU6IGZ1bmN0aW9uIGlzQWZ0ZXJEYXRlKGQxLCBkMikge1xuICAgIHZhciBkYXRlMSA9IHRoaXMuY2xvbmVBc0RhdGUoZDEpO1xuICAgIHZhciBkYXRlMiA9IHRoaXMuY2xvbmVBc0RhdGUoZDIpO1xuXG4gICAgcmV0dXJuIGRhdGUxLmdldFRpbWUoKSA+IGRhdGUyLmdldFRpbWUoKTtcbiAgfSxcblxuICBpc0JldHdlZW5EYXRlczogZnVuY3Rpb24gaXNCZXR3ZWVuRGF0ZXMoZGF0ZVRvQ2hlY2ssIHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuICAgIHJldHVybiAhdGhpcy5pc0JlZm9yZURhdGUoZGF0ZVRvQ2hlY2ssIHN0YXJ0RGF0ZSkgJiYgIXRoaXMuaXNBZnRlckRhdGUoZGF0ZVRvQ2hlY2ssIGVuZERhdGUpO1xuICB9LFxuXG4gIG1vbnRoRGlmZjogZnVuY3Rpb24gbW9udGhEaWZmKGQxLCBkMikge1xuICAgIHZhciBtO1xuICAgIG0gPSAoZDEuZ2V0RnVsbFllYXIoKSAtIGQyLmdldEZ1bGxZZWFyKCkpICogMTI7XG4gICAgbSArPSBkMS5nZXRNb250aCgpO1xuICAgIG0gLT0gZDIuZ2V0TW9udGgoKTtcbiAgICByZXR1cm4gbTtcbiAgfSxcblxuICB5ZWFyRGlmZjogZnVuY3Rpb24geWVhckRpZmYoZDEsIGQyKSB7XG4gICAgcmV0dXJuIH4gfih0aGlzLm1vbnRoRGlmZihkMSwgZDIpIC8gMTIpO1xuICB9XG5cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBpc0Rlc2NlbmRhbnQ6IGZ1bmN0aW9uIGlzRGVzY2VuZGFudChwYXJlbnQsIGNoaWxkKSB7XG4gICAgdmFyIG5vZGUgPSBjaGlsZC5wYXJlbnROb2RlO1xuXG4gICAgd2hpbGUgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUgPT0gcGFyZW50KSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIG9mZnNldDogZnVuY3Rpb24gb2Zmc2V0KGVsKSB7XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0XG4gICAgfTtcbiAgfSxcblxuICBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGVsLmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XG4gIH0sXG5cbiAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7ZWxzZSBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxcYiknICsgY2xhc3NOYW1lLnNwbGl0KCcgJykuam9pbignfCcpICsgJyhcXFxcYnwkKScsICdnaScpLCAnICcpO1xuICB9LFxuXG4gIGhhc0NsYXNzOiBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIG5ldyBSZWdFeHAoJyhefCApJyArIGNsYXNzTmFtZSArICcoIHwkKScsICdnaScpLnRlc3QoZWwuY2xhc3NOYW1lKTtcbiAgfSxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgIGlmICh0aGlzLmhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB0aGlzLnJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpO2Vsc2UgdGhpcy5hZGRDbGFzcyhlbCwgY2xhc3NOYW1lKTtcbiAgfSxcblxuICBmb3JjZVJlZHJhdzogZnVuY3Rpb24gZm9yY2VSZWRyYXcoZWwpIHtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuc3R5bGUuZGlzcGxheTtcblxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgZWwub2Zmc2V0SGVpZ2h0O1xuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gIH0sXG5cbiAgd2l0aG91dFRyYW5zaXRpb246IGZ1bmN0aW9uIHdpdGhvdXRUcmFuc2l0aW9uKGVsLCBjYWxsYmFjaykge1xuICAgIC8vdHVybiBvZmYgdHJhbnNpdGlvblxuICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnbm9uZSc7XG5cbiAgICBjYWxsYmFjaygpO1xuXG4gICAgLy9mb3JjZSBhIHJlZHJhd1xuICAgIHRoaXMuZm9yY2VSZWRyYXcoZWwpO1xuXG4gICAgLy9wdXQgdGhlIHRyYW5zaXRpb24gYmFja1xuICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgfVxuXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgb25jZTogZnVuY3Rpb24gb25jZShlbCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdHlwZUFycmF5ID0gdHlwZS5zcGxpdCgnICcpO1xuICAgIHZhciByZWN1cnNpdmVGdW5jdGlvbiA9IGZ1bmN0aW9uIHJlY3Vyc2l2ZUZ1bmN0aW9uKGUpIHtcbiAgICAgIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS50eXBlLCByZWN1cnNpdmVGdW5jdGlvbik7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSB0eXBlQXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMub24oZWwsIHR5cGVBcnJheVtpXSwgcmVjdXJzaXZlRnVuY3Rpb24pO1xuICAgIH1cbiAgfSxcblxuICAvLyBJRTgrIFN1cHBvcnRcbiAgb246IGZ1bmN0aW9uIG9uKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChlbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gSUU4KyBTdXBwb3J0XG4gIG9mZjogZnVuY3Rpb24gb2ZmKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbDtcbn1cblxuLyoqIFxuKiAgQSByZWN1cnNpdmUgbWVyZ2UgYmV0d2VlbiB0d28gb2JqZWN0cy4gXG4qIFxuKiAgQHBhcmFtIGJhc2UgICAgIC0gdGhlIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSB0byBiZSBvdmVyd3JpdHRlbi4gSXRcbiogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBlaXRoZXIgdGhlIHJvb3QgbGV2ZWwgb3Igc29tZSBuZXN0ZWQgbGV2ZWwuXG4qICBAcGFyYW0gb3ZlcnJpZGUgLSBhbiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIGJlIG92ZXJ3cml0dGVuLiBJdCBcbiogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIHRoZSBzYW1lIHN0cnVjdHVyZSBhcyB0aGUgb2JqZWN0IG9iamVjdC5cbiovXG52YXIgZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKGJhc2UsIG92ZXJyaWRlKSB7XG5cbiAgdmFyIG1lcmdlZE9iamVjdCA9IHt9O1xuXG4gIC8vTG9vcCB0aHJvdWdoIGVhY2gga2V5IGluIHRoZSBiYXNlIG9iamVjdFxuICBPYmplY3Qua2V5cyhiYXNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblxuICAgIHZhciBiYXNlUHJvcCA9IGJhc2Vba2V5XTtcbiAgICB2YXIgb3ZlcnJpZGVQcm9wO1xuXG4gICAgaWYgKGlzT2JqZWN0KG92ZXJyaWRlKSkgb3ZlcnJpZGVQcm9wID0gb3ZlcnJpZGVba2V5XTtcblxuICAgIC8vUmVjdXJzaXZlIGNhbGwgZXh0ZW5kIGlmIHRoZSBwcm9wIGlzIGFub3RoZXIgb2JqZWN0LCBlbHNlIGp1c3QgY29weSBpdCBvdmVyXG4gICAgbWVyZ2VkT2JqZWN0W2tleV0gPSBpc09iamVjdChiYXNlUHJvcCkgJiYgIUFycmF5LmlzQXJyYXkoYmFzZVByb3ApID8gZXh0ZW5kKGJhc2VQcm9wLCBvdmVycmlkZVByb3ApIDogYmFzZVByb3A7XG4gIH0pO1xuXG4gIC8vTG9vcCB0aHJvdWdoIGVhY2ggb3ZlcnJpZGUga2V5IGFuZCBvdmVycmlkZSB0aGUgcHJvcHMgaW4gdGhlXG4gIC8vYmFzZSBvYmplY3RcbiAgaWYgKGlzT2JqZWN0KG92ZXJyaWRlKSkge1xuXG4gICAgT2JqZWN0LmtleXMob3ZlcnJpZGUpLmZvckVhY2goZnVuY3Rpb24gKG92ZXJyaWRlS2V5KSB7XG5cbiAgICAgIHZhciBvdmVycmlkZVByb3AgPSBvdmVycmlkZVtvdmVycmlkZUtleV07XG5cbiAgICAgIC8vT25seSBjb3B5IG92ZXIgcHJvcHMgdGhhdCBhcmUgbm90IG9iamVjdHNcbiAgICAgIGlmICghaXNPYmplY3Qob3ZlcnJpZGVQcm9wKSB8fCBBcnJheS5pc0FycmF5KG92ZXJyaWRlUHJvcCkpIHtcbiAgICAgICAgbWVyZ2VkT2JqZWN0W292ZXJyaWRlS2V5XSA9IG92ZXJyaWRlUHJvcDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBtZXJnZWRPYmplY3Q7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4dGVuZDsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERPV046IDQwLFxuICBFU0M6IDI3LFxuICBFTlRFUjogMTMsXG4gIExFRlQ6IDM3LFxuICBSSUdIVDogMzksXG4gIFNQQUNFOiAzMixcbiAgVEFCOiA5LFxuICBVUDogMzhcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIERlc2t0b3A6IHtcbiAgICBHVVRURVI6IDI0LFxuICAgIEdVVFRFUl9MRVNTOiAxNixcbiAgICBJTkNSRU1FTlQ6IDY0LFxuICAgIE1FTlVfSVRFTV9IRUlHSFQ6IDMyXG4gIH0sXG5cbiAgZ2V0SW5jcmVtZW50YWxEaW06IGZ1bmN0aW9uIGdldEluY3JlbWVudGFsRGltKGRpbSkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoZGltIC8gdGhpcy5EZXNrdG9wLklOQ1JFTUVOVCkgKiB0aGlzLkRlc2t0b3AuSU5DUkVNRU5UO1xuICB9XG59OyIsIi8qIE1vZGVybml6ciAyLjguMyAoQ3VzdG9tIEJ1aWxkKSB8IE1JVCAmIEJTRFxuICogQnVpbGQ6IGh0dHA6Ly9tb2Rlcm5penIuY29tL2Rvd25sb2FkLyMtYm9yZGVycmFkaXVzLWJveHNoYWRvdy1vcGFjaXR5LWNzc3RyYW5zZm9ybXMtY3NzdHJhbnNmb3JtczNkLWNzc3RyYW5zaXRpb25zLXByZWZpeGVkLXRlc3RzdHlsZXMtdGVzdHByb3AtdGVzdGFsbHByb3BzLXByZWZpeGVzLWRvbXByZWZpeGVzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbiAgICB2YXIgdmVyc2lvbiA9ICcyLjguMycsXG4gICAgICAgIE1vZGVybml6ciA9IHt9LFxuICAgICAgICBkb2NFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBtb2QgPSAnbW9kZXJuaXpyJyxcbiAgICAgICAgbW9kRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobW9kKSxcbiAgICAgICAgbVN0eWxlID0gbW9kRWxlbS5zdHlsZSxcbiAgICAgICAgaW5wdXRFbGVtLFxuICAgICAgICB0b1N0cmluZyA9ICh7fSkudG9TdHJpbmcsXG4gICAgICAgIHByZWZpeGVzID0gJyAtd2Via2l0LSAtbW96LSAtby0gLW1zLSAnLnNwbGl0KCcgJyksXG4gICAgICAgIG9tUHJlZml4ZXMgPSAnV2Via2l0IE1veiBPIG1zJyxcbiAgICAgICAgY3Nzb21QcmVmaXhlcyA9IG9tUHJlZml4ZXMuc3BsaXQoJyAnKSxcbiAgICAgICAgZG9tUHJlZml4ZXMgPSBvbVByZWZpeGVzLnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKSxcbiAgICAgICAgdGVzdHMgPSB7fSxcbiAgICAgICAgaW5wdXRzID0ge30sXG4gICAgICAgIGF0dHJzID0ge30sXG4gICAgICAgIGNsYXNzZXMgPSBbXSxcbiAgICAgICAgc2xpY2UgPSBjbGFzc2VzLnNsaWNlLFxuICAgICAgICBmZWF0dXJlTmFtZSxcbiAgICAgICAgaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMgPSBmdW5jdGlvbiBpbmplY3RFbGVtZW50V2l0aFN0eWxlcyhydWxlLCBjYWxsYmFjaywgbm9kZXMsIHRlc3RuYW1lcykge1xuXG4gICAgICAgIHZhciBzdHlsZSxcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBkb2NPdmVyZmxvdyxcbiAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgICBmYWtlQm9keSA9IGJvZHkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9keScpO1xuXG4gICAgICAgIGlmIChwYXJzZUludChub2RlcywgMTApKSB7XG4gICAgICAgICAgICB3aGlsZSAobm9kZXMtLSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBub2RlLmlkID0gdGVzdG5hbWVzID8gdGVzdG5hbWVzW25vZGVzXSA6IG1vZCArIChub2RlcyArIDEpO1xuICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlID0gWycmIzE3MzsnLCAnPHN0eWxlIGlkPVwicycsIG1vZCwgJ1wiPicsIHJ1bGUsICc8L3N0eWxlPiddLmpvaW4oJycpO1xuICAgICAgICBkaXYuaWQgPSBtb2Q7XG4gICAgICAgIChib2R5ID8gZGl2IDogZmFrZUJvZHkpLmlubmVySFRNTCArPSBzdHlsZTtcbiAgICAgICAgZmFrZUJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgICAgICBmYWtlQm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gJyc7XG4gICAgICAgICAgICBmYWtlQm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZG9jT3ZlcmZsb3cgPSBkb2NFbGVtZW50LnN0eWxlLm92ZXJmbG93O1xuICAgICAgICAgICAgZG9jRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZG9jRWxlbWVudC5hcHBlbmRDaGlsZChmYWtlQm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBjYWxsYmFjayhkaXYsIHJ1bGUpO1xuICAgICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgICAgIGZha2VCb2R5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmFrZUJvZHkpO1xuICAgICAgICAgICAgZG9jRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IGRvY092ZXJmbG93O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIXJldDtcbiAgICB9LFxuICAgICAgICBfaGFzT3duUHJvcGVydHkgPSAoe30pLmhhc093blByb3BlcnR5LFxuICAgICAgICBoYXNPd25Qcm9wO1xuXG4gICAgaWYgKCFpcyhfaGFzT3duUHJvcGVydHksICd1bmRlZmluZWQnKSAmJiAhaXMoX2hhc093blByb3BlcnR5LmNhbGwsICd1bmRlZmluZWQnKSkge1xuICAgICAgICBoYXNPd25Qcm9wID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiBfaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBoYXNPd25Qcm9wID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiBvYmplY3QgJiYgaXMob2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZVtwcm9wZXJ0eV0sICd1bmRlZmluZWQnKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKSB7XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG5cbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgICAgICBib3VuZCA9IGZ1bmN0aW9uIGJvdW5kKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBGID0gZnVuY3Rpb24gRigpIHt9O1xuICAgICAgICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gbmV3IEYoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KHNlbGYsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhhdCwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldENzcyhzdHIpIHtcbiAgICAgICAgbVN0eWxlLmNzc1RleHQgPSBzdHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q3NzQWxsKHN0cjEsIHN0cjIpIHtcbiAgICAgICAgcmV0dXJuIHNldENzcyhwcmVmaXhlcy5qb2luKHN0cjEgKyAnOycpICsgKHN0cjIgfHwgJycpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpcyhvYmosIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IHR5cGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udGFpbnMoc3RyLCBzdWJzdHIpIHtcbiAgICAgICAgcmV0dXJuICEhIH4oJycgKyBzdHIpLmluZGV4T2Yoc3Vic3RyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0UHJvcHMocHJvcHMsIHByZWZpeGVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5zKHByb3AsICctJykgJiYgbVN0eWxlW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ZWQgPT0gJ3BmeCcgPyBwcm9wIDogdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERPTVByb3BzKHByb3BzLCBvYmosIGVsZW0pIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9wcykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBvYmpbcHJvcHNbaV1dO1xuICAgICAgICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGZhbHNlKSByZXR1cm4gcHJvcHNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAoaXMoaXRlbSwgJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uYmluZChlbGVtIHx8IG9iaik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RQcm9wc0FsbChwcm9wLCBwcmVmaXhlZCwgZWxlbSkge1xuXG4gICAgICAgIHZhciB1Y1Byb3AgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKSxcbiAgICAgICAgICAgIHByb3BzID0gKHByb3AgKyAnICcgKyBjc3NvbVByZWZpeGVzLmpvaW4odWNQcm9wICsgJyAnKSArIHVjUHJvcCkuc3BsaXQoJyAnKTtcblxuICAgICAgICBpZiAoaXMocHJlZml4ZWQsICdzdHJpbmcnKSB8fCBpcyhwcmVmaXhlZCwgJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdFByb3BzKHByb3BzLCBwcmVmaXhlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wcyA9IChwcm9wICsgJyAnICsgZG9tUHJlZml4ZXMuam9pbih1Y1Byb3AgKyAnICcpICsgdWNQcm9wKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgcmV0dXJuIHRlc3RET01Qcm9wcyhwcm9wcywgcHJlZml4ZWQsIGVsZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGVzdHNbJ2JvcmRlcnJhZGl1cyddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKCdib3JkZXJSYWRpdXMnKTtcbiAgICB9O1xuXG4gICAgdGVzdHNbJ2JveHNoYWRvdyddID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKCdib3hTaGFkb3cnKTtcbiAgICB9O1xuXG4gICAgdGVzdHNbJ29wYWNpdHknXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0Q3NzQWxsKCdvcGFjaXR5Oi41NScpO1xuXG4gICAgICAgIHJldHVybiAvXjAuNTUkLy50ZXN0KG1TdHlsZS5vcGFjaXR5KTtcbiAgICB9O1xuICAgIHRlc3RzWydjc3N0cmFuc2Zvcm1zJ10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhIXRlc3RQcm9wc0FsbCgndHJhbnNmb3JtJyk7XG4gICAgfTtcblxuICAgIHRlc3RzWydjc3N0cmFuc2Zvcm1zM2QnXSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgcmV0ID0gISF0ZXN0UHJvcHNBbGwoJ3BlcnNwZWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKHJldCAmJiAnd2Via2l0UGVyc3BlY3RpdmUnIGluIGRvY0VsZW1lbnQuc3R5bGUpIHtcblxuICAgICAgICAgICAgaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMoJ0BtZWRpYSAodHJhbnNmb3JtLTNkKSwoLXdlYmtpdC10cmFuc2Zvcm0tM2QpeyNtb2Rlcm5penJ7bGVmdDo5cHg7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjNweDt9fScsIGZ1bmN0aW9uIChub2RlLCBydWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gbm9kZS5vZmZzZXRMZWZ0ID09PSA5ICYmIG5vZGUub2Zmc2V0SGVpZ2h0ID09PSAzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuXG4gICAgdGVzdHNbJ2Nzc3RyYW5zaXRpb25zJ10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0ZXN0UHJvcHNBbGwoJ3RyYW5zaXRpb24nKTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgZmVhdHVyZSBpbiB0ZXN0cykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcCh0ZXN0cywgZmVhdHVyZSkpIHtcbiAgICAgICAgICAgIGZlYXR1cmVOYW1lID0gZmVhdHVyZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgTW9kZXJuaXpyW2ZlYXR1cmVOYW1lXSA9IHRlc3RzW2ZlYXR1cmVdKCk7XG5cbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgoTW9kZXJuaXpyW2ZlYXR1cmVOYW1lXSA/ICcnIDogJ25vLScpICsgZmVhdHVyZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgTW9kZXJuaXpyLmFkZFRlc3QgPSBmdW5jdGlvbiAoZmVhdHVyZSwgdGVzdCkge1xuICAgICAgICBpZiAodHlwZW9mIGZlYXR1cmUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoZmVhdHVyZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBNb2Rlcm5penIuYWRkVGVzdChrZXksIGZlYXR1cmVba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBmZWF0dXJlID0gZmVhdHVyZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoTW9kZXJuaXpyW2ZlYXR1cmVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTW9kZXJuaXpyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZXN0ID0gdHlwZW9mIHRlc3QgPT0gJ2Z1bmN0aW9uJyA/IHRlc3QoKSA6IHRlc3Q7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5hYmxlQ2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZW5hYmxlQ2xhc3Nlcykge1xuICAgICAgICAgICAgICAgIGRvY0VsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArICh0ZXN0ID8gJycgOiAnbm8tJykgKyBmZWF0dXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTW9kZXJuaXpyW2ZlYXR1cmVdID0gdGVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBNb2Rlcm5penI7XG4gICAgfTtcblxuICAgIHNldENzcygnJyk7XG4gICAgbW9kRWxlbSA9IGlucHV0RWxlbSA9IG51bGw7XG5cbiAgICBNb2Rlcm5penIuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuXG4gICAgTW9kZXJuaXpyLl9wcmVmaXhlcyA9IHByZWZpeGVzO1xuICAgIE1vZGVybml6ci5fZG9tUHJlZml4ZXMgPSBkb21QcmVmaXhlcztcbiAgICBNb2Rlcm5penIuX2Nzc29tUHJlZml4ZXMgPSBjc3NvbVByZWZpeGVzO1xuXG4gICAgTW9kZXJuaXpyLnRlc3RQcm9wID0gZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wcyhbcHJvcF0pO1xuICAgIH07XG5cbiAgICBNb2Rlcm5penIudGVzdEFsbFByb3BzID0gdGVzdFByb3BzQWxsO1xuXG4gICAgTW9kZXJuaXpyLnRlc3RTdHlsZXMgPSBpbmplY3RFbGVtZW50V2l0aFN0eWxlcztcbiAgICBNb2Rlcm5penIucHJlZml4ZWQgPSBmdW5jdGlvbiAocHJvcCwgb2JqLCBlbGVtKSB7XG4gICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKHByb3AsICdwZngnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXN0UHJvcHNBbGwocHJvcCwgb2JqLCBlbGVtKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gTW9kZXJuaXpyO1xufSkod2luZG93LCB3aW5kb3cuZG9jdW1lbnQpO1xuOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaW5kZXggPSAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGU6IGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICAgIHJldHVybiBcIm11aS1pZC1cIiArIGluZGV4Kys7XG4gIH1cbn07IiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNSBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuXG5mdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHR2YXIgY2xhc3NlcyA9ICcnO1xuXHR2YXIgYXJnO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdGlmICghYXJnKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBhcmcgfHwgJ251bWJlcicgPT09IHR5cGVvZiBhcmcpIHtcblx0XHRcdGNsYXNzZXMgKz0gJyAnICsgYXJnO1xuXHRcdH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblx0XHRcdGNsYXNzZXMgKz0gJyAnICsgY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBhcmcpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0aWYgKCFhcmcuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhYXJnW2tleV0pIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjbGFzc2VzICs9ICcgJyArIGtleTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGNsYXNzZXMuc3Vic3RyKDEpO1xufVxuXG4vLyBzYWZlbHkgZXhwb3J0IGNsYXNzTmFtZXMgZm9yIG5vZGUgLyBicm93c2VyaWZ5XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xufVxuXG4vLyBzYWZlbHkgZXhwb3J0IGNsYXNzTmFtZXMgZm9yIFJlcXVpcmVKU1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICd1bmRlZmluZWQnICYmIGRlZmluZS5hbWQpIHtcblx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHR9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBmb3IgYWNjZXNzaW5nIGJyb3dzZXIgZ2xvYmFsc1xudmFyIHJvb3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXM7XG52YXIgYm9keUVsZW1lbnQ7XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAnYm9keScgaW4gZG9jdW1lbnQpIHtcbiAgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVCb3VuZFN0YXRlIChzdGF0ZSwgYm91bmQpIHtcbiAgaWYgKCFib3VuZCkgcmV0dXJuIHN0YXRlO1xuICBib3VuZCA9IFN0cmluZyhib3VuZCk7XG4gIHZhciBib3VuZFRvcCA9ICEhfmJvdW5kLmluZGV4T2YoJ3RvcCcpO1xuICB2YXIgYm91bmRSaWdodCA9ICEhfmJvdW5kLmluZGV4T2YoJ3JpZ2h0Jyk7XG4gIHZhciBib3VuZEJvdHRvbSA9ICEhfmJvdW5kLmluZGV4T2YoJ2JvdHRvbScpO1xuICB2YXIgYm91bmRMZWZ0ID0gISF+Ym91bmQuaW5kZXhPZignbGVmdCcpO1xuICB2YXIgYm91bmRBbGwgPSAhIX5ib3VuZC5pbmRleE9mKCdhbGwnKSB8fFxuICAgICEoYm91bmRUb3AgfHwgYm91bmRSaWdodCB8fCBib3VuZEJvdHRvbSB8fCBib3VuZExlZnQpO1xuICB2YXIgYm91bmRCb3ggPSAhfmJvdW5kLmluZGV4T2YoJ3BvaW50Jyk7XG4gIHN0YXRlLmJvdW5kVG9wID0gYm91bmRBbGwgfHwgYm91bmRUb3A7XG4gIHN0YXRlLmJvdW5kUmlnaHQgPSBib3VuZEFsbCB8fCBib3VuZFJpZ2h0O1xuICBzdGF0ZS5ib3VuZEJvdHRvbSA9IGJvdW5kQWxsIHx8IGJvdW5kQm90dG9tO1xuICBzdGF0ZS5ib3VuZExlZnQgPSBib3VuZEFsbCB8fCBib3VuZExlZnQ7XG4gIHN0YXRlLmJvdW5kQm94ID0gYm91bmRCb3g7XG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVVJRXZlbnQoZHJhZ2dhYmxlKSB7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246IHtcbiAgICAgIHRvcDogZHJhZ2dhYmxlLnN0YXRlLm9mZnNldFRvcCxcbiAgICAgIGxlZnQ6IGRyYWdnYWJsZS5zdGF0ZS5vZmZzZXRMZWZ0XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYW5EcmFnWShkcmFnZ2FibGUpIHtcbiAgcmV0dXJuIGRyYWdnYWJsZS5wcm9wcy5heGlzID09PSAnYm90aCcgfHxcbiAgICAgIGRyYWdnYWJsZS5wcm9wcy5heGlzID09PSAneSc7XG59XG5cbmZ1bmN0aW9uIGNhbkRyYWdYKGRyYWdnYWJsZSkge1xuICByZXR1cm4gZHJhZ2dhYmxlLnByb3BzLmF4aXMgPT09ICdib3RoJyB8fFxuICAgICAgZHJhZ2dhYmxlLnByb3BzLmF4aXMgPT09ICd4Jztcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jKSB7XG4gIHJldHVybiB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZnVuYykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbn1cblxuLy8gQGNyZWRpdHMgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcm9nb3pobmlrb2ZmL2E0M2NmZWQyN2M0MWU0ZTY4Y2RjXG5mdW5jdGlvbiBmaW5kSW5BcnJheShhcnJheSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgZWxlbWVudCA9IG51bGw7IGkgPCBsZW5ndGgsIGVsZW1lbnQgPSBhcnJheVtpXTsgaSsrKSB7XG4gICAgaWYgKGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBbZWxlbWVudCwgaSwgYXJyYXldKSkgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKGVsLCBzZWxlY3Rvcikge1xuICB2YXIgbWV0aG9kID0gZmluZEluQXJyYXkoW1xuICAgICdtYXRjaGVzJyxcbiAgICAnd2Via2l0TWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAnbW96TWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAnbXNNYXRjaGVzU2VsZWN0b3InLFxuICAgICdvTWF0Y2hlc1NlbGVjdG9yJ1xuICBdLCBmdW5jdGlvbihtZXRob2Qpe1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGVsW21ldGhvZF0pO1xuICB9KTtcblxuICByZXR1cm4gZWxbbWV0aG9kXS5jYWxsKGVsLCBzZWxlY3Rvcik7XG59XG5cbi8vIEBjcmVkaXRzOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ4MTcwMjkvd2hhdHMtdGhlLWJlc3Qtd2F5LXRvLWRldGVjdC1hLXRvdWNoLXNjcmVlbi1kZXZpY2UtdXNpbmctamF2YXNjcmlwdC80ODE5ODg2IzQ4MTk4ODZcbnZhciBpc1RvdWNoRGV2aWNlID0gJ29udG91Y2hzdGFydCcgaW4gcm9vdCAvLyB3b3JrcyBvbiBtb3N0IGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgIHx8ICdvbm1zZ2VzdHVyZWNoYW5nZScgaW4gcm9vdDsgLy8gd29ya3Mgb24gaWUxMCBvbiBtcyBzdXJmYWNlXG5cbi8vIGxvb2sgOjpoYW5kbGVEcmFnU3RhcnRcbi8vZnVuY3Rpb24gaXNNdWx0aVRvdWNoKGUpIHtcbi8vICByZXR1cm4gZS50b3VjaGVzICYmIEFycmF5LmlzQXJyYXkoZS50b3VjaGVzKSAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMVxuLy99XG5cbi8qKlxuICogc2ltcGxlIGFic3RyYWN0aW9uIGZvciBkcmFnZ2luZyBldmVudHMgbmFtZXNcbiAqICovXG52YXIgZHJhZ0V2ZW50Rm9yID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV2ZW50c0ZvciA9IHtcbiAgICB0b3VjaDoge1xuICAgICAgc3RhcnQ6ICd0b3VjaHN0YXJ0JyxcbiAgICAgIG1vdmU6ICd0b3VjaG1vdmUnLFxuICAgICAgZW5kOiAndG91Y2hlbmQnXG4gICAgfSxcbiAgICBtb3VzZToge1xuICAgICAgc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgICAgbW92ZTogJ21vdXNlbW92ZScsXG4gICAgICBlbmQ6ICdtb3VzZXVwJ1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGV2ZW50c0Zvcltpc1RvdWNoRGV2aWNlID8gJ3RvdWNoJyA6ICdtb3VzZSddO1xufSkoKTtcblxuLyoqXG4gKiBnZXQge2NsaWVudFgsIGNsaWVudFl9IHBvc2l0aW9ucyBvZiBjb250cm9sXG4gKiAqL1xuZnVuY3Rpb24gZ2V0Q29udHJvbFBvc2l0aW9uKGUpIHtcbiAgdmFyIHBvc2l0aW9uID0gKGUudG91Y2hlcyAmJiBlLnRvdWNoZXNbMF0pIHx8IGU7XG4gIHJldHVybiB7XG4gICAgY2xpZW50WDogcG9zaXRpb24uY2xpZW50WCxcbiAgICBjbGllbnRZOiBwb3NpdGlvbi5jbGllbnRZXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkRXZlbnQoZWwsIGV2ZW50LCBoYW5kbGVyKSB7XG4gIGlmICghZWwpIHsgcmV0dXJuOyB9XG4gIGlmIChlbC5hdHRhY2hFdmVudCkge1xuICAgIGVsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgaGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGVsWydvbicgKyBldmVudF0gPSBoYW5kbGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50KGVsLCBldmVudCwgaGFuZGxlcikge1xuICBpZiAoIWVsKSB7IHJldHVybjsgfVxuICBpZiAoZWwuZGV0YWNoRXZlbnQpIHtcbiAgICBlbC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBlbFsnb24nICsgZXZlbnRdID0gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEcmFnZ2FibGUnLFxuICBtaXhpbnM6IFtSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvKipcbiAgICAgKiBgYXhpc2AgZGV0ZXJtaW5lcyB3aGljaCBheGlzIHRoZSBkcmFnZ2FibGUgY2FuIG1vdmUuXG4gICAgICpcbiAgICAgKiAnYm90aCcgYWxsb3dzIG1vdmVtZW50IGhvcml6b250YWxseSBhbmQgdmVydGljYWxseS5cbiAgICAgKiAneCcgbGltaXRzIG1vdmVtZW50IHRvIGhvcml6b250YWwgYXhpcy5cbiAgICAgKiAneScgbGltaXRzIG1vdmVtZW50IHRvIHZlcnRpY2FsIGF4aXMuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byAnYm90aCcuXG4gICAgICovXG4gICAgYXhpczogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnYm90aCcsICd4JywgJ3knXSksXG5cbiAgICAvKipcbiAgICAgKiBgaGFuZGxlYCBzcGVjaWZpZXMgYSBzZWxlY3RvciB0byBiZSB1c2VkIGFzIHRoZSBoYW5kbGUgdGhhdCBpbml0aWF0ZXMgZHJhZy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiAgdmFyIEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgKiAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAgICByZXR1cm4gKFxuICAgICAqICAgICAgICAgIDxEcmFnZ2FibGUgaGFuZGxlPVwiLmhhbmRsZVwiPlxuICAgICAqICAgICAgICAgICAgPGRpdj5cbiAgICAgKiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhhbmRsZVwiPkNsaWNrIG1lIHRvIGRyYWc8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgICAgICA8ZGl2PlRoaXMgaXMgc29tZSBvdGhlciBjb250ZW50PC9kaXY+XG4gICAgICogICAgICAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgICAgICA8L0RyYWdnYWJsZT5cbiAgICAgKiAgICAgICAgKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaGFuZGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogYGNhbmNlbGAgc3BlY2lmaWVzIGEgc2VsZWN0b3IgdG8gYmUgdXNlZCB0byBwcmV2ZW50IGRyYWcgaW5pdGlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICogICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgICAgICByZXR1cm4oXG4gICAgICogICAgICAgICAgICAgIDxEcmFnZ2FibGUgY2FuY2VsPVwiLmNhbmNlbFwiPlxuICAgICAqICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYW5jZWxcIj5Zb3UgY2FuJ3QgZHJhZyBmcm9tIGhlcmU8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgIDxkaXY+RHJhZ2dpbmcgaGVyZSB3b3JrcyBmaW5lPC9kaXY+XG4gICAgICogICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY2FuY2VsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogYGJvdW5kYCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gYm91bmQgdGhlIG1vdmVtZW50IHRvIHRoZSBwYXJlbnQgYm94LlxuICAgICAqXG4gICAgICogVGhlIHByb3BlcnR5IHRha2VzIGEgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5ncy4gVGhlIERyYWdnYWJsZVxuICAgICAqIGlzIGJvdW5kZWQgYnkgdGhlIG5lYXJlc3QgRE9NTm9kZS5vZmZzZXRQYXJlbnQuIFRvIHNldCB0aGUgb2Zmc2V0XG4gICAgICogcGFyZW50LCBnaXZlIGl0IGEgcG9zaXRpb24gdmFsdWUgb3RoZXIgdGhhbiAnc3RhdGljJy5cbiAgICAgKlxuICAgICAqIE9wdGlvbmFsbHkgY2hvb3NlIG9uZSBvciBtb3JlIGJvdW5kcyBmcm9tOlxuICAgICAqICd0b3AnIGJvdW5kcyBtb3ZlbWVudCB0byB0aGUgdG9wIGVkZ2Ugb2YgdGhlIHBhcmVudCBib3guXG4gICAgICogJ3JpZ2h0JyBib3VuZHMgbW92ZW1lbnQgdG8gdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlIHBhcmVudCBib3guXG4gICAgICogJ2JvdHRvbScgYm91bmRzIG1vdmVtZW50IHRvIHRoZSBib3R0b20gZWRnZSBvZiB0aGUgcGFyZW50IGJveC5cbiAgICAgKiAnbGVmdCcgYm91bmRzIG1vdmVtZW50IHRvIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHBhcmVudCBib3guXG4gICAgICogJ2FsbCcgYm91bmRzIG1vdmVtZW50IHRvIGFsbCBlZGdlcyAoZGVmYXVsdCBpZiBub3Qgc3BlY2lmaWVkKS5cbiAgICAgKlxuICAgICAqIE9wdGlvbmFsbHkgY2hvb3NlIG9uZSBhbmNob3IgZnJvbTpcbiAgICAgKiAncG9pbnQnIHRvIGNvbnN0cmFpbiBvbmx5IHRoZSB0b3AtbGVmdCBjb3JuZXIuXG4gICAgICogJ2JveCcgdG8gY29uc3RyYWluIHRoZSBlbnRpcmUgYm94IChkZWZhdWx0IGlmIG5vdCBzcGVjaWZpZWQpLlxuICAgICAqXG4gICAgICogWW91IG1heSB1c2UgbW9yZSB0aGFuIG9uZSBib3VuZCwgZS5nLiAndG9wIGxlZnQgcG9pbnQnLiBTZXQgdG8gYVxuICAgICAqIGZhbHN5IHZhbHVlIHRvIGRpc2FibGUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byAnYWxsIGJveCcuXG4gICAgICovXG4gICAgYm91bmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBgZ3JpZGAgc3BlY2lmaWVzIHRoZSB4IGFuZCB5IHRoYXQgZHJhZ2dpbmcgc2hvdWxkIHNuYXAgdG8uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogICB2YXIgQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgICAqICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAgICAgICByZXR1cm4gKFxuICAgICAqICAgICAgICAgICAgICA8RHJhZ2dhYmxlIGdyaWQ9e1syNSwgMjVdfT5cbiAgICAgKiAgICAgICAgICAgICAgICAgICA8ZGl2Pkkgc25hcCB0byBhIDI1IHggMjUgZ3JpZDwvZGl2PlxuICAgICAqICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgICk7XG4gICAgICogICAgICB9XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBncmlkOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZihSZWFjdC5Qcm9wVHlwZXMubnVtYmVyKSxcblxuICAgIC8qKlxuICAgICAqIGBjb25zdHJhaW5gIHRha2VzIGEgZnVuY3Rpb24gdG8gY29uc3RyYWluIHRoZSBkcmFnZ2luZy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiAgIGZ1bmN0aW9uIGNvbnN0cmFpbiAoc25hcCkge1xuICAgICAqICAgICAgICAgZnVuY3Rpb24gY29uc3RyYWluT2Zmc2V0IChvZmZzZXQsIHByZXYpIHtcbiAgICAgKiAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IG9mZnNldCAtIHByZXY7XG4gICAgICogICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IHNuYXApIHtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ICsgKGRlbHRhIDwgMCA/IC1zbmFwIDogc25hcCk7XG4gICAgICogICAgICAgICAgICAgICB9XG4gICAgICogICAgICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICogICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb25zdHJhaW5PZmZzZXQocG9zLnRvcCwgcG9zLnByZXZUb3ApLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgbGVmdDogY29uc3RyYWluT2Zmc2V0KHBvcy5sZWZ0LCBwb3MucHJldkxlZnQpXG4gICAgICogICAgICAgICAgICAgICB9O1xuICAgICAqICAgICAgICAgfTtcbiAgICAgKiAgIH1cbiAgICAgKiAgIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICogICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiAoXG4gICAgICogICAgICAgICAgICAgICA8RHJhZ2dhYmxlIGNvbnN0cmFpbj17Y29uc3RyYWlufT5cbiAgICAgKiAgICAgICAgICAgICAgICAgICA8ZGl2Pkkgc25hcCB0byBhIDI1IHggMjUgZ3JpZDwvZGl2PlxuICAgICAqICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgICk7XG4gICAgICogICAgICAgfVxuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY29uc3RyYWluOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIGBzdGFydGAgc3BlY2lmaWVzIHRoZSB4IGFuZCB5IHRoYXQgdGhlIGRyYWdnZWQgaXRlbSBzaG91bGQgc3RhcnQgYXRcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiAgdmFyIEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgKiAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAgICAgIHJldHVybiAoXG4gICAgICogICAgICAgICAgICAgIDxEcmFnZ2FibGUgc3RhcnQ9e3t4OiAyNSwgeTogMjV9fT5cbiAgICAgKiAgICAgICAgICAgICAgICAgIDxkaXY+SSBzdGFydCB3aXRoIGxlZnQ6IDI1cHg7IHRvcDogMjVweDs8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAvKipcbiAgICAgKiBgekluZGV4YCBzcGVjaWZpZXMgdGhlIHpJbmRleCB0byB1c2Ugd2hpbGUgZHJhZ2dpbmcuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICogICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgICAgICByZXR1cm4gKFxuICAgICAqICAgICAgICAgICAgICA8RHJhZ2dhYmxlIHpJbmRleD17MTAwfT5cbiAgICAgKiAgICAgICAgICAgICAgICAgIDxkaXY+SSBoYXZlIGEgekluZGV4PC9kaXY+XG4gICAgICogICAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgICAqICAgICAgICAgICk7XG4gICAgICogICAgICB9XG4gICAgICogIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHpJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblxuICAgIC8qKlxuICAgICAqIGB1c2VDaGlsZGAgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHVzZSB0aGUgZmlyc3QgY2hpbGQgYXMgcm9vdC5cbiAgICAgKlxuICAgICAqIElmIGZhbHNlLCBhIGRpdiBpcyBjcmVhdGVkLiBUaGlzIG9wdGlvbiBpcyByZXF1aXJlZCBpZiBhbnkgY2hpbGRyZW5cbiAgICAgKiBoYXZlIGEgcmVmLlxuICAgICAqXG4gICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKi9cbiAgICB1c2VDaGlsZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBkcmFnZ2luZyBzdGFydHMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgZnVuY3Rpb24gKGV2ZW50LCB1aSkge31cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBldmVudGAgaXMgdGhlIEV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZC5cbiAgICAgKiBgdWlgIGlzIGFuIG9iamVjdDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogIHtcbiAgICAgKiAgICBwb3NpdGlvbjoge3RvcDogMCwgbGVmdDogMH1cbiAgICAgKiAgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uU3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoaWxlIGRyYWdnaW5nLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogIGZ1bmN0aW9uIChldmVudCwgdWkpIHt9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgZXZlbnRgIGlzIHRoZSBFdmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQuXG4gICAgICogYHVpYCBpcyBhbiBvYmplY3Q6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICB7XG4gICAgICogICAgcG9zaXRpb246IHt0b3A6IDAsIGxlZnQ6IDB9XG4gICAgICogIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvbkRyYWc6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gZHJhZ2dpbmcgc3RvcHMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgZnVuY3Rpb24gKGV2ZW50LCB1aSkge31cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBldmVudGAgaXMgdGhlIEV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZC5cbiAgICAgKiBgdWlgIGlzIGFuIG9iamVjdDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogIHtcbiAgICAgKiAgICBwb3NpdGlvbjoge3RvcDogMCwgbGVmdDogMH1cbiAgICAgKiAgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uU3RvcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBBIHdvcmthcm91bmQgb3B0aW9uIHdoaWNoIGNhbiBiZSBwYXNzZWQgaWYgb25Nb3VzZURvd24gbmVlZHMgdG8gYmUgYWNjZXNzZWQsIHNpbmNlIGl0J2xsIGFsd2F5cyBiZSBibG9ja2VkIChkdWUgdG8gdGhhdCB0aGVyZSdzIGludGVybmFsIHVzZSBvZiBvbk1vdXNlRG93bilcbiAgICAgKlxuICAgICAqL1xuICAgIG9uTW91c2VEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBheGlzOiAnYm90aCcsXG4gICAgICBib3VuZDogbnVsbCxcbiAgICAgIGhhbmRsZTogbnVsbCxcbiAgICAgIGNhbmNlbDogbnVsbCxcbiAgICAgIGdyaWQ6IG51bGwsXG4gICAgICBzdGFydDoge30sXG4gICAgICB6SW5kZXg6IE5hTixcbiAgICAgIHVzZUNoaWxkOiB0cnVlLFxuICAgICAgb25TdGFydDogZW1wdHlGdW5jdGlvbixcbiAgICAgIG9uRHJhZzogZW1wdHlGdW5jdGlvbixcbiAgICAgIG9uU3RvcDogZW1wdHlGdW5jdGlvbixcbiAgICAgIG9uTW91c2VEb3duOiBlbXB0eUZ1bmN0aW9uXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAvLyBXaGV0aGVyIG9yIG5vdCBjdXJyZW50bHkgZHJhZ2dpbmdcbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcblxuICAgICAgLy8gUG9pbnRlciBvZmZzZXQgb24gc2NyZWVuXG4gICAgICBjbGllbnRYOiAwLCBjbGllbnRZOiAwLFxuXG4gICAgICAvLyBET01Ob2RlIG9mZnNldCByZWxhdGl2ZSB0byBwYXJlbnRcbiAgICAgIG9mZnNldExlZnQ6IHRoaXMucHJvcHMuc3RhcnQueCB8fCAwLCBvZmZzZXRUb3A6IHRoaXMucHJvcHMuc3RhcnQueSB8fCAwXG4gICAgfTtcblxuICAgIHVwZGF0ZUJvdW5kU3RhdGUoc3RhdGUsIHRoaXMucHJvcHMuYm91bmQpO1xuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICB2YXIgc3RhdGUgPSB1cGRhdGVCb3VuZFN0YXRlKHt9LCBuZXh0UHJvcHMuYm91bmQpO1xuICAgIGlmIChuZXh0UHJvcHMuc3RhcnQpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuc3RhcnQueCAhPSBudWxsKSB7XG4gICAgICAgIHN0YXRlLm9mZnNldExlZnQgPSBuZXh0UHJvcHMuc3RhcnQueCB8fCAwO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRQcm9wcy5zdGFydC55ICE9IG51bGwpIHtcbiAgICAgICAgc3RhdGUub2Zmc2V0VG9wID0gbmV4dFByb3BzLnN0YXJ0LnkgfHwgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFJlbW92ZSBhbnkgbGVmdG92ZXIgZXZlbnQgaGFuZGxlcnNcbiAgICByZW1vdmVFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ21vdmUnXSwgdGhpcy5oYW5kbGVEcmFnKTtcbiAgICByZW1vdmVFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ2VuZCddLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuICB9LFxuXG4gIGhhbmRsZURyYWdTdGFydDogZnVuY3Rpb24gKGUpIHtcbiAgICAvLyB0b2RvOiB3cml0ZSByaWdodCBpbXBsZW1lbnRhdGlvbiB0byBwcmV2ZW50IG11bHRpdG91Y2ggZHJhZ1xuICAgIC8vIHByZXZlbnQgbXVsdGktdG91Y2ggZXZlbnRzXG4gICAgLy8gaWYgKGlzTXVsdGlUb3VjaChlKSkge1xuICAgIC8vICAgICB0aGlzLmhhbmRsZURyYWdFbmQuYXBwbHkoZSwgYXJndW1lbnRzKTtcbiAgICAvLyAgICAgcmV0dXJuXG4gICAgLy8gfVxuXG4gICAgLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBhdHRhY2ggZXZlbnQgaGFuZGxlcnMgb24gdG9wIG9mIHRoaXMgb25lXG4gICAgdGhpcy5wcm9wcy5vbk1vdXNlRG93bihlKTtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaGFuZGxlIG9yIGNhbmNlbCBwcm9wIHdhcyBwcm92aWRlZCBhbmQgc2VsZWN0b3IgZG9lc24ndCBtYXRjaFxuICAgIGlmICgodGhpcy5wcm9wcy5oYW5kbGUgJiYgIW1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgdGhpcy5wcm9wcy5oYW5kbGUpKSB8fFxuICAgICAgKHRoaXMucHJvcHMuY2FuY2VsICYmIG1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgdGhpcy5wcm9wcy5jYW5jZWwpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkcmFnUG9pbnQgPSBnZXRDb250cm9sUG9zaXRpb24oZSk7XG5cbiAgICAvLyBJbml0aWF0ZSBkcmFnZ2luZ1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZHJhZ2dpbmc6IHRydWUsXG4gICAgICBjbGllbnRYOiBkcmFnUG9pbnQuY2xpZW50WCxcbiAgICAgIGNsaWVudFk6IGRyYWdQb2ludC5jbGllbnRZXG4gICAgfSk7XG5cbiAgICAvLyBDYWxsIGV2ZW50IGhhbmRsZXJcbiAgICB0aGlzLnByb3BzLm9uU3RhcnQoZSwgY3JlYXRlVUlFdmVudCh0aGlzKSk7XG5cbiAgICAvLyBBZGQgZXZlbnQgaGFuZGxlcnNcbiAgICBhZGRFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ21vdmUnXSwgdGhpcy5oYW5kbGVEcmFnKTtcbiAgICBhZGRFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ2VuZCddLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuXG4gICAgLy8gQWRkIGRyYWdnaW5nIGNsYXNzIHRvIGJvZHkgZWxlbWVudFxuICAgIGlmIChib2R5RWxlbWVudCkgYm9keUVsZW1lbnQuY2xhc3NOYW1lICs9ICcgcmVhY3QtZHJhZ2dhYmxlLWRyYWdnaW5nJztcbiAgfSxcblxuICBoYW5kbGVEcmFnRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgbm90IGN1cnJlbnRseSBkcmFnZ2luZ1xuICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFR1cm4gb2ZmIGRyYWdnaW5nXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcmFnZ2luZzogZmFsc2VcbiAgICB9KTtcblxuICAgIC8vIENhbGwgZXZlbnQgaGFuZGxlclxuICAgIHRoaXMucHJvcHMub25TdG9wKGUsIGNyZWF0ZVVJRXZlbnQodGhpcykpO1xuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGhhbmRsZXJzXG4gICAgcmVtb3ZlRXZlbnQocm9vdCwgZHJhZ0V2ZW50Rm9yWydtb3ZlJ10sIHRoaXMuaGFuZGxlRHJhZyk7XG4gICAgcmVtb3ZlRXZlbnQocm9vdCwgZHJhZ0V2ZW50Rm9yWydlbmQnXSwgdGhpcy5oYW5kbGVEcmFnRW5kKTtcblxuICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcyBmcm9tIGJvZHkgZWxlbWVudFxuICAgIGlmIChib2R5RWxlbWVudCkge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGJvZHlFbGVtZW50LmNsYXNzTmFtZTtcbiAgICAgIGJvZHlFbGVtZW50LmNsYXNzTmFtZSA9XG4gICAgICAgIGNsYXNzTmFtZS5yZXBsYWNlKC8oPzpefFxccyspcmVhY3QtZHJhZ2dhYmxlLWRyYWdnaW5nXFxiLywgJyAnKTtcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlRHJhZzogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZHJhZ1BvaW50ID0gZ2V0Q29udHJvbFBvc2l0aW9uKGUpO1xuICAgIHZhciBvZmZzZXRMZWZ0ID0gdGhpcy5fdG9QaXhlbHModGhpcy5zdGF0ZS5vZmZzZXRMZWZ0KTtcbiAgICB2YXIgb2Zmc2V0VG9wID0gdGhpcy5fdG9QaXhlbHModGhpcy5zdGF0ZS5vZmZzZXRUb3ApO1xuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgb2Zmc2V0TGVmdDogb2Zmc2V0TGVmdCxcbiAgICAgIG9mZnNldFRvcDogb2Zmc2V0VG9wXG4gICAgfTtcblxuICAgIC8vIEdldCBwYXJlbnQgRE9NIG5vZGVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBub2RlLm9mZnNldFBhcmVudDtcbiAgICB2YXIgb2Zmc2V0LCBib3VuZGluZ1ZhbHVlO1xuXG4gICAgaWYgKGNhbkRyYWdYKHRoaXMpKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdXBkYXRlZCBwb3NpdGlvblxuICAgICAgb2Zmc2V0ID0gb2Zmc2V0TGVmdCArIGRyYWdQb2ludC5jbGllbnRYIC0gdGhpcy5zdGF0ZS5jbGllbnRYO1xuXG4gICAgICAvLyBCb3VuZCBtb3ZlbWVudCB0byBwYXJlbnQgYm94XG4gICAgICBpZiAodGhpcy5zdGF0ZS5ib3VuZExlZnQpIHtcbiAgICAgICAgYm91bmRpbmdWYWx1ZSA9IHN0YXRlLm9mZnNldExlZnQgLSBub2RlLm9mZnNldExlZnQ7XG4gICAgICAgIGlmIChvZmZzZXQgPCBib3VuZGluZ1ZhbHVlKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gYm91bmRpbmdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUuYm91bmRSaWdodCkge1xuICAgICAgICBib3VuZGluZ1ZhbHVlICs9IG9mZnNldFBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYm91bmRCb3gpIHtcbiAgICAgICAgICBib3VuZGluZ1ZhbHVlIC09IG5vZGUub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA+IGJvdW5kaW5nVmFsdWUpIHtcbiAgICAgICAgICBvZmZzZXQgPSBib3VuZGluZ1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBVcGRhdGUgbGVmdFxuICAgICAgc3RhdGUub2Zmc2V0TGVmdCA9IG9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAoY2FuRHJhZ1kodGhpcykpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB1cGRhdGVkIHBvc2l0aW9uXG4gICAgICBvZmZzZXQgPSBvZmZzZXRUb3AgKyBkcmFnUG9pbnQuY2xpZW50WSAtIHRoaXMuc3RhdGUuY2xpZW50WTtcbiAgICAgIC8vIEJvdW5kIG1vdmVtZW50IHRvIHBhcmVudCBib3hcbiAgICAgIGlmICh0aGlzLnN0YXRlLmJvdW5kVG9wKSB7XG4gICAgICAgIGJvdW5kaW5nVmFsdWUgPSBzdGF0ZS5vZmZzZXRUb3AgLSBub2RlLm9mZnNldFRvcDtcbiAgICAgICAgaWYgKG9mZnNldCA8IGJvdW5kaW5nVmFsdWUpIHtcbiAgICAgICAgICBvZmZzZXQgPSBib3VuZGluZ1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS5ib3VuZEJvdHRvbSkge1xuICAgICAgICBib3VuZGluZ1ZhbHVlICs9IG9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJvdW5kQm94KSB7XG4gICAgICAgICAgYm91bmRpbmdWYWx1ZSAtPSBub2RlLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ID4gYm91bmRpbmdWYWx1ZSkge1xuICAgICAgICAgIG9mZnNldCA9IGJvdW5kaW5nVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSB0b3BcbiAgICAgIHN0YXRlLm9mZnNldFRvcCA9IG9mZnNldDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RyYWluID0gdGhpcy5wcm9wcy5jb25zdHJhaW47XG4gICAgdmFyIGdyaWQgPSB0aGlzLnByb3BzLmdyaWQ7XG5cbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3Igc25hcCB0byBncmlkXG4gICAgaWYgKCFjb25zdHJhaW4gJiYgQXJyYXkuaXNBcnJheShncmlkKSkge1xuICAgICAgdmFyIGNvbnN0cmFpbk9mZnNldCA9IGZ1bmN0aW9uIChvZmZzZXQsIHByZXYsIHNuYXApIHtcbiAgICAgICAgdmFyIGRlbHRhID0gb2Zmc2V0IC0gcHJldjtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSBzbmFwKSB7XG4gICAgICAgICAgcmV0dXJuIHByZXYgKyBwYXJzZUludChkZWx0YSAvIHNuYXAsIDEwKSAqIHNuYXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9O1xuICAgICAgY29uc3RyYWluID0gZnVuY3Rpb24gKHBvcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxlZnQ6IGNvbnN0cmFpbk9mZnNldChwb3MubGVmdCwgcG9zLnByZXZMZWZ0LCBncmlkWzBdKSxcbiAgICAgICAgICB0b3A6IGNvbnN0cmFpbk9mZnNldChwb3MudG9wLCBwb3MucHJldlRvcCwgZ3JpZFsxXSlcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ29uc3RyYWluIGlmIGZ1bmN0aW9uIGhhcyBiZWVuIHByb3ZpZGVkXG4gICAgdmFyIHBvc2l0aW9ucztcbiAgICBpZiAoY29uc3RyYWluKSB7XG4gICAgICAvLyBDb25zdHJhaW4gcG9zaXRpb25zXG4gICAgICBwb3NpdGlvbnMgPSBjb25zdHJhaW4oe1xuICAgICAgICBwcmV2TGVmdDogdGhpcy5zdGF0ZS5vZmZzZXRMZWZ0LFxuICAgICAgICBwcmV2VG9wOiB0aGlzLnN0YXRlLm9mZnNldFRvcCxcbiAgICAgICAgbGVmdDogc3RhdGUub2Zmc2V0TGVmdCxcbiAgICAgICAgdG9wOiBzdGF0ZS5vZmZzZXRUb3BcbiAgICAgIH0pO1xuICAgICAgaWYgKHBvc2l0aW9ucykge1xuICAgICAgICAvLyBVcGRhdGUgbGVmdFxuICAgICAgICBpZiAoJ2xlZnQnIGluIHBvc2l0aW9ucyAmJiAhaXNOYU4ocG9zaXRpb25zLmxlZnQpKSB7XG4gICAgICAgICAgc3RhdGUub2Zmc2V0TGVmdCA9IHBvc2l0aW9ucy5sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSB0b3BcbiAgICAgICAgaWYgKCd0b3AnIGluIHBvc2l0aW9ucyAmJiAhaXNOYU4ocG9zaXRpb25zLnRvcCkpIHtcbiAgICAgICAgICBzdGF0ZS5vZmZzZXRUb3AgPSBwb3NpdGlvbnMudG9wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBuZXcgc3RhdGVcbiAgICBzdGF0ZS5jbGllbnRYID0gdGhpcy5zdGF0ZS5jbGllbnRYICsgKHN0YXRlLm9mZnNldExlZnQgLSBvZmZzZXRMZWZ0KTtcbiAgICBzdGF0ZS5jbGllbnRZID0gdGhpcy5zdGF0ZS5jbGllbnRZICsgKHN0YXRlLm9mZnNldFRvcCAtIG9mZnNldFRvcCk7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICAvLyBDYWxsIGV2ZW50IGhhbmRsZXJcbiAgICB0aGlzLnByb3BzLm9uRHJhZyhlLCBjcmVhdGVVSUV2ZW50KHRoaXMpKTtcbiAgfSxcblxuICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IGZvciBzY3JvbGxcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVEcmFnU3RhcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICB0b3A6IHRoaXMuc3RhdGUub2Zmc2V0VG9wLFxuICAgICAgbGVmdDogdGhpcy5zdGF0ZS5vZmZzZXRMZWZ0XG4gICAgfTtcblxuICAgIC8vIFNldCB6SW5kZXggaWYgY3VycmVudGx5IGRyYWdnaW5nIGFuZCBwcm9wIGhhcyBiZWVuIHByb3ZpZGVkXG4gICAgaWYgKHRoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgIWlzTmFOKHRoaXMucHJvcHMuekluZGV4KSkge1xuICAgICAgc3R5bGUuekluZGV4ID0gdGhpcy5wcm9wcy56SW5kZXg7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0ge1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiAncmVhY3QtZHJhZ2dhYmxlJyxcblxuICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlRHJhZ1N0YXJ0LFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLm9uVG91Y2hTdGFydCxcblxuICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZURyYWdFbmQsXG4gICAgICBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZURyYWdFbmRcbiAgICB9O1xuXG4gICAgLy8gUmV1c2UgdGhlIGNoaWxkIHByb3ZpZGVkXG4gICAgLy8gVGhpcyBtYWtlcyBpdCBmbGV4aWJsZSB0byB1c2Ugd2hhdGV2ZXIgZWxlbWVudCBpcyB3YW50ZWQgKGRpdiwgdWwsIGV0YylcbiAgICBpZiAodGhpcy5wcm9wcy51c2VDaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmFkZG9ucy5jbG9uZVdpdGhQcm9wcyhSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LkRPTS5kaXYocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIF90b1BpeGVsczogZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAvLyBTdXBwb3J0IHBlcmNlbnRhZ2VzXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB2YWx1ZS5zbGljZSgtMSkgPT0gJyUnKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoKCt2YWx1ZS5yZXBsYWNlKCclJywgJycpIC8gMTAwKSAqXG4gICAgICAgIHRoaXMuZ2V0RE9NTm9kZSgpLm9mZnNldFBhcmVudC5jbGllbnRXaWR0aCwgMTApIHx8IDA7XG4gICAgfVxuXG4gICAgLy8gSW52YWxpZCB2YWx1ZXMgYmVjb21lIHplcm9cbiAgICB2YXIgaSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgaWYgKGlzTmFOKGkpIHx8ICFpc0Zpbml0ZShpKSkgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG59KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZXNwb25kZXJFdmVudFBsdWdpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCdyZWFjdC9saWIvRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZSgncmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgncmVhY3QvbGliL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCdyZWFjdC9saWIvYWNjdW11bGF0ZUludG8nKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9rZXlPZicpO1xuXG52YXIgaXNTdGFydGlzaCA9IEV2ZW50UGx1Z2luVXRpbHMuaXNTdGFydGlzaDtcbnZhciBpc01vdmVpc2ggPSBFdmVudFBsdWdpblV0aWxzLmlzTW92ZWlzaDtcbnZhciBpc0VuZGlzaCA9IEV2ZW50UGx1Z2luVXRpbHMuaXNFbmRpc2g7XG52YXIgZXhlY3V0ZURpcmVjdERpc3BhdGNoID0gRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlyZWN0RGlzcGF0Y2g7XG52YXIgaGFzRGlzcGF0Y2hlcyA9IEV2ZW50UGx1Z2luVXRpbHMuaGFzRGlzcGF0Y2hlcztcbnZhciBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlID1cbiAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlO1xuXG4vKipcbiAqIElEIG9mIGVsZW1lbnQgdGhhdCBzaG91bGQgcmVzcG9uZCB0byB0b3VjaC9tb3ZlIHR5cGVzIG9mIGludGVyYWN0aW9ucywgYXNcbiAqIGluZGljYXRlZCBleHBsaWNpdGx5IGJ5IHJlbGV2YW50IGNhbGxiYWNrcy5cbiAqL1xudmFyIHJlc3BvbmRlcklEID0gbnVsbDtcbnZhciBpc1ByZXNzaW5nID0gZmFsc2U7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICAvKipcbiAgICogT24gYSBgdG91Y2hTdGFydGAvYG1vdXNlRG93bmAsIGlzIGl0IGRlc2lyZWQgdGhhdCB0aGlzIGVsZW1lbnQgYmVjb21lIHRoZVxuICAgKiByZXNwb25kZXI/XG4gICAqL1xuICBzdGFydFNob3VsZFNldFJlc3BvbmRlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogbnVsbH0pXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBPbiBhIGBzY3JvbGxgLCBpcyBpdCBkZXNpcmVkIHRoYXQgdGhpcyBlbGVtZW50IGJlY29tZSB0aGUgcmVzcG9uZGVyPyBUaGlzXG4gICAqIGlzIHVzdWFsbHkgbm90IG5lZWRlZCwgYnV0IHNob3VsZCBiZSB1c2VkIHRvIHJldHJvYWN0aXZlbHkgaW5mZXIgdGhhdCBhXG4gICAqIGB0b3VjaFN0YXJ0YCBoYWQgb2NjdXJlZCBkdXJpbmcgbW9tZW50dW0gc2Nyb2xsLiBEdXJpbmcgYSBtb21lbnR1bSBzY3JvbGwsXG4gICAqIGEgdG91Y2ggc3RhcnQgd2lsbCBiZSBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBhIHNjcm9sbCBldmVudCBpZiB0aGUgdmlldyBpc1xuICAgKiBjdXJyZW50bHkgc2Nyb2xsaW5nLlxuICAgKi9cbiAgc2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlcjogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IG51bGx9KVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogT24gYSBgdG91Y2hNb3ZlYC9gbW91c2VNb3ZlYCwgaXMgaXQgZGVzaXJlZCB0aGF0IHRoaXMgZWxlbWVudCBiZWNvbWUgdGhlXG4gICAqIHJlc3BvbmRlcj9cbiAgICovXG4gIG1vdmVTaG91bGRTZXRSZXNwb25kZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW92ZVNob3VsZFNldFJlc3BvbmRlcjogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdmVTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiBudWxsfSlcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpcmVjdCByZXNwb25kZXIgZXZlbnRzIGRpc3BhdGNoZWQgZGlyZWN0bHkgdG8gcmVzcG9uZGVyLiBEbyBub3QgYnViYmxlLlxuICAgKi9cbiAgcmVzcG9uZGVyTW92ZToge3JlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvblJlc3BvbmRlck1vdmU6IG51bGx9KX0sXG4gIHJlc3BvbmRlclJlbGVhc2U6IHtyZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25SZXNwb25kZXJSZWxlYXNlOiBudWxsfSl9LFxuICByZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IG51bGx9KVxuICB9LFxuICByZXNwb25kZXJHcmFudDoge3JlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvblJlc3BvbmRlckdyYW50OiBudWxsfSl9LFxuICByZXNwb25kZXJSZWplY3Q6IHtyZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25SZXNwb25kZXJSZWplY3Q6IG51bGx9KX0sXG4gIHJlc3BvbmRlclRlcm1pbmF0ZToge3JlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvblJlc3BvbmRlclRlcm1pbmF0ZTogbnVsbH0pfVxufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBuZWdvdGlhdGlvbiBiZXR3ZWVuIGFueSBleGlzdGluZy9jdXJyZW50IHJlc3BvbmRlciwgY2hlY2tzIHRvIHNlZSBpZlxuICogYW55IG5ldyBlbnRpdHkgaXMgaW50ZXJlc3RlZCBpbiBiZWNvbWluZyByZXNwb25kZXIsIHBlcmZvcm1zIHRoYXQgaGFuZHNoYWtlXG4gKiBhbmQgcmV0dXJucyBhbnkgZXZlbnRzIHRoYXQgbXVzdCBiZSBlbWl0dGVkIHRvIG5vdGlmeSB0aGUgcmVsZXZhbnQgcGFydGllcy5cbiAqXG4gKiBBIG5vdGUgYWJvdXQgZXZlbnQgb3JkZXJpbmcgaW4gdGhlIGBFdmVudFBsdWdpbkh1YmAuXG4gKlxuICogU3VwcG9zZSBwbHVnaW5zIGFyZSBpbmplY3RlZCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyOlxuICpcbiAqIGBbUiwgUywgQ11gXG4gKlxuICogVG8gaGVscCBpbGx1c3RyYXRlIHRoZSBleGFtcGxlLCBhc3N1bWUgYFNgIGlzIGBTaW1wbGVFdmVudFBsdWdpbmAgKGZvclxuICogYG9uQ2xpY2tgIGV0YykgYW5kIGBSYCBpcyBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gLlxuICpcbiAqIFwiRGVmZXJyZWQtRGlzcGF0Y2hlZCBFdmVudHNcIjpcbiAqXG4gKiAtIFRoZSBjdXJyZW50IGV2ZW50IHBsdWdpbiBzeXN0ZW0gd2lsbCB0cmF2ZXJzZSB0aGUgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLFxuICogICBpbiBvcmRlciwgYW5kIGV4dHJhY3QgZXZlbnRzIGJ5IGNvbGxlY3RpbmcgdGhlIHBsdWdpbidzIHJldHVybiB2YWx1ZSBvZlxuICogICBgZXh0cmFjdEV2ZW50cygpYC5cbiAqIC0gVGhlc2UgZXZlbnRzIHRoYXQgYXJlIHJldHVybmVkIGZyb20gYGV4dHJhY3RFdmVudHNgIGFyZSBcImRlZmVycmVkXG4gKiAgIGRpc3BhdGNoZWQgZXZlbnRzXCIuXG4gKiAtIFdoZW4gcmV0dXJuZWQgZnJvbSBgZXh0cmFjdEV2ZW50c2AsIGRlZmVycmVkLWRpc3BhdGNoZWQgZXZlbnRzIGNvbnRhaW4gYW5cbiAqICAgXCJhY2N1bXVsYXRpb25cIiBvZiBkZWZlcnJlZCBkaXNwYXRjaGVzLlxuICogLSBUaGVzZSBkZWZlcnJlZCBkaXNwYXRjaGVzIGFyZSBhY2N1bXVsYXRlZC9jb2xsZWN0ZWQgYmVmb3JlIHRoZXkgYXJlXG4gKiAgIHJldHVybmVkLCBidXQgcHJvY2Vzc2VkIGF0IGEgbGF0ZXIgdGltZSBieSB0aGUgYEV2ZW50UGx1Z2luSHViYCAoaGVuY2UgdGhlXG4gKiAgIG5hbWUgZGVmZXJyZWQpLlxuICpcbiAqIEluIHRoZSBwcm9jZXNzIG9mIHJldHVybmluZyB0aGVpciBkZWZlcnJlZC1kaXNwYXRjaGVkIGV2ZW50cywgZXZlbnQgcGx1Z2luc1xuICogdGhlbXNlbHZlcyBjYW4gZGlzcGF0Y2ggZXZlbnRzIG9uLWRlbWFuZCB3aXRob3V0IHJldHVybmluZyB0aGVtIGZyb21cbiAqIGBleHRyYWN0RXZlbnRzYC4gUGx1Z2lucyBtaWdodCB3YW50IHRvIGRvIHRoaXMsIHNvIHRoYXQgdGhleSBjYW4gdXNlIGV2ZW50XG4gKiBkaXNwYXRjaGluZyBhcyBhIHRvb2wgdGhhdCBoZWxwcyB0aGVtIGRlY2lkZSB3aGljaCBldmVudHMgc2hvdWxkIGJlIGV4dHJhY3RlZFxuICogaW4gdGhlIGZpcnN0IHBsYWNlLlxuICpcbiAqIFwiT24tRGVtYW5kLURpc3BhdGNoZWQgRXZlbnRzXCI6XG4gKlxuICogLSBPbi1kZW1hbmQtZGlzcGF0Y2hlZCBldmVudHMgYXJlIG5vdCByZXR1cm5lZCBmcm9tIGBleHRyYWN0RXZlbnRzYC5cbiAqIC0gT24tZGVtYW5kLWRpc3BhdGNoZWQgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGR1cmluZyB0aGUgcHJvY2VzcyBvZiByZXR1cm5pbmdcbiAqICAgdGhlIGRlZmVycmVkLWRpc3BhdGNoZWQgZXZlbnRzLlxuICogLSBUaGV5IHNob3VsZCBub3QgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gKiAtIFRoZXkgc2hvdWxkIGJlIGF2b2lkZWQsIGFuZC9vciBldmVudHVhbGx5IGJlIHJlcGxhY2VkIHdpdGggYW5vdGhlclxuICogICBhYnN0cmFjdGlvbiB0aGF0IGFsbG93cyBldmVudCBwbHVnaW5zIHRvIHBlcmZvcm0gbXVsdGlwbGUgXCJyb3VuZHNcIiBvZiBldmVudFxuICogICBleHRyYWN0aW9uLlxuICpcbiAqIFRoZXJlZm9yZSwgdGhlIHNlcXVlbmNlIG9mIGV2ZW50IGRpc3BhdGNoZXMgYmVjb21lczpcbiAqXG4gKiAtIGBSYHMgb24tZGVtYW5kIGV2ZW50cyAoaWYgYW55KSAgIChkaXNwYXRjaGVkIGJ5IGBSYCBvbi1kZW1hbmQpXG4gKiAtIGBTYHMgb24tZGVtYW5kIGV2ZW50cyAoaWYgYW55KSAgIChkaXNwYXRjaGVkIGJ5IGBTYCBvbi1kZW1hbmQpXG4gKiAtIGBDYHMgb24tZGVtYW5kIGV2ZW50cyAoaWYgYW55KSAgIChkaXNwYXRjaGVkIGJ5IGBDYCBvbi1kZW1hbmQpXG4gKiAtIGBSYHMgZXh0cmFjdGVkIGV2ZW50cyAoaWYgYW55KSAgIChkaXNwYXRjaGVkIGJ5IGBFdmVudFBsdWdpbkh1YmApXG4gKiAtIGBTYHMgZXh0cmFjdGVkIGV2ZW50cyAoaWYgYW55KSAgIChkaXNwYXRjaGVkIGJ5IGBFdmVudFBsdWdpbkh1YmApXG4gKiAtIGBDYHMgZXh0cmFjdGVkIGV2ZW50cyAoaWYgYW55KSAgIChkaXNwYXRjaGVkIGJ5IGBFdmVudFBsdWdpbkh1YmApXG4gKlxuICogSW4gdGhlIGNhc2Ugb2YgYFJlc3BvbmRlckV2ZW50UGx1Z2luYDogSWYgdGhlIGBzdGFydFNob3VsZFNldFJlc3BvbmRlcmBcbiAqIG9uLWRlbWFuZCBkaXNwYXRjaCByZXR1cm5zIGB0cnVlYCAoYW5kIHNvbWUgb3RoZXIgZGV0YWlscyBhcmUgc2F0aXNmaWVkKSB0aGVcbiAqIGBvblJlc3BvbmRlckdyYW50YCBkZWZlcnJlZCBkaXNwYXRjaGVkIGV2ZW50IGlzIHJldHVybmVkIGZyb21cbiAqIGBleHRyYWN0RXZlbnRzYC4gVGhlIHNlcXVlbmNlIG9mIGRpc3BhdGNoIGV4ZWN1dGlvbnMgaW4gdGhpcyBjYXNlXG4gKiB3aWxsIGFwcGVhciBhcyBmb2xsb3dzOlxuICpcbiAqIC0gYHN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyYCAoYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBkaXNwYXRjaGVzIG9uLWRlbWFuZClcbiAqIC0gYHRvdWNoU3RhcnRDYXB0dXJlYCAgICAgICAoYEV2ZW50UGx1Z2luSHViYCBkaXNwYXRjaGVzIGFzIHVzdWFsKVxuICogLSBgdG91Y2hTdGFydGAgICAgICAgICAgICAgIChgRXZlbnRQbHVnaW5IdWJgIGRpc3BhdGNoZXMgYXMgdXN1YWwpXG4gKiAtIGByZXNwb25kZXJHcmFudC9SZWplY3RgICAgKGBFdmVudFBsdWdpbkh1YmAgZGlzcGF0Y2hlcyBhcyB1c3VhbClcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBkZWVwZXN0IFJlYWN0IHJlbmRlcmVkIGVsZW1lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAqL1xuZnVuY3Rpb24gc2V0UmVzcG9uZGVyQW5kRXh0cmFjdFRyYW5zZmVyKFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldElELFxuICAgIG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBzaG91bGRTZXRFdmVudFR5cGUgPVxuICAgIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSA/IGV2ZW50VHlwZXMuc3RhcnRTaG91bGRTZXRSZXNwb25kZXIgOlxuICAgIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpID8gZXZlbnRUeXBlcy5tb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIDpcbiAgICBldmVudFR5cGVzLnNjcm9sbFNob3VsZFNldFJlc3BvbmRlcjtcblxuICB2YXIgYnViYmxlU2hvdWxkU2V0RnJvbSA9IHJlc3BvbmRlcklEIHx8IHRvcExldmVsVGFyZ2V0SUQ7XG4gIHZhciBzaG91bGRTZXRFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICBzaG91bGRTZXRFdmVudFR5cGUsXG4gICAgYnViYmxlU2hvdWxkU2V0RnJvbSxcbiAgICBuYXRpdmVFdmVudFxuICApO1xuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc2hvdWxkU2V0RXZlbnQpO1xuICB2YXIgd2FudHNSZXNwb25kZXJJRCA9IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUoc2hvdWxkU2V0RXZlbnQpO1xuICBpZiAoIXNob3VsZFNldEV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgc2hvdWxkU2V0RXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShzaG91bGRTZXRFdmVudCk7XG4gIH1cblxuICBpZiAoIXdhbnRzUmVzcG9uZGVySUQgfHwgd2FudHNSZXNwb25kZXJJRCA9PT0gcmVzcG9uZGVySUQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZXh0cmFjdGVkO1xuICB2YXIgZ3JhbnRFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICBldmVudFR5cGVzLnJlc3BvbmRlckdyYW50LFxuICAgIHdhbnRzUmVzcG9uZGVySUQsXG4gICAgbmF0aXZlRXZlbnRcbiAgKTtcblxuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGdyYW50RXZlbnQpO1xuICBpZiAocmVzcG9uZGVySUQpIHtcbiAgICB2YXIgdGVybWluYXRpb25SZXF1ZXN0RXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLnJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCxcbiAgICAgIHJlc3BvbmRlcklELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXModGVybWluYXRpb25SZXF1ZXN0RXZlbnQpO1xuICAgIHZhciBzaG91bGRTd2l0Y2ggPSAhaGFzRGlzcGF0Y2hlcyh0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCkgfHxcbiAgICAgIGV4ZWN1dGVEaXJlY3REaXNwYXRjaCh0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCk7XG4gICAgaWYgKCF0ZXJtaW5hdGlvblJlcXVlc3RFdmVudC5pc1BlcnNpc3RlbnQoKSkge1xuICAgICAgdGVybWluYXRpb25SZXF1ZXN0RXZlbnQuY29uc3RydWN0b3IucmVsZWFzZSh0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCk7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFN3aXRjaCkge1xuICAgICAgdmFyIHRlcm1pbmF0ZVR5cGUgPSBldmVudFR5cGVzLnJlc3BvbmRlclRlcm1pbmF0ZTtcbiAgICAgIHZhciB0ZXJtaW5hdGVFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgICAgdGVybWluYXRlVHlwZSxcbiAgICAgICAgcmVzcG9uZGVySUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApO1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyh0ZXJtaW5hdGVFdmVudCk7XG4gICAgICBleHRyYWN0ZWQgPSBhY2N1bXVsYXRlSW50byhleHRyYWN0ZWQsIFtncmFudEV2ZW50LCB0ZXJtaW5hdGVFdmVudF0pO1xuICAgICAgcmVzcG9uZGVySUQgPSB3YW50c1Jlc3BvbmRlcklEO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVqZWN0RXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICAgIGV2ZW50VHlwZXMucmVzcG9uZGVyUmVqZWN0LFxuICAgICAgICB3YW50c1Jlc3BvbmRlcklELFxuICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgKTtcbiAgICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMocmVqZWN0RXZlbnQpO1xuICAgICAgZXh0cmFjdGVkID0gYWNjdW11bGF0ZUludG8oZXh0cmFjdGVkLCByZWplY3RFdmVudCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGV4dHJhY3RlZCA9IGFjY3VtdWxhdGVJbnRvKGV4dHJhY3RlZCwgZ3JhbnRFdmVudCk7XG4gICAgcmVzcG9uZGVySUQgPSB3YW50c1Jlc3BvbmRlcklEO1xuICB9XG4gIHJldHVybiBleHRyYWN0ZWQ7XG59XG5cbi8qKlxuICogQSB0cmFuc2ZlciBpcyBhIG5lZ290aWF0aW9uIGJldHdlZW4gYSBjdXJyZW50bHkgc2V0IHJlc3BvbmRlciBhbmQgdGhlIG5leHRcbiAqIGVsZW1lbnQgdG8gY2xhaW0gcmVzcG9uZGVyIHN0YXR1cy4gQW55IHN0YXJ0IGV2ZW50IGNvdWxkIHRyaWdnZXIgYSB0cmFuc2ZlclxuICogb2YgcmVzcG9uZGVySUQuIEFueSBtb3ZlIGV2ZW50IGNvdWxkIHRyaWdnZXIgYSB0cmFuc2Zlciwgc28gbG9uZyBhcyB0aGVyZSBpc1xuICogY3VycmVudGx5IGEgcmVzcG9uZGVyIHNldCAoaW4gb3RoZXIgd29yZHMgYXMgbG9uZyBhcyB0aGUgdXNlciBpcyBwcmVzc2luZ1xuICogZG93bikuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIHRyYW5zZmVyIG9mIHJlc3BvbmRlciBjb3VsZCBwb3NzaWJseSBvY2N1ci5cbiAqL1xuZnVuY3Rpb24gY2FuVHJpZ2dlclRyYW5zZmVyKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCB8fFxuICAgICAgICAgaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpIHx8XG4gICAgICAgICAoaXNQcmVzc2luZyAmJiBpc01vdmVpc2godG9wTGV2ZWxUeXBlKSk7XG59XG5cbi8qKlxuICogRXZlbnQgcGx1Z2luIGZvciBmb3JtYWxpemluZyB0aGUgbmVnb3RpYXRpb24gYmV0d2VlbiBjbGFpbWluZyBsb2NrcyBvblxuICogcmVjZWl2aW5nIHRvdWNoZXMuXG4gKi9cbnZhciBSZXNwb25kZXJFdmVudFBsdWdpbiA9IHtcblxuICBnZXRSZXNwb25kZXJJRDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHJlc3BvbmRlcklEO1xuICB9LFxuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIHZhciBleHRyYWN0ZWQ7XG4gICAgLy8gTXVzdCBoYXZlIG1pc3NlZCBhbiBlbmQgZXZlbnQgLSByZXNldCB0aGUgc3RhdGUgaGVyZS5cbiAgICBpZiAocmVzcG9uZGVySUQgJiYgaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpKSB7XG4gICAgICByZXNwb25kZXJJRCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIGlzUHJlc3NpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaXNFbmRpc2godG9wTGV2ZWxUeXBlKSkge1xuICAgICAgaXNQcmVzc2luZyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoY2FuVHJpZ2dlclRyYW5zZmVyKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIHZhciB0cmFuc2ZlciA9IHNldFJlc3BvbmRlckFuZEV4dHJhY3RUcmFuc2ZlcihcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgKTtcbiAgICAgIGlmICh0cmFuc2Zlcikge1xuICAgICAgICBleHRyYWN0ZWQgPSBhY2N1bXVsYXRlSW50byhleHRyYWN0ZWQsIHRyYW5zZmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTm93IHRoYXQgd2Uga25vdyB0aGUgcmVzcG9uZGVyIGlzIHNldCBjb3JyZWN0bHksIHdlIGNhbiBkaXNwYXRjaFxuICAgIC8vIHJlc3BvbmRlciB0eXBlIGV2ZW50cyAoZGlyZWN0bHkgdG8gdGhlIHJlc3BvbmRlcikuXG4gICAgdmFyIHR5cGUgPSBpc01vdmVpc2godG9wTGV2ZWxUeXBlKSA/IGV2ZW50VHlwZXMucmVzcG9uZGVyTW92ZSA6XG4gICAgICBpc0VuZGlzaCh0b3BMZXZlbFR5cGUpID8gZXZlbnRUeXBlcy5yZXNwb25kZXJSZWxlYXNlIDpcbiAgICAgIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSA/IGV2ZW50VHlwZXMucmVzcG9uZGVyU3RhcnQgOiBudWxsO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB2YXIgZ2VzdHVyZSA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcmVzcG9uZGVySUQgfHwgJycsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApO1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhnZXN0dXJlKTtcbiAgICAgIGV4dHJhY3RlZCA9IGFjY3VtdWxhdGVJbnRvKGV4dHJhY3RlZCwgZ2VzdHVyZSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBldmVudFR5cGVzLnJlc3BvbmRlclJlbGVhc2UpIHtcbiAgICAgIHJlc3BvbmRlcklEID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc3BvbmRlckV2ZW50UGx1Z2luO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRhcEV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCdyZWFjdC9saWIvRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZSgncmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgncmVhY3QvbGliL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgncmVhY3QvbGliL1N5bnRoZXRpY1VJRXZlbnQnKTtcbnZhciBUb3VjaEV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL1RvdWNoRXZlbnRVdGlscycpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9WaWV3cG9ydE1ldHJpY3MnKTtcblxudmFyIGtleU9mID0gcmVxdWlyZSgncmVhY3QvbGliL2tleU9mJyk7XG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBpc1N0YXJ0aXNoID0gRXZlbnRQbHVnaW5VdGlscy5pc1N0YXJ0aXNoO1xudmFyIGlzRW5kaXNoID0gRXZlbnRQbHVnaW5VdGlscy5pc0VuZGlzaDtcblxudmFyIGlzVG91Y2ggPSBmdW5jdGlvbih0b3BMZXZlbFR5cGUpIHtcbiAgdmFyIHRvdWNoVHlwZXMgPSBbXG4gICAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaENhbmNlbCxcbiAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kLFxuICAgIHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydCxcbiAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZVxuICBdO1xuICByZXR1cm4gdG91Y2hUeXBlcy5pbmRleE9mKHRvcExldmVsVHlwZSkgPj0gMDtcbn1cblxuLyoqXG4gKiBOdW1iZXIgb2YgcGl4ZWxzIHRoYXQgYXJlIHRvbGVyYXRlZCBpbiBiZXR3ZWVuIGEgYHRvdWNoU3RhcnRgIGFuZCBgdG91Y2hFbmRgXG4gKiBpbiBvcmRlciB0byBzdGlsbCBiZSBjb25zaWRlcmVkIGEgJ3RhcCcgZXZlbnQuXG4gKi9cbnZhciB0YXBNb3ZlVGhyZXNob2xkID0gMTA7XG52YXIgaWdub3JlTW91c2VUaHJlc2hvbGQgPSA3NTA7XG52YXIgc3RhcnRDb29yZHMgPSB7eDogbnVsbCwgeTogbnVsbH07XG52YXIgbGFzdFRvdWNoRXZlbnQgPSBudWxsO1xuXG52YXIgQXhpcyA9IHtcbiAgeDoge3BhZ2U6ICdwYWdlWCcsIGNsaWVudDogJ2NsaWVudFgnLCBlbnZTY3JvbGw6ICdjdXJyZW50UGFnZVNjcm9sbExlZnQnfSxcbiAgeToge3BhZ2U6ICdwYWdlWScsIGNsaWVudDogJ2NsaWVudFknLCBlbnZTY3JvbGw6ICdjdXJyZW50UGFnZVNjcm9sbFRvcCd9XG59O1xuXG5mdW5jdGlvbiBnZXRBeGlzQ29vcmRPZkV2ZW50KGF4aXMsIG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBzaW5nbGVUb3VjaCA9IFRvdWNoRXZlbnRVdGlscy5leHRyYWN0U2luZ2xlVG91Y2gobmF0aXZlRXZlbnQpO1xuICBpZiAoc2luZ2xlVG91Y2gpIHtcbiAgICByZXR1cm4gc2luZ2xlVG91Y2hbYXhpcy5wYWdlXTtcbiAgfVxuICByZXR1cm4gYXhpcy5wYWdlIGluIG5hdGl2ZUV2ZW50ID9cbiAgICBuYXRpdmVFdmVudFtheGlzLnBhZ2VdIDpcbiAgICBuYXRpdmVFdmVudFtheGlzLmNsaWVudF0gKyBWaWV3cG9ydE1ldHJpY3NbYXhpcy5lbnZTY3JvbGxdO1xufVxuXG5mdW5jdGlvbiBnZXREaXN0YW5jZShjb29yZHMsIG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBwYWdlWCA9IGdldEF4aXNDb29yZE9mRXZlbnQoQXhpcy54LCBuYXRpdmVFdmVudCk7XG4gIHZhciBwYWdlWSA9IGdldEF4aXNDb29yZE9mRXZlbnQoQXhpcy55LCBuYXRpdmVFdmVudCk7XG4gIHJldHVybiBNYXRoLnBvdyhcbiAgICBNYXRoLnBvdyhwYWdlWCAtIGNvb3Jkcy54LCAyKSArIE1hdGgucG93KHBhZ2VZIC0gY29vcmRzLnksIDIpLFxuICAgIDAuNVxuICApO1xufVxuXG52YXIgZGVwZW5kZW5jaWVzID0gW1xuICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bixcbiAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmUsXG4gIHRvcExldmVsVHlwZXMudG9wTW91c2VVcFxuXTtcblxuaWYgKEV2ZW50UGx1Z2luVXRpbHMudXNlVG91Y2hFdmVudHMpIHtcbiAgZGVwZW5kZW5jaWVzLnB1c2goXG4gICAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZCxcbiAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQsXG4gICAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmVcbiAgKTtcbn1cblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIHRvdWNoVGFwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoVGFwOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hUYXBDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzXG4gIH1cbn07XG5cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgaWYgKERhdGUubm93KSB7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IHN1cHBvcnQ6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQzMDM1Ny9wbGVhc2UtZXhwbGFpbi13aHktYW5kLWhvdy1uZXctZGF0ZS13b3Jrcy1hcy13b3JrYXJvdW5kLWZvci1kYXRlLW5vdy1pblxuICAgIHJldHVybiArbmV3IERhdGU7XG4gIH1cbn1cblxudmFyIFRhcEV2ZW50UGx1Z2luID0ge1xuXG4gIHRhcE1vdmVUaHJlc2hvbGQ6IHRhcE1vdmVUaHJlc2hvbGQsXG5cbiAgaWdub3JlTW91c2VUaHJlc2hvbGQ6IGlnbm9yZU1vdXNlVGhyZXNob2xkLFxuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuXG4gICAgaWYgKGlzVG91Y2godG9wTGV2ZWxUeXBlKSkge1xuICAgICAgbGFzdFRvdWNoRXZlbnQgPSBub3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhc3RUb3VjaEV2ZW50ICYmIChub3coKSAtIGxhc3RUb3VjaEV2ZW50KSA8IGlnbm9yZU1vdXNlVGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpICYmICFpc0VuZGlzaCh0b3BMZXZlbFR5cGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGV2ZW50ID0gbnVsbDtcbiAgICB2YXIgZGlzdGFuY2UgPSBnZXREaXN0YW5jZShzdGFydENvb3JkcywgbmF0aXZlRXZlbnQpO1xuICAgIGlmIChpc0VuZGlzaCh0b3BMZXZlbFR5cGUpICYmIGRpc3RhbmNlIDwgdGFwTW92ZVRocmVzaG9sZCkge1xuICAgICAgZXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmdldFBvb2xlZChcbiAgICAgICAgZXZlbnRUeXBlcy50b3VjaFRhcCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIHN0YXJ0Q29vcmRzLnggPSBnZXRBeGlzQ29vcmRPZkV2ZW50KEF4aXMueCwgbmF0aXZlRXZlbnQpO1xuICAgICAgc3RhcnRDb29yZHMueSA9IGdldEF4aXNDb29yZE9mRXZlbnQoQXhpcy55LCBuYXRpdmVFdmVudCk7XG4gICAgfSBlbHNlIGlmIChpc0VuZGlzaCh0b3BMZXZlbFR5cGUpKSB7XG4gICAgICBzdGFydENvb3Jkcy54ID0gMDtcbiAgICAgIHN0YXJ0Q29vcmRzLnkgPSAwO1xuICAgIH1cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhcEV2ZW50UGx1Z2luO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRvdWNoRXZlbnRVdGlsc1xuICovXG5cbnZhciBUb3VjaEV2ZW50VXRpbHMgPSB7XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBjb21tb24gY2FzZSBvZiBleHRyYWN0aW5nIG91dCB0aGUgcHJpbWFyeSB0b3VjaCBmcm9tIGFcbiAgICogdG91Y2ggZXZlbnQuXG4gICAqIC0gYHRvdWNoRW5kYCBldmVudHMgdXN1YWxseSBkbyBub3QgaGF2ZSB0aGUgYHRvdWNoZXNgIHByb3BlcnR5LlxuICAgKiAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzY2NjkyOS9cbiAgICogICBtb2JpbGUtc2FyYWktdG91Y2hlbmQtZXZlbnQtbm90LWZpcmluZy13aGVuLWxhc3QtdG91Y2gtaXMtcmVtb3ZlZFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBuYXRpdmVFdmVudCBOYXRpdmUgZXZlbnQgdGhhdCBtYXkgb3IgbWF5IG5vdCBiZSBhIHRvdWNoLlxuICAgKiBAcmV0dXJuIHtUb3VjaGVzT2JqZWN0P30gYW4gb2JqZWN0IHdpdGggcGFnZVggYW5kIHBhZ2VZIG9yIG51bGwuXG4gICAqL1xuICBleHRyYWN0U2luZ2xlVG91Y2g6IGZ1bmN0aW9uKG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIHRvdWNoZXMgPSBuYXRpdmVFdmVudC50b3VjaGVzO1xuICAgIHZhciBjaGFuZ2VkVG91Y2hlcyA9IG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgIHZhciBoYXNUb3VjaGVzID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA+IDA7XG4gICAgdmFyIGhhc0NoYW5nZWRUb3VjaGVzID0gY2hhbmdlZFRvdWNoZXMgJiYgY2hhbmdlZFRvdWNoZXMubGVuZ3RoID4gMDtcblxuICAgIHJldHVybiAhaGFzVG91Y2hlcyAmJiBoYXNDaGFuZ2VkVG91Y2hlcyA/IGNoYW5nZWRUb3VjaGVzWzBdIDpcbiAgICAgICAgICAgaGFzVG91Y2hlcyA/IHRvdWNoZXNbMF0gOlxuICAgICAgICAgICBuYXRpdmVFdmVudDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaEV2ZW50VXRpbHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluamVjdFRhcEV2ZW50UGx1Z2luICgpIHtcbiAgdmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuICBSZWFjdC5pbml0aWFsaXplVG91Y2hFdmVudHModHJ1ZSk7XG5cbiAgcmVxdWlyZSgncmVhY3QvbGliL0V2ZW50UGx1Z2luSHViJykuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgXCJSZXNwb25kZXJFdmVudFBsdWdpblwiOiByZXF1aXJlKCcuL1Jlc3BvbmRlckV2ZW50UGx1Z2luLmpzJyksXG4gICAgXCJUYXBFdmVudFBsdWdpblwiOiAgICAgICByZXF1aXJlKCcuL1RhcEV2ZW50UGx1Z2luLmpzJylcbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFdpdGhBZGRvbnMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBBdXRvRm9jdXNNaXhpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKFwiLi9mb2N1c05vZGVcIik7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHtcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgZm9jdXNOb2RlKHRoaXMuZ2V0RE9NTm9kZSgpKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b0ZvY3VzTWl4aW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUgPSByZXF1aXJlKFwiLi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGVcIik7XG52YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcIik7XG52YXIgU3ludGhldGljSW5wdXRFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0lucHV0RXZlbnRcIik7XG5cbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ0NvbXBvc2l0aW9uRXZlbnQnIGluIHdpbmRvd1xuKTtcblxudmFyIGRvY3VtZW50TW9kZSA9IG51bGw7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB7XG4gIGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbn1cblxuLy8gV2Via2l0IG9mZmVycyBhIHZlcnkgdXNlZnVsIGB0ZXh0SW5wdXRgIGV2ZW50IHRoYXQgY2FuIGJlIHVzZWQgdG9cbi8vIGRpcmVjdGx5IHJlcHJlc2VudCBgYmVmb3JlSW5wdXRgLiBUaGUgSUUgYHRleHRpbnB1dGAgZXZlbnQgaXMgbm90IGFzXG4vLyB1c2VmdWwsIHNvIHdlIGRvbid0IHVzZSBpdC5cbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IChcbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmXG4gICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJlxuICAhZG9jdW1lbnRNb2RlICYmXG4gICFpc1ByZXN0bygpXG4pO1xuXG4vLyBJbiBJRTkrLCB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NpdGlvbiBldmVudHMsIGJ1dCB0aGUgZGF0YSBzdXBwbGllZFxuLy8gYnkgdGhlIG5hdGl2ZSBjb21wb3NpdGlvbmVuZCBldmVudCBtYXkgYmUgaW5jb3JyZWN0LiBKYXBhbmVzZSBpZGVvZ3JhcGhpY1xuLy8gc3BhY2VzLCBmb3IgaW5zdGFuY2UgKFxcdTMwMDApIGFyZSBub3QgcmVjb3JkZWQgY29ycmVjdGx5LlxudmFyIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgKFxuICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fCBkb2N1bWVudE1vZGUgJiYgZG9jdW1lbnRNb2RlID4gOCAmJiBkb2N1bWVudE1vZGUgPD0gMTEpXG4gIClcbik7XG5cbi8qKlxuICogT3BlcmEgPD0gMTIgaW5jbHVkZXMgVGV4dEV2ZW50IGluIHdpbmRvdywgYnV0IGRvZXMgbm90IGZpcmVcbiAqIHRleHQgaW5wdXQgZXZlbnRzLiBSZWx5IG9uIGtleXByZXNzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGlzUHJlc3RvKCkge1xuICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG9wZXJhID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgcGFyc2VJbnQob3BlcmEudmVyc2lvbigpLCAxMCkgPD0gMTJcbiAgKTtcbn1cblxudmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbnZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmVmb3JlSW5wdXQ6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CZWZvcmVJbnB1dENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wVGV4dElucHV0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZVxuICAgIF1cbiAgfSxcbiAgY29tcG9zaXRpb25FbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25FbmQ6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvbkVuZENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfSxcbiAgY29tcG9zaXRpb25TdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvblN0YXJ0OiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25TdGFydENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXG4gICAgXVxuICB9LFxuICBjb21wb3NpdGlvblVwZGF0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvblVwZGF0ZTogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGUsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXG4gICAgXVxuICB9XG59O1xuXG4vLyBUcmFjayB3aGV0aGVyIHdlJ3ZlIGV2ZXIgaGFuZGxlZCBhIGtleXByZXNzIG9uIHRoZSBzcGFjZSBrZXkuXG52YXIgaGFzU3BhY2VLZXlwcmVzcyA9IGZhbHNlO1xuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIGEgbmF0aXZlIGtleXByZXNzIGV2ZW50IGlzIGFzc3VtZWQgdG8gYmUgYSBjb21tYW5kLlxuICogVGhpcyBpcyByZXF1aXJlZCBiZWNhdXNlIEZpcmVmb3ggZmlyZXMgYGtleXByZXNzYCBldmVudHMgZm9yIGtleSBjb21tYW5kc1xuICogKGN1dCwgY29weSwgc2VsZWN0LWFsbCwgZXRjLikgZXZlbiB0aG91Z2ggbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkge1xuICByZXR1cm4gKFxuICAgIChuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSAmJlxuICAgIC8vIGN0cmxLZXkgJiYgYWx0S2V5IGlzIGVxdWl2YWxlbnQgdG8gQWx0R3IsIGFuZCBpcyBub3QgYSBjb21tYW5kLlxuICAgICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpXG4gICk7XG59XG5cblxuLyoqXG4gKiBUcmFuc2xhdGUgbmF0aXZlIHRvcCBsZXZlbCBldmVudHMgaW50byBldmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblN0YXJ0OlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGU6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblVwZGF0ZTtcbiAgfVxufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIGJlc3QtZ3Vlc3MgbW9kZWwgdGhpbmsgdGhpcyBldmVudCBzaWduaWZpZXMgdGhhdFxuICogY29tcG9zaXRpb24gaGFzIGJlZ3VuP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICByZXR1cm4gKFxuICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duICYmXG4gICAgbmF0aXZlRXZlbnQua2V5Q29kZSA9PT0gU1RBUlRfS0VZQ09ERVxuICApO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIChFTkRfS0VZQ09ERVMuaW5kZXhPZihuYXRpdmVFdmVudC5rZXlDb2RlKSAhPT0gLTEpO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgLy8gRXhwZWN0IElNRSBrZXlDb2RlIG9uIGVhY2gga2V5ZG93bi4gSWYgd2UgZ2V0IGFueSBvdGhlclxuICAgICAgLy8gY29kZSB3ZSBtdXN0IGhhdmUgZXhpdGVkIGVhcmxpZXIuXG4gICAgICByZXR1cm4gKG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREUpO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgLy8gRXZlbnRzIGFyZSBub3QgcG9zc2libGUgd2l0aG91dCBjYW5jZWxsaW5nIElNRS5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBHb29nbGUgSW5wdXQgVG9vbHMgcHJvdmlkZXMgY29tcG9zaXRpb24gZGF0YSB2aWEgYSBDdXN0b21FdmVudCxcbiAqIHdpdGggdGhlIGBkYXRhYCBwcm9wZXJ0eSBwb3B1bGF0ZWQgaW4gdGhlIGBkZXRhaWxgIG9iamVjdC4gSWYgdGhpc1xuICogaXMgYXZhaWxhYmxlIG9uIHRoZSBldmVudCBvYmplY3QsIHVzZSBpdC4gSWYgbm90LCB0aGlzIGlzIGEgcGxhaW5cbiAqIGNvbXBvc2l0aW9uIGV2ZW50IGFuZCB3ZSBoYXZlIG5vdGhpbmcgc3BlY2lhbCB0byBleHRyYWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZGV0YWlsID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuICBpZiAodHlwZW9mIGRldGFpbCA9PT0gJ29iamVjdCcgJiYgJ2RhdGEnIGluIGRldGFpbCkge1xuICAgIHJldHVybiBkZXRhaWwuZGF0YTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gVHJhY2sgdGhlIGN1cnJlbnQgSU1FIGNvbXBvc2l0aW9uIGZhbGxiYWNrIG9iamVjdCwgaWYgYW55LlxudmFyIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9vYmplY3R9IEEgU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQoXG4gIHRvcExldmVsVHlwZSxcbiAgdG9wTGV2ZWxUYXJnZXQsXG4gIHRvcExldmVsVGFyZ2V0SUQsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIGV2ZW50VHlwZTtcbiAgdmFyIGZhbGxiYWNrRGF0YTtcblxuICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudCkge1xuICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gIH0gZWxzZSBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICB9XG5cbiAgaWYgKCFldmVudFR5cGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSkge1xuICAgIC8vIFRoZSBjdXJyZW50IGNvbXBvc2l0aW9uIGlzIHN0b3JlZCBzdGF0aWNhbGx5IGFuZCBtdXN0IG5vdCBiZVxuICAgIC8vIG92ZXJ3cml0dGVuIHdoaWxlIGNvbXBvc2l0aW9uIGNvbnRpbnVlcy5cbiAgICBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbiAmJiBldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydCkge1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmdldFBvb2xlZCh0b3BMZXZlbFRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQpIHtcbiAgICAgIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICAgICAgZmFsbGJhY2tEYXRhID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmdldFBvb2xlZChcbiAgICBldmVudFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICBuYXRpdmVFdmVudFxuICApO1xuXG4gIGlmIChmYWxsYmFja0RhdGEpIHtcbiAgICAvLyBJbmplY3QgZGF0YSBnZW5lcmF0ZWQgZnJvbSBmYWxsYmFjayBwYXRoIGludG8gdGhlIHN5bnRoZXRpYyBldmVudC5cbiAgICAvLyBUaGlzIG1hdGNoZXMgdGhlIHByb3BlcnR5IG9mIG5hdGl2ZSBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlLlxuICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1c3RvbURhdGEgPSBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAoY3VzdG9tRGF0YSAhPT0gbnVsbCkge1xuICAgICAgZXZlbnQuZGF0YSA9IGN1c3RvbURhdGE7XG4gICAgfVxuICB9XG5cbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBzdHJpbmcgY29ycmVzcG9uZGluZyB0byB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAvKipcbiAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuICAgICAgICogSW4gV2Via2l0LCBwcmV2ZW50aW5nIGRlZmF1bHQgb24gYSBzcGFjZWJhciBgdGV4dElucHV0YCBldmVudFxuICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcbiAgICAgICAqIHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogVHJhY2tpbmcgYXQ6XG4gICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzU1MTAzXG4gICAgICAgKlxuICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuICAgICAgICogZXZlbnQgaXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgIGlmICh3aGljaCAhPT0gU1BBQ0VCQVJfQ09ERSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcblxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUZXh0SW5wdXQ6XG4gICAgICAvLyBSZWNvcmQgdGhlIGNoYXJhY3RlcnMgdG8gYmUgYWRkZWQgdG8gdGhlIERPTS5cbiAgICAgIHZhciBjaGFycyA9IG5hdGl2ZUV2ZW50LmRhdGE7XG5cbiAgICAgIC8vIElmIGl0J3MgYSBzcGFjZWJhciBjaGFyYWN0ZXIsIGFzc3VtZSB0aGF0IHdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkXG4gICAgICAvLyBpdCBhdCB0aGUga2V5cHJlc3MgbGV2ZWwgYW5kIGJhaWwgaW1tZWRpYXRlbHkuIEFuZHJvaWQgQ2hyb21lXG4gICAgICAvLyBkb2Vzbid0IGdpdmUgdXMga2V5Y29kZXMsIHNvIHdlIG5lZWQgdG8gYmxhY2tsaXN0IGl0LlxuICAgICAgaWYgKGNoYXJzID09PSBTUEFDRUJBUl9DSEFSICYmIGhhc1NwYWNlS2V5cHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGFycztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBGb3Igb3RoZXIgbmF0aXZlIGV2ZW50IHR5cGVzLCBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBGb3IgYnJvd3NlcnMgdGhhdCBkbyBub3QgcHJvdmlkZSB0aGUgYHRleHRJbnB1dGAgZXZlbnQsIGV4dHJhY3QgdGhlXG4gKiBhcHByb3ByaWF0ZSBzdHJpbmcgdG8gdXNlIGZvciBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmYWxsYmFjayBzdHJpbmcgZm9yIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBjb21wb3NpbmcgKElNRSkgYW5kIHVzaW5nIGEgZmFsbGJhY2sgdG8gZG8gc28sXG4gIC8vIHRyeSB0byBleHRyYWN0IHRoZSBjb21wb3NlZCBjaGFyYWN0ZXJzIGZyb20gdGhlIGZhbGxiYWNrIG9iamVjdC5cbiAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgIGlmIChcbiAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCB8fFxuICAgICAgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpXG4gICAgKSB7XG4gICAgICB2YXIgY2hhcnMgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnJlbGVhc2UoY3VycmVudENvbXBvc2l0aW9uKTtcbiAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG4gICAgICByZXR1cm4gY2hhcnM7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGFzdGU6XG4gICAgICAvLyBJZiBhIHBhc3RlIGV2ZW50IG9jY3VycyBhZnRlciBhIGtleXByZXNzLCB0aHJvdyBvdXQgdGhlIGlucHV0XG4gICAgICAvLyBjaGFycy4gUGFzdGUgZXZlbnRzIHNob3VsZCBub3QgbGVhZCB0byBCZWZvcmVJbnB1dCBldmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAvKipcbiAgICAgICAqIEFzIG9mIHYyNywgRmlyZWZveCBtYXkgZmlyZSBrZXlwcmVzcyBldmVudHMgZXZlbiB3aGVuIG5vIGNoYXJhY3RlclxuICAgICAgICogd2lsbCBiZSBpbnNlcnRlZC4gQSBmZXcgcG9zc2liaWxpdGllczpcbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgYDBgLiBBcnJvdyBrZXlzLCBFc2Mga2V5LCBldGMuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgbm8gY2hhciBpcyBhdmFpbGFibGUuXG4gICAgICAgKiAgIEV4OiAnQWx0R3IgKyBkYCBpbiBQb2xpc2guIFRoZXJlIGlzIG5vIG1vZGlmaWVkIGNoYXJhY3RlciBmb3JcbiAgICAgICAqICAgdGhpcyBrZXkgY29tYmluYXRpb24gYW5kIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICogICBkb2N1bWVudCwgYnV0IEZGIGZpcmVzIHRoZSBrZXlwcmVzcyBmb3IgY2hhciBjb2RlIGAxMDBgIGFueXdheS5cbiAgICAgICAqICAgTm8gYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IGEgY29tbWFuZCBjb21iaW5hdGlvbiBpc1xuICAgICAgICogICBiZWluZyB1c2VkLiBFeDogYENtZCtDYC4gTm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLCBhbmQgbm9cbiAgICAgICAqICAgYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICovXG4gICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2ggJiYgIWlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG4gICAgICByZXR1cm4gdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPyBudWxsIDogbmF0aXZlRXZlbnQuZGF0YTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRyYWN0IGEgU3ludGhldGljSW5wdXRFdmVudCBmb3IgYGJlZm9yZUlucHV0YCwgYmFzZWQgb24gZWl0aGVyIG5hdGl2ZVxuICogYHRleHRJbnB1dGAgb3IgZmFsbGJhY2sgYmVoYXZpb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9vYmplY3R9IEEgU3ludGhldGljSW5wdXRFdmVudC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQoXG4gIHRvcExldmVsVHlwZSxcbiAgdG9wTGV2ZWxUYXJnZXQsXG4gIHRvcExldmVsVGFyZ2V0SUQsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIGNoYXJzO1xuXG4gIGlmIChjYW5Vc2VUZXh0SW5wdXRFdmVudCkge1xuICAgIGNoYXJzID0gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBjaGFycyA9IGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfVxuXG4gIC8vIElmIG5vIGNoYXJhY3RlcnMgYXJlIGJlaW5nIGluc2VydGVkLCBubyBCZWZvcmVJbnB1dCBldmVudCBzaG91bGRcbiAgLy8gYmUgZmlyZWQuXG4gIGlmICghY2hhcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0lucHV0RXZlbnQuZ2V0UG9vbGVkKFxuICAgIGV2ZW50VHlwZXMuYmVmb3JlSW5wdXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICBuYXRpdmVFdmVudFxuICApO1xuXG4gIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgb25CZWZvcmVJbnB1dGAgZXZlbnQgdG8gbWF0Y2hcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1LyNldmVudHMtaW5wdXRldmVudHMuXG4gKlxuICogVGhpcyBldmVudCBwbHVnaW4gaXMgYmFzZWQgb24gdGhlIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudFxuICogYXZhaWxhYmxlIGluIENocm9tZSwgU2FmYXJpLCBPcGVyYSwgYW5kIElFLiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyXG4gKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG4gKlxuICogYGJlZm9yZUlucHV0YCBpcyBzcGVjJ2QgYnV0IG5vdCBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlcnMsIGFuZFxuICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG4gKiBhY3R1YWxseSBiZWVuIGFkZGVkLCBjb250cmFyeSB0byB0aGUgc3BlYy4gVGh1cywgYHRleHRJbnB1dGAgaXMgdGhlIGJlc3RcbiAqIGF2YWlsYWJsZSBldmVudCB0byBpZGVudGlmeSB0aGUgY2hhcmFjdGVycyB0aGF0IGhhdmUgYWN0dWFsbHkgYmVlbiBpbnNlcnRlZFxuICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG4gKlxuICogVGhpcyBwbHVnaW4gaXMgYWxzbyByZXNwb25zaWJsZSBmb3IgZW1pdHRpbmcgYGNvbXBvc2l0aW9uYCBldmVudHMsIHRodXNcbiAqIGFsbG93aW5nIHVzIHRvIHNoYXJlIGNvbXBvc2l0aW9uIGZhbGxiYWNrIGNvZGUgZm9yIGJvdGggYGJlZm9yZUlucHV0YCBhbmRcbiAqIGBjb21wb3NpdGlvbmAgZXZlbnQgdHlwZXMuXG4gKi9cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgbmF0aXZlRXZlbnRcbiAgKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KFxuICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgKSxcbiAgICAgIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KFxuICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgKVxuICAgIF07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmVmb3JlSW5wdXRFdmVudFBsdWdpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NDb3JlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogVGhlIENTU0NvcmUgbW9kdWxlIHNwZWNpZmllcyB0aGUgQVBJIChhbmQgaW1wbGVtZW50cyBtb3N0IG9mIHRoZSBtZXRob2RzKVxuICogdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIGRlYWxpbmcgd2l0aCB0aGUgZGlzcGxheSBvZiBlbGVtZW50cyAodmlhIHRoZWlyXG4gKiBDU1MgY2xhc3NlcyBhbmQgdmlzaWJpbGl0eSBvbiBzY3JlZW4uIEl0IGlzIGFuIEFQSSBmb2N1c2VkIG9uIG11dGF0aW5nIHRoZVxuICogZGlzcGxheSBhbmQgbm90IHJlYWRpbmcgaXQgYXMgbm8gbG9naWNhbCBzdGF0ZSBzaG91bGQgYmUgZW5jb2RlZCBpbiB0aGVcbiAqIGRpc3BsYXkgb2YgZWxlbWVudHMuXG4gKi9cblxudmFyIENTU0NvcmUgPSB7XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGNsYXNzIHBhc3NlZCBpbiB0byB0aGUgZWxlbWVudCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgaGF2ZSBpdC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHNldCB0aGUgY2xhc3Mgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSxcbiAgICAgICdDU1NDb3JlLmFkZENsYXNzIHRha2VzIG9ubHkgYSBzaW5nbGUgY2xhc3MgbmFtZS4gXCIlc1wiIGNvbnRhaW5zICcgK1xuICAgICAgJ211bHRpcGxlIGNsYXNzZXMuJywgY2xhc3NOYW1lXG4gICAgKSA6IGludmFyaWFudCghL1xccy8udGVzdChjbGFzc05hbWUpKSk7XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKCFDU1NDb3JlLmhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGNsYXNzIHBhc3NlZCBpbiBmcm9tIHRoZSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIGNsYXNzIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzc05hbWVcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gdGhlIGVsZW1lbnQgcGFzc2VkIGluXG4gICAqL1xuICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICEvXFxzLy50ZXN0KGNsYXNzTmFtZSksXG4gICAgICAnQ1NTQ29yZS5yZW1vdmVDbGFzcyB0YWtlcyBvbmx5IGEgc2luZ2xlIGNsYXNzIG5hbWUuIFwiJXNcIiBjb250YWlucyAnICtcbiAgICAgICdtdWx0aXBsZSBjbGFzc2VzLicsIGNsYXNzTmFtZVxuICAgICkgOiBpbnZhcmlhbnQoIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkpO1xuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChDU1NDb3JlLmhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZVxuICAgICAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc05hbWUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKVxuICAgICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJykgLy8gbXVsdGlwbGUgc3BhY2VzIHRvIG9uZVxuICAgICAgICAgIC5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7IC8vIHRyaW0gdGhlIGVuZHNcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBhZGQgb3IgcmVtb3ZlIGEgY2xhc3MgZnJvbSBhbiBlbGVtZW50IGJhc2VkIG9uIGEgY29uZGl0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBjbGFzcyBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3NOYW1lXG4gICAqIEBwYXJhbSB7Kn0gYm9vbCBjb25kaXRpb24gdG8gd2hldGhlciB0byBhZGQgb3IgcmVtb3ZlIHRoZSBjbGFzc1xuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIGNvbmRpdGlvbkNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGJvb2wpIHtcbiAgICByZXR1cm4gKGJvb2wgPyBDU1NDb3JlLmFkZENsYXNzIDogQ1NTQ29yZS5yZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgfSxcblxuICAvKipcbiAgICogVGVzdHMgd2hldGhlciB0aGUgZWxlbWVudCBoYXMgdGhlIGNsYXNzIHNwZWNpZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtET01Ob2RlfERPTVdpbmRvd30gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIGNsYXNzIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzc05hbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZWxlbWVudCBoYXMgdGhlIGNsYXNzLCBmYWxzZSBpZiBub3RcbiAgICovXG4gIGhhc0NsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSxcbiAgICAgICdDU1MuaGFzQ2xhc3MgdGFrZXMgb25seSBhIHNpbmdsZSBjbGFzcyBuYW1lLidcbiAgICApIDogaW52YXJpYW50KCEvXFxzLy50ZXN0KGNsYXNzTmFtZSkpKTtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gKCcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgPiAtMTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU0NvcmU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcblxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlLFxuICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH1cbn07XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcbiAgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zOiBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlPcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZShcIi4vY2FtZWxpemVTdHlsZU5hbWVcIik7XG52YXIgZGFuZ2Vyb3VzU3R5bGVWYWx1ZSA9IHJlcXVpcmUoXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIik7XG52YXIgaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZShcIi4vaHlwaGVuYXRlU3R5bGVOYW1lXCIpO1xudmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZShcIi4vbWVtb2l6ZVN0cmluZ09ubHlcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZVN0cmluZ09ubHkoZnVuY3Rpb24oc3R5bGVOYW1lKSB7XG4gIHJldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKTtcbn0pO1xuXG52YXIgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ2Nzc0Zsb2F0JztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gIH1cbn1cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAvLyAnbXNUcmFuc2Zvcm0nIGlzIGNvcnJlY3QsIGJ1dCB0aGUgb3RoZXIgcHJlZml4ZXMgc2hvdWxkIGJlIGNhcGl0YWxpemVkXG4gIHZhciBiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4gPSAvXig/OndlYmtpdHxtb3p8bylbQS1aXS87XG5cbiAgLy8gc3R5bGUgdmFsdWVzIHNob3VsZG4ndCBjb250YWluIGEgc2VtaWNvbG9uXG4gIHZhciBiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4gPSAvO1xccyokLztcblxuICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuICB2YXIgd2FybmVkU3R5bGVWYWx1ZXMgPSB7fTtcblxuICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICAnVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLFxuICAgICAgbmFtZSxcbiAgICAgIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpXG4gICAgKSA6IG51bGwpO1xuICB9O1xuXG4gIHZhciB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICAnVW5zdXBwb3J0ZWQgdmVuZG9yLXByZWZpeGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JyxcbiAgICAgIG5hbWUsXG4gICAgICBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKVxuICAgICkgOiBudWxsKTtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpICYmIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSA9IHRydWU7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdTdHlsZSBwcm9wZXJ0eSB2YWx1ZXMgc2hvdWxkblxcJ3QgY29udGFpbiBhIHNlbWljb2xvbi4gJyArXG4gICAgICAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLFxuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLCAnJylcbiAgICApIDogbnVsbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKG5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuLnRlc3QobmFtZSkpIHtcbiAgICAgIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIENTUyBwcm9wZXJ0aWVzLlxuICovXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGEgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIGZvciB1c2UgYXMgaW5saW5lIHN0eWxlczpcbiAgICpcbiAgICogICA+IGNyZWF0ZU1hcmt1cEZvclN0eWxlcyh7d2lkdGg6ICcyMDBweCcsIGhlaWdodDogMH0pXG4gICAqICAgXCJ3aWR0aDoyMDBweDtoZWlnaHQ6MDtcIlxuICAgKlxuICAgKiBVbmRlZmluZWQgdmFsdWVzIGFyZSBpZ25vcmVkIHNvIHRoYXQgZGVjbGFyYXRpdmUgcHJvZ3JhbW1pbmcgaXMgZWFzaWVyLlxuICAgKiBUaGUgcmVzdWx0IHNob3VsZCBiZSBIVE1MLWVzY2FwZWQgYmVmb3JlIGluc2VydGlvbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICogQHJldHVybiB7P3N0cmluZ31cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclN0eWxlczogZnVuY3Rpb24oc3R5bGVzKSB7XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBzdHlsZXNbc3R5bGVOYW1lXTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgc2VyaWFsaXplZCArPSBwcm9jZXNzU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUpICsgJzsnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgbXVsdGlwbGUgc3R5bGVzIG9uIGEgbm9kZS4gIElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkIGFzXG4gICAqICcnIChlbXB0eSBzdHJpbmcpLCB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICAgKi9cbiAgc2V0VmFsdWVGb3JTdHlsZXM6IGZ1bmN0aW9uKG5vZGUsIHN0eWxlcykge1xuICAgIHZhciBzdHlsZSA9IG5vZGUuc3R5bGU7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSk7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSk7XG4gICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnKSB7XG4gICAgICAgIHN0eWxlTmFtZSA9IHN0eWxlRmxvYXRBY2Nlc3NvcjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4cGFuc2lvbiA9IENTU1Byb3BlcnR5LnNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZU5hbWVdO1xuICAgICAgICBpZiAoZXhwYW5zaW9uKSB7XG4gICAgICAgICAgLy8gU2hvcnRoYW5kIHByb3BlcnR5IHRoYXQgSUU4IHdvbid0IGxpa2UgdW5zZXR0aW5nLCBzbyB1bnNldCBlYWNoXG4gICAgICAgICAgLy8gY29tcG9uZW50IHRvIHBsYWNhdGUgaXRcbiAgICAgICAgICBmb3IgKHZhciBpbmRpdmlkdWFsU3R5bGVOYW1lIGluIGV4cGFuc2lvbikge1xuICAgICAgICAgICAgc3R5bGVbaW5kaXZpZHVhbFN0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENhbGxiYWNrUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbn1cblxuYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlOiBmdW5jdGlvbihjYWxsYmFjaywgY29udGV4dCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCBbXTtcbiAgICB0aGlzLl9jb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzIHx8IFtdO1xuICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB0aGlzLl9jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGFsbCBlbnF1ZXVlZCBjYWxsYmFja3MgYW5kIGNsZWFycyB0aGUgcXVldWUuIFRoaXMgaXMgaW52b2tlZCBhZnRlclxuICAgKiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3IgdXBkYXRlZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnlBbGw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoLFxuICAgICAgICAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJ1xuICAgICAgKSA6IGludmFyaWFudChjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgpKTtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwoY29udGV4dHNbaV0pO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICBjb250ZXh0cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpbnRlcm5hbCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxsYmFja1F1ZXVlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENoYW5nZUV2ZW50UGx1Z2luXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKFwiLi9pc1RleHRJbnB1dEVsZW1lbnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgY2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNoYW5nZTogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNoYW5nZUNhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ2xpY2ssXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZVxuICAgIF1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgSUUgc2hpbXNcbiAqL1xudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNoYW5nZWAgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZWxlbSkge1xuICByZXR1cm4gKFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdTRUxFQ1QnIHx8XG4gICAgKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgZWxlbS50eXBlID09PSAnZmlsZScpXG4gICk7XG59XG5cbnZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gU2VlIGBoYW5kbGVDaGFuZ2VgIGNvbW1lbnQgYmVsb3dcbiAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKFxuICAgICghKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA4KVxuICApO1xufVxuXG5mdW5jdGlvbiBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICBldmVudFR5cGVzLmNoYW5nZSxcbiAgICBhY3RpdmVFbGVtZW50SUQsXG4gICAgbmF0aXZlRXZlbnRcbiAgKTtcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblxuICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cbiAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHJ1bkV2ZW50SW5CYXRjaCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZXZlbnQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xufVxuXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2hhbmdlKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gIH1cbn1cblxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgaW5wdXRgIGV2ZW50XG4gKi9cbnZhciBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU5IGNsYWltcyB0byBzdXBwb3J0IHRoZSBpbnB1dCBldmVudCBidXQgZmFpbHMgdG8gdHJpZ2dlciBpdCB3aGVuXG4gIC8vIGRlbGV0aW5nIHRleHQsIHNvIHdlIGlnbm9yZSBpdHMgaW5wdXQgZXZlbnRzXG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2lucHV0JykgJiYgKFxuICAgICghKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KVxuICApO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgUmVwbGFjZW1lbnQgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGB2YWx1ZWAgcHJvcGVydHkgdGhhdCBnZXRzXG4gKiBzZXQgb24gdGhlIGFjdGl2ZSBlbGVtZW50LlxuICovXG52YXIgbmV3VmFsdWVQcm9wID0gIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYWN0aXZlRWxlbWVudFZhbHVlUHJvcC5nZXQuY2FsbCh0aGlzKTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAvLyBDYXN0IHRvIGEgc3RyaW5nIHNvIHdlIGNhbiBkbyBlcXVhbGl0eSBjaGVja3MuXG4gICAgYWN0aXZlRWxlbWVudFZhbHVlID0gJycgKyB2YWw7XG4gICAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcC5zZXQuY2FsbCh0aGlzLCB2YWwpO1xuICB9XG59O1xuXG4vKipcbiAqIChGb3Igb2xkIElFLikgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcbiAqIGFuZCBvdmVycmlkZSB0aGUgdmFsdWUgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gZGlzdGluZ3Vpc2ggdXNlciBldmVudHMgZnJvbVxuICogdmFsdWUgY2hhbmdlcyBpbiBKUy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SUQpIHtcbiAgYWN0aXZlRWxlbWVudCA9IHRhcmdldDtcbiAgYWN0aXZlRWxlbWVudElEID0gdGFyZ2V0SUQ7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgdGFyZ2V0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICAndmFsdWUnXG4gICk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFjdGl2ZUVsZW1lbnQsICd2YWx1ZScsIG5ld1ZhbHVlUHJvcCk7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG59XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBSZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUgY3VycmVudGx5LXRyYWNrZWQgZWxlbWVudCxcbiAqIGlmIGFueSBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBkZWxldGUgcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHByb3BlcnR5IGRlZmluaXRpb25cbiAgZGVsZXRlIGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG5cbiAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBudWxsO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgSGFuZGxlcyBhIHByb3BlcnR5Y2hhbmdlIGV2ZW50LCBzZW5kaW5nIGEgYGNoYW5nZWAgZXZlbnQgaWZcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYWN0aXZlIGVsZW1lbnQgaGFzIGNoYW5nZWQuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVByb3BlcnR5Q2hhbmdlKG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgIT09ICd2YWx1ZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHZhbHVlID0gbmF0aXZlRXZlbnQuc3JjRWxlbWVudC52YWx1ZTtcbiAgaWYgKHZhbHVlID09PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gdmFsdWU7XG5cbiAgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCk7XG59XG5cbi8qKlxuICogSWYgYSBgY2hhbmdlYCBldmVudCBzaG91bGQgYmUgZmlyZWQsIHJldHVybnMgdGhlIHRhcmdldCdzIElELlxuICovXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvcklucHV0RXZlbnQoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCkge1xuICAgIC8vIEluIG1vZGVybiBicm93c2VycyAoaS5lLiwgbm90IElFOCBvciBJRTkpLCB0aGUgaW5wdXQgZXZlbnQgaXMgZXhhY3RseVxuICAgIC8vIHdoYXQgd2Ugd2FudCBzbyBmYWxsIHRocm91Z2ggaGVyZSBhbmQgdHJpZ2dlciBhbiBhYnN0cmFjdCBldmVudFxuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5cbi8vIEZvciBJRTggYW5kIElFOS5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRShcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gSW4gSUU4LCB3ZSBjYW4gY2FwdHVyZSBhbG1vc3QgYWxsIC52YWx1ZSBjaGFuZ2VzIGJ5IGFkZGluZyBhXG4gICAgLy8gcHJvcGVydHljaGFuZ2UgaGFuZGxlciBhbmQgbG9va2luZyBmb3IgZXZlbnRzIHdpdGggcHJvcGVydHlOYW1lXG4gICAgLy8gZXF1YWwgdG8gJ3ZhbHVlJ1xuICAgIC8vIEluIElFOSwgcHJvcGVydHljaGFuZ2UgZmlyZXMgZm9yIG1vc3QgaW5wdXQgZXZlbnRzIGJ1dCBpcyBidWdneSBhbmRcbiAgICAvLyBkb2Vzbid0IGZpcmUgd2hlbiB0ZXh0IGlzIGRlbGV0ZWQsIGJ1dCBjb252ZW5pZW50bHksIHNlbGVjdGlvbmNoYW5nZVxuICAgIC8vIGFwcGVhcnMgdG8gZmlyZSBpbiBhbGwgb2YgdGhlIHJlbWFpbmluZyBjYXNlcyBzbyB3ZSBjYXRjaCB0aG9zZSBhbmRcbiAgICAvLyBmb3J3YXJkIHRoZSBldmVudCBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICAvLyBJbiBlaXRoZXIgY2FzZSwgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIHRoZSBldmVudCBoYW5kbGVyIGlmIHRoZSB2YWx1ZVxuICAgIC8vIGlzIGNoYW5nZWQgZnJvbSBKUyBzbyB3ZSByZWRlZmluZSBhIHNldHRlciBmb3IgYC52YWx1ZWAgdGhhdCB1cGRhdGVzXG4gICAgLy8gb3VyIGFjdGl2ZUVsZW1lbnRWYWx1ZSB2YXJpYWJsZSwgYWxsb3dpbmcgdXMgdG8gaWdub3JlIHRob3NlIGNoYW5nZXNcbiAgICAvL1xuICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2VcbiAgICAvLyBtaXNzZWQgYSBibHVyIGV2ZW50IHNvbWVob3cuXG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgICBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRShcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZSB8fFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwIHx8XG4gICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93bikge1xuICAgIC8vIE9uIHRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQsIHRoZSB0YXJnZXQgaXMganVzdCBkb2N1bWVudCB3aGljaCBpc24ndFxuICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuICAgIC8vXG4gICAgLy8gOTklIG9mIHRoZSB0aW1lLCBrZXlkb3duIGFuZCBrZXl1cCBhcmVuJ3QgbmVjZXNzYXJ5LiBJRTggZmFpbHMgdG8gZmlyZVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG4gICAgLy8gc2NyaXB0IGFuZCBmaXJlcyBvbmx5IGtleWRvd24sIGtleXByZXNzLCBrZXl1cC4gQ2F0Y2hpbmcga2V5dXAgdXN1YWxseVxuICAgIC8vIGdldHMgaXQgYW5kIGNhdGNoaW5nIGtleWRvd24gbGV0cyB1cyBmaXJlIGFuIGV2ZW50IGZvciB0aGUgZmlyc3RcbiAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcbiAgICAvLyBiZWZvcmUgdGhlIHNlY29uZCBrZXlzdHJva2UpLiBPdGhlciBpbnB1dCBtZXRob2RzIChlLmcuLCBwYXN0ZSkgc2VlbSB0b1xuICAgIC8vIGZpcmUgc2VsZWN0aW9uY2hhbmdlIG5vcm1hbGx5LlxuICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQudmFsdWUgIT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50SUQ7XG4gICAgfVxuICB9XG59XG5cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNsaWNrYCBldmVudFxuICovXG5mdW5jdGlvbiBzaG91bGRVc2VDbGlja0V2ZW50KGVsZW0pIHtcbiAgLy8gVXNlIHRoZSBgY2xpY2tgIGV2ZW50IHRvIGRldGVjdCBjaGFuZ2VzIHRvIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMuXG4gIC8vIFRoaXMgYXBwcm9hY2ggd29ya3MgYWNyb3NzIGFsbCBicm93c2Vycywgd2hlcmVhcyBgY2hhbmdlYCBkb2VzIG5vdCBmaXJlXG4gIC8vIHVudGlsIGBibHVyYCBpbiBJRTguXG4gIHJldHVybiAoXG4gICAgZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJlxuICAgIChlbGVtLnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbS50eXBlID09PSAncmFkaW8nKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDbGljaykge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25DaGFuZ2VgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBjaGFuZ2UgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy4gVGhpcyBldmVudCBmaXJlcyBhdCBhIHRpbWUgd2hlbiBpdCdzIHBvc3NpYmxlIHRvXG4gKiBjaGFuZ2UgdGhlIGVsZW1lbnQncyB2YWx1ZSB3aXRob3V0IHNlZWluZyBhIGZsaWNrZXIuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gc2VsZWN0XG4gKi9cbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcblxuICAgIHZhciBnZXRUYXJnZXRJREZ1bmMsIGhhbmRsZUV2ZW50RnVuYztcbiAgICBpZiAoc2hvdWxkVXNlQ2hhbmdlRXZlbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBpZiAoZG9lc0NoYW5nZUV2ZW50QnViYmxlKSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFODtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUU7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGdldFRhcmdldElERnVuYykge1xuICAgICAgdmFyIHRhcmdldElEID0gZ2V0VGFyZ2V0SURGdW5jKFxuICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgICB0b3BMZXZlbFRhcmdldElEXG4gICAgICApO1xuICAgICAgaWYgKHRhcmdldElEKSB7XG4gICAgICAgIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgICAgICBldmVudFR5cGVzLmNoYW5nZSxcbiAgICAgICAgICB0YXJnZXRJRCxcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApO1xuICAgICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZUV2ZW50RnVuYykge1xuICAgICAgaGFuZGxlRXZlbnRGdW5jKFxuICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgICB0b3BMZXZlbFRhcmdldElEXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5nZUV2ZW50UGx1Z2luO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENsaWVudFJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHRSZWFjdFJvb3RJbmRleCA9IDA7XG5cbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXh0UmVhY3RSb290SW5kZXgrKztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01DaGlsZHJlbk9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRGFuZ2VyID0gcmVxdWlyZShcIi4vRGFuZ2VyXCIpO1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIik7XG5cbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoXCIuL3NldFRleHRDb250ZW50XCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbnNlcnRzIGBjaGlsZE5vZGVgIGFzIGEgY2hpbGQgb2YgYHBhcmVudE5vZGVgIGF0IHRoZSBgaW5kZXhgLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50Tm9kZSBQYXJlbnQgbm9kZSBpbiB3aGljaCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNoaWxkTm9kZSBDaGlsZCBub2RlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBpbmRleCkge1xuICAvLyBCeSBleHBsb2l0aW5nIGFycmF5cyByZXR1cm5pbmcgYHVuZGVmaW5lZGAgZm9yIGFuIHVuZGVmaW5lZCBpbmRleCwgd2UgY2FuXG4gIC8vIHJlbHkgZXhjbHVzaXZlbHkgb24gYGluc2VydEJlZm9yZShub2RlLCBudWxsKWAgaW5zdGVhZCBvZiBhbHNvIHVzaW5nXG4gIC8vIGBhcHBlbmRDaGlsZChub2RlKWAuIEhvd2V2ZXIsIHVzaW5nIGB1bmRlZmluZWRgIGlzIG5vdCBhbGxvd2VkIGJ5IGFsbFxuICAvLyBicm93c2VycyBzbyB3ZSBtdXN0IHJlcGxhY2UgaXQgd2l0aCBgbnVsbGAuXG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgIGNoaWxkTm9kZSxcbiAgICBwYXJlbnROb2RlLmNoaWxkTm9kZXNbaW5kZXhdIHx8IG51bGxcbiAgKTtcbn1cblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciB1cGRhdGluZyB3aXRoIERPTSBjaGlsZHJlbi5cbiAqL1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHtcblxuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwLFxuXG4gIHVwZGF0ZVRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy4gVGhlXG4gICAqIHVwZGF0ZSBjb25maWd1cmF0aW9ucyBhcmUgZWFjaCBleHBlY3RlZCB0byBoYXZlIGEgYHBhcmVudE5vZGVgIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PG9iamVjdD59IHVwZGF0ZXMgTGlzdCBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NVcGRhdGVzOiBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXBMaXN0KSB7XG4gICAgdmFyIHVwZGF0ZTtcbiAgICAvLyBNYXBwaW5nIGZyb20gcGFyZW50IElEcyB0byBpbml0aWFsIGNoaWxkIG9yZGVyaW5ncy5cbiAgICB2YXIgaW5pdGlhbENoaWxkcmVuID0gbnVsbDtcbiAgICAvLyBMaXN0IG9mIGNoaWxkcmVuIHRoYXQgd2lsbCBiZSBtb3ZlZCBvciByZW1vdmVkLlxuICAgIHZhciB1cGRhdGVkQ2hpbGRyZW4gPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cGRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1cGRhdGUgPSB1cGRhdGVzW2ldO1xuICAgICAgaWYgKHVwZGF0ZS50eXBlID09PSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HIHx8XG4gICAgICAgICAgdXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKSB7XG4gICAgICAgIHZhciB1cGRhdGVkSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICB2YXIgdXBkYXRlZENoaWxkID0gdXBkYXRlLnBhcmVudE5vZGUuY2hpbGROb2Rlc1t1cGRhdGVkSW5kZXhdO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSB1cGRhdGUucGFyZW50SUQ7XG5cbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICB1cGRhdGVkQ2hpbGQsXG4gICAgICAgICAgJ3Byb2Nlc3NVcGRhdGVzKCk6IFVuYWJsZSB0byBmaW5kIGNoaWxkICVzIG9mIGVsZW1lbnQuIFRoaXMgJyArXG4gICAgICAgICAgJ3Byb2JhYmx5IG1lYW5zIHRoZSBET00gd2FzIHVuZXhwZWN0ZWRseSBtdXRhdGVkIChlLmcuLCBieSB0aGUgJyArXG4gICAgICAgICAgJ2Jyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgJyArXG4gICAgICAgICAgJ25lc3RpbmcgdGFncyBsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgJyArXG4gICAgICAgICAgJ2luIGFuIDxzdmc+IHBhcmVudC4gVHJ5IGluc3BlY3RpbmcgdGhlIGNoaWxkIG5vZGVzIG9mIHRoZSBlbGVtZW50ICcgK1xuICAgICAgICAgICd3aXRoIFJlYWN0IElEIGAlc2AuJyxcbiAgICAgICAgICB1cGRhdGVkSW5kZXgsXG4gICAgICAgICAgcGFyZW50SURcbiAgICAgICAgKSA6IGludmFyaWFudCh1cGRhdGVkQ2hpbGQpKTtcblxuICAgICAgICBpbml0aWFsQ2hpbGRyZW4gPSBpbml0aWFsQ2hpbGRyZW4gfHwge307XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gPSBpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdIHx8IFtdO1xuICAgICAgICBpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdW3VwZGF0ZWRJbmRleF0gPSB1cGRhdGVkQ2hpbGQ7XG5cbiAgICAgICAgdXBkYXRlZENoaWxkcmVuID0gdXBkYXRlZENoaWxkcmVuIHx8IFtdO1xuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4ucHVzaCh1cGRhdGVkQ2hpbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZW5kZXJlZE1hcmt1cCA9IERhbmdlci5kYW5nZXJvdXNseVJlbmRlck1hcmt1cChtYXJrdXBMaXN0KTtcblxuICAgIC8vIFJlbW92ZSB1cGRhdGVkIGNoaWxkcmVuIGZpcnN0IHNvIHRoYXQgYHRvSW5kZXhgIGlzIGNvbnNpc3RlbnQuXG4gICAgaWYgKHVwZGF0ZWRDaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1cGRhdGVkQ2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodXBkYXRlZENoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHVwZGF0ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNba107XG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUDpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICByZW5kZXJlZE1hcmt1cFt1cGRhdGUubWFya3VwSW5kZXhdLFxuICAgICAgICAgICAgdXBkYXRlLnRvSW5kZXhcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkc6XG4gICAgICAgICAgaW5zZXJ0Q2hpbGRBdChcbiAgICAgICAgICAgIHVwZGF0ZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgaW5pdGlhbENoaWxkcmVuW3VwZGF0ZS5wYXJlbnRJRF1bdXBkYXRlLmZyb21JbmRleF0sXG4gICAgICAgICAgICB1cGRhdGUudG9JbmRleFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5UOlxuICAgICAgICAgIHNldFRleHRDb250ZW50KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICB1cGRhdGUudGV4dENvbnRlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFOlxuICAgICAgICAgIC8vIEFscmVhZHkgcmVtb3ZlZCBieSB0aGUgZm9yLWxvb3AgYWJvdmUuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NQ2hpbGRyZW5PcGVyYXRpb25zO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG5mdW5jdGlvbiBjaGVja01hc2sodmFsdWUsIGJpdG1hc2spIHtcbiAgcmV0dXJuICh2YWx1ZSAmIGJpdG1hc2spID09PSBiaXRtYXNrO1xufVxuXG52YXIgRE9NUHJvcGVydHlJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCwgY2FtZWxjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBhIGNvbmZpZ3VyYXRpb24gdGhhdFxuICAgKiBzcGVjaWZpZXMgaG93IHRoZSBhc3NvY2lhdGVkIERPTSBwcm9wZXJ0eSBzaG91bGQgYmUgYWNjZXNzZWQgb3IgcmVuZGVyZWQuXG4gICAqL1xuICBNVVNUX1VTRV9BVFRSSUJVVEU6IDB4MSxcbiAgTVVTVF9VU0VfUFJPUEVSVFk6IDB4MixcbiAgSEFTX1NJREVfRUZGRUNUUzogMHg0LFxuICBIQVNfQk9PTEVBTl9WQUxVRTogMHg4LFxuICBIQVNfTlVNRVJJQ19WQUxVRTogMHgxMCxcbiAgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU6IDB4MjAgfCAweDEwLFxuICBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFOiAweDQwLFxuXG4gIC8qKlxuICAgKiBJbmplY3Qgc29tZSBzcGVjaWFsaXplZCBrbm93bGVkZ2UgYWJvdXQgdGhlIERPTS4gVGhpcyB0YWtlcyBhIGNvbmZpZyBvYmplY3RcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiB0aGF0IGdpdmVuIGFuIGF0dHJpYnV0ZSBuYW1lIHdpbGwgcmV0dXJuIHRydWVcbiAgICogaWYgaXQgY2FuIGJlIGluc2VydGVkIGludG8gdGhlIERPTSB2ZXJiYXRpbS4gVXNlZnVsIGZvciBkYXRhLSogb3IgYXJpYS0qXG4gICAqIGF0dHJpYnV0ZXMgd2hlcmUgaXQncyBpbXBvc3NpYmxlIHRvIGVudW1lcmF0ZSBhbGwgb2YgdGhlIHBvc3NpYmxlXG4gICAqIGF0dHJpYnV0ZSBuYW1lcyxcbiAgICpcbiAgICogUHJvcGVydGllczogb2JqZWN0IG1hcHBpbmcgRE9NIHByb3BlcnR5IG5hbWUgdG8gb25lIG9mIHRoZVxuICAgKiBET01Qcm9wZXJ0eUluamVjdGlvbiBjb25zdGFudHMgb3IgbnVsbC4gSWYgeW91ciBhdHRyaWJ1dGUgaXNuJ3QgaW4gaGVyZSxcbiAgICogaXQgd29uJ3QgZ2V0IHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAgICpcbiAgICogRE9NQXR0cmlidXRlTmFtZXM6IG9iamVjdCBtYXBwaW5nIFJlYWN0IGF0dHJpYnV0ZSBuYW1lIHRvIHRoZSBET01cbiAgICogYXR0cmlidXRlIG5hbWUuIEF0dHJpYnV0ZSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgKipsb3dlcmNhc2UqKlxuICAgKiBub3JtYWxpemVkIG5hbWUuXG4gICAqXG4gICAqIERPTVByb3BlcnR5TmFtZXM6IHNpbWlsYXIgdG8gRE9NQXR0cmlidXRlTmFtZXMgYnV0IGZvciBET00gcHJvcGVydGllcy5cbiAgICogUHJvcGVydHkgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NTXV0YXRpb25NZXRob2RzOiBQcm9wZXJ0aWVzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG11dGF0aW9uIG1ldGhvZHMuIElmXG4gICAqIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLCB0aGUgbXV0YXRpb24gbWV0aG9kIHNob3VsZCB1bnNldCB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkb21Qcm9wZXJ0eUNvbmZpZyB0aGUgY29uZmlnIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICovXG4gIGluamVjdERPTVByb3BlcnR5Q29uZmlnOiBmdW5jdGlvbihkb21Qcm9wZXJ0eUNvbmZpZykge1xuICAgIHZhciBQcm9wZXJ0aWVzID0gZG9tUHJvcGVydHlDb25maWcuUHJvcGVydGllcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NUHJvcGVydHlOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXMgfHwge307XG4gICAgdmFyIERPTU11dGF0aW9uTWV0aG9kcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTU11dGF0aW9uTWV0aG9kcyB8fCB7fTtcblxuICAgIGlmIChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSkge1xuICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goXG4gICAgICAgIGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlXG4gICAgICApO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIFByb3BlcnRpZXMpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICFET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSksXG4gICAgICAgICdpbmplY3RET01Qcm9wZXJ0eUNvbmZpZyguLi4pOiBZb3VcXCdyZSB0cnlpbmcgdG8gaW5qZWN0IERPTSBwcm9wZXJ0eSAnICtcbiAgICAgICAgJ1xcJyVzXFwnIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gaW5qZWN0ZWQuIFlvdSBtYXkgYmUgYWNjaWRlbnRhbGx5ICcgK1xuICAgICAgICAnaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgJyArXG4gICAgICAgICdpbmplY3RpbmcgdHdvIGNvbmZpZ3MgdGhhdCBoYXZlIGNvbmZsaWN0aW5nIHByb3BlcnR5IG5hbWVzLicsXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApIDogaW52YXJpYW50KCFET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpKTtcblxuICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcE5hbWVdID0gdHJ1ZTtcblxuICAgICAgdmFyIGxvd2VyQ2FzZWQgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbYXR0cmlidXRlTmFtZV0gPSBwcm9wTmFtZTtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtwcm9wTmFtZV0gPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtwcm9wTmFtZV0gPSBsb3dlckNhc2VkO1xuICAgICAgfVxuXG4gICAgICBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbcHJvcE5hbWVdID1cbiAgICAgICAgRE9NUHJvcGVydHlOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgP1xuICAgICAgICAgIERPTVByb3BlcnR5TmFtZXNbcHJvcE5hbWVdIDpcbiAgICAgICAgICBwcm9wTmFtZTtcblxuICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbcHJvcE5hbWVdID0gRE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wQ29uZmlnID0gUHJvcGVydGllc1twcm9wTmFtZV07XG4gICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEUpO1xuICAgICAgRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWSk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1twcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUyk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNCb29sZWFuVmFsdWVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpO1xuXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtwcm9wTmFtZV0gfHxcbiAgICAgICAgICAhRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSxcbiAgICAgICAgJ0RPTVByb3BlcnR5OiBDYW5ub3QgcmVxdWlyZSB1c2luZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHk6ICVzJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdIHx8XG4gICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdKSk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG4gICAgICAgICAgIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSxcbiAgICAgICAgJ0RPTVByb3BlcnR5OiBQcm9wZXJ0aWVzIHRoYXQgaGF2ZSBzaWRlIGVmZmVjdHMgbXVzdCB1c2UgcHJvcGVydHk6ICVzJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSB8fFxuICAgICAgICAhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdKSk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhIURPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gK1xuICAgICAgICAgICEhRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW3Byb3BOYW1lXSA8PSAxLFxuICAgICAgICAnRE9NUHJvcGVydHk6IFZhbHVlIGNhbiBiZSBvbmUgb2YgYm9vbGVhbiwgb3ZlcmxvYWRlZCBib29sZWFuLCBvciAnICtcbiAgICAgICAgJ251bWVyaWMgdmFsdWUsIGJ1dCBub3QgYSBjb21iaW5hdGlvbjogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudCghIURPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gK1xuICAgICAgICAhIURPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0gK1xuICAgICAgICAhIURPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdIDw9IDEpKTtcbiAgICB9XG4gIH1cbn07XG52YXIgZGVmYXVsdFZhbHVlQ2FjaGUgPSB7fTtcblxuLyoqXG4gKiBET01Qcm9wZXJ0eSBleHBvcnRzIGxvb2t1cCBvYmplY3RzIHRoYXQgY2FuIGJlIHVzZWQgbGlrZSBmdW5jdGlvbnM6XG4gKlxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2lkJ11cbiAqICAgdHJ1ZVxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2Zvb2JhciddXG4gKiAgIHVuZGVmaW5lZFxuICpcbiAqIEFsdGhvdWdoIHRoaXMgbWF5IGJlIGNvbmZ1c2luZywgaXQgcGVyZm9ybXMgYmV0dGVyIGluIGdlbmVyYWwuXG4gKlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktZXhpc3RzXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1taXNzaW5nXG4gKi9cbnZhciBET01Qcm9wZXJ0eSA9IHtcblxuICBJRF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3RpZCcsXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGEgcHJvcGVydHkgbmFtZSBpcyBhIHN0YW5kYXJkIHByb3BlcnR5LlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaXNTdGFuZGFyZE5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHByb3BlcnR5IG5hbWVzIHRvIHRoZSBwcm9wZXJseSBjYXNlZCB2ZXJzaW9uLCB1c2VkXG4gICAqIHRvIHdhcm4gaW4gdGhlIGNhc2Ugb2YgbWlzc2luZyBwcm9wZXJ0aWVzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0UG9zc2libGVTdGFuZGFyZE5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBhdHRyaWJ1dGUgbmFtZXMgdGhhdCBkaWZmZXIuIEF0dHJpYnV0ZVxuICAgKiBuYW1lcyBhcmUgdXNlZCB3aGVuIHJlbmRlcmluZyBtYXJrdXAgb3Igd2l0aCBgKkF0dHJpYnV0ZSgpYC5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldEF0dHJpYnV0ZU5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBwcm9wZXJ0aWVzIG9uIERPTSBub2RlIGluc3RhbmNlcy5cbiAgICogKFRoaXMgaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IG11dGF0ZSBkdWUgdG8gZXh0ZXJuYWwgZmFjdG9ycy4pXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQcm9wZXJ0eU5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBtdXRhdGlvbiBtZXRob2RzLiBUaGlzIHdpbGwgb25seSBleGlzdCBpZlxuICAgKiBtdXRhdGlvbiBjYW5ub3QgYmUgc2V0IHNpbXBseSBieSB0aGUgcHJvcGVydHkgb3IgYHNldEF0dHJpYnV0ZSgpYC5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldE11dGF0aW9uTWV0aG9kOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBhY2Nlc3NlZCBhbmQgbXV0YXRlZCBhcyBhbiBvYmplY3QgcHJvcGVydHkuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBtdXN0VXNlQXR0cmlidXRlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBhY2Nlc3NlZCBhbmQgbXV0YXRlZCB1c2luZyBgKkF0dHJpYnV0ZSgpYC5cbiAgICogKFRoaXMgaW5jbHVkZXMgYW55dGhpbmcgdGhhdCBmYWlscyBgPHByb3BOYW1lPiBpbiA8ZWxlbWVudD5gLilcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIG11c3RVc2VQcm9wZXJ0eToge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHNldHRpbmcgYSB2YWx1ZSBjYXVzZXMgc2lkZSBlZmZlY3RzIHN1Y2ggYXMgdHJpZ2dlcmluZ1xuICAgKiByZXNvdXJjZXMgdG8gYmUgbG9hZGVkIG9yIHRleHQgc2VsZWN0aW9uIGNoYW5nZXMuIFdlIG11c3QgZW5zdXJlIHRoYXRcbiAgICogdGhlIHZhbHVlIGlzIG9ubHkgc2V0IGlmIGl0IGhhcyBjaGFuZ2VkLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzU2lkZUVmZmVjdHM6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc0Jvb2xlYW5WYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhXG4gICAqIG51bWVyaWMgYW5kIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzTnVtZXJpY1ZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBwb3NpdGl2ZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgcG9zaXRpdmVcbiAgICogbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS4gUmVtb3ZlZFxuICAgKiB3aGVuIHN0cmljdGx5IGVxdWFsIHRvIGZhbHNlOyBwcmVzZW50IHdpdGhvdXQgYSB2YWx1ZSB3aGVuIHN0cmljdGx5IGVxdWFsXG4gICAqIHRvIHRydWU7IHByZXNlbnQgd2l0aCBhIHZhbHVlIG90aGVyd2lzZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6IHt9LFxuXG4gIC8qKlxuICAgKiBBbGwgb2YgdGhlIGlzQ3VzdG9tQXR0cmlidXRlKCkgZnVuY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGluamVjdGVkLlxuICAgKi9cbiAgX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zOiBbXSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgY3VzdG9tIGF0dHJpYnV0ZS5cbiAgICogQG1ldGhvZFxuICAgKi9cbiAgaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlzQ3VzdG9tQXR0cmlidXRlRm4gPSBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnNbaV07XG4gICAgICBpZiAoaXNDdXN0b21BdHRyaWJ1dGVGbihhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IHByb3BlcnR5IHZhbHVlIGZvciBhIERPTSBwcm9wZXJ0eSAoaS5lLiwgbm90IGFuXG4gICAqIGF0dHJpYnV0ZSkuIE1vc3QgZGVmYXVsdCB2YWx1ZXMgYXJlICcnIG9yIGZhbHNlLCBidXQgbm90IGFsbC4gV29yc2UgeWV0LFxuICAgKiBzb21lIChpbiBwYXJ0aWN1bGFyLCBgdHlwZWApIHZhcnkgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGVsZW1lbnQuXG4gICAqXG4gICAqIFRPRE86IElzIGl0IGJldHRlciB0byBncmFiIGFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyB3aGVuIGNyZWF0aW5nIGFuXG4gICAqIGVsZW1lbnQgdG8gYXZvaWQgaGF2aW5nIHRvIGNyZWF0ZSB0aGUgc2FtZSBlbGVtZW50IHR3aWNlP1xuICAgKi9cbiAgZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGVOYW1lLCBwcm9wKSB7XG4gICAgdmFyIG5vZGVEZWZhdWx0cyA9IGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXTtcbiAgICB2YXIgdGVzdEVsZW1lbnQ7XG4gICAgaWYgKCFub2RlRGVmYXVsdHMpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXSA9IG5vZGVEZWZhdWx0cyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIShwcm9wIGluIG5vZGVEZWZhdWx0cykpIHtcbiAgICAgIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG4gICAgICBub2RlRGVmYXVsdHNbcHJvcF0gPSB0ZXN0RWxlbWVudFtwcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVEZWZhdWx0c1twcm9wXTtcbiAgfSxcblxuICBpbmplY3Rpb246IERPTVByb3BlcnR5SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xuXG52YXIgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlclwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuZnVuY3Rpb24gc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHxcbiAgICAoRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW25hbWVdICYmICF2YWx1ZSkgfHxcbiAgICAoRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW25hbWVdICYmIGlzTmFOKHZhbHVlKSkgfHxcbiAgICAoRE9NUHJvcGVydHkuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWVbbmFtZV0gJiYgKHZhbHVlIDwgMSkpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbbmFtZV0gJiYgdmFsdWUgPT09IGZhbHNlKTtcbn1cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgcmVhY3RQcm9wcyA9IHtcbiAgICBjaGlsZHJlbjogdHJ1ZSxcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogdHJ1ZSxcbiAgICBrZXk6IHRydWUsXG4gICAgcmVmOiB0cnVlXG4gIH07XG4gIHZhciB3YXJuZWRQcm9wZXJ0aWVzID0ge307XG5cbiAgdmFyIHdhcm5Vbmtub3duUHJvcGVydHkgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHJlYWN0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcmVhY3RQcm9wc1tuYW1lXSB8fFxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBkYXRhLSogYXR0cmlidXRlcyBzaG91bGQgYmUgbG93ZXJjYXNlOyBzdWdnZXN0IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuICAgIHZhciBzdGFuZGFyZE5hbWUgPSAoXG4gICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShsb3dlckNhc2VkTmFtZSkgP1xuICAgICAgICBsb3dlckNhc2VkTmFtZSA6XG4gICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgP1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkTmFtZV0gOlxuICAgICAgICBudWxsXG4gICAgKTtcblxuICAgIC8vIEZvciBub3csIG9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBzdWdnZXN0ZWQgY29ycmVjdGlvbi4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIGxvZ2dpbmcgdG9vIG11Y2ggd2hlbiB1c2luZyB0cmFuc2ZlclByb3BzVG8uXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBzdGFuZGFyZE5hbWUgPT0gbnVsbCxcbiAgICAgICdVbmtub3duIERPTSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsXG4gICAgICBuYW1lLFxuICAgICAgc3RhbmRhcmROYW1lXG4gICAgKSA6IG51bGwpO1xuXG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIERPTSBwcm9wZXJ0aWVzLlxuICovXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIElEIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVW5lc2NhcGVkIElELlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JJRDogZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUgKyAnPScgK1xuICAgICAgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIoaWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSkge1xuICAgICAgaWYgKHNob3VsZElnbm9yZVZhbHVlKG5hbWUsIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV07XG4gICAgICBpZiAoRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW25hbWVdIHx8XG4gICAgICAgICAgKERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbbmFtZV0gJiYgdmFsdWUgPT09IHRydWUpKSB7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSkge1xuICAgICAgdmFyIG11dGF0aW9uTWV0aG9kID0gRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbbmFtZV07XG4gICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcbiAgICAgICAgbXV0YXRpb25NZXRob2Qobm9kZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRJZ25vcmVWYWx1ZShuYW1lLCB2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW25hbWVdKSB7XG4gICAgICAgIC8vIGBzZXRBdHRyaWJ1dGVgIHdpdGggb2JqZWN0cyBiZWNvbWVzIG9ubHkgYFtvYmplY3RdYCBpbiBJRTgvOSxcbiAgICAgICAgLy8gKCcnICsgdmFsdWUpIG1ha2VzIGl0IG91dHB1dCB0aGUgY29ycmVjdCB0b1N0cmluZygpLXZhbHVlLlxuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdLCAnJyArIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtuYW1lXTtcbiAgICAgICAgLy8gTXVzdCBleHBsaWNpdGx5IGNhc3QgdmFsdWVzIGZvciBIQVNfU0lERV9FRkZFQ1RTLXByb3BlcnRpZXMgdG8gdGhlXG4gICAgICAgIC8vIHByb3BlcnR5IHR5cGUgYmVmb3JlIGNvbXBhcmluZzsgb25seSBgdmFsdWVgIGRvZXMgYW5kIGlzIHN0cmluZy5cbiAgICAgICAgaWYgKCFET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1tuYW1lXSB8fFxuICAgICAgICAgICAgKCcnICsgbm9kZVtwcm9wTmFtZV0pICE9PSAoJycgKyB2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBDb250cmFyeSB0byBgc2V0QXR0cmlidXRlYCwgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHByb3Blcmx5XG4gICAgICAgICAgLy8gYHRvU3RyaW5nYGVkIGJ5IElFOC85LlxuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGRlbGV0ZVZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICBpZiAoRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbbmFtZV0pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHVuZGVmaW5lZCk7XG4gICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbbmFtZV0pIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtuYW1lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbbmFtZV07XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBET01Qcm9wZXJ0eS5nZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eShcbiAgICAgICAgICBub2RlLm5vZGVOYW1lLFxuICAgICAgICAgIHByb3BOYW1lXG4gICAgICAgICk7XG4gICAgICAgIGlmICghRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbbmFtZV0gfHxcbiAgICAgICAgICAgICgnJyArIG5vZGVbcHJvcE5hbWVdKSAhPT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGFuZ2VyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUsIHN1YjogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgY3JlYXRlTm9kZXNGcm9tTWFya3VwID0gcmVxdWlyZShcIi4vY3JlYXRlTm9kZXNGcm9tTWFya3VwXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xudmFyIGdldE1hcmt1cFdyYXAgPSByZXF1aXJlKFwiLi9nZXRNYXJrdXBXcmFwXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIE9QRU5fVEFHX05BTUVfRVhQID0gL14oPFteIFxcLz5dKykvO1xudmFyIFJFU1VMVF9JTkRFWF9BVFRSID0gJ2RhdGEtZGFuZ2VyLWluZGV4JztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBmcm9tIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAqXG4gKiBOT1RFOiBFeHRyYWN0aW5nIHRoZSBgbm9kZU5hbWVgIGRvZXMgbm90IHJlcXVpcmUgYSByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hcbiAqIGJlY2F1c2Ugd2UgbWFrZSBhc3N1bXB0aW9ucyBhYm91dCBSZWFjdC1nZW5lcmF0ZWQgbWFya3VwIChpLmUuIHRoZXJlIGFyZSBub1xuICogc3BhY2VzIHN1cnJvdW5kaW5nIHRoZSBvcGVuaW5nIHRhZyBhbmQgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGF0dHJpYnV0ZSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7c3RyaW5nfSBOb2RlIG5hbWUgb2YgdGhlIHN1cHBsaWVkIG1hcmt1cC5cbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vZXh0cmFjdC1ub2RlbmFtZVxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgcmV0dXJuIG1hcmt1cC5zdWJzdHJpbmcoMSwgbWFya3VwLmluZGV4T2YoJyAnKSk7XG59XG5cbnZhciBEYW5nZXIgPSB7XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgbWFya3VwIGludG8gYW4gYXJyYXkgb2Ygbm9kZXMuIFRoZSBtYXJrdXAgaXMgZXhwZWN0ZWQgdG8gcmVuZGVyXG4gICAqIGludG8gYSBsaXN0IG9mIHJvb3Qgbm9kZXMuIEFsc28sIHRoZSBsZW5ndGggb2YgYHJlc3VsdExpc3RgIGFuZFxuICAgKiBgbWFya3VwTGlzdGAgc2hvdWxkIGJlIHRoZSBzYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncyB0byByZW5kZXIuXG4gICAqIEByZXR1cm4ge2FycmF5PERPTUVsZW1lbnQ+fSBMaXN0IG9mIHJlbmRlcmVkIG5vZGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UmVuZGVyTWFya3VwOiBmdW5jdGlvbihtYXJrdXBMaXN0KSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSxcbiAgICAgICdkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhIHdvcmtlciAnICtcbiAgICAgICd0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5ICcgK1xuICAgICAgJ2JlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgK1xuICAgICAgJ1JlYWN0LnJlbmRlclRvU3RyaW5nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLidcbiAgICApIDogaW52YXJpYW50KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkpO1xuICAgIHZhciBub2RlTmFtZTtcbiAgICB2YXIgbWFya3VwQnlOb2RlTmFtZSA9IHt9O1xuICAgIC8vIEdyb3VwIG1hcmt1cCBieSBgbm9kZU5hbWVgIGlmIGEgd3JhcCBpcyBuZWNlc3NhcnksIGVsc2UgYnkgJyonLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3VwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgbWFya3VwTGlzdFtpXSxcbiAgICAgICAgJ2Rhbmdlcm91c2x5UmVuZGVyTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLidcbiAgICAgICkgOiBpbnZhcmlhbnQobWFya3VwTGlzdFtpXSkpO1xuICAgICAgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXBMaXN0W2ldKTtcbiAgICAgIG5vZGVOYW1lID0gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkgPyBub2RlTmFtZSA6ICcqJztcbiAgICAgIG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gfHwgW107XG4gICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXVtpXSA9IG1hcmt1cExpc3RbaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRMaXN0ID0gW107XG4gICAgdmFyIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPSAwO1xuICAgIGZvciAobm9kZU5hbWUgaW4gbWFya3VwQnlOb2RlTmFtZSkge1xuICAgICAgaWYgKCFtYXJrdXBCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXJrdXBMaXN0QnlOb2RlTmFtZSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdO1xuXG4gICAgICAvLyBUaGlzIGZvci1pbiBsb29wIHNraXBzIHRoZSBob2xlcyBvZiB0aGUgc3BhcnNlIGFycmF5LiBUaGUgb3JkZXIgb2ZcbiAgICAgIC8vIGl0ZXJhdGlvbiBzaG91bGQgZm9sbG93IHRoZSBvcmRlciBvZiBhc3NpZ25tZW50LCB3aGljaCBoYXBwZW5zIHRvIG1hdGNoXG4gICAgICAvLyBudW1lcmljYWwgaW5kZXggb3JkZXIsIGJ1dCB3ZSBkb24ndCByZWx5IG9uIHRoYXQuXG4gICAgICB2YXIgcmVzdWx0SW5kZXg7XG4gICAgICBmb3IgKHJlc3VsdEluZGV4IGluIG1hcmt1cExpc3RCeU5vZGVOYW1lKSB7XG4gICAgICAgIGlmIChtYXJrdXBMaXN0QnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpIHtcbiAgICAgICAgICB2YXIgbWFya3VwID0gbWFya3VwTGlzdEJ5Tm9kZU5hbWVbcmVzdWx0SW5kZXhdO1xuXG4gICAgICAgICAgLy8gUHVzaCB0aGUgcmVxdWVzdGVkIG1hcmt1cCB3aXRoIGFuIGFkZGl0aW9uYWwgUkVTVUxUX0lOREVYX0FUVFJcbiAgICAgICAgICAvLyBhdHRyaWJ1dGUuICBJZiB0aGUgbWFya3VwIGRvZXMgbm90IHN0YXJ0IHdpdGggYSA8IGNoYXJhY3RlciwgaXRcbiAgICAgICAgICAvLyB3aWxsIGJlIGRpc2NhcmRlZCBiZWxvdyAod2l0aCBhbiBhcHByb3ByaWF0ZSBjb25zb2xlLmVycm9yKS5cbiAgICAgICAgICBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF0gPSBtYXJrdXAucmVwbGFjZShcbiAgICAgICAgICAgIE9QRU5fVEFHX05BTUVfRVhQLFxuICAgICAgICAgICAgLy8gVGhpcyBpbmRleCB3aWxsIGJlIHBhcnNlZCBiYWNrIG91dCBiZWxvdy5cbiAgICAgICAgICAgICckMSAnICsgUkVTVUxUX0lOREVYX0FUVFIgKyAnPVwiJyArIHJlc3VsdEluZGV4ICsgJ1wiICdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbmRlciBlYWNoIGdyb3VwIG9mIG1hcmt1cCB3aXRoIHNpbWlsYXIgd3JhcHBpbmcgYG5vZGVOYW1lYC5cbiAgICAgIHZhciByZW5kZXJOb2RlcyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChcbiAgICAgICAgbWFya3VwTGlzdEJ5Tm9kZU5hbWUuam9pbignJyksXG4gICAgICAgIGVtcHR5RnVuY3Rpb24gLy8gRG8gbm90aGluZyBzcGVjaWFsIHdpdGggPHNjcmlwdD4gdGFncy5cbiAgICAgICk7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVuZGVyTm9kZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgdmFyIHJlbmRlck5vZGUgPSByZW5kZXJOb2Rlc1tqXTtcbiAgICAgICAgaWYgKHJlbmRlck5vZGUuaGFzQXR0cmlidXRlICYmXG4gICAgICAgICAgICByZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUikpIHtcblxuICAgICAgICAgIHJlc3VsdEluZGV4ID0gK3JlbmRlck5vZGUuZ2V0QXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcbiAgICAgICAgICByZW5kZXJOb2RlLnJlbW92ZUF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik7XG5cbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICAgIXJlc3VsdExpc3QuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpLFxuICAgICAgICAgICAgJ0RhbmdlcjogQXNzaWduaW5nIHRvIGFuIGFscmVhZHktb2NjdXBpZWQgcmVzdWx0IGluZGV4LidcbiAgICAgICAgICApIDogaW52YXJpYW50KCFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSkpO1xuXG4gICAgICAgICAgcmVzdWx0TGlzdFtyZXN1bHRJbmRleF0gPSByZW5kZXJOb2RlO1xuXG4gICAgICAgICAgLy8gVGhpcyBzaG91bGQgbWF0Y2ggcmVzdWx0TGlzdC5sZW5ndGggYW5kIG1hcmt1cExpc3QubGVuZ3RoIHdoZW5cbiAgICAgICAgICAvLyB3ZSdyZSBkb25lLlxuICAgICAgICAgIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgKz0gMTtcblxuICAgICAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAnRGFuZ2VyOiBEaXNjYXJkaW5nIHVuZXhwZWN0ZWQgbm9kZTonLFxuICAgICAgICAgICAgcmVuZGVyTm9kZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbHRob3VnaCByZXN1bHRMaXN0IHdhcyBwb3B1bGF0ZWQgb3V0IG9mIG9yZGVyLCBpdCBzaG91bGQgbm93IGJlIGEgZGVuc2VcbiAgICAvLyBhcnJheS5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgsXG4gICAgICAnRGFuZ2VyOiBEaWQgbm90IGFzc2lnbiB0byBldmVyeSBpbmRleCBvZiByZXN1bHRMaXN0LidcbiAgICApIDogaW52YXJpYW50KHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPT09IHJlc3VsdExpc3QubGVuZ3RoKSk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcmVzdWx0TGlzdC5sZW5ndGggPT09IG1hcmt1cExpc3QubGVuZ3RoLFxuICAgICAgJ0RhbmdlcjogRXhwZWN0ZWQgbWFya3VwIHRvIHJlbmRlciAlcyBub2RlcywgYnV0IHJlbmRlcmVkICVzLicsXG4gICAgICBtYXJrdXBMaXN0Lmxlbmd0aCxcbiAgICAgIHJlc3VsdExpc3QubGVuZ3RoXG4gICAgKSA6IGludmFyaWFudChyZXN1bHRMaXN0Lmxlbmd0aCA9PT0gbWFya3VwTGlzdC5sZW5ndGgpKTtcblxuICAgIHJldHVybiByZXN1bHRMaXN0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuICAgKiBwYXJlbnQuIFRoZSBtYXJrdXAgbXVzdCByZW5kZXIgaW50byBhIHNpbmdsZSByb290IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGNoaWxkIG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uKG9sZENoaWxkLCBtYXJrdXApIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFxuICAgICAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgJyArXG4gICAgICAnd29ya2VyIHRocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgJyArXG4gICAgICAnZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArXG4gICAgICAnUmVhY3QucmVuZGVyVG9TdHJpbmcgZm9yIHNlcnZlciByZW5kZXJpbmcuJ1xuICAgICkgOiBpbnZhcmlhbnQoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChtYXJrdXAsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nKSA6IGludmFyaWFudChtYXJrdXApKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgb2xkQ2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnaHRtbCcsXG4gICAgICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSAnICtcbiAgICAgICc8aHRtbD4gbm9kZS4gVGhpcyBpcyBiZWNhdXNlIGJyb3dzZXIgcXVpcmtzIG1ha2UgdGhpcyB1bnJlbGlhYmxlICcgK1xuICAgICAgJ2FuZC9vciBzbG93LiBJZiB5b3Ugd2FudCB0byByZW5kZXIgdG8gdGhlIHJvb3QgeW91IG11c3QgdXNlICcgK1xuICAgICAgJ3NlcnZlciByZW5kZXJpbmcuIFNlZSBSZWFjdC5yZW5kZXJUb1N0cmluZygpLidcbiAgICApIDogaW52YXJpYW50KG9sZENoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnKSk7XG5cbiAgICB2YXIgbmV3Q2hpbGQgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBlbXB0eUZ1bmN0aW9uKVswXTtcbiAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFuZ2VyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxuLyoqXG4gKiBNb2R1bGUgdGhhdCBpcyBpbmplY3RhYmxlIGludG8gYEV2ZW50UGx1Z2luSHViYCwgdGhhdCBzcGVjaWZpZXMgYVxuICogZGV0ZXJtaW5pc3RpYyBvcmRlcmluZyBvZiBgRXZlbnRQbHVnaW5gcy4gQSBjb252ZW5pZW50IHdheSB0byByZWFzb24gYWJvdXRcbiAqIHBsdWdpbnMsIHdpdGhvdXQgaGF2aW5nIHRvIHBhY2thZ2UgZXZlcnkgb25lIG9mIHRoZW0uIFRoaXMgaXMgYmV0dGVyIHRoYW5cbiAqIGhhdmluZyBwbHVnaW5zIGJlIG9yZGVyZWQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IGFyZSBpbmplY3RlZCBiZWNhdXNlXG4gKiB0aGF0IG9yZGVyaW5nIHdvdWxkIGJlIGluZmx1ZW5jZWQgYnkgdGhlIHBhY2thZ2luZyBvcmRlci5cbiAqIGBSZXNwb25kZXJFdmVudFBsdWdpbmAgbXVzdCBvY2N1ciBiZWZvcmUgYFNpbXBsZUV2ZW50UGx1Z2luYCBzbyB0aGF0XG4gKiBwcmV2ZW50aW5nIGRlZmF1bHQgb24gZXZlbnRzIGlzIGNvbnZlbmllbnQgaW4gYFNpbXBsZUV2ZW50UGx1Z2luYCBoYW5kbGVycy5cbiAqL1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gW1xuICBrZXlPZih7UmVzcG9uZGVyRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe1NpbXBsZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtUYXBFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7RW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtDaGFuZ2VFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7U2VsZWN0RXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0JlZm9yZUlucHV0RXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0FuYWx5dGljc0V2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luOiBudWxsfSlcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG52YXIgZ2V0Rmlyc3RSZWFjdERPTSA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIG1vdXNlRW50ZXI6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUVudGVyOiBudWxsfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJcbiAgICBdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUxlYXZlOiBudWxsfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJcbiAgICBdXG4gIH1cbn07XG5cbnZhciBleHRyYWN0ZWRFdmVudHMgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogRm9yIGFsbW9zdCBldmVyeSBpbnRlcmFjdGlvbiB3ZSBjYXJlIGFib3V0LCB0aGVyZSB3aWxsIGJlIGJvdGggYSB0b3AtbGV2ZWxcbiAgICogYG1vdXNlb3ZlcmAgYW5kIGBtb3VzZW91dGAgZXZlbnQgdGhhdCBvY2N1cnMuIE9ubHkgdXNlIGBtb3VzZW91dGAgc28gdGhhdFxuICAgKiB3ZSBkbyBub3QgZXh0cmFjdCBkdXBsaWNhdGUgZXZlbnRzLiBIb3dldmVyLCBtb3ZpbmcgdGhlIG1vdXNlIGludG8gdGhlXG4gICAqIGJyb3dzZXIgZnJvbSBvdXRzaWRlIHdpbGwgbm90IGZpcmUgYSBgbW91c2VvdXRgIGV2ZW50LiBJbiB0aGlzIGNhc2UsIHdlIHVzZVxuICAgKiB0aGUgYG1vdXNlb3ZlcmAgdG9wLWxldmVsIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlciAmJlxuICAgICAgICAobmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0ICYmXG4gICAgICAgIHRvcExldmVsVHlwZSAhPT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXIpIHtcbiAgICAgIC8vIE11c3Qgbm90IGJlIGEgbW91c2UgaW4gb3IgbW91c2Ugb3V0IC0gaWdub3JpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2luO1xuICAgIGlmICh0b3BMZXZlbFRhcmdldC53aW5kb3cgPT09IHRvcExldmVsVGFyZ2V0KSB7XG4gICAgICAvLyBgdG9wTGV2ZWxUYXJnZXRgIGlzIHByb2JhYmx5IGEgd2luZG93IG9iamVjdC5cbiAgICAgIHdpbiA9IHRvcExldmVsVGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgICB2YXIgZG9jID0gdG9wTGV2ZWxUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW4gPSB3aW5kb3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZyb20sIHRvO1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQpIHtcbiAgICAgIGZyb20gPSB0b3BMZXZlbFRhcmdldDtcbiAgICAgIHRvID1cbiAgICAgICAgZ2V0Rmlyc3RSZWFjdERPTShuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCkgfHxcbiAgICAgICAgd2luO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcm9tID0gd2luO1xuICAgICAgdG8gPSB0b3BMZXZlbFRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBmcm9tSUQgPSBmcm9tID8gUmVhY3RNb3VudC5nZXRJRChmcm9tKSA6ICcnO1xuICAgIHZhciB0b0lEID0gdG8gPyBSZWFjdE1vdW50LmdldElEKHRvKSA6ICcnO1xuXG4gICAgdmFyIGxlYXZlID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLm1vdXNlTGVhdmUsXG4gICAgICBmcm9tSUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgbGVhdmUudHlwZSA9ICdtb3VzZWxlYXZlJztcbiAgICBsZWF2ZS50YXJnZXQgPSBmcm9tO1xuICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0bztcblxuICAgIHZhciBlbnRlciA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5tb3VzZUVudGVyLFxuICAgICAgdG9JRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBlbnRlci50eXBlID0gJ21vdXNlZW50ZXInO1xuICAgIGVudGVyLnRhcmdldCA9IHRvO1xuICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tO1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tSUQsIHRvSUQpO1xuXG4gICAgZXh0cmFjdGVkRXZlbnRzWzBdID0gbGVhdmU7XG4gICAgZXh0cmFjdGVkRXZlbnRzWzFdID0gZW50ZXI7XG5cbiAgICByZXR1cm4gZXh0cmFjdGVkRXZlbnRzO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50Q29uc3RhbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBrZXlNaXJyb3Ioe2J1YmJsZWQ6IG51bGwsIGNhcHR1cmVkOiBudWxsfSk7XG5cbi8qKlxuICogVHlwZXMgb2YgcmF3IHNpZ25hbHMgZnJvbSB0aGUgYnJvd3NlciBjYXVnaHQgYXQgdGhlIHRvcCBsZXZlbC5cbiAqL1xudmFyIHRvcExldmVsVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICB0b3BCbHVyOiBudWxsLFxuICB0b3BDaGFuZ2U6IG51bGwsXG4gIHRvcENsaWNrOiBudWxsLFxuICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6IG51bGwsXG4gIHRvcENvbnRleHRNZW51OiBudWxsLFxuICB0b3BDb3B5OiBudWxsLFxuICB0b3BDdXQ6IG51bGwsXG4gIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuICB0b3BEcmFnOiBudWxsLFxuICB0b3BEcmFnRW5kOiBudWxsLFxuICB0b3BEcmFnRW50ZXI6IG51bGwsXG4gIHRvcERyYWdFeGl0OiBudWxsLFxuICB0b3BEcmFnTGVhdmU6IG51bGwsXG4gIHRvcERyYWdPdmVyOiBudWxsLFxuICB0b3BEcmFnU3RhcnQ6IG51bGwsXG4gIHRvcERyb3A6IG51bGwsXG4gIHRvcEVycm9yOiBudWxsLFxuICB0b3BGb2N1czogbnVsbCxcbiAgdG9wSW5wdXQ6IG51bGwsXG4gIHRvcEtleURvd246IG51bGwsXG4gIHRvcEtleVByZXNzOiBudWxsLFxuICB0b3BLZXlVcDogbnVsbCxcbiAgdG9wTG9hZDogbnVsbCxcbiAgdG9wTW91c2VEb3duOiBudWxsLFxuICB0b3BNb3VzZU1vdmU6IG51bGwsXG4gIHRvcE1vdXNlT3V0OiBudWxsLFxuICB0b3BNb3VzZU92ZXI6IG51bGwsXG4gIHRvcE1vdXNlVXA6IG51bGwsXG4gIHRvcFBhc3RlOiBudWxsLFxuICB0b3BSZXNldDogbnVsbCxcbiAgdG9wU2Nyb2xsOiBudWxsLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6IG51bGwsXG4gIHRvcFN1Ym1pdDogbnVsbCxcbiAgdG9wVGV4dElucHV0OiBudWxsLFxuICB0b3BUb3VjaENhbmNlbDogbnVsbCxcbiAgdG9wVG91Y2hFbmQ6IG51bGwsXG4gIHRvcFRvdWNoTW92ZTogbnVsbCxcbiAgdG9wVG91Y2hTdGFydDogbnVsbCxcbiAgdG9wV2hlZWw6IG51bGxcbn0pO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSB7XG4gIHRvcExldmVsVHlwZXM6IHRvcExldmVsVHlwZXMsXG4gIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudENvbnN0YW50cztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICtcbiAgICAgICAgICAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArXG4gICAgICAgICAgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24oKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UGx1Z2luSHViXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIik7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luVXRpbHNcIik7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoXCIuL2FjY3VtdWxhdGVJbnRvXCIpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogSW50ZXJuYWwgc3RvcmUgZm9yIGV2ZW50IGxpc3RlbmVyc1xuICovXG52YXIgbGlzdGVuZXJCYW5rID0ge307XG5cbi8qKlxuICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcbiAqIHdhaXRpbmcgdG8gaGF2ZSB0aGVpciBkaXNwYXRjaGVzIGV4ZWN1dGVkLlxuICovXG52YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50IFN5bnRoZXRpYyBldmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICogQHByaXZhdGVcbiAqL1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudCkge1xuICAgIHZhciBleGVjdXRlRGlzcGF0Y2ggPSBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaDtcbiAgICAvLyBQbHVnaW5zIGNhbiBwcm92aWRlIGN1c3RvbSBiZWhhdmlvciB3aGVuIGRpc3BhdGNoaW5nIGV2ZW50cy5cbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5nZXRQbHVnaW5Nb2R1bGVGb3JFdmVudChldmVudCk7XG4gICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoKSB7XG4gICAgICBleGVjdXRlRGlzcGF0Y2ggPSBQbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoO1xuICAgIH1cbiAgICBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgZXhlY3V0ZURpc3BhdGNoKTtcblxuICAgIGlmICghZXZlbnQuaXNQZXJzaXN0ZW50KCkpIHtcbiAgICAgIGV2ZW50LmNvbnN0cnVjdG9yLnJlbGVhc2UoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiAtIGBJbnN0YW5jZUhhbmRsZWA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgcGVyZm9ybXMgbG9naWNhbCB0cmF2ZXJzYWxzIG9mIERPTVxuICogICBoaWVyYXJjaHkgZ2l2ZW4gaWRzIG9mIHRoZSBsb2dpY2FsIERPTSBlbGVtZW50cyBpbnZvbHZlZC5cbiAqL1xudmFyIEluc3RhbmNlSGFuZGxlID0gbnVsbDtcblxuZnVuY3Rpb24gdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpIHtcbiAgdmFyIHZhbGlkID1cbiAgICBJbnN0YW5jZUhhbmRsZSAmJlxuICAgIEluc3RhbmNlSGFuZGxlLnRyYXZlcnNlVHdvUGhhc2UgJiZcbiAgICBJbnN0YW5jZUhhbmRsZS50cmF2ZXJzZUVudGVyTGVhdmU7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdmFsaWQsXG4gICAgJ0luc3RhbmNlSGFuZGxlIG5vdCBpbmplY3RlZCBiZWZvcmUgdXNlISdcbiAgKSA6IGludmFyaWFudCh2YWxpZCkpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB1bmlmaWVkIGludGVyZmFjZSBmb3IgZXZlbnQgcGx1Z2lucyB0byBiZSBpbnN0YWxsZWQgYW5kIGNvbmZpZ3VyZWQuXG4gKlxuICogRXZlbnQgcGx1Z2lucyBjYW4gaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIGBleHRyYWN0RXZlbnRzYCB7ZnVuY3Rpb24oc3RyaW5nLCBET01FdmVudFRhcmdldCwgc3RyaW5nLCBvYmplY3QpOiAqfVxuICogICAgIFJlcXVpcmVkLiBXaGVuIGEgdG9wLWxldmVsIGV2ZW50IGlzIGZpcmVkLCB0aGlzIG1ldGhvZCBpcyBleHBlY3RlZCB0b1xuICogICAgIGV4dHJhY3Qgc3ludGhldGljIGV2ZW50cyB0aGF0IHdpbGwgaW4gdHVybiBiZSBxdWV1ZWQgYW5kIGRpc3BhdGNoZWQuXG4gKlxuICogICBgZXZlbnRUeXBlc2Age29iamVjdH1cbiAqICAgICBPcHRpb25hbCwgcGx1Z2lucyB0aGF0IGZpcmUgZXZlbnRzIG11c3QgcHVibGlzaCBhIG1hcHBpbmcgb2YgcmVnaXN0cmF0aW9uXG4gKiAgICAgbmFtZXMgdGhhdCBhcmUgdXNlZCB0byByZWdpc3RlciBsaXN0ZW5lcnMuIFZhbHVlcyBvZiB0aGlzIG1hcHBpbmcgbXVzdFxuICogICAgIGJlIG9iamVjdHMgdGhhdCBjb250YWluIGByZWdpc3RyYXRpb25OYW1lYCBvciBgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNgLlxuICpcbiAqICAgYGV4ZWN1dGVEaXNwYXRjaGAge2Z1bmN0aW9uKG9iamVjdCwgZnVuY3Rpb24sIHN0cmluZyl9XG4gKiAgICAgT3B0aW9uYWwsIGFsbG93cyBwbHVnaW5zIHRvIG92ZXJyaWRlIGhvdyBhbiBldmVudCBnZXRzIGRpc3BhdGNoZWQuIEJ5XG4gKiAgICAgZGVmYXVsdCwgdGhlIGxpc3RlbmVyIGlzIHNpbXBseSBpbnZva2VkLlxuICpcbiAqIEVhY2ggcGx1Z2luIHRoYXQgaXMgaW5qZWN0ZWQgaW50byBgRXZlbnRzUGx1Z2luSHViYCBpcyBpbW1lZGlhdGVseSBvcGVyYWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBFdmVudFBsdWdpbkh1YiA9IHtcblxuICAvKipcbiAgICogTWV0aG9kcyBmb3IgaW5qZWN0aW5nIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGluamVjdGlvbjoge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkTW91bnRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0TW91bnQ6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkSW5zdGFuY2VIYW5kbGVcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uKEluamVjdGVkSW5zdGFuY2VIYW5kbGUpIHtcbiAgICAgIEluc3RhbmNlSGFuZGxlID0gSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRJbnN0YW5jZUhhbmRsZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBJbnN0YW5jZUhhbmRsZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWVcblxuICB9LFxuXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBgbGlzdGVuZXJgIGF0IGBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baWRdYC4gSXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIHN0b3JlLlxuICAgKi9cbiAgcHV0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLFxuICAgICAgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyXG4gICAgKSA6IGludmFyaWFudCghbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSk7XG5cbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPVxuICAgICAgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdIHx8IChsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV0gPSB7fSk7XG4gICAgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdID0gbGlzdGVuZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICAgKi9cbiAgZ2V0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIHJldHVybiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSAmJiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgZGVsZXRlIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgKi9cbiAgZGVsZXRlQWxsTGlzdGVuZXJzOiBmdW5jdGlvbihpZCkge1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gbGlzdGVuZXJCYW5rKSB7XG4gICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAgICogbmF0aXZlIGJyb3dzZXIgZXZlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBsdWdpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgICB2YXIgcG9zc2libGVQbHVnaW4gPSBwbHVnaW5zW2ldO1xuICAgICAgaWYgKHBvc3NpYmxlUGx1Z2luKSB7XG4gICAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKFxuICAgICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICk7XG4gICAgICAgIGlmIChleHRyYWN0ZWRFdmVudHMpIHtcbiAgICAgICAgICBldmVudHMgPSBhY2N1bXVsYXRlSW50byhldmVudHMsIGV4dHJhY3RlZEV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfSxcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBzeW50aGV0aWMgZXZlbnQgdGhhdCBzaG91bGQgYmUgZGlzcGF0Y2hlZCB3aGVuXG4gICAqIGBwcm9jZXNzRXZlbnRRdWV1ZWAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudHMgQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50UXVldWUsIGV2ZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFsbCBzeW50aGV0aWMgZXZlbnRzIG9uIHRoZSBldmVudCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzRXZlbnRRdWV1ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWV2ZW50UXVldWUsXG4gICAgICAncHJvY2Vzc0V2ZW50UXVldWUoKTogQWRkaXRpb25hbCBldmVudHMgd2VyZSBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nICcgK1xuICAgICAgJ2FuIGV2ZW50IHF1ZXVlLiBTdXBwb3J0IGZvciB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoIWV2ZW50UXVldWUpKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlc2UgYXJlIG5lZWRlZCBmb3IgdGVzdHMgb25seS4gRG8gbm90IHVzZSFcbiAgICovXG4gIF9fcHVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGxpc3RlbmVyQmFuayA9IHt9O1xuICB9LFxuXG4gIF9fZ2V0TGlzdGVuZXJCYW5rOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5SZWdpc3RyeVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghRXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYEV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IEV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcGx1Z2luSW5kZXggPiAtMSxcbiAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gJyArXG4gICAgICAndGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC4nLFxuICAgICAgcGx1Z2luTmFtZVxuICAgICkgOiBpbnZhcmlhbnQocGx1Z2luSW5kZXggPiAtMSkpO1xuICAgIGlmIChFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgICcgK1xuICAgICAgJ21ldGhvZCwgYnV0IGAlc2AgZG9lcyBub3QuJyxcbiAgICAgIHBsdWdpbk5hbWVcbiAgICApIDogaW52YXJpYW50KFBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzKSk7XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zW3BsdWdpbkluZGV4XSA9IFBsdWdpbk1vZHVsZTtcbiAgICB2YXIgcHVibGlzaGVkRXZlbnRzID0gUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXM7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgcHVibGlzaEV2ZW50Rm9yUGx1Z2luKFxuICAgICAgICAgIHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLFxuICAgICAgICAgIFBsdWdpbk1vZHVsZSxcbiAgICAgICAgICBldmVudE5hbWVcbiAgICAgICAgKSxcbiAgICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLicsXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgcGx1Z2luTmFtZVxuICAgICAgKSA6IGludmFyaWFudChwdWJsaXNoRXZlbnRGb3JQbHVnaW4oXG4gICAgICAgIHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLFxuICAgICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICAgIGV2ZW50TmFtZVxuICAgICAgKSkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhbiBldmVudCBzbyB0aGF0IGl0IGNhbiBiZSBkaXNwYXRjaGVkIGJ5IHRoZSBzdXBwbGllZCBwbHVnaW4uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIERpc3BhdGNoIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgd2FzIHN1Y2Nlc3NmdWxseSBwdWJsaXNoZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oZGlzcGF0Y2hDb25maWcsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSksXG4gICAgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICtcbiAgICAnZXZlbnQgbmFtZSwgYCVzYC4nLFxuICAgIGV2ZW50TmFtZVxuICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSk7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKFxuICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgICAgIGV2ZW50TmFtZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoXG4gICAgICBkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lLFxuICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgZXZlbnROYW1lXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0sXG4gICAgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICtcbiAgICAncmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJyxcbiAgICByZWdpc3RyYXRpb25OYW1lXG4gICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0pKTtcbiAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA9IFBsdWdpbk1vZHVsZTtcbiAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID1cbiAgICBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlc1tldmVudE5hbWVdLmRlcGVuZGVuY2llcztcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgcGx1Z2lucyBzbyB0aGF0IHRoZXkgY2FuIGV4dHJhY3QgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAqXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yn1cbiAqL1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSB7XG5cbiAgLyoqXG4gICAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICAgKi9cbiAgcGx1Z2luczogW10sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICAgKi9cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG4gICAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICAgKiBhbHdheXMgZGV0ZXJtaW5pc3RpYyByZWdhcmRsZXNzIG9mIHBhY2thZ2luZywgb24tdGhlLWZseSBpbmplY3Rpb24sIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhRXZlbnRQbHVnaW5PcmRlcixcbiAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gJyArXG4gICAgICAnb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LidcbiAgICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpbk9yZGVyKSk7XG4gICAgLy8gQ2xvbmUgdGhlIG9yZGVyaW5nIHNvIGl0IGNhbm5vdCBiZSBkeW5hbWljYWxseSBtdXRhdGVkLlxuICAgIEV2ZW50UGx1Z2luT3JkZXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpO1xuICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluamVjdHMgcGx1Z2lucyB0byBiZSB1c2VkIGJ5IGBFdmVudFBsdWdpbkh1YmAuIFRoZSBwbHVnaW4gbmFtZXMgbXVzdCBiZVxuICAgKiBpbiB0aGUgb3JkZXJpbmcgaW5qZWN0ZWQgYnkgYGluamVjdEV2ZW50UGx1Z2luT3JkZXJgLlxuICAgKlxuICAgKiBQbHVnaW5zIGNhbiBiZSBpbmplY3RlZCBhcyBwYXJ0IG9mIHBhZ2UgaW5pdGlhbGl6YXRpb24gb3Igb24tdGhlLWZseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOiBmdW5jdGlvbihpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8XG4gICAgICAgICAgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gIT09IFBsdWdpbk1vZHVsZSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSxcbiAgICAgICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCB0d28gZGlmZmVyZW50IGV2ZW50IHBsdWdpbnMgJyArXG4gICAgICAgICAgJ3VzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuJyxcbiAgICAgICAgICBwbHVnaW5OYW1lXG4gICAgICAgICkgOiBpbnZhcmlhbnQoIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdKSk7XG4gICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTG9va3MgdXAgdGhlIHBsdWdpbiBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQSBzeW50aGV0aWMgZXZlbnQuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSBldmVudC5kaXNwYXRjaENvbmZpZztcbiAgICBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgcmV0dXJuIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbXG4gICAgICAgIGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWVcbiAgICAgIF0gfHwgbnVsbDtcbiAgICB9XG4gICAgZm9yICh2YXIgcGhhc2UgaW4gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgIGlmICghZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbXG4gICAgICAgIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXVxuICAgICAgXTtcbiAgICAgIGlmIChQbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbk1vZHVsZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXNldEV2ZW50UGx1Z2luczogZnVuY3Rpb24oKSB7XG4gICAgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKG5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zLmxlbmd0aCA9IDA7XG5cbiAgICB2YXIgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncykge1xuICAgICAgaWYgKGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMpIHtcbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShyZWdpc3RyYXRpb25OYW1lKSkge1xuICAgICAgICBkZWxldGUgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5SZWdpc3RyeTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpblV0aWxzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbmplY3RlZCBkZXBlbmRlbmNpZXM6XG4gKi9cblxuLyoqXG4gKiAtIGBNb3VudGA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgY2FuIGNvbnZlcnQgYmV0d2VlbiBSZWFjdCBkb20gSURzIGFuZFxuICogICBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuICovXG52YXIgaW5qZWN0aW9uID0ge1xuICBNb3VudDogbnVsbCxcbiAgaW5qZWN0TW91bnQ6IGZ1bmN0aW9uKEluamVjdGVkTW91bnQpIHtcbiAgICBpbmplY3Rpb24uTW91bnQgPSBJbmplY3RlZE1vdW50O1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlLFxuICAgICAgICAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQoLi4uKTogSW5qZWN0ZWQgTW91bnQgbW9kdWxlICcgK1xuICAgICAgICAnaXMgbWlzc2luZyBnZXROb2RlLidcbiAgICAgICkgOiBpbnZhcmlhbnQoSW5qZWN0ZWRNb3VudCAmJiBJbmplY3RlZE1vdW50LmdldE5vZGUpKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kIHx8XG4gICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw7XG59XG5cbmZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmUgfHxcbiAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG59XG5cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcblxuICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgIHZhciBpZHNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJRHMpO1xuICAgIHZhciBJRHNMZW4gPSBpZHNJc0FyciA/IGRpc3BhdGNoSURzLmxlbmd0aCA6IGRpc3BhdGNoSURzID8gMSA6IDA7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID9cbiAgICAgIGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6XG4gICAgICBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbixcbiAgICAgICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJ1xuICAgICkgOiBpbnZhcmlhbnQoaWRzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIElEc0xlbiA9PT0gbGlzdGVuZXJzTGVuKSk7XG4gIH07XG59XG5cbi8qKlxuICogSW52b2tlcyBgY2IoZXZlbnQsIGxpc3RlbmVyLCBpZClgLiBBdm9pZHMgdXNpbmcgY2FsbCBpZiBubyBzY29wZSBpc1xuICogcHJvdmlkZWQuIFRoZSBgKGxpc3RlbmVyLGlkKWAgcGFpciBlZmZlY3RpdmVseSBmb3JtcyB0aGUgXCJkaXNwYXRjaFwiIGJ1dCBhcmVcbiAqIGtlcHQgc2VwYXJhdGUgdG8gY29uc2VydmUgbWVtb3J5LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoRXZlbnREaXNwYXRjaChldmVudCwgY2IpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJRHNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJRHMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBQbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoKCkuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBTeW50aGV0aWNFdmVudCB0byBoYW5kbGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tSUQgRE9NIGlkIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gaW5qZWN0aW9uLk1vdW50LmdldE5vZGUoZG9tSUQpO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBsaXN0ZW5lcihldmVudCwgZG9tSUQpO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGNiKSB7XG4gIGZvckVhY2hFdmVudERpc3BhdGNoKGV2ZW50LCBjYik7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuICogYXQgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiByZXR1cm5pbmcgdHJ1ZSwgYW5kIHJldHVybnMgdGhhdCBpZC5cbiAqXG4gKiBAcmV0dXJuIGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJucyB0cnVlLCBvclxuICogbnVsbCBpZiBubyBsaXN0ZW5lciByZXR1cm5lZCB0cnVlLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaElEc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSURzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJRHMpKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hJRHM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzZWUgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGxcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4gVGhlIHJldHVybiB2YWx1ZSBvZiBleGVjdXRpbmcgdGhlIHNpbmdsZSBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXIgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpLFxuICAgICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLidcbiAgKSA6IGludmFyaWFudCghQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSkpO1xuICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/XG4gICAgZGlzcGF0Y2hMaXN0ZW5lcihldmVudCwgZGlzcGF0Y2hJRCkgOlxuICAgIG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICovXG5mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VmdWwgaW4gY3JlYXRpbmcgY3VzdG9tIEV2ZW50IFBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuICBpc0VuZGlzaDogaXNFbmRpc2gsXG4gIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXG4gIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2g6IGV4ZWN1dGVEaXNwYXRjaCxcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUsXG4gIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG4gIGluamVjdGlvbjogaW5qZWN0aW9uLFxuICB1c2VUb3VjaEV2ZW50czogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5VdGlscztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFByb3BhZ2F0b3JzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG5cbnZhciBQcm9wYWdhdGlvblBoYXNlcyA9IEV2ZW50Q29uc3RhbnRzLlByb3BhZ2F0aW9uUGhhc2VzO1xudmFyIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7XG5cbi8qKlxuICogU29tZSBldmVudCB0eXBlcyBoYXZlIGEgbm90aW9uIG9mIGRpZmZlcmVudCByZWdpc3RyYXRpb24gbmFtZXMgZm9yIGRpZmZlcmVudFxuICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGlkLCBldmVudCwgcHJvcGFnYXRpb25QaGFzZSkge1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9XG4gICAgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG59XG5cbi8qKlxuICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuICogaGVyZSwgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGJpbmQgb3IgY3JlYXRlIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudC5cbiAqIE11dGF0aW5nIHRoZSBldmVudCdzIG1lbWJlcnMgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBhIHdyYXBwaW5nXG4gKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGRvbUlELCB1cHdhcmRzLCBldmVudCkge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKCFkb21JRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyBpZCBtdXN0IG5vdCBiZSBudWxsJyk7XG4gICAgfVxuICB9XG4gIHZhciBwaGFzZSA9IHVwd2FyZHMgPyBQcm9wYWdhdGlvblBoYXNlcy5idWJibGVkIDogUHJvcGFnYXRpb25QaGFzZXMuY2FwdHVyZWQ7XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShkb21JRCwgZXZlbnQsIHBoYXNlKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID1cbiAgICAgIGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgZG9tSUQpO1xuICB9XG59XG5cbi8qKlxuICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuICogdGVzdHMpLiBMYXppbHkgYWxsb2NhdGUgdGhlIGFycmF5IHRvIGNvbnNlcnZlIG1lbW9yeS4gIFdlIG11c3QgbG9vcCB0aHJvdWdoXG4gKiBlYWNoIGV2ZW50IGFuZCBwZXJmb3JtIHRoZSB0cmF2ZXJzYWwgZm9yIGVhY2ggb25lLiBXZSBjYW4gbm90IHBlcmZvcm0gYVxuICogc2luZ2xlIHRyYXZlcnNhbCBmb3IgdGhlIGVudGlyZSBjb2xsZWN0aW9uIG9mIGV2ZW50cyBiZWNhdXNlIGVhY2ggZXZlbnQgbWF5XG4gKiBoYXZlIGEgZGlmZmVyZW50IHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uZ2V0SW5zdGFuY2VIYW5kbGUoKS50cmF2ZXJzZVR3b1BoYXNlKFxuICAgICAgZXZlbnQuZGlzcGF0Y2hNYXJrZXIsXG4gICAgICBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLFxuICAgICAgZXZlbnRcbiAgICApO1xuICB9XG59XG5cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuICogcmVnaXN0cmF0aW9uIG5hbWVzLiBTYW1lIGFzIGBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZWAgYnV0IHdpdGhvdXRcbiAqIHJlcXVpcmluZyB0aGF0IHRoZSBgZGlzcGF0Y2hNYXJrZXJgIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXNwYXRjaGVkIElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpZCwgaWdub3JlZERpcmVjdGlvbiwgZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID1cbiAgICAgICAgYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJRHMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJRHMsIGlkKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBkaXNwYXRjaGVzIG9uIGFuIGBTeW50aGV0aWNFdmVudGAsIGJ1dCBvbmx5IGZvciB0aGVcbiAqIGBkaXNwYXRjaE1hcmtlcmAuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGV2ZW50LmRpc3BhdGNoTWFya2VyLCBudWxsLCBldmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb21JRCwgdG9JRCkge1xuICBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uZ2V0SW5zdGFuY2VIYW5kbGUoKS50cmF2ZXJzZUVudGVyTGVhdmUoXG4gICAgZnJvbUlELFxuICAgIHRvSUQsXG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMsXG4gICAgbGVhdmUsXG4gICAgZW50ZXJcbiAgKTtcbn1cblxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5cblxuLyoqXG4gKiBBIHNtYWxsIHNldCBvZiBwcm9wYWdhdGlvbiBwYXR0ZXJucywgZWFjaCBvZiB3aGljaCB3aWxsIGFjY2VwdCBhIHNtYWxsIGFtb3VudFxuICogb2YgaW5mb3JtYXRpb24sIGFuZCBnZW5lcmF0ZSBhIHNldCBvZiBcImRpc3BhdGNoIHJlYWR5IGV2ZW50IG9iamVjdHNcIiAtIHdoaWNoXG4gKiBhcmUgc2V0cyBvZiBldmVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhbm5vdGF0ZWQgd2l0aCBhIHNldCBvZiBkaXNwYXRjaGVkXG4gKiBsaXN0ZW5lciBmdW5jdGlvbnMvaWRzLiBUaGUgQVBJIGlzIGRlc2lnbmVkIHRoaXMgd2F5IHRvIGRpc2NvdXJhZ2UgdGhlc2VcbiAqIHByb3BhZ2F0aW9uIHN0cmF0ZWdpZXMgZnJvbSBhY3R1YWxseSBleGVjdXRpbmcgdGhlIGRpc3BhdGNoZXMsIHNpbmNlIHdlXG4gKiBhbHdheXMgd2FudCB0byBjb2xsZWN0IHRoZSBlbnRpcmUgc2V0IG9mIGRpc3BhdGNoZXMgYmVmb3JlIGV4ZWN1dGluZyBldmVudCBhXG4gKiBzaW5nbGUgb25lLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBFdmVudFByb3BhZ2F0b3JzXG4gKi9cbnZhciBFdmVudFByb3BhZ2F0b3JzID0ge1xuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczogYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczogYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UHJvcGFnYXRvcnM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgY2FuVXNlRE9NID0gISEoXG4gICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpXG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoXCIuL2dldFRleHRDb250ZW50QWNjZXNzb3JcIik7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgY2xhc3Mgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gcm9vdFxuICovXG5mdW5jdGlvbiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUocm9vdCkge1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fc3RhcnRUZXh0ID0gdGhpcy5nZXRUZXh0KCk7XG4gIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbmFzc2lnbihGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB0ZXh0IG9mIGlucHV0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUZXh0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoJ3ZhbHVlJyBpbiB0aGlzLl9yb290KSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3RbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBkaWZmZXJpbmcgc3Vic3RyaW5nIGJldHdlZW4gdGhlIGluaXRpYWxseSBzdG9yZWRcbiAgICogdGV4dCBjb250ZW50IGFuZCB0aGUgY3VycmVudCBjb250ZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXREYXRhOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fZmFsbGJhY2tUZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICAgIH1cblxuICAgIHZhciBzdGFydDtcbiAgICB2YXIgc3RhcnRWYWx1ZSA9IHRoaXMuX3N0YXJ0VGV4dDtcbiAgICB2YXIgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aDtcbiAgICB2YXIgZW5kO1xuICAgIHZhciBlbmRWYWx1ZSA9IHRoaXMuZ2V0VGV4dCgpO1xuICAgIHZhciBlbmRMZW5ndGggPSBlbmRWYWx1ZS5sZW5ndGg7XG5cbiAgICBmb3IgKHN0YXJ0ID0gMDsgc3RhcnQgPCBzdGFydExlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRdICE9PSBlbmRWYWx1ZVtzdGFydF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gICAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRMZW5ndGggLSBlbmRdICE9PSBlbmRWYWx1ZVtlbmRMZW5ndGggLSBlbmRdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzbGljZVRhaWwgPSBlbmQgPiAxID8gMSAtIGVuZCA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgc2xpY2VUYWlsKTtcbiAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEhUTUxET01Qcm9wZXJ0eUNvbmZpZ1xuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xudmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xudmFyIEhBU19CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFO1xudmFyIEhBU19TSURFX0VGRkVDVFMgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUztcbnZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSA9XG4gIERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID1cbiAgRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU7XG5cbnZhciBoYXNTVkc7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHZhciBpbXBsZW1lbnRhdGlvbiA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uO1xuICBoYXNTVkcgPSAoXG4gICAgaW1wbGVtZW50YXRpb24gJiZcbiAgICBpbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcbiAgICAgICdodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlJyxcbiAgICAgICcxLjEnXG4gICAgKVxuICApO1xufVxuXG5cbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChcbiAgICAvXihkYXRhfGFyaWEpLVthLXpfXVthLXpcXGRfLlxcLV0qJC9cbiAgKSxcbiAgUHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIFN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhY2NlcHQ6IG51bGwsXG4gICAgYWNjZXB0Q2hhcnNldDogbnVsbCxcbiAgICBhY2Nlc3NLZXk6IG51bGwsXG4gICAgYWN0aW9uOiBudWxsLFxuICAgIGFsbG93RnVsbFNjcmVlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBhbHQ6IG51bGwsXG4gICAgYXN5bmM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICAvLyBhdXRvRm9jdXMgaXMgcG9seWZpbGxlZC9ub3JtYWxpemVkIGJ5IEF1dG9Gb2N1c01peGluXG4gICAgLy8gYXV0b0ZvY3VzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvUGxheTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2VsbFBhZGRpbmc6IG51bGwsXG4gICAgY2VsbFNwYWNpbmc6IG51bGwsXG4gICAgY2hhclNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2xhc3NJRDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIFRvIHNldCBjbGFzc05hbWUgb24gU1ZHIGVsZW1lbnRzLCBpdCdzIG5lY2Vzc2FyeSB0byB1c2UgLnNldEF0dHJpYnV0ZTtcbiAgICAvLyB0aGlzIHdvcmtzIG9uIEhUTUwgZWxlbWVudHMgdG9vIGluIGFsbCBicm93c2VycyBleGNlcHQgSUU4LiBDb252ZW5pZW50bHksXG4gICAgLy8gSUU4IGRvZXNuJ3Qgc3VwcG9ydCBTVkcgYW5kIHNvIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSBhdHRyaWJ1dGUgaW5cbiAgICAvLyBicm93c2VycyB0aGF0IHN1cHBvcnQgU1ZHIGFuZCB0aGUgcHJvcGVydHkgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCxcbiAgICAvLyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgSFRNTCBvciBTVkcuXG4gICAgY2xhc3NOYW1lOiBoYXNTVkcgPyBNVVNUX1VTRV9BVFRSSUJVVEUgOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBjb2xzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBjb2xTcGFuOiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgY29udGVudEVkaXRhYmxlOiBudWxsLFxuICAgIGNvbnRleHRNZW51OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY29udHJvbHM6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY29vcmRzOiBudWxsLFxuICAgIGNyb3NzT3JpZ2luOiBudWxsLFxuICAgIGRhdGE6IG51bGwsIC8vIEZvciBgPG9iamVjdCAvPmAgYWN0cyBhcyBgc3JjYC5cbiAgICBkYXRlVGltZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkaXI6IG51bGwsXG4gICAgZGlzYWJsZWQ6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgIGRyYWdnYWJsZTogbnVsbCxcbiAgICBlbmNUeXBlOiBudWxsLFxuICAgIGZvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtQWN0aW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybUVuY1R5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybU5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGZvcm1UYXJnZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmcmFtZUJvcmRlcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGhlYWRlcnM6IG51bGwsXG4gICAgaGVpZ2h0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaGlkZGVuOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBoaWdoOiBudWxsLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaHRtbEZvcjogbnVsbCxcbiAgICBodHRwRXF1aXY6IG51bGwsXG4gICAgaWNvbjogbnVsbCxcbiAgICBpZDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgbGFiZWw6IG51bGwsXG4gICAgbGFuZzogbnVsbCxcbiAgICBsaXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbG9vcDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBsb3c6IG51bGwsXG4gICAgbWFuaWZlc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJnaW5IZWlnaHQ6IG51bGwsXG4gICAgbWFyZ2luV2lkdGg6IG51bGwsXG4gICAgbWF4OiBudWxsLFxuICAgIG1heExlbmd0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1lZGlhOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWFHcm91cDogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgbWluOiBudWxsLFxuICAgIG11bHRpcGxlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG11dGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG5hbWU6IG51bGwsXG4gICAgbm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgb3BlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgb3B0aW11bTogbnVsbCxcbiAgICBwYXR0ZXJuOiBudWxsLFxuICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgIHBvc3RlcjogbnVsbCxcbiAgICBwcmVsb2FkOiBudWxsLFxuICAgIHJhZGlvR3JvdXA6IG51bGwsXG4gICAgcmVhZE9ubHk6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcmVsOiBudWxsLFxuICAgIHJlcXVpcmVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByb2xlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcm93czogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgcm93U3BhbjogbnVsbCxcbiAgICBzYW5kYm94OiBudWxsLFxuICAgIHNjb3BlOiBudWxsLFxuICAgIHNjb3BlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2Nyb2xsaW5nOiBudWxsLFxuICAgIHNlYW1sZXNzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzZWxlY3RlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzaGFwZTogbnVsbCxcbiAgICBzaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzaXplczogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwYW46IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNwZWxsQ2hlY2s6IG51bGwsXG4gICAgc3JjOiBudWxsLFxuICAgIHNyY0RvYzogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgc3JjU2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RhcnQ6IEhBU19OVU1FUklDX1ZBTFVFLFxuICAgIHN0ZXA6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgdGFiSW5kZXg6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHR5cGU6IG51bGwsXG4gICAgdXNlTWFwOiBudWxsLFxuICAgIHZhbHVlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19TSURFX0VGRkVDVFMsXG4gICAgd2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB3bW9kZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXG4gICAgLyoqXG4gICAgICogTm9uLXN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICAvLyBhdXRvQ2FwaXRhbGl6ZSBhbmQgYXV0b0NvcnJlY3QgYXJlIHN1cHBvcnRlZCBpbiBNb2JpbGUgU2FmYXJpIGZvclxuICAgIC8vIGtleWJvYXJkIGhpbnRzLlxuICAgIGF1dG9DYXBpdGFsaXplOiBudWxsLFxuICAgIGF1dG9Db3JyZWN0OiBudWxsLFxuICAgIC8vIGl0ZW1Qcm9wLCBpdGVtU2NvcGUsIGl0ZW1UeXBlIGFyZSBmb3JcbiAgICAvLyBNaWNyb2RhdGEgc3VwcG9ydC4gU2VlIGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuICAgIGl0ZW1Qcm9wOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaXRlbVNjb3BlOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBpdGVtVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIGl0ZW1JRCBhbmQgaXRlbVJlZiBhcmUgZm9yIE1pY3JvZGF0YSBzdXBwb3J0IGFzIHdlbGwgYnV0XG4gICAgLy8gb25seSBzcGVjaWZpZWQgaW4gdGhlIHRoZSBXSEFUV0cgc3BlYyBkb2N1bWVudC4gU2VlXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWljcm9kYXRhLmh0bWwjbWljcm9kYXRhLWRvbS1hcGlcbiAgICBpdGVtSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpdGVtUmVmOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gcHJvcGVydHkgaXMgc3VwcG9ydGVkIGZvciBPcGVuR3JhcGggaW4gbWV0YSB0YWdzLlxuICAgIHByb3BlcnR5OiBudWxsLFxuICAgIC8vIElFLW9ubHkgYXR0cmlidXRlIHRoYXQgY29udHJvbHMgZm9jdXMgYmVoYXZpb3JcbiAgICB1bnNlbGVjdGFibGU6IE1VU1RfVVNFX0FUVFJJQlVURVxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxGb3I6ICdmb3InLFxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIERPTVByb3BlcnR5TmFtZXM6IHtcbiAgICBhdXRvQ2FwaXRhbGl6ZTogJ2F1dG9jYXBpdGFsaXplJyxcbiAgICBhdXRvQ29tcGxldGU6ICdhdXRvY29tcGxldGUnLFxuICAgIGF1dG9Db3JyZWN0OiAnYXV0b2NvcnJlY3QnLFxuICAgIGF1dG9Gb2N1czogJ2F1dG9mb2N1cycsXG4gICAgYXV0b1BsYXk6ICdhdXRvcGxheScsXG4gICAgLy8gYGVuY29kaW5nYCBpcyBlcXVpdmFsZW50IHRvIGBlbmN0eXBlYCwgSUU4IGxhY2tzIGFuIGBlbmN0eXBlYCBzZXR0ZXIuXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNkb20tZnMtZW5jb2RpbmdcbiAgICBlbmNUeXBlOiAnZW5jb2RpbmcnLFxuICAgIGhyZWZMYW5nOiAnaHJlZmxhbmcnLFxuICAgIHJhZGlvR3JvdXA6ICdyYWRpb2dyb3VwJyxcbiAgICBzcGVsbENoZWNrOiAnc3BlbGxjaGVjaycsXG4gICAgc3JjRG9jOiAnc3JjZG9jJyxcbiAgICBzcmNTZXQ6ICdzcmNzZXQnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTERPTVByb3BlcnR5Q29uZmlnO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIExpbmtlZFN0YXRlTWl4aW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RMaW5rID0gcmVxdWlyZShcIi4vUmVhY3RMaW5rXCIpO1xudmFyIFJlYWN0U3RhdGVTZXR0ZXJzID0gcmVxdWlyZShcIi4vUmVhY3RTdGF0ZVNldHRlcnNcIik7XG5cbi8qKlxuICogQSBzaW1wbGUgbWl4aW4gYXJvdW5kIFJlYWN0TGluay5mb3JTdGF0ZSgpLlxuICovXG52YXIgTGlua2VkU3RhdGVNaXhpbiA9IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIFJlYWN0TGluayB0aGF0J3MgbGlua2VkIHRvIHBhcnQgb2YgdGhpcyBjb21wb25lbnQncyBzdGF0ZS4gVGhlXG4gICAqIFJlYWN0TGluayB3aWxsIGhhdmUgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhpcy5zdGF0ZVtrZXldIGFuZCB3aWxsIGNhbGxcbiAgICogc2V0U3RhdGUoKSB3aGVuIGEgY2hhbmdlIGlzIHJlcXVlc3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdGF0ZSBrZXkgdG8gdXBkYXRlLiBOb3RlOiB5b3UgbWF5IHdhbnQgdG8gdXNlIGtleU9mKClcbiAgICogaWYgeW91J3JlIHVzaW5nIEdvb2dsZSBDbG9zdXJlIENvbXBpbGVyIGFkdmFuY2VkIG1vZGUuXG4gICAqIEByZXR1cm4ge1JlYWN0TGlua30gUmVhY3RMaW5rIGluc3RhbmNlIGxpbmtpbmcgdG8gdGhlIHN0YXRlLlxuICAgKi9cbiAgbGlua1N0YXRlOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gbmV3IFJlYWN0TGluayhcbiAgICAgIHRoaXMuc3RhdGVba2V5XSxcbiAgICAgIFJlYWN0U3RhdGVTZXR0ZXJzLmNyZWF0ZVN0YXRlS2V5U2V0dGVyKHRoaXMsIGtleSlcbiAgICApO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFN0YXRlTWl4aW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgK1xuICAgICdjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rIGFuZCB2aWNlIHZlcnNhLidcbiAgKSA6IGludmFyaWFudChpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsKSk7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KSB7XG4gIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwsXG4gICAgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCAnICtcbiAgICAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLnZhbHVlID09IG51bGwgJiYgaW5wdXQucHJvcHMub25DaGFuZ2UgPT0gbnVsbCkpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuICcgK1xuICAgICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICtcbiAgICAndXNlIGNoZWNrZWRMaW5rJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZSBjaGFuZ2UgZXZlbnQgdG8gaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMudmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xufVxuXG4vKipcbiAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcbiAgKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShlLnRhcmdldC5jaGVja2VkKTtcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBNaXhpbjoge1xuICAgIHByb3BUeXBlczoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgaGFzUmVhZE9ubHlWYWx1ZVtwcm9wcy50eXBlXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICtcbiAgICAgICAgICAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICtcbiAgICAgICAgICAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICtcbiAgICAgICAgICAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJ1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGBjaGVja2VkYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgK1xuICAgICAgICAgICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgK1xuICAgICAgICAgICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArXG4gICAgICAgICAgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLidcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogUmVhY3RQcm9wVHlwZXMuZnVuY1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7Kn0gY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgZWl0aGVyIGZyb20gdmFsdWUgcHJvcCBvciBsaW5rLlxuICAgKi9cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYgKGlucHV0LnByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGlucHV0IEZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgY2hlY2tlZCBzdGF0dXMgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIGNoZWNrZWQgcHJvcFxuICAgKiAgICAgICAgICAgICBvciBsaW5rLlxuICAgKi9cbiAgZ2V0Q2hlY2tlZDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQucHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gaW5wdXQucHJvcHMuY2hlY2tlZExpbmsudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5wcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnB1dCBGb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gY2hhbmdlIGNhbGxiYWNrIGVpdGhlciBmcm9tIG9uQ2hhbmdlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldE9uQ2hhbmdlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5wcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZTtcbiAgICB9IGVsc2UgaWYgKGlucHV0LnByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnByb3BzLm9uQ2hhbmdlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFZhbHVlVXRpbHM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTG9jYWxFdmVudFRyYXBNaXhpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIik7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuZnVuY3Rpb24gcmVtb3ZlKGV2ZW50KSB7XG4gIGV2ZW50LnJlbW92ZSgpO1xufVxuXG52YXIgTG9jYWxFdmVudFRyYXBNaXhpbiA9IHtcbiAgdHJhcEJ1YmJsZWRFdmVudDpmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCByZW5kZXJzIHRvIG51bGwgb3IgaWYgYW5vdGhlciBjb21wb25lbnQgZmF0YWxzIGFuZCBjYXVzZXNcbiAgICAvLyB0aGUgc3RhdGUgb2YgdGhlIHRyZWUgdG8gYmUgY29ycnVwdGVkLCBgbm9kZWAgaGVyZSBjYW4gYmUgbnVsbC5cbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBub2RlLFxuICAgICAgJ0xvY2FsRXZlbnRUcmFwTWl4aW4udHJhcEJ1YmJsZWRFdmVudCguLi4pOiBSZXF1aXJlcyBub2RlIHRvIGJlIHJlbmRlcmVkLidcbiAgICApIDogaW52YXJpYW50KG5vZGUpKTtcbiAgICB2YXIgbGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIG5vZGVcbiAgICApO1xuICAgIHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMgPVxuICAgICAgYWNjdW11bGF0ZUludG8odGhpcy5fbG9jYWxFdmVudExpc3RlbmVycywgbGlzdGVuZXIpO1xuICB9LFxuXG4gIC8vIHRyYXBDYXB0dXJlZEV2ZW50IHdvdWxkIGxvb2sgbmVhcmx5IGlkZW50aWNhbC4gV2UgZG9uJ3QgaW1wbGVtZW50IHRoYXRcbiAgLy8gbWV0aG9kIGJlY2F1c2UgaXQgaXNuJ3QgY3VycmVudGx5IG5lZWRlZC5cblxuICBjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbG9jYWxFdmVudExpc3RlbmVycykge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMsIHJlbW92ZSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsRXZlbnRUcmFwTWl4aW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuLyoqXG4gKiBNb2JpbGUgU2FmYXJpIGRvZXMgbm90IGZpcmUgcHJvcGVybHkgYnViYmxlIGNsaWNrIGV2ZW50cyBvbiBub24taW50ZXJhY3RpdmVcbiAqIGVsZW1lbnRzLCB3aGljaCBtZWFucyBkZWxlZ2F0ZWQgY2xpY2sgbGlzdGVuZXJzIGRvIG5vdCBmaXJlLiBUaGUgd29ya2Fyb3VuZFxuICogZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGljayBsaXN0ZW5lciBvbiB0aGUgdGFyZ2V0IG5vZGUuXG4gKlxuICogVGhpcyBwYXJ0aWN1bGFyIHBsdWdpbiB3b3JrcyBhcm91bmQgdGhlIGJ1ZyBieSBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2tcbiAqIGxpc3RlbmVyIG9uIGB0b3VjaHN0YXJ0YCAod2hpY2ggZG9lcyBmaXJlIG9uIGV2ZXJ5IGVsZW1lbnQpLlxuICovXG52YXIgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQ7XG4gICAgICBpZiAodGFyZ2V0ICYmICF0YXJnZXQub25jbGljaykge1xuICAgICAgICB0YXJnZXQub25jbGljayA9IGVtcHR5RnVuY3Rpb247XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBPYmplY3QuYXNzaWduXG4gKi9cblxuLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW9iamVjdC5hc3NpZ25cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2VzKSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gdGFyZ2V0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgbmV4dEluZGV4ID0gMTsgbmV4dEluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgbmV4dEluZGV4KyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tuZXh0SW5kZXhdO1xuICAgIGlmIChuZXh0U291cmNlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBmcm9tID0gT2JqZWN0KG5leHRTb3VyY2UpO1xuXG4gICAgLy8gV2UgZG9uJ3QgY3VycmVudGx5IHN1cHBvcnQgYWNjZXNzb3JzIG5vciBwcm94aWVzLiBUaGVyZWZvcmUgdGhpc1xuICAgIC8vIGNvcHkgY2Fubm90IHRocm93LiBJZiB3ZSBldmVyIHN1cHBvcnRlZCB0aGlzIHRoZW4gd2UgbXVzdCBoYW5kbGVcbiAgICAvLyBleGNlcHRpb25zIGFuZCBzaWRlLWVmZmVjdHMuIFdlIGRvbid0IHN1cHBvcnQgc3ltYm9scyBzbyB0aGV5IHdvbid0XG4gICAgLy8gYmUgdHJhbnNmZXJyZWQuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUG9vbGVkQ2xhc3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2ZcbiAqIGFyZ3VtZW50cy4gQSBjb21wbGV0ZWx5IGdlbmVyaWMgcG9vbGVyIGlzIGVhc3kgdG8gaW1wbGVtZW50LCBidXQgd291bGRcbiAqIHJlcXVpcmUgYWNjZXNzaW5nIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIEluIGVhY2ggb2YgdGhlc2UsIGB0aGlzYCByZWZlcnMgdG9cbiAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cbiAqIGhlcmUsIG9yIGluIHRoZWlyIG93biBmaWxlcy5cbiAqL1xudmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oY29weUZpZWxkc0Zyb20pIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgY29weUZpZWxkc0Zyb20pO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKTtcbiAgfVxufTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICB9XG59O1xuXG52YXIgZml2ZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgfVxufTtcblxudmFyIHN0YW5kYXJkUmVsZWFzZXIgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MsXG4gICAgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJ1xuICApIDogaW52YXJpYW50KGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MpKTtcbiAgaWYgKGluc3RhbmNlLmRlc3RydWN0b3IpIHtcbiAgICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG4gIH1cbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcyAob3B0aW9uYWwpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbihDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICB2YXIgTmV3S2xhc3MgPSBDb3B5Q29uc3RydWN0b3I7XG4gIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG4gIE5ld0tsYXNzLnJlbGVhc2UgPSBzdGFuZGFyZFJlbGVhc2VyO1xuICByZXR1cm4gTmV3S2xhc3M7XG59O1xuXG52YXIgUG9vbGVkQ2xhc3MgPSB7XG4gIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcbiAgdGhyZWVBcmd1bWVudFBvb2xlcjogdGhyZWVBcmd1bWVudFBvb2xlcixcbiAgZml2ZUFyZ3VtZW50UG9vbGVyOiBmaXZlQXJndW1lbnRQb29sZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbGVkQ2xhc3M7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RcbiAqL1xuXG4vKiBnbG9iYWxzIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkcmVuXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RDb250ZXh0ID0gcmVxdWlyZShcIi4vUmVhY3RDb250ZXh0XCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NXCIpO1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiKTtcbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb25cIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlc1wiKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcgPSByZXF1aXJlKFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKFwiLi9maW5kRE9NTm9kZVwiKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKFwiLi9vbmx5Q2hpbGRcIik7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudDtcbnZhciBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3Rvcnk7XG52YXIgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudDtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudDtcbn1cblxudmFyIHJlbmRlciA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdCcsICdyZW5kZXInLCBSZWFjdE1vdW50LnJlbmRlcik7XG5cbnZhciBSZWFjdCA9IHtcbiAgQ2hpbGRyZW46IHtcbiAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgfSxcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgRE9NOiBSZWFjdERPTSxcbiAgUHJvcFR5cGVzOiBSZWFjdFByb3BUeXBlcyxcbiAgaW5pdGlhbGl6ZVRvdWNoRXZlbnRzOiBmdW5jdGlvbihzaG91bGRVc2VUb3VjaCkge1xuICAgIEV2ZW50UGx1Z2luVXRpbHMudXNlVG91Y2hFdmVudHMgPSBzaG91bGRVc2VUb3VjaDtcbiAgfSxcbiAgY3JlYXRlQ2xhc3M6IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsXG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gIGNsb25lRWxlbWVudDogY2xvbmVFbGVtZW50LFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICBjcmVhdGVNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAvLyBDdXJyZW50bHkgYSBub29wLiBXaWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgYW5kIHRyYWNlIG1peGlucy5cbiAgICByZXR1cm4gbWl4aW47XG4gIH0sXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudDogUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQsXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQ6IFJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRCxcbiAgZmluZERPTU5vZGU6IGZpbmRET01Ob2RlLFxuICByZW5kZXI6IHJlbmRlcixcbiAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXAsXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgaXNWYWxpZEVsZW1lbnQ6IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCxcbiAgd2l0aENvbnRleHQ6IFJlYWN0Q29udGV4dC53aXRoQ29udGV4dCxcblxuICAvLyBIb29rIGZvciBKU1ggc3ByZWFkLCBkb24ndCB1c2UgdGhpcyBmb3IgYW55dGhpbmcgZWxzZS5cbiAgX19zcHJlYWQ6IGFzc2lnblxufTtcblxuLy8gSW5qZWN0IHRoZSBydW50aW1lIGludG8gYSBkZXZ0b29scyBnbG9iYWwgaG9vayByZWdhcmRsZXNzIG9mIGJyb3dzZXIuXG4vLyBBbGxvd3MgZm9yIGRlYnVnZ2luZyB3aGVuIHRoZSBob29rIGlzIGluamVjdGVkIG9uIHRoZSBwYWdlLlxuaWYgKFxuICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0KHtcbiAgICBDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAgIEluc3RhbmNlSGFuZGxlczogUmVhY3RJbnN0YW5jZUhhbmRsZXMsXG4gICAgTW91bnQ6IFJlYWN0TW91bnQsXG4gICAgUmVjb25jaWxlcjogUmVhY3RSZWNvbmNpbGVyLFxuICAgIFRleHRDb21wb25lbnQ6IFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICB9KTtcbn1cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbiAgaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cudG9wID09PSB3aW5kb3cuc2VsZikge1xuXG4gICAgLy8gSWYgd2UncmUgaW4gQ2hyb21lLCBsb29rIGZvciB0aGUgZGV2dG9vbHMgbWFya2VyIGFuZCBwcm92aWRlIGEgZG93bmxvYWRcbiAgICAvLyBsaW5rIGlmIG5vdCBpbnN0YWxsZWQuXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMSkge1xuICAgICAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGV4cGVjdGVkRmVhdHVyZXMgPSBbXG4gICAgICAvLyBzaGltc1xuICAgICAgQXJyYXkuaXNBcnJheSxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5ldmVyeSxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLFxuICAgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YsXG4gICAgICBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgICAgRGF0ZS5ub3csXG4gICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCxcbiAgICAgIE9iamVjdC5rZXlzLFxuICAgICAgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCxcbiAgICAgIFN0cmluZy5wcm90b3R5cGUudHJpbSxcblxuICAgICAgLy8gc2hhbXNcbiAgICAgIE9iamVjdC5jcmVhdGUsXG4gICAgICBPYmplY3QuZnJlZXplXG4gICAgXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFleHBlY3RlZEZlYXR1cmVzW2ldKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ09uZSBvciBtb3JlIEVTNSBzaGltL3NoYW1zIGV4cGVjdGVkIGJ5IFJlYWN0IGFyZSBub3QgYXZhaWxhYmxlOiAnICtcbiAgICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscydcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblJlYWN0LnZlcnNpb24gPSAnMC4xMy4zJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGZpbmRET01Ob2RlID0gcmVxdWlyZShcIi4vZmluZERPTU5vZGVcIik7XG5cbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBUaGUgcm9vdCBub2RlIG9mIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZmluYWxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZ2V0RE9NTm9kZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbmRET01Ob2RlKHRoaXMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIik7XG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW5cIik7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZShcIi4vVmlld3BvcnRNZXRyaWNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKTtcblxuLyoqXG4gKiBTdW1tYXJ5IG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGV2ZW50IGhhbmRsaW5nOlxuICpcbiAqICAtIFRvcC1sZXZlbCBkZWxlZ2F0aW9uIGlzIHVzZWQgdG8gdHJhcCBtb3N0IG5hdGl2ZSBicm93c2VyIGV2ZW50cy4gVGhpc1xuICogICAgbWF5IG9ubHkgb2NjdXIgaW4gdGhlIG1haW4gdGhyZWFkIGFuZCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2ZcbiAqICAgIFJlYWN0RXZlbnRMaXN0ZW5lciwgd2hpY2ggaXMgaW5qZWN0ZWQgYW5kIGNhbiB0aGVyZWZvcmUgc3VwcG9ydCBwbHVnZ2FibGVcbiAqICAgIGV2ZW50IHNvdXJjZXMuIFRoaXMgaXMgdGhlIG9ubHkgd29yayB0aGF0IG9jY3VycyBpbiB0aGUgbWFpbiB0aHJlYWQuXG4gKlxuICogIC0gV2Ugbm9ybWFsaXplIGFuZCBkZS1kdXBsaWNhdGUgZXZlbnRzIHRvIGFjY291bnQgZm9yIGJyb3dzZXIgcXVpcmtzLiBUaGlzXG4gKiAgICBtYXkgYmUgZG9uZSBpbiB0aGUgd29ya2VyIHRocmVhZC5cbiAqXG4gKiAgLSBGb3J3YXJkIHRoZXNlIG5hdGl2ZSBldmVudHMgKHdpdGggdGhlIGFzc29jaWF0ZWQgdG9wLWxldmVsIHR5cGUgdXNlZCB0b1xuICogICAgdHJhcCBpdCkgdG8gYEV2ZW50UGx1Z2luSHViYCwgd2hpY2ggaW4gdHVybiB3aWxsIGFzayBwbHVnaW5zIGlmIHRoZXkgd2FudFxuICogICAgdG8gZXh0cmFjdCBhbnkgc3ludGhldGljIGV2ZW50cy5cbiAqXG4gKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB3aWxsIHRoZW4gcHJvY2VzcyBlYWNoIGV2ZW50IGJ5IGFubm90YXRpbmcgdGhlbSB3aXRoXG4gKiAgICBcImRpc3BhdGNoZXNcIiwgYSBzZXF1ZW5jZSBvZiBsaXN0ZW5lcnMgYW5kIElEcyB0aGF0IGNhcmUgYWJvdXQgdGhhdCBldmVudC5cbiAqXG4gKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB0aGVuIGRpc3BhdGNoZXMgdGhlIGV2ZW50cy5cbiAqXG4gKiBPdmVydmlldyBvZiBSZWFjdCBhbmQgdGhlIGV2ZW50IHN5c3RlbTpcbiAqXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiB8ICAgIERPTSAgICAgfCAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiAgICAgICB8ICAgICAgICAgICAuXG4gKiAgICAgICB2ICAgICAgICAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuXG4gKiB8ICBMaXN0ZW5lciAgfCAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICArLS0tLS0tLS0rfFNpbXBsZUV2ZW50fFxuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgIHwgICAgICAgICB8UGx1Z2luICAgICB8XG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgdiAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgICAgIHwgICAgICB8ICAgIC4gICAgKy0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLStcbiAqIHwgICAgICstLS0tLS0tLS0tLS4tLS0+fEV2ZW50UGx1Z2luSHVifCAgICAgICAgICAgICAgICAgICAgfCAgICBFdmVudCAgIHxcbiAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCBQcm9wYWdhdG9yc3xcbiAqIHwgUmVhY3RFdmVudCB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgfFRhcEV2ZW50ICAgfCAgfC0tLS0tLS0tLS0tLXxcbiAqIHwgIEVtaXR0ZXIgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfDwtLS0rfFBsdWdpbiAgICAgfCAgfG90aGVyIHBsdWdpbnxcbiAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCAgdXRpbGl0aWVzIHxcbiAqIHwgICAgICstLS0tLS0tLS0tLS4tLS0+fCAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLStcbiAqIHwgICAgIHwgICAgICB8ICAgIC4gICAgKy0tLS0tLS0tLS0tLS0tK1xuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICBeICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgIHwgICAgICAgIHxFbnRlci9MZWF2ZXxcbiAqICAgICAgICsgICAgICAgICAgIC4gICAgICAgICAgICAgICAgKy0tLS0tLS0rfFBsdWdpbiAgICAgfFxuICogKy0tLS0tLS0tLS0tLS0rICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8IGFwcGxpY2F0aW9uIHwgICAuXG4gKiB8LS0tLS0tLS0tLS0tLXwgICAuXG4gKiB8ICAgICAgICAgICAgIHwgICAuXG4gKiB8ICAgICAgICAgICAgIHwgICAuXG4gKiArLS0tLS0tLS0tLS0tLSsgICAuXG4gKiAgICAgICAgICAgICAgICAgICAuXG4gKiAgICBSZWFjdCBDb3JlICAgICAuICBHZW5lcmFsIFB1cnBvc2UgRXZlbnQgUGx1Z2luIFN5c3RlbVxuICovXG5cbnZhciBhbHJlYWR5TGlzdGVuaW5nVG8gPSB7fTtcbnZhciBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IGZhbHNlO1xudmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cbi8vIEZvciBldmVudHMgbGlrZSAnc3VibWl0JyB3aGljaCBkb24ndCBjb25zaXN0ZW50bHkgYnViYmxlICh3aGljaCB3ZSB0cmFwIGF0IGFcbi8vIGxvd2VyIG5vZGUgdGhhbiBgZG9jdW1lbnRgKSwgYmluZGluZyBhdCBgZG9jdW1lbnRgIHdvdWxkIGNhdXNlIGR1cGxpY2F0ZVxuLy8gZXZlbnRzIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBoZXJlXG52YXIgdG9wRXZlbnRNYXBwaW5nID0ge1xuICB0b3BCbHVyOiAnYmx1cicsXG4gIHRvcENoYW5nZTogJ2NoYW5nZScsXG4gIHRvcENsaWNrOiAnY2xpY2snLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRm9jdXM6ICdmb2N1cycsXG4gIHRvcElucHV0OiAnaW5wdXQnLFxuICB0b3BLZXlEb3duOiAna2V5ZG93bicsXG4gIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuICB0b3BLZXlVcDogJ2tleXVwJyxcbiAgdG9wTW91c2VEb3duOiAnbW91c2Vkb3duJyxcbiAgdG9wTW91c2VNb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgdG9wTW91c2VPdXQ6ICdtb3VzZW91dCcsXG4gIHRvcE1vdXNlT3ZlcjogJ21vdXNlb3ZlcicsXG4gIHRvcE1vdXNlVXA6ICdtb3VzZXVwJyxcbiAgdG9wUGFzdGU6ICdwYXN0ZScsXG4gIHRvcFNjcm9sbDogJ3Njcm9sbCcsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogJ3NlbGVjdGlvbmNoYW5nZScsXG4gIHRvcFRleHRJbnB1dDogJ3RleHRJbnB1dCcsXG4gIHRvcFRvdWNoQ2FuY2VsOiAndG91Y2hjYW5jZWwnLFxuICB0b3BUb3VjaEVuZDogJ3RvdWNoZW5kJyxcbiAgdG9wVG91Y2hNb3ZlOiAndG91Y2htb3ZlJyxcbiAgdG9wVG91Y2hTdGFydDogJ3RvdWNoc3RhcnQnLFxuICB0b3BXaGVlbDogJ3doZWVsJ1xufTtcblxuLyoqXG4gKiBUbyBlbnN1cmUgbm8gY29uZmxpY3RzIHdpdGggb3RoZXIgcG90ZW50aWFsIFJlYWN0IGluc3RhbmNlcyBvbiB0aGUgcGFnZVxuICovXG52YXIgdG9wTGlzdGVuZXJzSURLZXkgPSAnX3JlYWN0TGlzdGVuZXJzSUQnICsgU3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuXG5mdW5jdGlvbiBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KSB7XG4gIC8vIEluIElFOCwgYG1vdW50QXRgIGlzIGEgaG9zdCBvYmplY3QgYW5kIGRvZXNuJ3QgaGF2ZSBgaGFzT3duUHJvcGVydHlgXG4gIC8vIGRpcmVjdGx5LlxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3VudEF0LCB0b3BMaXN0ZW5lcnNJREtleSkpIHtcbiAgICBtb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XSA9IHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlcisrO1xuICAgIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV0gPSB7fTtcbiAgfVxuICByZXR1cm4gYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXTtcbn1cblxuLyoqXG4gKiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBpcyB1c2VkIHRvIGF0dGFjaCB0b3AtbGV2ZWwgZXZlbnQgbGlzdGVuZXJzLiBGb3JcbiAqIGV4YW1wbGU6XG4gKlxuICogICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucHV0TGlzdGVuZXIoJ215SUQnLCAnb25DbGljaycsIG15RnVuY3Rpb24pO1xuICpcbiAqIFRoaXMgd291bGQgYWxsb2NhdGUgYSBcInJlZ2lzdHJhdGlvblwiIG9mIGAoJ29uQ2xpY2snLCBteUZ1bmN0aW9uKWAgb24gJ215SUQnLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gYXNzaWduKHt9LCBSZWFjdEV2ZW50RW1pdHRlck1peGluLCB7XG5cbiAgLyoqXG4gICAqIEluamVjdGFibGUgZXZlbnQgYmFja2VuZFxuICAgKi9cbiAgUmVhY3RFdmVudExpc3RlbmVyOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAgICAgKi9cbiAgICBpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKFJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFxuICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaGFuZGxlVG9wTGV2ZWxcbiAgICAgICk7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBhbnkgY3JlYXRlZCBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICovXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBpZiAoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5zZXRFbmFibGVkKGVuYWJsZWQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBjYWxsYmFja3MgYXJlIGVuYWJsZWQuXG4gICAqL1xuICBpc0VuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhIShcbiAgICAgIChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyICYmIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuaXNFbmFibGVkKCkpXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgbGlzdGVuIGZvciBidWJibGVkIHRvdWNoIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LlxuICAgKlxuICAgKiBGaXJlZm94IHY4LjAxIChhbmQgcG9zc2libHkgb3RoZXJzKSBleGhpYml0ZWQgc3RyYW5nZSBiZWhhdmlvciB3aGVuXG4gICAqIG1vdW50aW5nIGBvbm1vdXNlbW92ZWAgZXZlbnRzIGF0IHNvbWUgbm9kZSB0aGF0IHdhcyBub3QgdGhlIGRvY3VtZW50XG4gICAqIGVsZW1lbnQuIFRoZSBzeW1wdG9tcyB3ZXJlIHRoYXQgaWYgeW91ciBtb3VzZSBpcyBub3QgbW92aW5nIG92ZXIgc29tZXRoaW5nXG4gICAqIGNvbnRhaW5lZCB3aXRoaW4gdGhhdCBtb3VudCBwb2ludCAoZm9yIGV4YW1wbGUgb24gdGhlIGJhY2tncm91bmQpIHRoZVxuICAgKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIGZvciBgb25tb3VzZW1vdmVgIHdvbid0IGJlIGNhbGxlZC4gSG93ZXZlciwgaWYgeW91XG4gICAqIHJlZ2lzdGVyIHRoZSBgbW91c2Vtb3ZlYCBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LCB0aGVuIGl0IHdpbGwgb2YgY291cnNlXG4gICAqIGNhdGNoIGFsbCBgbW91c2Vtb3ZlYHMuIFRoaXMgYWxvbmcgd2l0aCBpT1MgcXVpcmtzLCBqdXN0aWZpZXMgcmVzdHJpY3RpbmdcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyB0byB0aGUgZG9jdW1lbnQgb2JqZWN0IG9ubHksIGF0IGxlYXN0IGZvciB0aGVzZVxuICAgKiBtb3ZlbWVudCB0eXBlcyBvZiBldmVudHMgYW5kIHBvc3NpYmx5IGFsbCBldmVudHMuXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTAvMDkvY2xpY2tfZXZlbnRfZGVsLmh0bWxcbiAgICpcbiAgICogQWxzbywgYGtleXVwYC9ga2V5cHJlc3NgL2BrZXlkb3duYCBkbyBub3QgYnViYmxlIHRvIHRoZSB3aW5kb3cgb24gSUUsIGJ1dFxuICAgKiB0aGV5IGJ1YmJsZSB0byBkb2N1bWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGVudERvY3VtZW50SGFuZGxlIERvY3VtZW50IHdoaWNoIG93bnMgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgbGlzdGVuVG86IGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbk5hbWUsIGNvbnRlbnREb2N1bWVudEhhbmRsZSkge1xuICAgIHZhciBtb3VudEF0ID0gY29udGVudERvY3VtZW50SGFuZGxlO1xuICAgIHZhciBpc0xpc3RlbmluZyA9IGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LlxuICAgICAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuICAgICAgaWYgKCEoXG4gICAgICAgICAgICAoaXNMaXN0ZW5pbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkgJiYgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0pXG4gICAgICAgICAgKSkge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCkge1xuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG4gICAgICAgICAgICAgICd3aGVlbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdtb3VzZXdoZWVsJykpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcbiAgICAgICAgICAgICAgJ21vdXNld2hlZWwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94IG5lZWRzIHRvIGNhcHR1cmUgYSBkaWZmZXJlbnQgbW91c2Ugc2Nyb2xsIGV2ZW50LlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvdGVzdHMvc2Nyb2xsLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcbiAgICAgICAgICAgICAgJ0RPTU1vdXNlU2Nyb2xsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsXG4gICAgICAgICAgICAgICdzY3JvbGwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLFxuICAgICAgICAgICAgICAnc2Nyb2xsJyxcbiAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzIHx8XG4gICAgICAgICAgICBkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1cycsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgICAgICAgICAnZm9jdXMnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgICAgICAgICAnYmx1cicsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcbiAgICAgICAgICAgIC8vIElFIGhhcyBgZm9jdXNpbmAgYW5kIGBmb2N1c291dGAgZXZlbnRzIHdoaWNoIGJ1YmJsZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMDgvMDQvZGVsZWdhdGluZ190aGUuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgICAgICAgICAnZm9jdXNpbicsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgICAgICAgICAgJ2ZvY3Vzb3V0JyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2VcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEJsdXJdID0gdHJ1ZTtcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEZvY3VzXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgZGVwZW5kZW5jeSxcbiAgICAgICAgICAgIHRvcEV2ZW50TWFwcGluZ1tkZXBlbmRlbmN5XSxcbiAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIGhhbmRsZVxuICAgICk7XG4gIH0sXG5cbiAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIGhhbmRsZVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbnMgdG8gd2luZG93IHNjcm9sbCBhbmQgcmVzaXplIGV2ZW50cy4gV2UgY2FjaGUgc2Nyb2xsIHZhbHVlcyBzbyB0aGF0XG4gICAqIGFwcGxpY2F0aW9uIGNvZGUgY2FuIGFjY2VzcyB0aGVtIHdpdGhvdXQgdHJpZ2dlcmluZyByZWZsb3dzLlxuICAgKlxuICAgKiBOT1RFOiBTY3JvbGwgZXZlbnRzIGRvIG5vdCBidWJibGUuXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Njcm9sbC5odG1sXG4gICAqL1xuICBlbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3Jpbmc6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpIHtcbiAgICAgIHZhciByZWZyZXNoID0gVmlld3BvcnRNZXRyaWNzLnJlZnJlc2hTY3JvbGxWYWx1ZXM7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiBFdmVudFBsdWdpbkh1Yi5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luSHViLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIHB1dExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcixcblxuICBnZXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXIsXG5cbiAgZGVsZXRlTGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyLFxuXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogRXZlbnRQbHVnaW5IdWIuZGVsZXRlQWxsTGlzdGVuZXJzXG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCIuL1JlYWN0XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxudmFyIFJlYWN0VHJhbnNpdGlvbkdyb3VwID0gUmVhY3QuY3JlYXRlRmFjdG9yeShcbiAgcmVxdWlyZShcIi4vUmVhY3RUcmFuc2l0aW9uR3JvdXBcIilcbik7XG52YXIgUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkoXG4gIHJlcXVpcmUoXCIuL1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGRcIilcbik7XG5cbnZhciBSZWFjdENTU1RyYW5zaXRpb25Hcm91cCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdENTU1RyYW5zaXRpb25Hcm91cCcsXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdHJhbnNpdGlvbk5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0cmFuc2l0aW9uQXBwZWFyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB0cmFuc2l0aW9uRW50ZXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHRyYW5zaXRpb25MZWF2ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uQXBwZWFyOiBmYWxzZSxcbiAgICAgIHRyYW5zaXRpb25FbnRlcjogdHJ1ZSxcbiAgICAgIHRyYW5zaXRpb25MZWF2ZTogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgX3dyYXBDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIHByb3ZpZGUgdGhpcyBjaGlsZEZhY3Rvcnkgc28gdGhhdFxuICAgIC8vIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgY2FuIHJlY2VpdmUgdXBkYXRlcyB0byBuYW1lLCBlbnRlciwgYW5kXG4gICAgLy8gbGVhdmUgd2hpbGUgaXQgaXMgbGVhdmluZy5cbiAgICByZXR1cm4gUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZChcbiAgICAgIHtcbiAgICAgICAgbmFtZTogdGhpcy5wcm9wcy50cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgYXBwZWFyOiB0aGlzLnByb3BzLnRyYW5zaXRpb25BcHBlYXIsXG4gICAgICAgIGVudGVyOiB0aGlzLnByb3BzLnRyYW5zaXRpb25FbnRlcixcbiAgICAgICAgbGVhdmU6IHRoaXMucHJvcHMudHJhbnNpdGlvbkxlYXZlXG4gICAgICB9LFxuICAgICAgY2hpbGRcbiAgICApO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFJlYWN0VHJhbnNpdGlvbkdyb3VwKFxuICAgICAgICBhc3NpZ24oe30sIHRoaXMucHJvcHMsIHtjaGlsZEZhY3Rvcnk6IHRoaXMuX3dyYXBDaGlsZH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXA7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCIuL1JlYWN0XCIpO1xuXG52YXIgQ1NTQ29yZSA9IHJlcXVpcmUoXCIuL0NTU0NvcmVcIik7XG52YXIgUmVhY3RUcmFuc2l0aW9uRXZlbnRzID0gcmVxdWlyZShcIi4vUmVhY3RUcmFuc2l0aW9uRXZlbnRzXCIpO1xuXG52YXIgb25seUNoaWxkID0gcmVxdWlyZShcIi4vb25seUNoaWxkXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vLyBXZSBkb24ndCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NIHVudGlsIHdlIHJlY2VpdmUgYW4gYW5pbWF0aW9uZW5kIG9yXG4vLyB0cmFuc2l0aW9uZW5kIGV2ZW50LiBJZiB0aGUgdXNlciBzY3Jld3MgdXAgYW5kIGZvcmdldHMgdG8gYWRkIGFuIGFuaW1hdGlvblxuLy8gdGhlaXIgbm9kZSB3aWxsIGJlIHN0dWNrIGluIHRoZSBET00gZm9yZXZlciwgc28gd2UgZGV0ZWN0IGlmIGFuIGFuaW1hdGlvblxuLy8gZG9lcyBub3Qgc3RhcnQgYW5kIGlmIGl0IGRvZXNuJ3QsIHdlIGp1c3QgY2FsbCB0aGUgZW5kIGxpc3RlbmVyIGltbWVkaWF0ZWx5LlxudmFyIFRJQ0sgPSAxNztcbnZhciBOT19FVkVOVF9USU1FT1VUID0gNTAwMDtcblxudmFyIG5vRXZlbnRMaXN0ZW5lciA9IG51bGw7XG5cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBub0V2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ3RyYW5zaXRpb24oKTogdHJpZWQgdG8gcGVyZm9ybSBhbiBhbmltYXRpb24gd2l0aG91dCAnICtcbiAgICAgICdhbiBhbmltYXRpb25lbmQgb3IgdHJhbnNpdGlvbmVuZCBldmVudCBhZnRlciB0aW1lb3V0ICgnICtcbiAgICAgICclc21zKS4gWW91IHNob3VsZCBlaXRoZXIgZGlzYWJsZSB0aGlzICcgK1xuICAgICAgJ3RyYW5zaXRpb24gaW4gSlMgb3IgYWRkIGEgQ1NTIGFuaW1hdGlvbi90cmFuc2l0aW9uLicsXG4gICAgICBOT19FVkVOVF9USU1FT1VUXG4gICAgKSA6IG51bGwpO1xuICB9O1xufVxuXG52YXIgUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkJyxcblxuICB0cmFuc2l0aW9uOiBmdW5jdGlvbihhbmltYXRpb25UeXBlLCBmaW5pc2hDYWxsYmFjaykge1xuICAgIHZhciBub2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMubmFtZSArICctJyArIGFuaW1hdGlvblR5cGU7XG4gICAgdmFyIGFjdGl2ZUNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICctYWN0aXZlJztcbiAgICB2YXIgbm9FdmVudFRpbWVvdXQgPSBudWxsO1xuXG4gICAgdmFyIGVuZExpc3RlbmVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjbGVhclRpbWVvdXQobm9FdmVudFRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBDU1NDb3JlLnJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgICBDU1NDb3JlLnJlbW92ZUNsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIFJlYWN0VHJhbnNpdGlvbkV2ZW50cy5yZW1vdmVFbmRFdmVudExpc3RlbmVyKG5vZGUsIGVuZExpc3RlbmVyKTtcblxuICAgICAgLy8gVXN1YWxseSB0aGlzIG9wdGlvbmFsIGNhbGxiYWNrIGlzIHVzZWQgZm9yIGluZm9ybWluZyBhbiBvd25lciBvZlxuICAgICAgLy8gYSBsZWF2ZSBhbmltYXRpb24gYW5kIHRlbGxpbmcgaXQgdG8gcmVtb3ZlIHRoZSBjaGlsZC5cbiAgICAgIGlmIChmaW5pc2hDYWxsYmFjaykge1xuICAgICAgICBmaW5pc2hDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBSZWFjdFRyYW5zaXRpb25FdmVudHMuYWRkRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRMaXN0ZW5lcik7XG5cbiAgICBDU1NDb3JlLmFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG5cbiAgICAvLyBOZWVkIHRvIGRvIHRoaXMgdG8gYWN0dWFsbHkgdHJpZ2dlciBhIHRyYW5zaXRpb24uXG4gICAgdGhpcy5xdWV1ZUNsYXNzKGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBub0V2ZW50VGltZW91dCA9IHNldFRpbWVvdXQobm9FdmVudExpc3RlbmVyLCBOT19FVkVOVF9USU1FT1VUKTtcbiAgICB9XG4gIH0sXG5cbiAgcXVldWVDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5wdXNoKGNsYXNzTmFtZSk7XG5cbiAgICBpZiAoIXRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmZsdXNoQ2xhc3NOYW1lUXVldWUsIFRJQ0spO1xuICAgIH1cbiAgfSxcblxuICBmbHVzaENsYXNzTmFtZVF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5mb3JFYWNoKFxuICAgICAgICBDU1NDb3JlLmFkZENsYXNzLmJpbmQoQ1NTQ29yZSwgdGhpcy5nZXRET01Ob2RlKCkpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzTmFtZVF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xhc3NOYW1lUXVldWUgPSBbXTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxBcHBlYXI6IGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hcHBlYXIpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbignYXBwZWFyJywgZG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbEVudGVyOiBmdW5jdGlvbihkb25lKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZW50ZXIpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbignZW50ZXInLCBkb25lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsTGVhdmU6IGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5sZWF2ZSkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uKCdsZWF2ZScsIGRvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENoaWxkUmVjb25jaWxlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG5cbnZhciBmbGF0dGVuQ2hpbGRyZW4gPSByZXF1aXJlKFwiLi9mbGF0dGVuQ2hpbGRyZW5cIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiKTtcblxuLyoqXG4gKiBSZWFjdENoaWxkUmVjb25jaWxlciBwcm92aWRlcyBoZWxwZXJzIGZvciBpbml0aWFsaXppbmcgb3IgdXBkYXRpbmcgYSBzZXQgb2ZcbiAqIGNoaWxkcmVuLiBJdHMgb3V0cHV0IGlzIHN1aXRhYmxlIGZvciBwYXNzaW5nIGl0IG9udG8gUmVhY3RNdWx0aUNoaWxkIHdoaWNoXG4gKiBkb2VzIGRpZmZlZCByZW9yZGVyaW5nIGFuZCBpbnNlcnRpb24uXG4gKi9cbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHJldHVybiB7P29iamVjdH0gQSBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5lc3RlZENoaWxkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5lc3RlZENoaWxkTm9kZXMpO1xuICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgIGlmIChjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgLy8gVGhlIHJlbmRlcmVkIGNoaWxkcmVuIG11c3QgYmUgdHVybmVkIGludG8gaW5zdGFuY2VzIGFzIHRoZXkncmVcbiAgICAgICAgLy8gbW91bnRlZC5cbiAgICAgICAgdmFyIGNoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkLCBudWxsKTtcbiAgICAgICAgY2hpbGRyZW5bbmFtZV0gPSBjaGlsZEluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIGFuZCByZXR1cm5zIGEgbmV3IHNldCBvZiBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkTm9kZXMgTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH0gQSBuZXcgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24oXG4gICAgcHJldkNoaWxkcmVuLFxuICAgIG5leHROZXN0ZWRDaGlsZE5vZGVzLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIGNvbnRleHQpIHtcbiAgICAvLyBXZSBjdXJyZW50bHkgZG9uJ3QgaGF2ZSBhIHdheSB0byB0cmFjayBtb3ZlcyBoZXJlIGJ1dCBpZiB3ZSB1c2UgaXRlcmF0b3JzXG4gICAgLy8gaW5zdGVhZCBvZiBmb3IuLmluIHdlIGNhbiB6aXAgdGhlIGl0ZXJhdG9ycyBhbmQgY2hlY2sgaWYgYW4gaXRlbSBoYXNcbiAgICAvLyBtb3ZlZC5cbiAgICAvLyBUT0RPOiBJZiBub3RoaW5nIGhhcyBjaGFuZ2VkLCByZXR1cm4gdGhlIHByZXZDaGlsZHJlbiBvYmplY3Qgc28gdGhhdCB3ZVxuICAgIC8vIGNhbiBxdWlja2x5IGJhaWxvdXQgaWYgbm90aGluZyBoYXMgY2hhbmdlZC5cbiAgICB2YXIgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZE5vZGVzKTtcbiAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG5hbWU7XG4gICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDaGlsZCAmJiBwcmV2Q2hpbGQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQoXG4gICAgICAgICAgcHJldkNoaWxkLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gcHJldkNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDaGlsZCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoXG4gICAgICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcmVuZGVyZWRDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltuYW1lXTtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHJlbmRlcmVkQ2hpbGQpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xuXG52YXIgdHJhdmVyc2VBbGxDaGlsZHJlbiA9IHJlcXVpcmUoXCIuL3RyYXZlcnNlQWxsQ2hpbGRyZW5cIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyO1xudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50aHJlZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogdHJhdmVyc2FsLiBBbGxvd3MgYXZvaWRpbmcgYmluZGluZyBjYWxsYmFja3MuXG4gKlxuICogQGNvbnN0cnVjdG9yIEZvckVhY2hCb29rS2VlcGluZ1xuICogQHBhcmFtIHshZnVuY3Rpb259IGZvckVhY2hGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIHRyYXZlcnNhbCB3aXRoLlxuICogQHBhcmFtIHs/Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIGNvbnRleHQgd2l0aC5cbiAqL1xuZnVuY3Rpb24gRm9yRWFjaEJvb2tLZWVwaW5nKGZvckVhY2hGdW5jdGlvbiwgZm9yRWFjaENvbnRleHQpIHtcbiAgdGhpcy5mb3JFYWNoRnVuY3Rpb24gPSBmb3JFYWNoRnVuY3Rpb247XG4gIHRoaXMuZm9yRWFjaENvbnRleHQgPSBmb3JFYWNoQ29udGV4dDtcbn1cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGb3JFYWNoQm9va0tlZXBpbmcsIHR3b0FyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkKHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIGkpIHtcbiAgdmFyIGZvckVhY2hCb29rS2VlcGluZyA9IHRyYXZlcnNlQ29udGV4dDtcbiAgZm9yRWFjaEJvb2tLZWVwaW5nLmZvckVhY2hGdW5jdGlvbi5jYWxsKFxuICAgIGZvckVhY2hCb29rS2VlcGluZy5mb3JFYWNoQ29udGV4dCwgY2hpbGQsIGkpO1xufVxuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuYy5cbiAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9XG4gICAgRm9yRWFjaEJvb2tLZWVwaW5nLmdldFBvb2xlZChmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIEZvckVhY2hCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbi8qKlxuICogUG9vbGVkQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBib29ra2VlcGluZyBhc3NvY2lhdGVkIHdpdGggcGVyZm9ybWluZyBhIGNoaWxkXG4gKiBtYXBwaW5nLiBBbGxvd3MgYXZvaWRpbmcgYmluZGluZyBjYWxsYmFja3MuXG4gKlxuICogQGNvbnN0cnVjdG9yIE1hcEJvb2tLZWVwaW5nXG4gKiBAcGFyYW0geyEqfSBtYXBSZXN1bHQgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gbWFwRnVuY3Rpb24gRnVuY3Rpb24gdG8gcGVyZm9ybSBtYXBwaW5nIHdpdGguXG4gKiBAcGFyYW0gez8qfSBtYXBDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBtYXBwaW5nIHdpdGguXG4gKi9cbmZ1bmN0aW9uIE1hcEJvb2tLZWVwaW5nKG1hcFJlc3VsdCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5tYXBSZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMubWFwRnVuY3Rpb24gPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5tYXBDb250ZXh0ID0gbWFwQ29udGV4dDtcbn1cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgdGhyZWVBcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgaSkge1xuICB2YXIgbWFwQm9va0tlZXBpbmcgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gIHZhciBtYXBSZXN1bHQgPSBtYXBCb29rS2VlcGluZy5tYXBSZXN1bHQ7XG5cbiAgdmFyIGtleVVuaXF1ZSA9ICFtYXBSZXN1bHQuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGtleVVuaXF1ZSxcbiAgICAgICdSZWFjdENoaWxkcmVuLm1hcCguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgK1xuICAgICAgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgK1xuICAgICAgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJyxcbiAgICAgIG5hbWVcbiAgICApIDogbnVsbCk7XG4gIH1cblxuICBpZiAoa2V5VW5pcXVlKSB7XG4gICAgdmFyIG1hcHBlZENoaWxkID1cbiAgICAgIG1hcEJvb2tLZWVwaW5nLm1hcEZ1bmN0aW9uLmNhbGwobWFwQm9va0tlZXBpbmcubWFwQ29udGV4dCwgY2hpbGQsIGkpO1xuICAgIG1hcFJlc3VsdFtuYW1lXSA9IG1hcHBlZENoaWxkO1xuICB9XG59XG5cbi8qKlxuICogTWFwcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogVGhlIHByb3ZpZGVkIG1hcEZ1bmN0aW9uKGNoaWxkLCBrZXksIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBUT0RPOiBUaGlzIG1heSBsaWtlbHkgYnJlYWsgYW55IGNhbGxzIHRvIGBSZWFjdENoaWxkcmVuLm1hcGAgdGhhdCB3ZXJlXG4gKiBwcmV2aW91c2x5IHJlbHlpbmcgb24gdGhlIGZhY3QgdGhhdCB3ZSBndWFyZGVkIGFnYWluc3QgbnVsbCBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gbWFwRnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IG1hcENvbnRleHQgQ29udGV4dCBmb3IgbWFwRnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHZhciBtYXBSZXN1bHQgPSB7fTtcbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IE1hcEJvb2tLZWVwaW5nLmdldFBvb2xlZChtYXBSZXN1bHQsIGZ1bmMsIGNvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0LCB0cmF2ZXJzZUNvbnRleHQpO1xuICBNYXBCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCk7XG4gIHJldHVybiBSZWFjdEZyYWdtZW50LmNyZWF0ZShtYXBSZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBpKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhc1xuICogYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGV4dCkge1xuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXksIG51bGwpO1xufVxuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHtcbiAgZm9yRWFjaDogZm9yRWFjaENoaWxkcmVuLFxuICBtYXA6IG1hcENoaWxkcmVuLFxuICBjb3VudDogY291bnRDaGlsZHJlblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkcmVuO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q2xhc3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoXCIuL1JlYWN0RXJyb3JVdGlsc1wiKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKTtcbnZhciBSZWFjdExpZmVDeWNsZSA9IHJlcXVpcmUoXCIuL1JlYWN0TGlmZUN5Y2xlXCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIik7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlUXVldWVcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIE1JWElOU19LRVkgPSBrZXlPZih7bWl4aW5zOiBudWxsfSk7XG5cbi8qKlxuICogUG9saWNpZXMgdGhhdCBkZXNjcmliZSBtZXRob2RzIGluIGBSZWFjdENsYXNzSW50ZXJmYWNlYC5cbiAqL1xudmFyIFNwZWNQb2xpY3kgPSBrZXlNaXJyb3Ioe1xuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBvbmx5IG9uY2UgYnkgdGhlIGNsYXNzIHNwZWNpZmljYXRpb24gb3IgbWl4aW4uXG4gICAqL1xuICBERUZJTkVfT05DRTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgbWF5IGJlIGRlZmluZWQgYnkgYm90aCB0aGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBhbmQgbWl4aW5zLlxuICAgKiBTdWJzZXF1ZW50IGRlZmluaXRpb25zIHdpbGwgYmUgY2hhaW5lZC4gVGhlc2UgbWV0aG9kcyBtdXN0IHJldHVybiB2b2lkLlxuICAgKi9cbiAgREVGSU5FX01BTlk6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIGFyZSBvdmVycmlkaW5nIHRoZSBiYXNlIGNsYXNzLlxuICAgKi9cbiAgT1ZFUlJJREVfQkFTRTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgYXJlIHNpbWlsYXIgdG8gREVGSU5FX01BTlksIGV4Y2VwdCB3ZSBhc3N1bWUgdGhleSByZXR1cm5cbiAgICogb2JqZWN0cy4gV2UgdHJ5IHRvIG1lcmdlIHRoZSBrZXlzIG9mIHRoZSByZXR1cm4gdmFsdWVzIG9mIGFsbCB0aGUgbWl4ZWQgaW5cbiAgICogZnVuY3Rpb25zLiBJZiB0aGVyZSBpcyBhIGtleSBjb25mbGljdCB3ZSB0aHJvdy5cbiAgICovXG4gIERFRklORV9NQU5ZX01FUkdFRDogbnVsbFxufSk7XG5cblxudmFyIGluamVjdGVkTWl4aW5zID0gW107XG5cbi8qKlxuICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcbiAqIG9yIG5hdGl2ZSBjb21wb25lbnRzLlxuICpcbiAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGBSZWFjdENsYXNzYCwgcGFzcyBhIHNwZWNpZmljYXRpb24gb2ZcbiAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gPGRpdj5IZWxsbyBXb3JsZDwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDbGFzc0ludGVyZmFjZWAgZm9yXG4gKiBtb3JlIHRoZSBjb21wcmVoZW5zaXZlIHByb3RvY29sLiBBbnkgb3RoZXIgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBpbiB0aGVcbiAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAqXG4gKiBAaW50ZXJmYWNlIFJlYWN0Q2xhc3NJbnRlcmZhY2VcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RDbGFzc0ludGVyZmFjZSA9IHtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHthcnJheX1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBtaXhpbnM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgKiB0aGUgY29tcG9uZW50J3MgY29uc3RydWN0b3IgaW5zdGVhZCBvZiBpdHMgcHJvdG90eXBlIChzdGF0aWMgbWV0aG9kcykuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc3RhdGljczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBwcm9wVHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgdGhpcyBjb21wb25lbnQgc2V0cyBmb3IgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAqIGB0aGlzLnByb3BzYCBpZiB0aGF0IHByb3AgaXMgbm90IHNwZWNpZmllZCAoaS5lLiB1c2luZyBhbiBgaW5gIGNoZWNrKS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgKiBvbiBgdGhpcy5zdGF0ZWAgb3IgdXNlIGB0aGlzLnNldFN0YXRlYC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAqXG4gICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7XG4gICAqICAgICAgIGlzT246IGZhbHNlLFxuICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldEluaXRpYWxTdGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuXG4gIC8qKlxuICAgKiBVc2VzIHByb3BzIGZyb20gYHRoaXMucHJvcHNgIGFuZCBzdGF0ZSBmcm9tIGB0aGlzLnN0YXRlYCB0byByZW5kZXIgdGhlXG4gICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBObyBndWFyYW50ZWVzIGFyZSBtYWRlIGFib3V0IHdoZW4gb3IgaG93IG9mdGVuIHRoaXMgbWV0aG9kIGlzIGludm9rZWQsIHNvXG4gICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgKlxuICAgKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAqIEBub3NpZGVlZmZlY3RzXG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgcmVuZGVyOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG5cblxuICAvLyA9PT09IERlbGVnYXRlIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbml0aWFsbHkgY3JlYXRlZCBhbmQgYWJvdXQgdG8gYmUgbW91bnRlZC5cbiAgICogVGhpcyBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyBvciBkYXRhIGNyZWF0ZWRcbiAgICogYnkgdGhpcyBtZXRob2QgbXVzdCBiZSBjbGVhbmVkIHVwIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGAuXG4gICAqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkIGFuZCBoYXMgYSBET00gcmVwcmVzZW50YXRpb24uXG4gICAqIEhvd2V2ZXIsIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBET00gbm9kZSBpcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAqIGJlZW4gbW91bnRlZCAoaW5pdGlhbGl6ZWQgYW5kIHJlbmRlcmVkKSBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byByZWFjdCB0byBhIHByb3AgdHJhbnNpdGlvbiBieSB1cGRhdGluZyB0aGVcbiAgICogc3RhdGUgdXNpbmcgYHRoaXMuc2V0U3RhdGVgLiBDdXJyZW50IHByb3BzIGFyZSBhY2Nlc3NlZCB2aWEgYHRoaXMucHJvcHNgLlxuICAgKlxuICAgKiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgKiAgICAgICBsaWtlc0luY3JlYXNpbmc6IG5leHRQcm9wcy5saWtlQ291bnQgPiB0aGlzLnByb3BzLmxpa2VDb3VudFxuICAgKiAgICAgfSk7XG4gICAqICAgfVxuICAgKlxuICAgKiBOT1RFOiBUaGVyZSBpcyBubyBlcXVpdmFsZW50IGBjb21wb25lbnRXaWxsUmVjZWl2ZVN0YXRlYC4gQW4gaW5jb21pbmcgcHJvcFxuICAgKiB0cmFuc2l0aW9uIG1heSBjYXVzZSBhIHN0YXRlIGNoYW5nZSwgYnV0IHRoZSBvcHBvc2l0ZSBpcyBub3QgdHJ1ZS4gSWYgeW91XG4gICAqIG5lZWQgaXQsIHlvdSBhcmUgcHJvYmFibHkgbG9va2luZyBmb3IgYGNvbXBvbmVudFdpbGxVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGlsZSBkZWNpZGluZyBpZiB0aGUgY29tcG9uZW50IHNob3VsZCBiZSB1cGRhdGVkIGFzIGEgcmVzdWx0IG9mXG4gICAqIHJlY2VpdmluZyBuZXcgcHJvcHMsIHN0YXRlIGFuZC9vciBjb250ZXh0LlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBgcmV0dXJuIGZhbHNlYCB3aGVuIHlvdSdyZSBjZXJ0YWluIHRoYXQgdGhlXG4gICAqIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBwcm9wcy9zdGF0ZS9jb250ZXh0IHdpbGwgbm90IHJlcXVpcmUgYSBjb21wb25lbnRcbiAgICogdXBkYXRlLlxuICAgKlxuICAgKiAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAqICAgICByZXR1cm4gIWVxdWFsKG5leHRQcm9wcywgdGhpcy5wcm9wcykgfHxcbiAgICogICAgICAgIWVxdWFsKG5leHRTdGF0ZSwgdGhpcy5zdGF0ZSkgfHxcbiAgICogICAgICAgIWVxdWFsKG5leHRDb250ZXh0LCB0aGlzLmNvbnRleHQpO1xuICAgKiAgIH1cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgdXBkYXRlLlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfT05DRSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gdXBkYXRlIGR1ZSB0byBhIHRyYW5zaXRpb24gZnJvbVxuICAgKiBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAgdG8gYG5leHRQcm9wc2AsIGBuZXh0U3RhdGVgXG4gICAqIGFuZCBgbmV4dENvbnRleHRgLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBwZXJmb3JtIHByZXBhcmF0aW9uIGJlZm9yZSBhbiB1cGRhdGUgb2NjdXJzLlxuICAgKlxuICAgKiBOT1RFOiBZb3UgKipjYW5ub3QqKiB1c2UgYHRoaXMuc2V0U3RhdGUoKWAgaW4gdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQncyBET00gcmVwcmVzZW50YXRpb24gaGFzIGJlZW4gdXBkYXRlZC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJldlByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldlN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNvbnRleHRcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IGFuZCBoYXZlXG4gICAqIGl0cyBET00gcmVwcmVzZW50YXRpb24gZGVzdHJveWVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBkZWFsbG9jYXRlIGFueSBleHRlcm5hbCByZXNvdXJjZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGBjb21wb25lbnREaWRVbm1vdW50YCBzaW5jZSB5b3VyIGNvbXBvbmVudCB3aWxsIGhhdmUgYmVlblxuICAgKiBkZXN0cm95ZWQgYnkgdGhhdCBwb2ludC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuXG5cbiAgLy8gPT09PSBBZHZhbmNlZCBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0VcblxufTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gY2xhc3Mgc3BlY2lmaWNhdGlvbiBrZXlzIHRvIHNwZWNpYWwgcHJvY2Vzc2luZyBmdW5jdGlvbnMuXG4gKlxuICogQWx0aG91Z2ggdGhlc2UgYXJlIGRlY2xhcmVkIGxpa2UgaW5zdGFuY2UgcHJvcGVydGllcyBpbiB0aGUgc3BlY2lmaWNhdGlvblxuICogd2hlbiBkZWZpbmluZyBjbGFzc2VzIHVzaW5nIGBSZWFjdC5jcmVhdGVDbGFzc2AsIHRoZXkgYXJlIGFjdHVhbGx5IHN0YXRpY1xuICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAqIGJlaW5nIHN0YXRpYywgdGhleSBtdXN0IGJlIGRlZmluZWQgb3V0c2lkZSBvZiB0aGUgXCJzdGF0aWNzXCIga2V5IHVuZGVyXG4gKiB3aGljaCBhbGwgb3RoZXIgc3RhdGljIG1ldGhvZHMgYXJlIGRlZmluZWQuXG4gKi9cbnZhciBSRVNFUlZFRF9TUEVDX0tFWVMgPSB7XG4gIGRpc3BsYXlOYW1lOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZGlzcGxheU5hbWUpIHtcbiAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICB9LFxuICBtaXhpbnM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICAgIENvbnN0cnVjdG9yLFxuICAgICAgICBjaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgIGNoaWxkQ29udGV4dFR5cGVzXG4gICAgKTtcbiAgfSxcbiAgY29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFsaWRhdGVUeXBlRGVmKFxuICAgICAgICBDb25zdHJ1Y3RvcixcbiAgICAgICAgY29udGV4dFR5cGVzLFxuICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgY29udGV4dFR5cGVzXG4gICAgKTtcbiAgfSxcbiAgLyoqXG4gICAqIFNwZWNpYWwgY2FzZSBnZXREZWZhdWx0UHJvcHMgd2hpY2ggc2hvdWxkIG1vdmUgaW50byBzdGF0aWNzIGJ1dCByZXF1aXJlc1xuICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGdldERlZmF1bHRQcm9wcykge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKFxuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMsXG4gICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgIH1cbiAgfSxcbiAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFsaWRhdGVUeXBlRGVmKFxuICAgICAgICBDb25zdHJ1Y3RvcixcbiAgICAgICAgcHJvcFR5cGVzLFxuICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3BcbiAgICAgICk7XG4gICAgfVxuICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgQ29uc3RydWN0b3IucHJvcFR5cGVzLFxuICAgICAgcHJvcFR5cGVzXG4gICAgKTtcbiAgfSxcbiAgc3RhdGljczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIHN0YXRpY3MpIHtcbiAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIGludmFyaWFudCBzbyBjb21wb25lbnRzXG4gICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG5vdCBpbiBfX0RFVl9fXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgdHlwZW9mIHR5cGVEZWZbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDbGFzcycsXG4gICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSkge1xuICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSkgP1xuICAgIFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV0gOlxuICAgIG51bGw7XG5cbiAgLy8gRGlzYWxsb3cgb3ZlcnJpZGluZyBvZiBiYXNlIGNsYXNzIG1ldGhvZHMgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UsXG4gICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlICcgK1xuICAgICAgJ2Alc2AgZnJvbSB5b3VyIGNsYXNzIHNwZWNpZmljYXRpb24uIEVuc3VyZSB0aGF0IHlvdXIgbWV0aG9kIG5hbWVzICcgK1xuICAgICAgJ2RvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy4nLFxuICAgICAgbmFtZVxuICAgICkgOiBpbnZhcmlhbnQoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSk7XG4gIH1cblxuICAvLyBEaXNhbGxvdyBkZWZpbmluZyBtZXRob2RzIG1vcmUgdGhhbiBvbmNlIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gIGlmIChwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZIHx8XG4gICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcbiAgICAgICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICtcbiAgICAgICd0byBhIG1peGluLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZIHx8XG4gICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpKTtcbiAgfVxufVxuXG4vKipcbiAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICogc3BlY2lmaWNhdGlvbiBrZXlzIHdoZW4gYnVpbGRpbmcgUmVhY3QgY2xhc3NzZXMuXG4gKi9cbmZ1bmN0aW9uIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKSB7XG4gIGlmICghc3BlYykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIHNwZWMgIT09ICdmdW5jdGlvbicsXG4gICAgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArXG4gICAgJ3VzZSBhIGNvbXBvbmVudCBjbGFzcyBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LidcbiAgKSA6IGludmFyaWFudCh0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJykpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYyksXG4gICAgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArXG4gICAgJ3VzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LidcbiAgKSA6IGludmFyaWFudCghUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpKSk7XG5cbiAgdmFyIHByb3RvID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gIC8vIEJ5IGhhbmRsaW5nIG1peGlucyBiZWZvcmUgYW55IG90aGVyIHByb3BlcnRpZXMsIHdlIGVuc3VyZSB0aGUgc2FtZVxuICAvLyBjaGFpbmluZyBvcmRlciBpcyBhcHBsaWVkIHRvIG1ldGhvZHMgd2l0aCBERUZJTkVfTUFOWSBwb2xpY3ksIHdoZXRoZXJcbiAgLy8gbWl4aW5zIGFyZSBsaXN0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZXNlIG1ldGhvZHMgaW4gdGhlIHNwZWMuXG4gIGlmIChzcGVjLmhhc093blByb3BlcnR5KE1JWElOU19LRVkpKSB7XG4gICAgUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3Rvciwgc3BlYy5taXhpbnMpO1xuICB9XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgaWYgKCFzcGVjLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gTUlYSU5TX0tFWSkge1xuICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcGVydHkgPSBzcGVjW25hbWVdO1xuICAgIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sIG5hbWUpO1xuXG4gICAgaWYgKFJFU0VSVkVEX1NQRUNfS0VZUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgUkVTRVJWRURfU1BFQ19LRVlTW25hbWVdKENvbnN0cnVjdG9yLCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldHVwIG1ldGhvZHMgb24gcHJvdG90eXBlOlxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBtZW1iZXIgbWV0aG9kcyBzaG91bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgYm91bmQ6XG4gICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgIC8vIDIuIE92ZXJyaWRkZW4gbWV0aG9kcyAodGhhdCB3ZXJlIG1peGVkIGluKS5cbiAgICAgIHZhciBpc1JlYWN0Q2xhc3NNZXRob2QgPVxuICAgICAgICBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIHZhciBtYXJrZWREb250QmluZCA9IHByb3BlcnR5ICYmIHByb3BlcnR5Ll9fcmVhY3REb250QmluZDtcbiAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgdmFyIHNob3VsZEF1dG9CaW5kID1cbiAgICAgICAgaXNGdW5jdGlvbiAmJlxuICAgICAgICAhaXNSZWFjdENsYXNzTWV0aG9kICYmXG4gICAgICAgICFpc0FscmVhZHlEZWZpbmVkICYmXG4gICAgICAgICFtYXJrZWREb250QmluZDtcblxuICAgICAgaWYgKHNob3VsZEF1dG9CaW5kKSB7XG4gICAgICAgIGlmICghcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgICAgICAgcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwID0ge307XG4gICAgICAgIH1cbiAgICAgICAgcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwW25hbWVdID0gcHJvcGVydHk7XG4gICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXTtcblxuICAgICAgICAgIC8vIFRoZXNlIGNhc2VzIHNob3VsZCBhbHJlYWR5IGJlIGNhdWdodCBieSB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlXG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgIGlzUmVhY3RDbGFzc01ldGhvZCAmJiAoXG4gICAgICAgICAgICAgIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG4gICAgICAgICAgICAnd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLicsXG4gICAgICAgICAgICBzcGVjUG9saWN5LFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICkgOiBpbnZhcmlhbnQoaXNSZWFjdENsYXNzTWV0aG9kICYmIChcbiAgICAgICAgICAgIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKVxuICAgICAgICAgICkpKTtcblxuICAgICAgICAgIC8vIEZvciBtZXRob2RzIHdoaWNoIGFyZSBkZWZpbmVkIG1vcmUgdGhhbiBvbmNlLCBjYWxsIHRoZSBleGlzdGluZ1xuICAgICAgICAgIC8vIG1ldGhvZHMgYmVmb3JlIGNhbGxpbmcgdGhlIG5ldyBwcm9wZXJ0eSwgbWVyZ2luZyBpZiBhcHByb3ByaWF0ZS5cbiAgICAgICAgICBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpIHtcbiAgICAgICAgICAgIHByb3RvW25hbWVdID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpIHtcbiAgICAgICAgICAgIHByb3RvW25hbWVdID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAgICAgLy8gQWRkIHZlcmJvc2UgZGlzcGxheU5hbWUgdG8gdGhlIGZ1bmN0aW9uLCB3aGljaCBoZWxwcyB3aGVuIGxvb2tpbmdcbiAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICBpZiAoIXN0YXRpY3MpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICBpZiAoIXN0YXRpY3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpc1Jlc2VydmVkID0gbmFtZSBpbiBSRVNFUlZFRF9TUEVDX0tFWVM7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFpc1Jlc2VydmVkLFxuICAgICAgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCAnICtcbiAgICAgICdwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgJyArXG4gICAgICAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICtcbiAgICAgICdjb25zdHJ1Y3Rvci4nLFxuICAgICAgbmFtZVxuICAgICkgOiBpbnZhcmlhbnQoIWlzUmVzZXJ2ZWQpKTtcblxuICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFpc0luaGVyaXRlZCxcbiAgICAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgK1xuICAgICAgJ2R1ZSB0byBhIG1peGluLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudCghaXNJbmhlcml0ZWQpKTtcbiAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbmUgVGhlIGZpcnN0IG9iamVjdCwgd2hpY2ggaXMgbXV0YXRlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcsXG4gICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLidcbiAgKSA6IGludmFyaWFudChvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnKSk7XG5cbiAgZm9yICh2YXIga2V5IGluIHR3bykge1xuICAgIGlmICh0d28uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgb25lW2tleV0gPT09IHVuZGVmaW5lZCxcbiAgICAgICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArXG4gICAgICAgICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICtcbiAgICAgICAgJ21heSBiZSBkdWUgdG8gYSBtaXhpbjsgaW4gcGFydGljdWxhciwgdGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHR3byAnICtcbiAgICAgICAgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArXG4gICAgICAgICd3aXRoIGNsYXNoaW5nIGtleXMuJyxcbiAgICAgICAga2V5XG4gICAgICApIDogaW52YXJpYW50KG9uZVtrZXldID09PSB1bmRlZmluZWQpKTtcbiAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvbmU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBtZXJnZXMgdGhlaXIgcmV0dXJuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHZhciBiID0gdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfSBlbHNlIGlmIChiID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICB2YXIgYyA9IHt9O1xuICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIGlnbm9yZXMgdGhlaXIgcmV0dXJuIHZhbGVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBCaW5kcyBhIG1ldGhvZCB0byB0aGUgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCBNZXRob2QgdG8gYmUgYm91bmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGJvdW5kIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKSB7XG4gIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgIHZhciBfYmluZCA9IGJvdW5kTWV0aG9kLmJpbmQ7XG4gICAgLyogZXNsaW50LWRpc2FibGUgYmxvY2stc2NvcGVkLXZhciwgbm8tdW5kZWYgKi9cbiAgICBib3VuZE1ldGhvZC5iaW5kID0gZnVuY3Rpb24obmV3VGhpcyApIHtmb3IgKHZhciBhcmdzPVtdLCRfXzA9MSwkX18xPWFyZ3VtZW50cy5sZW5ndGg7JF9fMDwkX18xOyRfXzArKykgYXJncy5wdXNoKGFyZ3VtZW50c1skX18wXSk7XG4gICAgICAvLyBVc2VyIGlzIHRyeWluZyB0byBiaW5kKCkgYW4gYXV0b2JvdW5kIG1ldGhvZDsgd2UgZWZmZWN0aXZlbHkgd2lsbFxuICAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcbiAgICAgICAgICAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLFxuICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICtcbiAgICAgICAgICAnUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2UgJyArXG4gICAgICAgICAgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJyxcbiAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgICAgfVxuICAgICAgdmFyIHJlYm91bmRNZXRob2QgPSBfYmluZC5hcHBseShib3VuZE1ldGhvZCwgYXJndW1lbnRzKTtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBhcmdzO1xuICAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYm91bmRNZXRob2Q7XG59XG5cbi8qKlxuICogQmluZHMgYWxsIGF1dG8tYm91bmQgbWV0aG9kcyBpbiBhIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IENvbXBvbmVudCB3aG9zZSBtZXRob2QgaXMgZ29pbmcgdG8gYmUgYm91bmQuXG4gKi9cbmZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KSB7XG4gIGZvciAodmFyIGF1dG9CaW5kS2V5IGluIGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICBpZiAoY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkpIHtcbiAgICAgIHZhciBtZXRob2QgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwW2F1dG9CaW5kS2V5XTtcbiAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoXG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgUmVhY3RFcnJvclV0aWxzLmd1YXJkKFxuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgKyAnLicgKyBhdXRvQmluZEtleVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdHlwZURlcHJlY2F0aW9uRGVzY3JpcHRvciA9IHtcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gdGhpcy5kaXNwbGF5TmFtZSB8fCB0aGlzLm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICclcy50eXBlIGlzIGRlcHJlY2F0ZWQuIFVzZSAlcyBkaXJlY3RseSB0byBhY2Nlc3MgdGhlIGNsYXNzLicsXG4gICAgICBkaXNwbGF5TmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lXG4gICAgKSA6IG51bGwpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHtcbiAgICAgIHZhbHVlOiB0aGlzXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbi8qKlxuICogQWRkIG1vcmUgdG8gdGhlIFJlYWN0Q2xhc3MgYmFzZSBjbGFzcy4gVGhlc2UgYXJlIGFsbCBsZWdhY3kgZmVhdHVyZXMgYW5kXG4gKiB0aGVyZWZvcmUgbm90IGFscmVhZHkgcGFydCBvZiB0aGUgbW9kZXJuIFJlYWN0Q29tcG9uZW50LlxuICovXG52YXIgUmVhY3RDbGFzc01peGluID0ge1xuXG4gIC8qKlxuICAgKiBUT0RPOiBUaGlzIHdpbGwgYmUgZGVwcmVjYXRlZCBiZWNhdXNlIHN0YXRlIHNob3VsZCBhbHdheXMga2VlcCBhIGNvbnNpc3RlbnRcbiAgICogdHlwZSBzaWduYXR1cmUgYW5kIHRoZSBvbmx5IHVzZSBjYXNlIGZvciB0aGlzLCBpcyB0byBhdm9pZCB0aGF0LlxuICAgKi9cbiAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcywgbmV3U3RhdGUpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgIGlmIChvd25lciAhPT0gbnVsbCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXG4gICAgICAgICAgJyVzIGlzIGFjY2Vzc2luZyBpc01vdW50ZWQgaW5zaWRlIGl0cyByZW5kZXIoKSBmdW5jdGlvbi4gJyArXG4gICAgICAgICAgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArXG4gICAgICAgICAgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgK1xuICAgICAgICAgICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgICBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gICAgcmV0dXJuIChcbiAgICAgIGludGVybmFsSW5zdGFuY2UgJiZcbiAgICAgIGludGVybmFsSW5zdGFuY2UgIT09IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2VcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgcHJvcHMgYXJlIHVwZGF0ZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHVibGljXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBzZXRQcm9wczogZnVuY3Rpb24ocGFydGlhbFByb3BzLCBjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVNldFByb3BzKHRoaXMsIHBhcnRpYWxQcm9wcyk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIGFsbCB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgcHJvcHMgYXJlIHVwZGF0ZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHVibGljXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICByZXBsYWNlUHJvcHM6IGZ1bmN0aW9uKG5ld1Byb3BzLCBjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VQcm9wcyh0aGlzLCBuZXdQcm9wcyk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uKCkge307XG5hc3NpZ24oXG4gIFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLFxuICBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsXG4gIFJlYWN0Q2xhc3NNaXhpblxuKTtcblxuLyoqXG4gKiBNb2R1bGUgZm9yIGNyZWF0aW5nIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICpcbiAqIEBjbGFzcyBSZWFjdENsYXNzXG4gKi9cbnZhciBSZWFjdENsYXNzID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGNvbXBvbmVudCBjbGFzcyBnaXZlbiBhIGNsYXNzIHNwZWNpZmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzcGVjIENsYXNzIHNwZWNpZmljYXRpb24gKHdoaWNoIG11c3QgZGVmaW5lIGByZW5kZXJgKS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IENvbXBvbmVudCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY3JlYXRlQ2xhc3M6IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgICAgLy8gVGhpcyBjb25zdHJ1Y3RvciBpcyBvdmVycmlkZGVuIGJ5IG1vY2tzLiBUaGUgYXJndW1lbnQgaXMgdXNlZFxuICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLlxuXG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcixcbiAgICAgICAgICAnU29tZXRoaW5nIGlzIGNhbGxpbmcgYSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHkuIFVzZSBhIGZhY3Rvcnkgb3IgJyArXG4gICAgICAgICAgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeSdcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBXaXJlIHVwIGF1dG8tYmluZGluZ1xuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnN0YXRlID0gbnVsbDtcblxuICAgICAgLy8gUmVhY3RDbGFzc2VzIGRvZXNuJ3QgaGF2ZSBjb25zdHJ1Y3RvcnMuIEluc3RlYWQsIHRoZXkgdXNlIHRoZVxuICAgICAgLy8gZ2V0SW5pdGlhbFN0YXRlIGFuZCBjb21wb25lbnRXaWxsTW91bnQgbWV0aG9kcyBmb3IgaW5pdGlhbGl6YXRpb24uXG5cbiAgICAgIHZhciBpbml0aWFsU3RhdGUgPSB0aGlzLmdldEluaXRpYWxTdGF0ZSA/IHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkgOiBudWxsO1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGJhZCBwcmFjdGljZS4gQ29uc2lkZXIgd2FybmluZyBoZXJlIGFuZFxuICAgICAgICAgIC8vIGRlcHJlY2F0aW5nIHRoaXMgY29udmVuaWVuY2UuXG4gICAgICAgICAgaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSxcbiAgICAgICAgJyVzLmdldEluaXRpYWxTdGF0ZSgpOiBtdXN0IHJldHVybiBhbiBvYmplY3Qgb3IgbnVsbCcsXG4gICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkpO1xuXG4gICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH07XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJlYWN0Q2xhc3NDb21wb25lbnQoKTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcblxuICAgIGluamVjdGVkTWl4aW5zLmZvckVhY2goXG4gICAgICBtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKVxuICAgICk7XG5cbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYyk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBkZWZhdWx0UHJvcHMgcHJvcGVydHkgYWZ0ZXIgYWxsIG1peGlucyBoYXZlIGJlZW4gbWVyZ2VkXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gVGhpcyBpcyBhIHRhZyB0byBpbmRpY2F0ZSB0aGF0IHRoZSB1c2Ugb2YgdGhlc2UgbWV0aG9kIG5hbWVzIGlzIG9rLFxuICAgICAgLy8gc2luY2UgaXQncyB1c2VkIHdpdGggY3JlYXRlQ2xhc3MuIElmIGl0J3Mgbm90LCB0aGVuIGl0J3MgbGlrZWx5IGFcbiAgICAgIC8vIG1pc3Rha2Ugc28gd2UnbGwgd2FybiB5b3UgdG8gdXNlIHRoZSBzdGF0aWMgcHJvcGVydHksIHByb3BlcnR5XG4gICAgICAvLyBpbml0aWFsaXplciBvciBjb25zdHJ1Y3RvciByZXNwZWN0aXZlbHkuXG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyLFxuICAgICAgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJ1xuICAgICkgOiBpbnZhcmlhbnQoQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcikpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgK1xuICAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuICAgICAgICAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJyxcbiAgICAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gUmVkdWNlIHRpbWUgc3BlbnQgZG9pbmcgbG9va3VwcyBieSBzZXR0aW5nIHRoZXNlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENsYXNzSW50ZXJmYWNlKSB7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExlZ2FjeSBob29rXG4gICAgQ29uc3RydWN0b3IudHlwZSA9IENvbnN0cnVjdG9yO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgJ3R5cGUnLCB0eXBlRGVwcmVjYXRpb25EZXNjcmlwdG9yKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5IChlczUtc2hpbS9zaGFtIHRvbylcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgaW5qZWN0TWl4aW46IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICBpbmplY3RlZE1peGlucy5wdXNoKG1peGluKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlUXVldWVcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0KSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIHRvIG11dGF0ZVxuICogc3RhdGUuIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gKiBhcyB0aGV5IG1heSBldmVudHVhbGx5IGJlIGJhdGNoZWQgdG9nZXRoZXIuICBZb3UgY2FuIHByb3ZpZGUgYW4gb3B0aW9uYWxcbiAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gKiBjb21wbGV0ZWQuXG4gKlxuICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHNldFN0YXRlLCBpdCB3aWxsIGJlIGNhbGxlZCBhdCBzb21lIHBvaW50IGluXG4gKiB0aGUgZnV0dXJlIChub3Qgc3luY2hyb25vdXNseSkuIEl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVwIHRvIGRhdGVcbiAqIGNvbXBvbmVudCBhcmd1bWVudHMgKHN0YXRlLCBwcm9wcywgY29udGV4dCkuIFRoZXNlIHZhbHVlcyBjYW4gYmUgZGlmZmVyZW50XG4gKiBmcm9tIHRoaXMuKiBiZWNhdXNlIHlvdXIgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBhZnRlciByZWNlaXZlUHJvcHMgYnV0IGJlZm9yZVxuICogc2hvdWxkQ29tcG9uZW50VXBkYXRlLCBhbmQgdGhpcyBuZXcgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCB3aWxsIG5vdCB5ZXQgYmVcbiAqIGFzc2lnbmVkIHRvIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgb3IgZnVuY3Rpb24gdG9cbiAqICAgICAgICBwcm9kdWNlIG5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fFxuICAgIHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICBwYXJ0aWFsU3RhdGUgPT0gbnVsbCxcbiAgICAnc2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSAnICtcbiAgICAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLidcbiAgKSA6IGludmFyaWFudCh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fFxuICB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8XG4gIHBhcnRpYWxTdGF0ZSA9PSBudWxsKSk7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHBhcnRpYWxTdGF0ZSAhPSBudWxsLFxuICAgICAgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICtcbiAgICAgICdpbnN0ZWFkLCB1c2UgZm9yY2VVcGRhdGUoKS4nXG4gICAgKSA6IG51bGwpO1xuICB9XG4gIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAqXG4gKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgdXBkYXRlIGlzIGNvbXBsZXRlLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRGVwcmVjYXRlZCBBUElzLiBUaGVzZSBBUElzIHVzZWQgdG8gZXhpc3Qgb24gY2xhc3NpYyBSZWFjdCBjbGFzc2VzIGJ1dCBzaW5jZVxuICogd2Ugd291bGQgbGlrZSB0byBkZXByZWNhdGUgdGhlbSwgd2UncmUgbm90IGdvaW5nIHRvIG1vdmUgdGhlbSBvdmVyIHRvIHRoaXNcbiAqIG1vZGVybiBiYXNlIGNsYXNzLiBJbnN0ZWFkLCB3ZSBkZWZpbmUgYSBnZXR0ZXIgdGhhdCB3YXJucyBpZiBpdCdzIGFjY2Vzc2VkLlxuICovXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICBnZXRET01Ob2RlOiBbXG4gICAgICAnZ2V0RE9NTm9kZScsXG4gICAgICAnVXNlIFJlYWN0LmZpbmRET01Ob2RlKGNvbXBvbmVudCkgaW5zdGVhZC4nXG4gICAgXSxcbiAgICBpc01vdW50ZWQ6IFtcbiAgICAgICdpc01vdW50ZWQnLFxuICAgICAgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgK1xuICAgICAgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLidcbiAgICBdLFxuICAgIHJlcGxhY2VQcm9wczogW1xuICAgICAgJ3JlcGxhY2VQcm9wcycsXG4gICAgICAnSW5zdGVhZCwgY2FsbCBSZWFjdC5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXG4gICAgXSxcbiAgICByZXBsYWNlU3RhdGU6IFtcbiAgICAgICdyZXBsYWNlU3RhdGUnLFxuICAgICAgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgK1xuICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ1xuICAgIF0sXG4gICAgc2V0UHJvcHM6IFtcbiAgICAgICdzZXRQcm9wcycsXG4gICAgICAnSW5zdGVhZCwgY2FsbCBSZWFjdC5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXG4gICAgXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5mbykge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICclcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlcycsXG4gICAgICAgICAgICBpbmZvWzBdLFxuICAgICAgICAgICAgaW5mb1sxXVxuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgIH1cbiAgfTtcbiAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NSURPcGVyYXRpb25zXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xuXG4vKipcbiAqIEFic3RyYWN0cyBhd2F5IGFsbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSByZWNvbmNpbGVyIHRoYXQgcmVxdWlyZXMga25vd2xlZGdlIG9mXG4gKiB0aGUgYnJvd3NlciBjb250ZXh0LiBUT0RPOiBUaGVzZSBjYWxsZXJzIHNob3VsZCBiZSByZWZhY3RvcmVkIHRvIGF2b2lkIHRoZVxuICogbmVlZCBmb3IgdGhpcyBpbmplY3Rpb24uXG4gKi9cbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHtcblxuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOlxuICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyxcblxuICByZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOlxuICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCxcblxuICAvKipcbiAgICogSWYgYSBwYXJ0aWN1bGFyIGVudmlyb25tZW50IHJlcXVpcmVzIHRoYXQgc29tZSByZXNvdXJjZXMgYmUgY2xlYW5lZCB1cCxcbiAgICogc3BlY2lmeSB0aGlzIGluIHRoZSBpbmplY3RlZCBNaXhpbi4gSW4gdGhlIERPTSwgd2Ugd291bGQgbGlrZWx5IHdhbnQgdG9cbiAgICogcHVyZ2UgYW55IGNhY2hlZCBub2RlIElEIGxvb2t1cHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1bm1vdW50SURGcm9tRW52aXJvbm1lbnQ6IGZ1bmN0aW9uKHJvb3ROb2RlSUQpIHtcbiAgICBSZWFjdE1vdW50LnB1cmdlSUQocm9vdE5vZGVJRCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY2xlYW51cCBob29rLiAoc2VydmVyIHZzLlxuICAgKiBicm93c2VyIGV0YykuIEV4YW1wbGU6IEEgYnJvd3NlciBzeXN0ZW0gY2FjaGVzIERPTSBub2RlcyBiYXNlZCBvbiBjb21wb25lbnRcbiAgICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbihlbnZpcm9ubWVudCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIWluamVjdGVkLFxuICAgICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJ1xuICAgICAgKSA6IGludmFyaWFudCghaW5qZWN0ZWQpKTtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50ID1cbiAgICAgICAgZW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50O1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEID1cbiAgICAgICAgZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9XG4gICAgICAgIGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpblxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZShcIi4vc2hhbGxvd0VxdWFsXCIpO1xuXG4vKipcbiAqIElmIHlvdXIgUmVhY3QgY29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uIGlzIFwicHVyZVwiLCBlLmcuIGl0IHdpbGwgcmVuZGVyIHRoZVxuICogc2FtZSByZXN1bHQgZ2l2ZW4gdGhlIHNhbWUgcHJvcHMgYW5kIHN0YXRlLCBwcm92aWRlIHRoaXMgTWl4aW4gZm9yIGFcbiAqIGNvbnNpZGVyYWJsZSBwZXJmb3JtYW5jZSBib29zdC5cbiAqXG4gKiBNb3N0IFJlYWN0IGNvbXBvbmVudHMgaGF2ZSBwdXJlIHJlbmRlciBmdW5jdGlvbnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgIHZhciBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW4gPVxuICogICAgIHJlcXVpcmUoJ1JlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpbicpO1xuICogICBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgbWl4aW5zOiBbUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluXSxcbiAqXG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PmZvbzwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIE5vdGU6IFRoaXMgb25seSBjaGVja3Mgc2hhbGxvdyBlcXVhbGl0eSBmb3IgcHJvcHMgYW5kIHN0YXRlLiBJZiB0aGVzZSBjb250YWluXG4gKiBjb21wbGV4IGRhdGEgc3RydWN0dXJlcyB0aGlzIG1peGluIG1heSBoYXZlIGZhbHNlLW5lZ2F0aXZlcyBmb3IgZGVlcGVyXG4gKiBkaWZmZXJlbmNlcy4gT25seSBtaXhpbiB0byBjb21wb25lbnRzIHdoaWNoIGhhdmUgc2ltcGxlIHByb3BzIGFuZCBzdGF0ZSwgb3JcbiAqIHVzZSBgZm9yY2VVcGRhdGUoKWAgd2hlbiB5b3Uga25vdyBkZWVwIGRhdGEgc3RydWN0dXJlcyBoYXZlIGNoYW5nZWQuXG4gKi9cbnZhciBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW4gPSB7XG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8XG4gICAgICAgICAgICFzaGFsbG93RXF1YWwodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb3NpdGVDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0TGlmZUN5Y2xlID0gcmVxdWlyZShcIi4vUmVhY3RMaWZlQ3ljbGVcIik7XG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoXCIuL2VtcHR5T2JqZWN0XCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSB7XG4gIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tIFRoZSBMaWZlLUN5Y2xlIG9mIGEgQ29tcG9zaXRlIENvbXBvbmVudCAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAtIGNvbnN0cnVjdG9yOiBJbml0aWFsaXphdGlvbiBvZiBzdGF0ZS4gVGhlIGluc3RhbmNlIGlzIG5vdyByZXRhaW5lZC5cbiAqICAgLSBjb21wb25lbnRXaWxsTW91bnRcbiAqICAgLSByZW5kZXJcbiAqICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnNdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlcl1cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudERpZE1vdW50XVxuICogICAgIC0gY29tcG9uZW50RGlkTW91bnRcbiAqXG4gKiAgICAgICBVcGRhdGUgUGhhc2VzOlxuICogICAgICAgLSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChvbmx5IGNhbGxlZCBpZiBwYXJlbnQgdXBkYXRlZClcbiAqICAgICAgIC0gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gKiAgICAgICAgIC0gY29tcG9uZW50V2lsbFVwZGF0ZVxuICogICAgICAgICAgIC0gcmVuZGVyXG4gKiAgICAgICAgICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnMgb3IgcmVjZWl2ZSBwcm9wcyBwaGFzZXNdXG4gKiAgICAgICAgIC0gY29tcG9uZW50RGlkVXBkYXRlXG4gKlxuICogICAgIC0gY29tcG9uZW50V2lsbFVubW91bnRcbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxVbm1vdW50XVxuICogICAtIFtjaGlsZHJlbiBkZXN0cm95ZWRdXG4gKiAtIChkZXN0cm95ZWQpOiBUaGUgaW5zdGFuY2UgaXMgbm93IGJsYW5rLCByZWxlYXNlZCBieSBSZWFjdCBhbmQgcmVhZHkgZm9yIEdDLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBBbiBpbmNyZW1lbnRpbmcgSUQgYXNzaWduZWQgdG8gZWFjaCBjb21wb25lbnQgd2hlbiBpdCBpcyBtb3VudGVkLiBUaGlzIGlzXG4gKiB1c2VkIHRvIGVuZm9yY2UgdGhlIG9yZGVyIGluIHdoaWNoIGBSZWFjdFVwZGF0ZXNgIHVwZGF0ZXMgZGlydHkgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV4dE1vdW50SUQgPSAxO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiA9IHtcblxuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVRdWV1ZVxuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuXG4gICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRPcmRlciA9IDA7XG4gICAgdGhpcy5faXNUb3BMZXZlbCA9IGZhbHNlO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlcyBhbmQgUmVhY3RVcGRhdGVRdWV1ZS5cbiAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gbmV4dE1vdW50SUQrKztcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuXG4gICAgdmFyIHB1YmxpY1Byb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB2YXIgcHVibGljQ29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0KTtcblxuICAgIHZhciBDb21wb25lbnQgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudFxuICAgICk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBwdWJsaWMgY2xhc3NcbiAgICB2YXIgaW5zdCA9IG5ldyBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGxhdGVyIGluIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQsIGJ1dCBhZGQgYW4gZWFybHlcbiAgICAgIC8vIHdhcm5pbmcgbm93IHRvIGhlbHAgZGVidWdnaW5nXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgaW5zdC5yZW5kZXIgIT0gbnVsbCxcbiAgICAgICAgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgK1xuICAgICAgICAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgIGluIHlvdXIgJyArXG4gICAgICAgICdjb21wb25lbnQgb3IgeW91IG1heSBoYXZlIGFjY2lkZW50YWxseSB0cmllZCB0byByZW5kZXIgYW4gZWxlbWVudCAnICtcbiAgICAgICAgJ3dob3NlIHR5cGUgaXMgYSBmdW5jdGlvbiB0aGF0IGlzblxcJ3QgYSBSZWFjdCBjb21wb25lbnQuJyxcbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHNldCB1cCBpbiB0aGUgY29uc3RydWN0b3IsIGJ1dCBhcyBhIGNvbnZlbmllbmNlIGZvclxuICAgIC8vIHNpbXBsZXIgY2xhc3MgYWJzdHJhY3Rpb25zLCB3ZSBzZXQgdGhlbSB1cCBhZnRlciB0aGUgZmFjdC5cbiAgICBpbnN0LnByb3BzID0gcHVibGljUHJvcHM7XG4gICAgaW5zdC5jb250ZXh0ID0gcHVibGljQ29udGV4dDtcbiAgICBpbnN0LnJlZnMgPSBlbXB0eU9iamVjdDtcblxuICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdDtcblxuICAgIC8vIFN0b3JlIGEgcmVmZXJlbmNlIGZyb20gdGhlIGluc3RhbmNlIGJhY2sgdG8gdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gICAgUmVhY3RJbnN0YW5jZU1hcC5zZXQoaW5zdCwgdGhpcyk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB0aGlzLl93YXJuSWZDb250ZXh0c0RpZmZlcih0aGlzLl9jdXJyZW50RWxlbWVudC5fY29udGV4dCwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gU2luY2UgcGxhaW4gSlMgY2xhc3NlcyBhcmUgZGVmaW5lZCB3aXRob3V0IGFueSBzcGVjaWFsIGluaXRpYWxpemF0aW9uXG4gICAgICAvLyBsb2dpYywgd2UgY2FuIG5vdCBjYXRjaCBjb21tb24gZXJyb3JzIGVhcmx5LiBUaGVyZWZvcmUsIHdlIGhhdmUgdG9cbiAgICAgIC8vIGNhdGNoIHRoZW0gaGVyZSwgYXQgaW5pdGlhbGl6YXRpb24gdGltZSwgaW5zdGVhZC5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhaW5zdC5nZXRJbml0aWFsU3RhdGUgfHxcbiAgICAgICAgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQsXG4gICAgICAgICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArXG4gICAgICAgICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgK1xuICAgICAgICAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICFpbnN0LmdldERlZmF1bHRQcm9wcyB8fFxuICAgICAgICBpbnN0LmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcbiAgICAgICAgJ2dldERlZmF1bHRQcm9wcyB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICtcbiAgICAgICAgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArXG4gICAgICAgICdVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhaW5zdC5wcm9wVHlwZXMsXG4gICAgICAgICdwcm9wVHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICtcbiAgICAgICAgJ3Byb3BlcnR5IHRvIGRlZmluZSBwcm9wVHlwZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgIWluc3QuY29udGV4dFR5cGVzLFxuICAgICAgICAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICtcbiAgICAgICAgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIHR5cGVvZiBpbnN0LmNvbXBvbmVudFNob3VsZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArXG4gICAgICAgICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICtcbiAgICAgICAgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICtcbiAgICAgICAgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsXG4gICAgICAgICh0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKVxuICAgICAgKSA6IG51bGwpO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsU3RhdGUgPSBpbnN0LnN0YXRlO1xuICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5zdC5zdGF0ZSA9IGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgJyVzLnN0YXRlOiBtdXN0IGJlIHNldCB0byBhbiBvYmplY3Qgb3IgbnVsbCcsXG4gICAgICB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSk7XG5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdmFyIGNoaWxkQ29udGV4dDtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuXG4gICAgdmFyIHByZXZpb3VzbHlNb3VudGluZyA9IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2U7XG4gICAgUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZSA9IHRoaXM7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICAvLyBXaGVuIG1vdW50aW5nLCBjYWxscyB0byBgc2V0U3RhdGVgIGJ5IGBjb21wb25lbnRXaWxsTW91bnRgIHdpbGwgc2V0XG4gICAgICAgIC8vIGB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZWAgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmUtcmVuZGVyLlxuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUpIHtcbiAgICAgICAgICBpbnN0LnN0YXRlID0gdGhpcy5fcHJvY2Vzc1BlbmRpbmdTdGF0ZShpbnN0LnByb3BzLCBpbnN0LmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkQ29udGV4dCA9IHRoaXMuX2dldFZhbGlkYXRlZENoaWxkQ29udGV4dChjb250ZXh0KTtcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudChjaGlsZENvbnRleHQpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlNb3VudGluZ0luc3RhbmNlID0gcHJldmlvdXNseU1vdW50aW5nO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgIHJlbmRlcmVkRWxlbWVudCxcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgLy8gVGhlIHdyYXBwaW5nIHR5cGVcbiAgICApO1xuXG4gICAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LFxuICAgICAgcm9vdElELFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LCBjaGlsZENvbnRleHQpXG4gICAgKTtcbiAgICBpZiAoaW5zdC5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZE1vdW50LCBpbnN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQpIHtcbiAgICAgIHZhciBwcmV2aW91c2x5VW5tb3VudGluZyA9IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZTtcbiAgICAgIFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZSA9IHRoaXM7XG4gICAgICB0cnkge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2UgPSBwcmV2aW91c2x5VW5tb3VudGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuXG4gICAgLy8gUmVzZXQgcGVuZGluZyBmaWVsZHNcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIC8vIFRoZXNlIGZpZWxkcyBkbyBub3QgcmVhbGx5IG5lZWQgdG8gYmUgcmVzZXQgc2luY2UgdGhpcyBvYmplY3QgaXMgbm9cbiAgICAvLyBsb25nZXIgYWNjZXNzaWJsZS5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcblxuICAgIC8vIERlbGV0ZSB0aGUgcmVmZXJlbmNlIGZyb20gdGhlIGluc3RhbmNlIHRvIHRoaXMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICAvLyB3aGljaCBhbGxvdyB0aGUgaW50ZXJuYWxzIHRvIGJlIHByb3Blcmx5IGNsZWFuZWQgdXAgZXZlbiBpZiB0aGUgdXNlclxuICAgIC8vIGxlYWtzIGEgcmVmZXJlbmNlIHRvIHRoZSBwdWJsaWMgaW5zdGFuY2UuXG4gICAgUmVhY3RJbnN0YW5jZU1hcC5yZW1vdmUoaW5zdCk7XG5cbiAgICAvLyBTb21lIGV4aXN0aW5nIGNvbXBvbmVudHMgcmVseSBvbiBpbnN0LnByb3BzIGV2ZW4gYWZ0ZXIgdGhleSd2ZSBiZWVuXG4gICAgLy8gZGVzdHJveWVkIChpbiBldmVudCBoYW5kbGVycykuXG4gICAgLy8gVE9ETzogaW5zdC5wcm9wcyA9IG51bGw7XG4gICAgLy8gVE9ETzogaW5zdC5zdGF0ZSA9IG51bGw7XG4gICAgLy8gVE9ETzogaW5zdC5jb250ZXh0ID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2NoZWR1bGUgYSBwYXJ0aWFsIHVwZGF0ZSB0byB0aGUgcHJvcHMuIE9ubHkgdXNlZCBmb3IgaW50ZXJuYWwgdGVzdGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgcHJvcHMgYXJlIHVwZGF0ZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9zZXRQcm9wc0ludGVybmFsOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBpcyBhIGRlb3B0aW1pemVkIHBhdGguIFdlIG9wdGltaXplIGZvciBhbHdheXMgaGF2aW5nIGFuIGVsZW1lbnQuXG4gICAgLy8gVGhpcyBjcmVhdGVzIGFuIGV4dHJhIGludGVybmFsIGVsZW1lbnQuXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhcbiAgICAgIGVsZW1lbnQsXG4gICAgICBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcylcbiAgICApO1xuICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKHRoaXMsIGNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY29udGV4dCBvYmplY3QgdG8gb25seSBjb250YWluIGtleXMgc3BlY2lmaWVkIGluXG4gICAqIGBjb250ZXh0VHlwZXNgXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWFza0NvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IG51bGw7XG4gICAgLy8gVGhpcyByZWFsbHkgc2hvdWxkIGJlIGdldHRpbmcgdGhlIGNvbXBvbmVudCBjbGFzcyBmb3IgdGhlIGVsZW1lbnQsXG4gICAgLy8gYnV0IHdlIGtub3cgdGhhdCB3ZSdyZSBub3QgZ29pbmcgdG8gbmVlZCBpdCBmb3IgYnVpbHQtaW5zLlxuICAgIGlmICh0eXBlb2YgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUuY29udGV4dFR5cGVzO1xuICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XG4gICAgfVxuICAgIG1hc2tlZENvbnRleHQgPSB7fTtcbiAgICBmb3IgKHZhciBjb250ZXh0TmFtZSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICAgIG1hc2tlZENvbnRleHRbY29udGV4dE5hbWVdID0gY29udGV4dFtjb250ZXh0TmFtZV07XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2AsIGFuZCBhc3NlcnRzIHRoYXQgdGhleSBhcmUgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgICApO1xuICAgICAgaWYgKENvbXBvbmVudC5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgQ29tcG9uZW50LmNvbnRleHRUeXBlcyxcbiAgICAgICAgICBtYXNrZWRDb250ZXh0LFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFza2VkQ29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGN1cnJlbnRDb250ZXh0XG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRWYWxpZGF0ZWRDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgY2hpbGRDb250ZXh0ID0gaW5zdC5nZXRDaGlsZENvbnRleHQgJiYgaW5zdC5nZXRDaGlsZENvbnRleHQoKTtcbiAgICBpZiAoY2hpbGRDb250ZXh0KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcsXG4gICAgICAgICclcy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvICcgK1xuICAgICAgICAndXNlIGdldENoaWxkQ29udGV4dCgpLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSk7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKFxuICAgICAgICAgIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsXG4gICAgICAgICAgY2hpbGRDb250ZXh0LFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY2hpbGRDb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkQ29udGV4dCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG5hbWUgaW4gaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJyxcbiAgICAgICAgICB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKSA6IGludmFyaWFudChuYW1lIGluIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZENvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIF9tZXJnZUNoaWxkQ29udGV4dDogZnVuY3Rpb24oY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCkge1xuICAgIGlmIChjaGlsZENvbnRleHQpIHtcbiAgICAgIHJldHVybiBhc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBwcm9wcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGZvciB1bnNwZWNpZmllZCBwcm9wcyBhbmRcbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZC4gRG9lcyBub3QgbXV0YXRlIGl0cyBhcmd1bWVudDsgcmV0dXJuc1xuICAgKiBhIG5ldyBwcm9wcyBvYmplY3Qgd2l0aCBkZWZhdWx0cyBtZXJnZWQgaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc1Byb3BzOiBmdW5jdGlvbihuZXdQcm9wcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgICApO1xuICAgICAgaWYgKENvbXBvbmVudC5wcm9wVHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgQ29tcG9uZW50LnByb3BUeXBlcyxcbiAgICAgICAgICBuZXdQcm9wcyxcbiAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wVHlwZXMgTWFwIG9mIHByb3AgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja1Byb3BUeXBlczogZnVuY3Rpb24ocHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgICAvLyBUT0RPOiBTdG9wIHZhbGlkYXRpbmcgcHJvcCB0eXBlcyBoZXJlIGFuZCBvbmx5IHVzZSB0aGUgZWxlbWVudFxuICAgIC8vIHZhbGlkYXRpb24uXG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSB0aGlzLmdldE5hbWUoKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgIHR5cGVvZiBwcm9wVHlwZXNbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5ICcgK1xuICAgICAgICAgICAgJ2Zyb20gUmVhY3QuUHJvcFR5cGVzLicsXG4gICAgICAgICAgICBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsXG4gICAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sXG4gICAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpKTtcbiAgICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIC8vIFdlIG1heSB3YW50IHRvIGV4dGVuZCB0aGlzIGxvZ2ljIGZvciBzaW1pbGFyIGVycm9ycyBpblxuICAgICAgICAgIC8vIFJlYWN0LnJlbmRlciBjYWxscywgc28gSSdtIGFic3RyYWN0aW5nIGl0IGF3YXkgaW50b1xuICAgICAgICAgIC8vIGEgZnVuY3Rpb24gdG8gbWluaW1pemUgcmVmYWN0b3JpbmcgaW4gdGhlIGZ1dHVyZVxuICAgICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSh0aGlzKTtcblxuICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKSB7XG4gICAgICAgICAgICAvLyBQcmVmYWNlIGdpdmVzIHVzIHNvbWV0aGluZyB0byBibGFja2xpc3QgaW4gd2FybmluZyBtb2R1bGVcbiAgICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICVzJXMnLFxuICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICBhZGRlbmR1bVxuICAgICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdGYWlsZWQgQ29udGV4dCBUeXBlczogJXMlcycsXG4gICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgIGFkZGVuZHVtXG4gICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgbmV4dENvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgcHJldkNvbnRleHQgPSB0aGlzLl9jb250ZXh0O1xuXG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgdGhpcy51cGRhdGVDb21wb25lbnQoXG4gICAgICB0cmFuc2FjdGlvbixcbiAgICAgIHByZXZFbGVtZW50LFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICBwcmV2Q29udGV4dCxcbiAgICAgIG5leHRDb250ZXh0XG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogSWYgYW55IG9mIGBfcGVuZGluZ0VsZW1lbnRgLCBgX3BlbmRpbmdTdGF0ZVF1ZXVlYCwgb3IgYF9wZW5kaW5nRm9yY2VVcGRhdGVgXG4gICAqIGlzIHNldCwgdXBkYXRlIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIHRoaXMuX2NvbnRleHRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlICE9PSBudWxsIHx8IHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKFxuICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQsXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LFxuICAgICAgICB0aGlzLl9jb250ZXh0LFxuICAgICAgICB0aGlzLl9jb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ29tcGFyZSB0d28gY29udGV4dHMsIHdhcm5pbmcgaWYgdGhleSBhcmUgZGlmZmVyZW50XG4gICAqIFRPRE86IFJlbW92ZSB0aGlzIGNoZWNrIHdoZW4gb3duZXItY29udGV4dCBpcyByZW1vdmVkXG4gICAqL1xuICAgX3dhcm5JZkNvbnRleHRzRGlmZmVyOiBmdW5jdGlvbihvd25lckJhc2VkQ29udGV4dCwgcGFyZW50QmFzZWRDb250ZXh0KSB7XG4gICAgb3duZXJCYXNlZENvbnRleHQgPSB0aGlzLl9tYXNrQ29udGV4dChvd25lckJhc2VkQ29udGV4dCk7XG4gICAgcGFyZW50QmFzZWRDb250ZXh0ID0gdGhpcy5fbWFza0NvbnRleHQocGFyZW50QmFzZWRDb250ZXh0KTtcbiAgICB2YXIgcGFyZW50S2V5cyA9IE9iamVjdC5rZXlzKHBhcmVudEJhc2VkQ29udGV4dCkuc29ydCgpO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcGFyZW50S2V5c1tpXTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBvd25lckJhc2VkQ29udGV4dFtrZXldID09PSBwYXJlbnRCYXNlZENvbnRleHRba2V5XSxcbiAgICAgICAgJ293bmVyLWJhc2VkIGFuZCBwYXJlbnQtYmFzZWQgY29udGV4dHMgZGlmZmVyICcgICtcbiAgICAgICAgJyh2YWx1ZXM6IGAlc2AgdnMgYCVzYCkgZm9yIGtleSAoJXMpIHdoaWxlIG1vdW50aW5nICVzICcgK1xuICAgICAgICAnKHNlZTogaHR0cDovL2ZiLm1lL3JlYWN0LWNvbnRleHQtYnktcGFyZW50KScsXG4gICAgICAgIG93bmVyQmFzZWRDb250ZXh0W2tleV0sXG4gICAgICAgIHBhcmVudEJhc2VkQ29udGV4dFtrZXldLFxuICAgICAgICBrZXksXG4gICAgICAgIGRpc3BsYXlOYW1lXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFuIHVwZGF0ZSB0byBhIG1vdW50ZWQgY29tcG9uZW50LiBUaGUgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBhbmRcbiAgICogc2hvdWxkQ29tcG9uZW50VXBkYXRlIG1ldGhvZHMgYXJlIGNhbGxlZCwgdGhlbiAoYXNzdW1pbmcgdGhlIHVwZGF0ZSBpc24ndFxuICAgKiBza2lwcGVkKSB0aGUgcmVtYWluaW5nIHVwZGF0ZSBsaWZlY3ljbGUgbWV0aG9kcyBhcmUgY2FsbGVkIGFuZCB0aGUgRE9NXG4gICAqIHJlcHJlc2VudGF0aW9uIGlzIHVwZGF0ZWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldlBhcmVudEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRQYXJlbnRFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgcHJldlBhcmVudEVsZW1lbnQsXG4gICAgbmV4dFBhcmVudEVsZW1lbnQsXG4gICAgcHJldlVubWFza2VkQ29udGV4dCxcbiAgICBuZXh0VW5tYXNrZWRDb250ZXh0XG4gICkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgbmV4dENvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG4gICAgdmFyIG5leHRQcm9wcyA9IGluc3QucHJvcHM7XG5cbiAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGEgcHJvcHMgdXBkYXRlIHZlcnN1cyBhIHNpbXBsZSBzdGF0ZSB1cGRhdGVcbiAgICBpZiAocHJldlBhcmVudEVsZW1lbnQgIT09IG5leHRQYXJlbnRFbGVtZW50KSB7XG4gICAgICBuZXh0Q29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRQYXJlbnRFbGVtZW50Ll9jb250ZXh0KTtcbiAgICAgIG5leHRQcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyhuZXh0UGFyZW50RWxlbWVudC5wcm9wcyk7XG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgaWYgKG5leHRVbm1hc2tlZENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3dhcm5JZkNvbnRleHRzRGlmZmVyKFxuICAgICAgICAgICAgbmV4dFBhcmVudEVsZW1lbnQuX2NvbnRleHQsXG4gICAgICAgICAgICBuZXh0VW5tYXNrZWRDb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBbiB1cGRhdGUgaGVyZSB3aWxsIHNjaGVkdWxlIGFuIHVwZGF0ZSBidXQgaW1tZWRpYXRlbHkgc2V0XG4gICAgICAvLyBfcGVuZGluZ1N0YXRlUXVldWUgd2hpY2ggd2lsbCBlbnN1cmUgdGhhdCBhbnkgc3RhdGUgdXBkYXRlcyBnZXRzXG4gICAgICAvLyBpbW1lZGlhdGVseSByZWNvbmNpbGVkIGluc3RlYWQgb2Ygd2FpdGluZyBmb3IgdGhlIG5leHQgYmF0Y2guXG5cbiAgICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuXG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgfHxcbiAgICAgICFpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZSB8fFxuICAgICAgaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICB0eXBlb2Ygc2hvdWxkVXBkYXRlICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgK1xuICAgICAgICAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgIC8vIFdpbGwgc2V0IGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YC5cbiAgICAgIHRoaXMuX3BlcmZvcm1Db21wb25lbnRVcGRhdGUoXG4gICAgICAgIG5leHRQYXJlbnRFbGVtZW50LFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIG5leHRTdGF0ZSxcbiAgICAgICAgbmV4dENvbnRleHQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBuZXh0VW5tYXNrZWRDb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBpdCdzIGRldGVybWluZWQgdGhhdCBhIGNvbXBvbmVudCBzaG91bGQgbm90IHVwZGF0ZSwgd2Ugc3RpbGwgd2FudFxuICAgICAgLy8gdG8gc2V0IHByb3BzIGFuZCBzdGF0ZSBidXQgd2Ugc2hvcnRjdXQgdGhlIHJlc3Qgb2YgdGhlIHVwZGF0ZS5cbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFBhcmVudEVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb250ZXh0ID0gbmV4dFVubWFza2VkQ29udGV4dDtcbiAgICAgIGluc3QucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG4gICAgfVxuICB9LFxuXG4gIF9wcm9jZXNzUGVuZGluZ1N0YXRlOiBmdW5jdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU7XG4gICAgdmFyIHJlcGxhY2UgPSB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG5cbiAgICBpZiAoIXF1ZXVlKSB7XG4gICAgICByZXR1cm4gaW5zdC5zdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZSAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBxdWV1ZVswXTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gYXNzaWduKHt9LCByZXBsYWNlID8gcXVldWVbMF0gOiBpbnN0LnN0YXRlKTtcbiAgICBmb3IgKHZhciBpID0gcmVwbGFjZSA/IDEgOiAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0aWFsID0gcXVldWVbaV07XG4gICAgICBhc3NpZ24oXG4gICAgICAgIG5leHRTdGF0ZSxcbiAgICAgICAgdHlwZW9mIHBhcnRpYWwgPT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgIHBhcnRpYWwuY2FsbChpbnN0LCBuZXh0U3RhdGUsIHByb3BzLCBjb250ZXh0KSA6XG4gICAgICAgICAgcGFydGlhbFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNZXJnZXMgbmV3IHByb3BzIGFuZCBzdGF0ZSwgbm90aWZpZXMgZGVsZWdhdGUgbWV0aG9kcyBvZiB1cGRhdGUgYW5kXG4gICAqIHBlcmZvcm1zIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IE5leHQgZWxlbWVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzIE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgcHJvcGVydGllcy5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGUgTmV4dCBvYmplY3QgdG8gc2V0IGFzIHN0YXRlLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0IE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgY29udGV4dC5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gez9vYmplY3R9IHVubWFza2VkQ29udGV4dFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BlcmZvcm1Db21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKFxuICAgIG5leHRFbGVtZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBuZXh0U3RhdGUsXG4gICAgbmV4dENvbnRleHQsXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgdW5tYXNrZWRDb250ZXh0XG4gICkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgcHJldlByb3BzID0gaW5zdC5wcm9wcztcbiAgICB2YXIgcHJldlN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICB2YXIgcHJldkNvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnRXaWxsVXBkYXRlKSB7XG4gICAgICBpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMuX2NvbnRleHQgPSB1bm1hc2tlZENvbnRleHQ7XG4gICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gICAgdGhpcy5fdXBkYXRlUmVuZGVyZWRDb21wb25lbnQodHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoXG4gICAgICAgIGluc3QuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQoaW5zdCwgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSxcbiAgICAgICAgaW5zdFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCBhbmQgdXBkYXRlIHRoZSBET00gYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZDb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgIHZhciBwcmV2UmVuZGVyZWRFbGVtZW50ID0gcHJldkNvbXBvbmVudEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgY2hpbGRDb250ZXh0ID0gdGhpcy5fZ2V0VmFsaWRhdGVkQ2hpbGRDb250ZXh0KCk7XG4gICAgdmFyIG5leHRSZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoY2hpbGRDb250ZXh0KTtcbiAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCwgbmV4dFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KFxuICAgICAgICBwcmV2Q29tcG9uZW50SW5zdGFuY2UsXG4gICAgICAgIG5leHRSZW5kZXJlZEVsZW1lbnQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LCBjaGlsZENvbnRleHQpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVzZSB0d28gSURzIGFyZSBhY3R1YWxseSB0aGUgc2FtZSEgQnV0IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhhdC5cbiAgICAgIHZhciB0aGlzSUQgPSB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgdmFyIHByZXZDb21wb25lbnRJRCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fcm9vdE5vZGVJRDtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgICAgbmV4dFJlbmRlcmVkRWxlbWVudCxcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZVxuICAgICAgKTtcbiAgICAgIHZhciBuZXh0TWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCxcbiAgICAgICAgdGhpc0lELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fbWVyZ2VDaGlsZENvbnRleHQoY29udGV4dCwgY2hpbGRDb250ZXh0KVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQocHJldkNvbXBvbmVudElELCBuZXh0TWFya3VwKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbihwcmV2Q29tcG9uZW50SUQsIG5leHRNYXJrdXApIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQoXG4gICAgICBwcmV2Q29tcG9uZW50SUQsXG4gICAgICBuZXh0TWFya3VwXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0LnJlbmRlcigpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgaWYgKHR5cGVvZiByZW5kZXJlZENvbXBvbmVudCA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBpbnN0LnJlbmRlci5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBiYWQgcHJhY3RpY2UuIENvbnNpZGVyIHdhcm5pbmcgaGVyZSBhbmRcbiAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQ6IGZ1bmN0aW9uKGNoaWxkQ29udGV4dCkge1xuICAgIHZhciByZW5kZXJlZENvbXBvbmVudDtcbiAgICB2YXIgcHJldmlvdXNDb250ZXh0ID0gUmVhY3RDb250ZXh0LmN1cnJlbnQ7XG4gICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0LFxuICAgICAgY2hpbGRDb250ZXh0XG4gICAgKTtcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgcmVuZGVyZWRDb21wb25lbnQgPVxuICAgICAgICB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIC8vIFRPRE86IEFuIGBpc1ZhbGlkTm9kZWAgZnVuY3Rpb24gd291bGQgcHJvYmFibHkgYmUgbW9yZSBhcHByb3ByaWF0ZVxuICAgICAgcmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8XG4gICAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpLFxuICAgICAgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0Q29tcG9uZW50IG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICtcbiAgICAgICAgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLFxuICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICkgOiBpbnZhcmlhbnQoLy8gVE9ETzogQW4gYGlzVmFsaWROb2RlYCBmdW5jdGlvbiB3b3VsZCBwcm9iYWJseSBiZSBtb3JlIGFwcHJvcHJpYXRlXG4gICAgcmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8XG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkQ29tcG9uZW50KSkpO1xuICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogTGF6aWx5IGFsbG9jYXRlcyB0aGUgcmVmcyBvYmplY3QgYW5kIHN0b3JlcyBgY29tcG9uZW50YCBhcyBgcmVmYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBSZWZlcmVuY2UgbmFtZS5cbiAgICogQHBhcmFtIHtjb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gc3RvcmUgYXMgYHJlZmAuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXR0YWNoUmVmOiBmdW5jdGlvbihyZWYsIGNvbXBvbmVudCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIHZhciByZWZzID0gaW5zdC5yZWZzID09PSBlbXB0eU9iamVjdCA/IChpbnN0LnJlZnMgPSB7fSkgOiBpbnN0LnJlZnM7XG4gICAgcmVmc1tyZWZdID0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGFjaGVzIGEgcmVmZXJlbmNlIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSB0byBkZXJlZmVyZW5jZS5cbiAgICogQGZpbmFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkZXRhY2hSZWY6IGZ1bmN0aW9uKHJlZikge1xuICAgIHZhciByZWZzID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnM7XG4gICAgZGVsZXRlIHJlZnNbcmVmXTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgY29tcG9uZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgaXRcbiAgICogaW4gZXJyb3IgbWVzc2FnZXMuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5hbWUgb3IgbnVsbC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXROYW1lOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGUuZGlzcGxheU5hbWUgfHwgKGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSB8fFxuICAgICAgdHlwZS5uYW1lIHx8IChjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5uYW1lKSB8fFxuICAgICAgbnVsbFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcHVibGljbHkgYWNjZXNzaWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbXBvbmVudCAtIGkuZS4gd2hhdFxuICAgKiBpcyBleHBvc2VkIGJ5IHJlZnMgYW5kIHJldHVybmVkIGJ5IFJlYWN0LnJlbmRlci4gQ2FuIGJlIG51bGwgZm9yIHN0YXRlbGVzc1xuICAgKiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gdGhlIHB1YmxpYyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgfSxcblxuICAvLyBTdHViXG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG5cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbixcbiAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyxcbiAge1xuICAgIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICAgIHVwZGF0ZUNvbXBvbmVudDogJ3VwZGF0ZUNvbXBvbmVudCcsXG4gICAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnXG4gIH1cbik7XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHtcblxuICBNaXhpbjogUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpblxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29udGV4dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGRpZFdhcm4gPSBmYWxzZTtcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBjb250ZXh0LlxuICpcbiAqIFRoZSBjb250ZXh0IGlzIGF1dG9tYXRpY2FsbHkgcGFzc2VkIGRvd24gdGhlIGNvbXBvbmVudCBvd25lcnNoaXAgaGllcmFyY2h5XG4gKiBhbmQgaXMgYWNjZXNzaWJsZSB2aWEgYHRoaXMuY29udGV4dGAgb24gUmVhY3RDb21wb3NpdGVDb21wb25lbnRzLlxuICovXG52YXIgUmVhY3RDb250ZXh0ID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGN1cnJlbnQ6IGVtcHR5T2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUZW1wb3JhcmlseSBleHRlbmRzIHRoZSBjdXJyZW50IGNvbnRleHQgd2hpbGUgZXhlY3V0aW5nIHNjb3BlZENhbGxiYWNrLlxuICAgKlxuICAgKiBBIHR5cGljYWwgdXNlIGNhc2UgbWlnaHQgbG9vayBsaWtlXG4gICAqXG4gICAqICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENvbnRleHQud2l0aENvbnRleHQoe2ZvbzogJ2Zvbyd9LCAoKSA9PiAoXG4gICAqXG4gICAqICAgICkpO1xuICAgKiAgICByZXR1cm4gPGRpdj57Y2hpbGRyZW59PC9kaXY+O1xuICAgKiAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3Q29udGV4dCBOZXcgY29udGV4dCB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNjb3BlZENhbGxiYWNrIENhbGxiYWNrIHRvIHJ1biB3aXRoIHRoZSBuZXcgY29udGV4dFxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudHxhcnJheTxSZWFjdENvbXBvbmVudD59XG4gICAqL1xuICB3aXRoQ29udGV4dDogZnVuY3Rpb24obmV3Q29udGV4dCwgc2NvcGVkQ2FsbGJhY2spIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgZGlkV2FybixcbiAgICAgICAgJ3dpdGhDb250ZXh0IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcbiAgICAgICAgJ1VzZSBhIHdyYXBwZXIgY29tcG9uZW50IHdpdGggZ2V0Q2hpbGRDb250ZXh0IGluc3RlYWQuJ1xuICAgICAgKSA6IG51bGwpO1xuXG4gICAgICBkaWRXYXJuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IGFzc2lnbih7fSwgcHJldmlvdXNDb250ZXh0LCBuZXdDb250ZXh0KTtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gc2NvcGVkQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbnRleHQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDdXJyZW50T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICpcbiAqIFRoZSBkZXB0aCBpbmRpY2F0ZSBob3cgbWFueSBjb21wb3NpdGUgY29tcG9uZW50cyBhcmUgYWJvdmUgdGhpcyByZW5kZXIgbGV2ZWwuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xuXG52YXIgbWFwT2JqZWN0ID0gcmVxdWlyZShcIi4vbWFwT2JqZWN0XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHJldHVybiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSh0YWcpO1xuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwaW5nIGZyb20gc3VwcG9ydGVkIEhUTUwgdGFncyB0byBgUmVhY3RET01Db21wb25lbnRgIGNsYXNzZXMuXG4gKiBUaGlzIGlzIGFsc28gYWNjZXNzaWJsZSB2aWEgYFJlYWN0LkRPTWAuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgUmVhY3RET00gPSBtYXBPYmplY3Qoe1xuICBhOiAnYScsXG4gIGFiYnI6ICdhYmJyJyxcbiAgYWRkcmVzczogJ2FkZHJlc3MnLFxuICBhcmVhOiAnYXJlYScsXG4gIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgYXNpZGU6ICdhc2lkZScsXG4gIGF1ZGlvOiAnYXVkaW8nLFxuICBiOiAnYicsXG4gIGJhc2U6ICdiYXNlJyxcbiAgYmRpOiAnYmRpJyxcbiAgYmRvOiAnYmRvJyxcbiAgYmlnOiAnYmlnJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBib2R5OiAnYm9keScsXG4gIGJyOiAnYnInLFxuICBidXR0b246ICdidXR0b24nLFxuICBjYW52YXM6ICdjYW52YXMnLFxuICBjYXB0aW9uOiAnY2FwdGlvbicsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY29kZTogJ2NvZGUnLFxuICBjb2w6ICdjb2wnLFxuICBjb2xncm91cDogJ2NvbGdyb3VwJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRhbGlzdDogJ2RhdGFsaXN0JyxcbiAgZGQ6ICdkZCcsXG4gIGRlbDogJ2RlbCcsXG4gIGRldGFpbHM6ICdkZXRhaWxzJyxcbiAgZGZuOiAnZGZuJyxcbiAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgZGl2OiAnZGl2JyxcbiAgZGw6ICdkbCcsXG4gIGR0OiAnZHQnLFxuICBlbTogJ2VtJyxcbiAgZW1iZWQ6ICdlbWJlZCcsXG4gIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICBmaWdjYXB0aW9uOiAnZmlnY2FwdGlvbicsXG4gIGZpZ3VyZTogJ2ZpZ3VyZScsXG4gIGZvb3RlcjogJ2Zvb3RlcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgaGVhZDogJ2hlYWQnLFxuICBoZWFkZXI6ICdoZWFkZXInLFxuICBocjogJ2hyJyxcbiAgaHRtbDogJ2h0bWwnLFxuICBpOiAnaScsXG4gIGlmcmFtZTogJ2lmcmFtZScsXG4gIGltZzogJ2ltZycsXG4gIGlucHV0OiAnaW5wdXQnLFxuICBpbnM6ICdpbnMnLFxuICBrYmQ6ICdrYmQnLFxuICBrZXlnZW46ICdrZXlnZW4nLFxuICBsYWJlbDogJ2xhYmVsJyxcbiAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgbGk6ICdsaScsXG4gIGxpbms6ICdsaW5rJyxcbiAgbWFpbjogJ21haW4nLFxuICBtYXA6ICdtYXAnLFxuICBtYXJrOiAnbWFyaycsXG4gIG1lbnU6ICdtZW51JyxcbiAgbWVudWl0ZW06ICdtZW51aXRlbScsXG4gIG1ldGE6ICdtZXRhJyxcbiAgbWV0ZXI6ICdtZXRlcicsXG4gIG5hdjogJ25hdicsXG4gIG5vc2NyaXB0OiAnbm9zY3JpcHQnLFxuICBvYmplY3Q6ICdvYmplY3QnLFxuICBvbDogJ29sJyxcbiAgb3B0Z3JvdXA6ICdvcHRncm91cCcsXG4gIG9wdGlvbjogJ29wdGlvbicsXG4gIG91dHB1dDogJ291dHB1dCcsXG4gIHA6ICdwJyxcbiAgcGFyYW06ICdwYXJhbScsXG4gIHBpY3R1cmU6ICdwaWN0dXJlJyxcbiAgcHJlOiAncHJlJyxcbiAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHE6ICdxJyxcbiAgcnA6ICdycCcsXG4gIHJ0OiAncnQnLFxuICBydWJ5OiAncnVieScsXG4gIHM6ICdzJyxcbiAgc2FtcDogJ3NhbXAnLFxuICBzY3JpcHQ6ICdzY3JpcHQnLFxuICBzZWN0aW9uOiAnc2VjdGlvbicsXG4gIHNlbGVjdDogJ3NlbGVjdCcsXG4gIHNtYWxsOiAnc21hbGwnLFxuICBzb3VyY2U6ICdzb3VyY2UnLFxuICBzcGFuOiAnc3BhbicsXG4gIHN0cm9uZzogJ3N0cm9uZycsXG4gIHN0eWxlOiAnc3R5bGUnLFxuICBzdWI6ICdzdWInLFxuICBzdW1tYXJ5OiAnc3VtbWFyeScsXG4gIHN1cDogJ3N1cCcsXG4gIHRhYmxlOiAndGFibGUnLFxuICB0Ym9keTogJ3Rib2R5JyxcbiAgdGQ6ICd0ZCcsXG4gIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICB0Zm9vdDogJ3Rmb290JyxcbiAgdGg6ICd0aCcsXG4gIHRoZWFkOiAndGhlYWQnLFxuICB0aW1lOiAndGltZScsXG4gIHRpdGxlOiAndGl0bGUnLFxuICB0cjogJ3RyJyxcbiAgdHJhY2s6ICd0cmFjaycsXG4gIHU6ICd1JyxcbiAgdWw6ICd1bCcsXG4gICd2YXInOiAndmFyJyxcbiAgdmlkZW86ICd2aWRlbycsXG4gIHdicjogJ3dicicsXG5cbiAgLy8gU1ZHXG4gIGNpcmNsZTogJ2NpcmNsZScsXG4gIGNsaXBQYXRoOiAnY2xpcFBhdGgnLFxuICBkZWZzOiAnZGVmcycsXG4gIGVsbGlwc2U6ICdlbGxpcHNlJyxcbiAgZzogJ2cnLFxuICBsaW5lOiAnbGluZScsXG4gIGxpbmVhckdyYWRpZW50OiAnbGluZWFyR3JhZGllbnQnLFxuICBtYXNrOiAnbWFzaycsXG4gIHBhdGg6ICdwYXRoJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwb2x5Z29uOiAncG9seWdvbicsXG4gIHBvbHlsaW5lOiAncG9seWxpbmUnLFxuICByYWRpYWxHcmFkaWVudDogJ3JhZGlhbEdyYWRpZW50JyxcbiAgcmVjdDogJ3JlY3QnLFxuICBzdG9wOiAnc3RvcCcsXG4gIHN2ZzogJ3N2ZycsXG4gIHRleHQ6ICd0ZXh0JyxcbiAgdHNwYW46ICd0c3BhbidcblxufSwgY3JlYXRlRE9NRmFjdG9yeSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01CdXR0b25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgYnV0dG9uID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2J1dHRvbicpO1xuXG52YXIgbW91c2VMaXN0ZW5lck5hbWVzID0ga2V5TWlycm9yKHtcbiAgb25DbGljazogdHJ1ZSxcbiAgb25Eb3VibGVDbGljazogdHJ1ZSxcbiAgb25Nb3VzZURvd246IHRydWUsXG4gIG9uTW91c2VNb3ZlOiB0cnVlLFxuICBvbk1vdXNlVXA6IHRydWUsXG4gIG9uQ2xpY2tDYXB0dXJlOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZURvd25DYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VVcENhcHR1cmU6IHRydWVcbn0pO1xuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8YnV0dG9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgZG9lcyBub3QgcmVjZWl2ZSBtb3VzZSBldmVudHNcbiAqIHdoZW4gYGRpc2FibGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTUJ1dHRvbiA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NQnV0dG9uJyxcbiAgdGFnTmFtZTogJ0JVVFRPTicsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9wcyA9IHt9O1xuXG4gICAgLy8gQ29weSB0aGUgcHJvcHM7IGV4Y2VwdCB0aGUgbW91c2UgbGlzdGVuZXJzIGlmIHdlJ3JlIGRpc2FibGVkXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgICAoIXRoaXMucHJvcHMuZGlzYWJsZWQgfHwgIW1vdXNlTGlzdGVuZXJOYW1lc1trZXldKSkge1xuICAgICAgICBwcm9wc1trZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBidXR0b24ocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQnV0dG9uO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPVxuICByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdE11bHRpQ2hpbGQgPSByZXF1aXJlKFwiLi9SZWFjdE11bHRpQ2hpbGRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKFwiLi9pc0V2ZW50U3VwcG9ydGVkXCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBkZWxldGVMaXN0ZW5lciA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVMaXN0ZW5lcjtcbnZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbztcbnZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcblxuLy8gRm9yIHF1aWNrbHkgbWF0Y2hpbmcgY2hpbGRyZW4gdHlwZSwgdG8gdGVzdCBpZiBjYW4gYmUgdHJlYXRlZCBhcyBjb250ZW50LlxudmFyIENPTlRFTlRfVFlQRVMgPSB7J3N0cmluZyc6IHRydWUsICdudW1iZXInOiB0cnVlfTtcblxudmFyIFNUWUxFID0ga2V5T2Yoe3N0eWxlOiBudWxsfSk7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG5cbi8qKlxuICogT3B0aW9uYWxseSBpbmplY3RhYmxlIG9wZXJhdGlvbnMgZm9yIG11dGF0aW5nIHRoZSBET01cbiAqL1xudmFyIEJhY2tlbmRJRE9wZXJhdGlvbnMgPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHNcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VmFsaWRQcm9wcyhwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHByb3BzLmNoaWxkcmVuID09IG51bGwsXG4gICAgICAnQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJ1xuICAgICkgOiBpbnZhcmlhbnQocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCkpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmXG4gICAgICAnX19odG1sJyBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCxcbiAgICAgICdgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgaW4gdGhlIGZvcm0gYHtfX2h0bWw6IC4uLn1gLiAnICtcbiAgICAgICdQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgJyArXG4gICAgICAnZm9yIG1vcmUgaW5mb3JtYXRpb24uJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJlxuICAgICdfX2h0bWwnIGluIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSk7XG4gIH1cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgcHJvcHMuaW5uZXJIVE1MID09IG51bGwsXG4gICAgICAnRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiAnICtcbiAgICAgICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nXG4gICAgKSA6IG51bGwpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgIXByb3BzLmNvbnRlbnRFZGl0YWJsZSB8fCBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLFxuICAgICAgJ0EgY29tcG9uZW50IGlzIGBjb250ZW50RWRpdGFibGVgIGFuZCBjb250YWlucyBgY2hpbGRyZW5gIG1hbmFnZWQgYnkgJyArXG4gICAgICAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgJyArXG4gICAgICAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgK1xuICAgICAgJ3Byb2JhYmx5IG5vdCBpbnRlbnRpb25hbC4nXG4gICAgKSA6IG51bGwpO1xuICB9XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgcHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnLFxuICAgICdUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsICcgK1xuICAgICdub3QgYSBzdHJpbmcuIEZvciBleGFtcGxlLCBzdHlsZT17e21hcmdpblJpZ2h0OiBzcGFjaW5nICsgXFwnZW1cXCd9fSB3aGVuICcgK1xuICAgICd1c2luZyBKU1guJ1xuICApIDogaW52YXJpYW50KHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JykpO1xufVxuXG5mdW5jdGlvbiBwdXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIsIHRyYW5zYWN0aW9uKSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAvLyBJRTggaGFzIG5vIEFQSSBmb3IgZXZlbnQgY2FwdHVyaW5nIGFuZCB0aGUgYG9uU2Nyb2xsYCBldmVudCBkb2Vzbid0XG4gICAgLy8gYnViYmxlLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgcmVnaXN0cmF0aW9uTmFtZSAhPT0gJ29uU2Nyb2xsJyB8fCBpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSxcbiAgICAgICdUaGlzIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgdGhlIGBvblNjcm9sbGAgZXZlbnQnXG4gICAgKSA6IG51bGwpO1xuICB9XG4gIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgaWYgKGNvbnRhaW5lcikge1xuICAgIHZhciBkb2MgPSBjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFID9cbiAgICAgIGNvbnRhaW5lci5vd25lckRvY3VtZW50IDpcbiAgICAgIGNvbnRhaW5lcjtcbiAgICBsaXN0ZW5UbyhyZWdpc3RyYXRpb25OYW1lLCBkb2MpO1xuICB9XG4gIHRyYW5zYWN0aW9uLmdldFB1dExpc3RlbmVyUXVldWUoKS5lbnF1ZXVlUHV0TGlzdGVuZXIoXG4gICAgaWQsXG4gICAgcmVnaXN0cmF0aW9uTmFtZSxcbiAgICBsaXN0ZW5lclxuICApO1xufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIHdoaXRlbGlzdCBmb3Jcbi8vIHRob3NlIHNwZWNpYWwgY2FzZWQgdGFncy5cblxudmFyIG9taXR0ZWRDbG9zZVRhZ3MgPSB7XG4gICdhcmVhJzogdHJ1ZSxcbiAgJ2Jhc2UnOiB0cnVlLFxuICAnYnInOiB0cnVlLFxuICAnY29sJzogdHJ1ZSxcbiAgJ2VtYmVkJzogdHJ1ZSxcbiAgJ2hyJzogdHJ1ZSxcbiAgJ2ltZyc6IHRydWUsXG4gICdpbnB1dCc6IHRydWUsXG4gICdrZXlnZW4nOiB0cnVlLFxuICAnbGluayc6IHRydWUsXG4gICdtZXRhJzogdHJ1ZSxcbiAgJ3BhcmFtJzogdHJ1ZSxcbiAgJ3NvdXJjZSc6IHRydWUsXG4gICd0cmFjayc6IHRydWUsXG4gICd3YnInOiB0cnVlXG4gIC8vIE5PVEU6IG1lbnVpdGVtJ3MgY2xvc2UgdGFnIHNob3VsZCBiZSBvbWl0dGVkLCBidXQgdGhhdCBjYXVzZXMgcHJvYmxlbXMuXG59O1xuXG4vLyBXZSBhY2NlcHQgYW55IHRhZyB0byBiZSByZW5kZXJlZCBidXQgc2luY2UgdGhpcyBnZXRzIGluamVjdGVkIGludG8gYWJpdHJhcnlcbi8vIEhUTUwsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgaXQncyBhIHNhZmUgdGFnLlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVxuXG52YXIgVkFMSURfVEFHX1JFR0VYID0gL15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC87IC8vIFNpbXBsaWZpZWQgc3Vic2V0XG52YXIgdmFsaWRhdGVkVGFnQ2FjaGUgPSB7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpIHtcbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLCB0YWcpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChWQUxJRF9UQUdfUkVHRVgudGVzdCh0YWcpLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IGludmFyaWFudChWQUxJRF9UQUdfUkVHRVgudGVzdCh0YWcpKSk7XG4gICAgdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXSA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFJlYWN0IGNsYXNzIHRoYXQgaXMgaWRlbXBvdGVudCBhbmQgY2FwYWJsZSBvZiBjb250YWluaW5nIG90aGVyXG4gKiBSZWFjdCBjb21wb25lbnRzLiBJdCBhY2NlcHRzIGV2ZW50IGxpc3RlbmVycyBhbmQgRE9NIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIHZhbGlkIGFjY29yZGluZyB0byBgRE9NUHJvcGVydHlgLlxuICpcbiAqICAtIEV2ZW50IGxpc3RlbmVyczogYG9uQ2xpY2tgLCBgb25Nb3VzZURvd25gLCBldGMuXG4gKiAgLSBET00gcHJvcGVydGllczogYGNsYXNzTmFtZWAsIGBuYW1lYCwgYHRpdGxlYCwgZXRjLlxuICpcbiAqIFRoZSBgc3R5bGVgIHByb3BlcnR5IGZ1bmN0aW9ucyBkaWZmZXJlbnRseSBmcm9tIHRoZSBET00gQVBJLiBJdCBhY2NlcHRzIGFuXG4gKiBvYmplY3QgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgUmVhY3RET01Db21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0TXVsdGlDaGlsZFxuICovXG5mdW5jdGlvbiBSZWFjdERPTUNvbXBvbmVudCh0YWcpIHtcbiAgdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKTtcbiAgdGhpcy5fdGFnID0gdGFnO1xuICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbn1cblxuUmVhY3RET01Db21wb25lbnQuZGlzcGxheU5hbWUgPSAnUmVhY3RET01Db21wb25lbnQnO1xuXG5SZWFjdERPTUNvbXBvbmVudC5NaXhpbiA9IHtcblxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyByb290IHRhZyBtYXJrdXAgdGhlbiByZWN1cnNlcy4gVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBhbmRcbiAgICogaXMgbm90IGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFRoZSByb290IERPTSBJRCBmb3IgdGhpcyBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcHV0ZWQgbWFya3VwLlxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpO1xuICAgIHZhciBjbG9zZVRhZyA9IG9taXR0ZWRDbG9zZVRhZ3NbdGhpcy5fdGFnXSA/ICcnIDogJzwvJyArIHRoaXMuX3RhZyArICc+JztcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyh0cmFuc2FjdGlvbikgK1xuICAgICAgdGhpcy5fY3JlYXRlQ29udGVudE1hcmt1cCh0cmFuc2FjdGlvbiwgY29udGV4dCkgK1xuICAgICAgY2xvc2VUYWdcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIG9wZW4gdGFnIGFuZCBhbGwgYXR0cmlidXRlcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBiZWNhdXNlIGV2ZW50cyBnZXQgcmVnaXN0ZXJlZC5cbiAgICpcbiAgICogSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXMgaXMgZmFzdGVyIHRoYW4gaXRlcmF0aW5nIG92ZXIgYXJyYXlzLlxuICAgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL29iai12cy1hcnItaXRlcmF0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBvZiBvcGVuaW5nIHRhZy5cbiAgICovXG4gIF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOiBmdW5jdGlvbih0cmFuc2FjdGlvbikge1xuICAgIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgIHZhciByZXQgPSAnPCcgKyB0aGlzLl90YWc7XG5cbiAgICBmb3IgKHZhciBwcm9wS2V5IGluIHByb3BzKSB7XG4gICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIHB1dExpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSwgdHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgICAgaWYgKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgcHJvcFZhbHVlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBhc3NpZ24oe30sIHByb3BzLnN0eWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvcFZhbHVlID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyhwcm9wVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXJrdXAgPVxuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICBpZiAobWFya3VwKSB7XG4gICAgICAgICAgcmV0ICs9ICcgJyArIG1hcmt1cDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvciBzdGF0aWMgcGFnZXMsIG5vIG5lZWQgdG8gcHV0IFJlYWN0IElEIGFuZCBjaGVja3N1bS4gU2F2ZXMgbG90cyBvZlxuICAgIC8vIGJ5dGVzLlxuICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgcmV0dXJuIHJldCArICc+JztcbiAgICB9XG5cbiAgICB2YXIgbWFya3VwRm9ySUQgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgcmV0dXJuIHJldCArICcgJyArIG1hcmt1cEZvcklEICsgJz4nO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIGNvbnRlbnQgYmV0d2VlbiB0aGUgdGFncy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gQ29udGVudCBtYXJrdXAuXG4gICAqL1xuICBfY3JlYXRlQ29udGVudE1hcmt1cDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJlZml4ID0gJyc7XG4gICAgaWYgKHRoaXMuX3RhZyA9PT0gJ2xpc3RpbmcnIHx8XG4gICAgICAgIHRoaXMuX3RhZyA9PT0gJ3ByZScgfHxcbiAgICAgICAgdGhpcy5fdGFnID09PSAndGV4dGFyZWEnKSB7XG4gICAgICAvLyBBZGQgYW4gaW5pdGlhbCBuZXdsaW5lIGJlY2F1c2UgYnJvd3NlcnMgaWdub3JlIHRoZSBmaXJzdCBuZXdsaW5lIGluXG4gICAgICAvLyBhIDxsaXN0aW5nPiwgPHByZT4sIG9yIDx0ZXh0YXJlYT4gYXMgYW4gXCJhdXRob3JpbmcgY29udmVuaWVuY2VcIiAtLSBzZWVcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHkuXG4gICAgICBwcmVmaXggPSAnXFxuJztcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIEludGVudGlvbmFsIHVzZSBvZiAhPSB0byBhdm9pZCBjYXRjaGluZyB6ZXJvL2ZhbHNlLlxuICAgIHZhciBpbm5lckhUTUwgPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcbiAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIGlubmVySFRNTC5fX2h0bWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZW50VG9Vc2UgPVxuICAgICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiBwcm9wcy5jaGlsZHJlbl0gPyBwcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoY29udGVudFRvVXNlKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihcbiAgICAgICAgICBjaGlsZHJlblRvVXNlLFxuICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIG1vdW50SW1hZ2VzLmpvaW4oJycpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJlZml4O1xuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBuYXRpdmUgRE9NIGNvbXBvbmVudCBhZnRlciBpdCBoYXMgYWxyZWFkeSBiZWVuIGFsbG9jYXRlZCBhbmRcbiAgICogYXR0YWNoZWQgdG8gdGhlIERPTS4gUmVjb25jaWxlcyB0aGUgcm9vdCBET00gbm9kZSwgdGhlbiByZWN1cnNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldkVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCkge1xuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpO1xuICAgIHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMocHJldkVsZW1lbnQucHJvcHMsIHRyYW5zYWN0aW9uKTtcbiAgICB0aGlzLl91cGRhdGVET01DaGlsZHJlbihwcmV2RWxlbWVudC5wcm9wcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBwcm9wZXJ0aWVzIGJ5IGRldGVjdGluZyBkaWZmZXJlbmNlcyBpbiBwcm9wZXJ0eSB2YWx1ZXMgYW5kXG4gICAqIHVwZGF0aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5LiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JhYmx5IHRoZSBzaW5nbGUgbW9zdFxuICAgKiBjcml0aWNhbCBwYXRoIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAqXG4gICAqIFRPRE86IEJlbmNobWFyayB3aGV0aGVyIGNoZWNraW5nIGZvciBjaGFuZ2VkIHZhbHVlcyBpbiBtZW1vcnkgYWN0dWFsbHlcbiAgICogICAgICAgaW1wcm92ZXMgcGVyZm9ybWFuY2UgKGVzcGVjaWFsbHkgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnRzKS5cbiAgICogVE9ETzogQmVuY2htYXJrIHRoZSBlZmZlY3RzIG9mIHB1dHRpbmcgdGhpcyBhdCB0aGUgdG9wIHNpbmNlIDk5JSBvZiBwcm9wc1xuICAgKiAgICAgICBkbyBub3QgY2hhbmdlIGZvciBhIGdpdmVuIHJlY29uY2lsaWF0aW9uLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgYXJlYXMgdGhhdCBjYW4gYmUgaW1wcm92ZWQgd2l0aCBjYWNoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIF91cGRhdGVET01Qcm9wZXJ0aWVzOiBmdW5jdGlvbihsYXN0UHJvcHMsIHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgIHZhciBwcm9wS2V5O1xuICAgIHZhciBzdHlsZU5hbWU7XG4gICAgdmFyIHN0eWxlVXBkYXRlcztcbiAgICBmb3IgKHByb3BLZXkgaW4gbGFzdFByb3BzKSB7XG4gICAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8XG4gICAgICAgICAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIHZhciBsYXN0U3R5bGUgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weTtcbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGRlbGV0ZUxpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXkpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wS2V5XSB8fFxuICAgICAgICAgIERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIEJhY2tlbmRJRE9wZXJhdGlvbnMuZGVsZXRlUHJvcGVydHlCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgcHJvcEtleVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgICB2YXIgbGFzdFByb3AgPSBwcm9wS2V5ID09PSBTVFlMRSA/XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5IDpcbiAgICAgICAgbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIG5leHRQcm9wID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBhc3NpZ24oe30sIG5leHRQcm9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgLy8gVW5zZXQgc3R5bGVzIG9uIGBsYXN0UHJvcGAgYnV0IG5vdCBvbiBgbmV4dFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgICBpZiAobGFzdFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJlxuICAgICAgICAgICAgICAgICghbmV4dFByb3AgfHwgIW5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVXBkYXRlIHN0eWxlcyB0aGF0IGNoYW5nZWQgc2luY2UgYGxhc3RQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBuZXh0UHJvcCkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiZcbiAgICAgICAgICAgICAgICBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSBuZXh0UHJvcFtzdHlsZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cbiAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBwdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5LCBuZXh0UHJvcCwgdHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wS2V5XSB8fFxuICAgICAgICAgIERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIEJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlUHJvcGVydHlCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICBuZXh0UHJvcFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAgICBCYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZVN0eWxlc0J5SUQoXG4gICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgIHN0eWxlVXBkYXRlc1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHZhcmlvdXMgcHJvcGVydGllcyB0aGF0IGFmZmVjdCB0aGVcbiAgICogY2hpbGRyZW4gY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBfdXBkYXRlRE9NQ2hpbGRyZW46IGZ1bmN0aW9uKGxhc3RQcm9wcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICB2YXIgbGFzdENvbnRlbnQgPVxuICAgICAgQ09OVEVOVF9UWVBFU1t0eXBlb2YgbGFzdFByb3BzLmNoaWxkcmVuXSA/IGxhc3RQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgdmFyIG5leHRDb250ZW50ID1cbiAgICAgIENPTlRFTlRfVFlQRVNbdHlwZW9mIG5leHRQcm9wcy5jaGlsZHJlbl0gPyBuZXh0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuXG4gICAgdmFyIGxhc3RIdG1sID1cbiAgICAgIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcbiAgICB2YXIgbmV4dEh0bWwgPVxuICAgICAgbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBuZXh0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuXG4gICAgLy8gTm90ZSB0aGUgdXNlIG9mIGAhPWAgd2hpY2ggY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZC5cbiAgICB2YXIgbGFzdENoaWxkcmVuID0gbGFzdENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBsYXN0UHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIG5leHRDaGlsZHJlbiA9IG5leHRDb250ZW50ICE9IG51bGwgPyBudWxsIDogbmV4dFByb3BzLmNoaWxkcmVuO1xuXG4gICAgLy8gSWYgd2UncmUgc3dpdGNoaW5nIGZyb20gY2hpbGRyZW4gdG8gY29udGVudC9odG1sIG9yIHZpY2UgdmVyc2EsIHJlbW92ZVxuICAgIC8vIHRoZSBvbGQgY29udGVudFxuICAgIHZhciBsYXN0SGFzQ29udGVudE9ySHRtbCA9IGxhc3RDb250ZW50ICE9IG51bGwgfHwgbGFzdEh0bWwgIT0gbnVsbDtcbiAgICB2YXIgbmV4dEhhc0NvbnRlbnRPckh0bWwgPSBuZXh0Q29udGVudCAhPSBudWxsIHx8IG5leHRIdG1sICE9IG51bGw7XG4gICAgaWYgKGxhc3RDaGlsZHJlbiAhPSBudWxsICYmIG5leHRDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKG51bGwsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGxhc3RIYXNDb250ZW50T3JIdG1sICYmICFuZXh0SGFzQ29udGVudE9ySHRtbCkge1xuICAgICAgdGhpcy51cGRhdGVUZXh0Q29udGVudCgnJyk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIGlmIChsYXN0Q29udGVudCAhPT0gbmV4dENvbnRlbnQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUZXh0Q29udGVudCgnJyArIG5leHRDb250ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRIdG1sICE9IG51bGwpIHtcbiAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVJbm5lckhUTUxCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgbmV4dEh0bWxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRDaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveXMgYWxsIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuIERvZXMgbm90IHJlbW92ZSBmcm9tXG4gICAqIHRoZSBET00uIFRoYXQgbXVzdCBiZSBkb25lIGJ5IHRoZSBwYXJlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy51bm1vdW50Q2hpbGRyZW4oKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZGVsZXRlQWxsTGlzdGVuZXJzKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LnVubW91bnRJREZyb21FbnZpcm9ubWVudCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgfVxuXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RET01Db21wb25lbnQsICdSZWFjdERPTUNvbXBvbmVudCcsIHtcbiAgbW91bnRDb21wb25lbnQ6ICdtb3VudENvbXBvbmVudCcsXG4gIHVwZGF0ZUNvbXBvbmVudDogJ3VwZGF0ZUNvbXBvbmVudCdcbn0pO1xuXG5hc3NpZ24oXG4gIFJlYWN0RE9NQ29tcG9uZW50LnByb3RvdHlwZSxcbiAgUmVhY3RET01Db21wb25lbnQuTWl4aW4sXG4gIFJlYWN0TXVsdGlDaGlsZC5NaXhpblxuKTtcblxuUmVhY3RET01Db21wb25lbnQuaW5qZWN0aW9uID0ge1xuICBpbmplY3RJRE9wZXJhdGlvbnM6IGZ1bmN0aW9uKElET3BlcmF0aW9ucykge1xuICAgIFJlYWN0RE9NQ29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMgPSBCYWNrZW5kSURPcGVyYXRpb25zID0gSURPcGVyYXRpb25zO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29tcG9uZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRm9ybVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgTG9jYWxFdmVudFRyYXBNaXhpbiA9IHJlcXVpcmUoXCIuL0xvY2FsRXZlbnRUcmFwTWl4aW5cIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBmb3JtID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2Zvcm0nKTtcblxuLyoqXG4gKiBTaW5jZSBvblN1Ym1pdCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkXG4gKiB0byBjYXB0dXJlIGl0IG9uIHRoZSA8Zm9ybT4gZWxlbWVudCBpdHNlbGYuIFRoZXJlIGFyZSBsb3RzIG9mIGhhY2tzIHdlIGNvdWxkXG4gKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxmb3JtPiBhXG4gKiBjb21wb3NpdGUgY29tcG9uZW50IGFuZCB1c2UgYGNvbXBvbmVudERpZE1vdW50YCB0byBhdHRhY2ggdGhlIGV2ZW50IGhhbmRsZXJzLlxuICovXG52YXIgUmVhY3RET01Gb3JtID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01Gb3JtJyxcbiAgdGFnTmFtZTogJ0ZPUk0nLFxuXG4gIG1peGluczogW1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluLCBMb2NhbEV2ZW50VHJhcE1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE86IEluc3RlYWQgb2YgdXNpbmcgYFJlYWN0RE9NYCBkaXJlY3RseSwgd2Ugc2hvdWxkIHVzZSBKU1guIEhvd2V2ZXIsXG4gICAgLy8gYGpzaGludGAgZmFpbHMgdG8gcGFyc2UgSlNYIHNvIGluIG9yZGVyIGZvciBsaW50aW5nIHRvIHdvcmsgaW4gdGhlIG9wZW5cbiAgICAvLyBzb3VyY2UgcmVwbywgd2UgbmVlZCB0byBqdXN0IHVzZSBgUmVhY3RET00uZm9ybWAuXG4gICAgcmV0dXJuIGZvcm0odGhpcy5wcm9wcyk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFJlc2V0LCAncmVzZXQnKTtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQsICdzdWJtaXQnKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Gb3JtO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSURPcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTUNoaWxkcmVuT3BlcmF0aW9uc1wiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcblxuLyoqXG4gKiBFcnJvcnMgZm9yIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHVwZGF0ZWQgd2l0aCBgdXBkYXRlUHJvcGVydHlCeUlkKClgLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMgPSB7XG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOlxuICAgICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgc2V0IHVzaW5nIGB1cGRhdGVJbm5lckhUTUxCeUlEKClgLicsXG4gIHN0eWxlOiAnYHN0eWxlYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlU3R5bGVzQnlJRCgpYC4nXG59O1xuXG4vKipcbiAqIE9wZXJhdGlvbnMgdXNlZCB0byBwcm9jZXNzIHVwZGF0ZXMgdG8gRE9NIG5vZGVzLiBUaGlzIGlzIG1hZGUgaW5qZWN0YWJsZSB2aWFcbiAqIGBSZWFjdERPTUNvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zYC5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgcHJvcGVydHkgdmFsdWVzLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG9cbiAgICogdXBkYXRlIERPTSBwcm9wZXJ0aWVzIGluIGBET01Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdmFsaWQgcHJvcGVydHkgbmFtZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6IGZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpLFxuICAgICAgJ3VwZGF0ZVByb3BlcnR5QnlJRCguLi4pOiAlcycsXG4gICAgICBJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXVxuICAgICkgOiBpbnZhcmlhbnQoIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpKSk7XG5cbiAgICAvLyBJZiB3ZSdyZSB1cGRhdGluZyB0byBudWxsIG9yIHVuZGVmaW5lZCwgd2Ugc2hvdWxkIHJlbW92ZSB0aGUgcHJvcGVydHlcbiAgICAvLyBmcm9tIHRoZSBET00gbm9kZSBpbnN0ZWFkIG9mIGluYWR2ZXJ0YW50bHkgc2V0dGluZyB0byBhIHN0cmluZy4gVGhpc1xuICAgIC8vIGJyaW5ncyB1cyBpbiBsaW5lIHdpdGggdGhlIHNhbWUgYmVoYXZpb3Igd2UgaGF2ZSBvbiBpbml0aWFsIHJlbmRlci5cbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSB0byByZW1vdmUgYSBwcm9wZXJ0eS4gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvIHJlbW92ZVxuICAgKiBET00gcHJvcGVydGllcyBpbiBgRE9NUHJvcGVydHlgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIHByb3BlcnR5IG5hbWUgdG8gcmVtb3ZlLCBzZWUgYERPTVByb3BlcnR5YC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkZWxldGVQcm9wZXJ0eUJ5SUQ6IGZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpLFxuICAgICAgJ3VwZGF0ZVByb3BlcnR5QnlJRCguLi4pOiAlcycsXG4gICAgICBJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXVxuICAgICkgOiBpbnZhcmlhbnQoIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpKSk7XG4gICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgdmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgc3R5bGUgdmFsdWVzLiBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhcyAnJyxcbiAgICogdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlcyBNYXBwaW5nIGZyb20gc3R5bGVzIHRvIHZhbHVlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVTdHlsZXNCeUlEOiBmdW5jdGlvbihpZCwgc3R5bGVzKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgIENTU1Byb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUncyBpbm5lckhUTUwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBodG1sIEFuIEhUTUwgc3RyaW5nLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZUlubmVySFRNTEJ5SUQ6IGZ1bmN0aW9uKGlkLCBodG1sKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgIHNldElubmVySFRNTChub2RlLCBodG1sKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlJ3MgdGV4dCBjb250ZW50IHNldCBieSBgcHJvcHMuY29udGVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IFRleHQgY29udGVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVUZXh0Q29udGVudEJ5SUQ6IGZ1bmN0aW9uKGlkLCBjb250ZW50KSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy51cGRhdGVUZXh0Q29udGVudChub2RlLCBjb250ZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYSBET00gbm9kZSB0aGF0IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQgd2l0aCBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBjaGlsZCB0byBiZSByZXBsYWNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBEYW5nZXJvdXMgbWFya3VwIHRvIGluamVjdCBpbiBwbGFjZSBvZiBjaGlsZC5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0Rhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cH1cbiAgICovXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogZnVuY3Rpb24oaWQsIG1hcmt1cCkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAobm9kZSwgbWFya3VwKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogZnVuY3Rpb24odXBkYXRlcywgbWFya3VwKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cGRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1cGRhdGVzW2ldLnBhcmVudE5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodXBkYXRlc1tpXS5wYXJlbnRJRCk7XG4gICAgfVxuICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5wcm9jZXNzVXBkYXRlcyh1cGRhdGVzLCBtYXJrdXApO1xuICB9XG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RET01JRE9wZXJhdGlvbnMsICdSZWFjdERPTUlET3BlcmF0aW9ucycsIHtcbiAgdXBkYXRlUHJvcGVydHlCeUlEOiAndXBkYXRlUHJvcGVydHlCeUlEJyxcbiAgZGVsZXRlUHJvcGVydHlCeUlEOiAnZGVsZXRlUHJvcGVydHlCeUlEJyxcbiAgdXBkYXRlU3R5bGVzQnlJRDogJ3VwZGF0ZVN0eWxlc0J5SUQnLFxuICB1cGRhdGVJbm5lckhUTUxCeUlEOiAndXBkYXRlSW5uZXJIVE1MQnlJRCcsXG4gIHVwZGF0ZVRleHRDb250ZW50QnlJRDogJ3VwZGF0ZVRleHRDb250ZW50QnlJRCcsXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCcsXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcydcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSURPcGVyYXRpb25zO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSWZyYW1lXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGlmcmFtZSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdpZnJhbWUnKTtcblxuLyoqXG4gKiBTaW5jZSBvbkxvYWQgZG9lc24ndCBidWJibGUgT1IgY2FwdHVyZSBvbiB0aGUgdG9wIGxldmVsIGluIElFOCwgd2UgbmVlZCB0b1xuICogY2FwdHVyZSBpdCBvbiB0aGUgPGlmcmFtZT4gZWxlbWVudCBpdHNlbGYuIFRoZXJlIGFyZSBsb3RzIG9mIGhhY2tzIHdlIGNvdWxkXG4gKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxpZnJhbWU+IGEgY29tcG9zaXRlXG4gKiBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbnZhciBSZWFjdERPTUlmcmFtZSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSWZyYW1lJyxcbiAgdGFnTmFtZTogJ0lGUkFNRScsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlmcmFtZSh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JZnJhbWU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbWdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW1nID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2ltZycpO1xuXG4vKipcbiAqIFNpbmNlIG9uTG9hZCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkIHRvXG4gKiBjYXB0dXJlIGl0IG9uIHRoZSA8aW1nPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGQgZG9cbiAqIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGltZz4gYSBjb21wb3NpdGVcbiAqIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NSW1nID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01JbWcnLFxuICB0YWdOYW1lOiAnSU1HJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaW1nKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcpO1xuICAgIHRoaXMudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcEVycm9yLCAnZXJyb3InKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbWc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbnB1dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaW5wdXQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnaW5wdXQnKTtcblxudmFyIGluc3RhbmNlc0J5UmVhY3RJRCA9IHt9O1xuXG5mdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxpbnB1dD4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIHRoZXNlIG9wdGlvbmFsXG4gKiBwcm9wczogYGNoZWNrZWRgLCBgdmFsdWVgLCBgZGVmYXVsdENoZWNrZWRgLCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKlxuICogSWYgYGNoZWNrZWRgIG9yIGB2YWx1ZWAgYXJlIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnNcbiAqIHRoYXQgYWZmZWN0IHRoZSBjaGVja2VkIHN0YXRlIG9yIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIHRoZXkgYXJlIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBub3RcbiAqIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIHByb3BzIG11c3QgY2hhbmdlIGluIG9yZGVyIGZvclxuICogdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHVuY2hlY2tlZCAob3IgYGRlZmF1bHRDaGVja2VkYClcbiAqIHdpdGggYW4gZW1wdHkgdmFsdWUgKG9yIGBkZWZhdWx0VmFsdWVgKS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtaHRtbDUtMjAxMjEwMjUvdGhlLWlucHV0LWVsZW1lbnQuaHRtbFxuICovXG52YXIgUmVhY3RET01JbnB1dCA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSW5wdXQnLFxuICB0YWdOYW1lOiAnSU5QVVQnLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBMaW5rZWRWYWx1ZVV0aWxzLk1peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRpYWxDaGVja2VkOiB0aGlzLnByb3BzLmRlZmF1bHRDaGVja2VkIHx8IGZhbHNlLFxuICAgICAgaW5pdGlhbFZhbHVlOiBkZWZhdWx0VmFsdWUgIT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IG51bGxcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIHByb3BzLmRlZmF1bHRDaGVja2VkID0gbnVsbDtcbiAgICBwcm9wcy5kZWZhdWx0VmFsdWUgPSBudWxsO1xuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICBwcm9wcy52YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHRoaXMuc3RhdGUuaW5pdGlhbFZhbHVlO1xuXG4gICAgdmFyIGNoZWNrZWQgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldENoZWNrZWQodGhpcyk7XG4gICAgcHJvcHMuY2hlY2tlZCA9IGNoZWNrZWQgIT0gbnVsbCA/IGNoZWNrZWQgOiB0aGlzLnN0YXRlLmluaXRpYWxDaGVja2VkO1xuXG4gICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG5cbiAgICByZXR1cm4gaW5wdXQocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWQgPSBSZWFjdE1vdW50LmdldElEKHRoaXMuZ2V0RE9NTm9kZSgpKTtcbiAgICBpbnN0YW5jZXNCeVJlYWN0SURbaWRdID0gdGhpcztcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRChyb290Tm9kZSk7XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RJRFtpZF07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbihwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpIHtcbiAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5jaGVja2VkICE9IG51bGwpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KFxuICAgICAgICByb290Tm9kZSxcbiAgICAgICAgJ2NoZWNrZWQnLFxuICAgICAgICB0aGlzLnByb3BzLmNoZWNrZWQgfHwgZmFsc2VcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KHJvb3ROb2RlLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWU7XG4gICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVyblZhbHVlID0gb25DaGFuZ2UuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICAgIC8vIEhlcmUgd2UgdXNlIGFzYXAgdG8gd2FpdCB1bnRpbCBhbGwgdXBkYXRlcyBoYXZlIHByb3BhZ2F0ZWQsIHdoaWNoXG4gICAgLy8gaXMgaW1wb3J0YW50IHdoZW4gdXNpbmcgY29udHJvbGxlZCBjb21wb25lbnRzIHdpdGhpbiBsYXllcnM6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIHRoaXMpO1xuXG4gICAgdmFyIG5hbWUgPSB0aGlzLnByb3BzLm5hbWU7XG4gICAgaWYgKHRoaXMucHJvcHMudHlwZSA9PT0gJ3JhZGlvJyAmJiBuYW1lICE9IG51bGwpIHtcbiAgICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgICAgdmFyIHF1ZXJ5Um9vdCA9IHJvb3ROb2RlO1xuXG4gICAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgICAgcXVlcnlSb290ID0gcXVlcnlSb290LnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcbiAgICAgIC8vIGJ1dCB0aGF0IHNvbWV0aW1lcyBiZWhhdmVzIHN0cmFuZ2VseSBpbiBJRTguIFdlIGNvdWxkIGFsc28gdHJ5IHVzaW5nXG4gICAgICAvLyBgZm9ybS5nZXRFbGVtZW50c0J5TmFtZWAsIGJ1dCB0aGF0IHdpbGwgb25seSByZXR1cm4gZGlyZWN0IGNoaWxkcmVuXG4gICAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuICAgICAgLy8gdGhlIGlucHV0IG1pZ2h0IG5vdCBldmVuIGJlIGluIGEgZm9ybSwgbGV0J3MganVzdCB1c2UgdGhlIGdsb2JhbFxuICAgICAgLy8gYHF1ZXJ5U2VsZWN0b3JBbGxgIHRvIGVuc3VyZSB3ZSBkb24ndCBtaXNzIGFueXRoaW5nLlxuICAgICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICdpbnB1dFtuYW1lPScgKyBKU09OLnN0cmluZ2lmeSgnJyArIG5hbWUpICsgJ11bdHlwZT1cInJhZGlvXCJdJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBncm91cExlbiA9IGdyb3VwLmxlbmd0aDsgaSA8IGdyb3VwTGVuOyBpKyspIHtcbiAgICAgICAgdmFyIG90aGVyTm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAob3RoZXJOb2RlID09PSByb290Tm9kZSB8fFxuICAgICAgICAgICAgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3RoZXJJRCA9IFJlYWN0TW91bnQuZ2V0SUQob3RoZXJOb2RlKTtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICBvdGhlcklELFxuICAgICAgICAgICdSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgJyArXG4gICAgICAgICAgJ3NhbWUgYG5hbWVgIGlzIG5vdCBzdXBwb3J0ZWQuJ1xuICAgICAgICApIDogaW52YXJpYW50KG90aGVySUQpKTtcbiAgICAgICAgdmFyIG90aGVySW5zdGFuY2UgPSBpbnN0YW5jZXNCeVJlYWN0SURbb3RoZXJJRF07XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgb3RoZXJJbnN0YW5jZSxcbiAgICAgICAgICAnUmVhY3RET01JbnB1dDogVW5rbm93biByYWRpbyBidXR0b24gSUQgJXMuJyxcbiAgICAgICAgICBvdGhlcklEXG4gICAgICAgICkgOiBpbnZhcmlhbnQob3RoZXJJbnN0YW5jZSkpO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgY29udHJvbGxlZCByYWRpbyBidXR0b24gZ3JvdXAsIGZvcmNpbmcgdGhlIGlucHV0IHRoYXRcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgY2hlY2tlZCB0byB1cGRhdGUgd2lsbCBjYXVzZSBpdCB0byBiZSBjb21lIHJlLWNoZWNrZWRcbiAgICAgICAgLy8gYXMgYXBwcm9wcmlhdGUuXG4gICAgICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCBvdGhlckluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbnB1dDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTU9wdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBvcHRpb24gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnb3B0aW9uJyk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgd2FybnMgd2hlbiBgc2VsZWN0ZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NT3B0aW9uID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01PcHRpb24nLFxuICB0YWdOYW1lOiAnT1BUSU9OJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCA9PSBudWxsLFxuICAgICAgICAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArXG4gICAgICAgICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcHRpb24odGhpcy5wcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01PcHRpb247XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZWxlY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbnZhciBzZWxlY3QgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnc2VsZWN0Jyk7XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICBpZiAodGhpcy5fcGVuZGluZ1VwZGF0ZSkge1xuICAgIHRoaXMuX3BlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2VsZWN0VmFsdWVUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiVGhlIGBcIiArIHByb3BOYW1lICsgXCJgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiBcIikgK1xuICAgICAgICAoXCJgbXVsdGlwbGVgIGlzIHRydWUuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJUaGUgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyIFwiKSArXG4gICAgICAgIChcInZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBJbnN0YW5jZSBvZiBSZWFjdERPTVNlbGVjdFxuICogQHBhcmFtIHsqfSBwcm9wVmFsdWUgQSBzdHJpbmdhYmxlICh3aXRoIGBtdWx0aXBsZWAsIGEgbGlzdCBvZiBzdHJpbmdhYmxlcykuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKGNvbXBvbmVudCwgcHJvcFZhbHVlKSB7XG4gIHZhciBzZWxlY3RlZFZhbHVlLCBpLCBsO1xuICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5nZXRET01Ob2RlKCkub3B0aW9ucztcblxuICBpZiAoY29tcG9uZW50LnByb3BzLm11bHRpcGxlKSB7XG4gICAgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAoaSA9IDAsIGwgPSBwcm9wVmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlWycnICsgcHJvcFZhbHVlW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHNlbGVjdGVkID0gc2VsZWN0ZWRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIGlmIChvcHRpb25zW2ldLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIERvIG5vdCBzZXQgYHNlbGVjdC52YWx1ZWAgYXMgZXhhY3QgYmVoYXZpb3IgaXNuJ3QgY29uc2lzdGVudCBhY3Jvc3MgYWxsXG4gICAgLy8gYnJvd3NlcnMgZm9yIGFsbCBjYXNlcy5cbiAgICBzZWxlY3RlZFZhbHVlID0gJycgKyBwcm9wVmFsdWU7XG4gICAgZm9yIChpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAob3B0aW9uc1tpXS52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8c2VsZWN0PiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG52YXIgUmVhY3RET01TZWxlY3QgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTVNlbGVjdCcsXG4gIHRhZ05hbWU6ICdTRUxFQ1QnLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBMaW5rZWRWYWx1ZVV0aWxzLk1peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGVmYXVsdFZhbHVlOiBzZWxlY3RWYWx1ZVR5cGUsXG4gICAgdmFsdWU6IHNlbGVjdFZhbHVlVHlwZVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuICAgIHByb3BzLnZhbHVlID0gbnVsbDtcblxuICAgIHJldHVybiBzZWxlY3QocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoIXByZXZQcm9wcy5tdWx0aXBsZSAhPT0gIXRoaXMucHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIC8vIEZvciBzaW1wbGljaXR5LCByZWFwcGx5IGBkZWZhdWx0VmFsdWVgIGlmIGBtdWx0aXBsZWAgaXMgdG9nZ2xlZC5cbiAgICAgIGlmICh0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV2ZXJ0IHRoZSBzZWxlY3QgYmFjayB0byBpdHMgZGVmYXVsdCB1bnNlbGVjdGVkIHN0YXRlLlxuICAgICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIHRoaXMucHJvcHMubXVsdGlwbGUgPyBbXSA6ICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWU7XG4gICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVyblZhbHVlID0gb25DaGFuZ2UuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IHRydWU7XG4gICAgUmVhY3RVcGRhdGVzLmFzYXAodXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQsIHRoaXMpO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZShcIi4vZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldFwiKTtcbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcblxuLyoqXG4gKiBXaGlsZSBgaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBvbiB0aGUgU2VsZWN0aW9uIG9iamVjdCBhbmQgYGNvbGxhcHNlZGBcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgUmFuZ2Ugb2JqZWN0LCBJRTExIHNvbWV0aW1lcyBnZXRzIHRoZW0gd3JvbmcuXG4gKiBJZiB0aGUgYW5jaG9yL2ZvY3VzIG5vZGVzIGFuZCBvZmZzZXRzIGFyZSB0aGUgc2FtZSwgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZC5cbiAqL1xuZnVuY3Rpb24gaXNDb2xsYXBzZWQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGFuY2hvciBhbmQgZm9jdXMgbm9kZS9vZmZzZXQgcGFpcnMgZm9yIElFLlxuICpcbiAqIFRoZSBjYXRjaCBoZXJlIGlzIHRoYXQgSUUncyBzZWxlY3Rpb24gQVBJIGRvZXNuJ3QgcHJvdmlkZSBpbmZvcm1hdGlvblxuICogYWJvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGZvcndhcmQgb3IgYmFja3dhcmQsIHNvIHdlIGhhdmUgdG9cbiAqIGJlaGF2ZSBhcyB0aG91Z2ggaXQncyBhbHdheXMgZm9yd2FyZC5cbiAqXG4gKiBJRSB0ZXh0IGRpZmZlcnMgZnJvbSBtb2Rlcm4gc2VsZWN0aW9uIGluIHRoYXQgaXQgYmVoYXZlcyBhcyB0aG91Z2hcbiAqIGJsb2NrIGVsZW1lbnRzIGVuZCB3aXRoIGEgbmV3IGxpbmUuIFRoaXMgbWVhbnMgY2hhcmFjdGVyIG9mZnNldHMgd2lsbFxuICogZGlmZmVyIGJldHdlZW4gdGhlIHR3byBBUElzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuICB2YXIgc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuXG4gIC8vIER1cGxpY2F0ZSBzZWxlY3Rpb24gc28gd2UgY2FuIG1vdmUgcmFuZ2Ugd2l0aG91dCBicmVha2luZyB1c2VyIHNlbGVjdGlvbi5cbiAgdmFyIGZyb21TdGFydCA9IHNlbGVjdGVkUmFuZ2UuZHVwbGljYXRlKCk7XG4gIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgZnJvbVN0YXJ0LnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0Jywgc2VsZWN0ZWRSYW5nZSk7XG5cbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBzZWxlY3RlZExlbmd0aDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydE9mZnNldCxcbiAgICBlbmQ6IGVuZE9mZnNldFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGN1cnJlbnRSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuICAgIHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgKTtcblxuICB2YXIgcmFuZ2VMZW5ndGggPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCA/IDAgOiBjdXJyZW50UmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG5cbiAgdmFyIHRlbXBSYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHRlbXBSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gIHRlbXBSYW5nZS5zZXRFbmQoY3VycmVudFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBjdXJyZW50UmFuZ2Uuc3RhcnRPZmZzZXQpO1xuXG4gIHZhciBpc1RlbXBSYW5nZUNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuICAgIHRlbXBSYW5nZS5zdGFydENvbnRhaW5lcixcbiAgICB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsXG4gICAgdGVtcFJhbmdlLmVuZENvbnRhaW5lcixcbiAgICB0ZW1wUmFuZ2UuZW5kT2Zmc2V0XG4gICk7XG5cbiAgdmFyIHN0YXJ0ID0gaXNUZW1wUmFuZ2VDb2xsYXBzZWQgPyAwIDogdGVtcFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICB2YXIgZW5kID0gc3RhcnQgKyByYW5nZUxlbmd0aDtcblxuICAvLyBEZXRlY3Qgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGJhY2t3YXJkLlxuICB2YXIgZGV0ZWN0aW9uUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRTdGFydChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRFbmQoZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG4gIHZhciBpc0JhY2t3YXJkID0gZGV0ZWN0aW9uUmFuZ2UuY29sbGFwc2VkO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IGlzQmFja3dhcmQgPyBlbmQgOiBzdGFydCxcbiAgICBlbmQ6IGlzQmFja3dhcmQgPyBzdGFydCA6IGVuZFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0SUVPZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkuZHVwbGljYXRlKCk7XG4gIHZhciBzdGFydCwgZW5kO1xuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IHN0YXJ0O1xuICB9IGVsc2UgaWYgKG9mZnNldHMuc3RhcnQgPiBvZmZzZXRzLmVuZCkge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5lbmQ7XG4gICAgZW5kID0gb2Zmc2V0cy5zdGFydDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gIH1cblxuICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gIHJhbmdlLnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0JywgcmFuZ2UpO1xuICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gIHJhbmdlLnNlbGVjdCgpO1xufVxuXG4vKipcbiAqIEluIG1vZGVybiBub24tSUUgYnJvd3NlcnMsIHdlIGNhbiBzdXBwb3J0IGJvdGggZm9yd2FyZCBhbmQgYmFja3dhcmRcbiAqIHNlbGVjdGlvbnMuXG4gKlxuICogTm90ZTogSUUxMCsgc3VwcG9ydHMgdGhlIFNlbGVjdGlvbiBvYmplY3QsIGJ1dCBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuICogdG8gcHJvZ3JhbWF0aWNhbGx5IGNyZWF0ZSBhIGJhY2t3YXJkIHNlbGVjdGlvbi4gVGh1cywgZm9yIGFsbCBJRVxuICogdmVyc2lvbnMsIHdlIHVzZSB0aGUgb2xkIElFIEFQSSB0byBjcmVhdGUgb3VyIHNlbGVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRNb2Rlcm5PZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gIHZhciBzdGFydCA9IE1hdGgubWluKG9mZnNldHMuc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSB0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAgIHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG5cbiAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuICAvLyBGbGlwIGJhY2t3YXJkIHNlbGVjdGlvbnMsIHNvIHdlIGNhbiBzZXQgd2l0aCBhIHNpbmdsZSByYW5nZS5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG5cbiAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBzdGFydCk7XG4gIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cbiAgaWYgKHN0YXJ0TWFya2VyICYmIGVuZE1hcmtlcikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRNYXJrZXIubm9kZSwgc3RhcnRNYXJrZXIub2Zmc2V0KTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VJRU9mZnNldHMgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAnc2VsZWN0aW9uJyBpbiBkb2N1bWVudCAmJlxuICAhKCdnZXRTZWxlY3Rpb24nIGluIHdpbmRvdylcbik7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgZ2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gZ2V0SUVPZmZzZXRzIDogZ2V0TW9kZXJuT2Zmc2V0cyxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gICAqL1xuICBzZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBzZXRJRU9mZnNldHMgOiBzZXRNb2Rlcm5PZmZzZXRzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0aW9uO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPVxuICByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIik7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG4gKiB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgLy8gVGhpcyBjb25zdHJ1Y3RvciBhbmQgaXRzIGFyZ3VtZW50IGlzIGN1cnJlbnRseSB1c2VkIGJ5IG1vY2tzLlxufTtcblxuYXNzaWduKFJlYWN0RE9NVGV4dENvbXBvbmVudC5wcm90b3R5cGUsIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdFRleHR9IHRleHRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIHJlYWxseSBhIFJlYWN0VGV4dCAoUmVhY3ROb2RlKSwgbm90IGEgUmVhY3RFbGVtZW50XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICAgIHRoaXMuX3N0cmluZ1RleHQgPSAnJyArIHRleHQ7XG5cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIG1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuIFRoaXMgbm9kZSBpcyBub3QgaW50ZW5kZWQgdG8gaGF2ZVxuICAgKiBhbnkgZmVhdHVyZXMgYmVzaWRlcyBjb250YWluaW5nIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24ocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgdmFyIGVzY2FwZWRUZXh0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRoaXMuX3N0cmluZ1RleHQpO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcbiAgICAgIC8vIHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb24gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyIChzdGF0aWMgcGFnZXMpLFxuICAgICAgLy8gd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICc8c3BhbiAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHJvb3RJRCkgKyAnPicgK1xuICAgICAgICBlc2NhcGVkVGV4dCArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY29tcG9uZW50IGJ5IHVwZGF0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSBuZXh0VGV4dCBUaGUgbmV4dCB0ZXh0IGNvbnRlbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRUZXh0LCB0cmFuc2FjdGlvbikge1xuICAgIGlmIChuZXh0VGV4dCAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFRleHQ7XG4gICAgICB2YXIgbmV4dFN0cmluZ1RleHQgPSAnJyArIG5leHRUZXh0O1xuICAgICAgaWYgKG5leHRTdHJpbmdUZXh0ICE9PSB0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgIC8vIFRPRE86IFNhdmUgdGhpcyBhcyBwZW5kaW5nIHByb3BzIGFuZCB1c2UgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5XG4gICAgICAgIC8vIGFuZC9vciB1cGRhdGVDb21wb25lbnQgdG8gZG8gdGhlIGFjdHVhbCB1cGRhdGUgZm9yIGNvbnNpc3RlbmN5IHdpdGhcbiAgICAgICAgLy8gb3RoZXIgY29tcG9uZW50IHR5cGVzP1xuICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgIFJlYWN0RE9NQ29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnRCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgbmV4dFN0cmluZ1RleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dENvbXBvbmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVRleHRhcmVhXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSByZXF1aXJlKFwiLi9BdXRvRm9jdXNNaXhpblwiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIHRleHRhcmVhID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ3RleHRhcmVhJyk7XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8dGV4dGFyZWE+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyBgdmFsdWVgLCBhbmRcbiAqIGBkZWZhdWx0VmFsdWVgLiBUaGlzIGRpZmZlcnMgZnJvbSB0aGUgdHJhZGl0aW9uYWwgRE9NIEFQSSBiZWNhdXNlIHZhbHVlIGlzXG4gKiB1c3VhbGx5IHNldCBhcyBQQ0RBVEEgY2hpbGRyZW4uXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgYWZmZWN0IHRoZVxuICogdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGxcbiAqIG5vdCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuICpcbiAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbiBlbXB0eSB2YWx1ZSwgdGhlIHByb3BcbiAqIGBkZWZhdWx0VmFsdWVgIGlmIHNwZWNpZmllZCwgb3IgdGhlIGNoaWxkcmVuIGNvbnRlbnQgKGRlcHJlY2F0ZWQpLlxuICovXG52YXIgUmVhY3RET01UZXh0YXJlYSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NVGV4dGFyZWEnLFxuICB0YWdOYW1lOiAnVEVYVEFSRUEnLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBMaW5rZWRWYWx1ZVV0aWxzLk1peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgK1xuICAgICAgICAgICdjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LidcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgfVxuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgZGVmYXVsdFZhbHVlID09IG51bGwsXG4gICAgICAgICdJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uJ1xuICAgICAgKSA6IGludmFyaWFudChkZWZhdWx0VmFsdWUgPT0gbnVsbCkpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgY2hpbGRyZW4ubGVuZ3RoIDw9IDEsXG4gICAgICAgICAgJzx0ZXh0YXJlYT4gY2FuIG9ubHkgaGF2ZSBhdCBtb3N0IG9uZSBjaGlsZC4nXG4gICAgICAgICkgOiBpbnZhcmlhbnQoY2hpbGRyZW4ubGVuZ3RoIDw9IDEpKTtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdFZhbHVlID0gJycgKyBjaGlsZHJlbjtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJztcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gV2Ugc2F2ZSB0aGUgaW5pdGlhbCB2YWx1ZSBzbyB0aGF0IGBSZWFjdERPTUNvbXBvbmVudGAgZG9lc24ndCB1cGRhdGVcbiAgICAgIC8vIGB0ZXh0Q29udGVudGAgKHVubmVjZXNzYXJ5IHNpbmNlIHdlIHVwZGF0ZSB2YWx1ZSkuXG4gICAgICAvLyBUaGUgaW5pdGlhbCB2YWx1ZSBjYW4gYmUgYSBib29sZWFuIG9yIG9iamVjdCBzbyB0aGF0J3Mgd2h5IGl0J3NcbiAgICAgIC8vIGZvcmNlZCB0byBiZSBhIHN0cmluZy5cbiAgICAgIGluaXRpYWxWYWx1ZTogJycgKyAodmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlKVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSBgdGhpcy5wcm9wc2Agc28gd2UgZG9uJ3QgbXV0YXRlIHRoZSBpbnB1dC5cbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwsXG4gICAgICAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJ1xuICAgICkgOiBpbnZhcmlhbnQocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkpO1xuXG4gICAgcHJvcHMuZGVmYXVsdFZhbHVlID0gbnVsbDtcbiAgICBwcm9wcy52YWx1ZSA9IG51bGw7XG4gICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG5cbiAgICAvLyBBbHdheXMgc2V0IGNoaWxkcmVuIHRvIHRoZSBzYW1lIHRoaW5nLiBJbiBJRTksIHRoZSBzZWxlY3Rpb24gcmFuZ2Ugd2lsbFxuICAgIC8vIGdldCByZXNldCBpZiBgdGV4dENvbnRlbnRgIGlzIG11dGF0ZWQuXG4gICAgcmV0dXJuIHRleHRhcmVhKHByb3BzLCB0aGlzLnN0YXRlLmluaXRpYWxWYWx1ZSk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbihwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShyb290Tm9kZSwgJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBvbkNoYW5nZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0T25DaGFuZ2UodGhpcyk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dGFyZWE7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxudmFyIFJFU0VUX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSBmYWxzZTtcbiAgfVxufTtcblxudmFyIEZMVVNIX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IFJlYWN0VXBkYXRlcy5mbHVzaEJhdGNoZWRVcGRhdGVzLmJpbmQoUmVhY3RVcGRhdGVzKVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW0ZMVVNIX0JBVENIRURfVVBEQVRFUywgUkVTRVRfQkFUQ0hFRF9VUERBVEVTXTtcblxuZnVuY3Rpb24gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG59XG5cbmFzc2lnbihcbiAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgVHJhbnNhY3Rpb24uTWl4aW4sXG4gIHtcbiAgICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgICB9XG4gIH1cbik7XG5cbnZhciB0cmFuc2FjdGlvbiA9IG5ldyBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKTtcblxudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaW4gYSBjb250ZXh0IHdpdGhpbiB3aGljaCBjYWxscyB0byBgc2V0U3RhdGVgXG4gICAqIGFuZCBmcmllbmRzIGFyZSBiYXRjaGVkIHN1Y2ggdGhhdCBjb21wb25lbnRzIGFyZW4ndCB1cGRhdGVkIHVubmVjZXNzYXJpbHkuXG4gICAqL1xuICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24oY2FsbGJhY2ssIGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM7XG5cbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBjb2RlIGlzIHdyaXR0ZW4gdGhpcyB3YXkgdG8gYXZvaWQgZXh0cmEgYWxsb2NhdGlvbnNcbiAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgY2FsbGJhY2soYSwgYiwgYywgZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oY2FsbGJhY2ssIG51bGwsIGEsIGIsIGMsIGQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdEluamVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIpO1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vQ2hhbmdlRXZlbnRQbHVnaW5cIik7XG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9DbGllbnRSZWFjdFJvb3RJbmRleFwiKTtcbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IHJlcXVpcmUoXCIuL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyXCIpO1xudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL0VudGVyTGVhdmVFdmVudFBsdWdpblwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoXCIuL0hUTUxET01Qcm9wZXJ0eUNvbmZpZ1wiKTtcbnZhciBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdERPTUJ1dHRvbiA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NQnV0dG9uXCIpO1xudmFyIFJlYWN0RE9NRm9ybSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NRm9ybVwiKTtcbnZhciBSZWFjdERPTUltZyA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NSW1nXCIpO1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RET01JZnJhbWUgPSByZXF1aXJlKFwiLi9SZWFjdERPTUlmcmFtZVwiKTtcbnZhciBSZWFjdERPTUlucHV0ID0gcmVxdWlyZShcIi4vUmVhY3RET01JbnB1dFwiKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NT3B0aW9uXCIpO1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3RcIik7XG52YXIgUmVhY3RET01UZXh0YXJlYSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dGFyZWFcIik7XG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RET01UZXh0Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKFwiLi9SZWFjdEV2ZW50TGlzdGVuZXJcIik7XG52YXIgUmVhY3RJbmplY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdEluamVjdGlvblwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXCIpO1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vU2VsZWN0RXZlbnRQbHVnaW5cIik7XG52YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleFwiKTtcbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL1NpbXBsZUV2ZW50UGx1Z2luXCIpO1xudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZShcIi4vU1ZHRE9NUHJvcGVydHlDb25maWdcIik7XG5cbnZhciBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50XCIpO1xuXG5mdW5jdGlvbiBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3ModHlwZSkge1xuICByZXR1cm4gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gICAgdGFnTmFtZTogdHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFJlYWN0RWxlbWVudChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGhpcy5wcm9wc1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbmplY3QoKSB7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoXG4gICAgUmVhY3RFdmVudExpc3RlbmVyXG4gICk7XG5cbiAgLyoqXG4gICAqIEluamVjdCBtb2R1bGVzIGZvciByZXNvbHZpbmcgRE9NIGhpZXJhcmNoeSBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcik7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEluc3RhbmNlSGFuZGxlKFJlYWN0SW5zdGFuY2VIYW5kbGVzKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0TW91bnQoUmVhY3RNb3VudCk7XG5cbiAgLyoqXG4gICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICAgKiB0aGVtKS5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luOiBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLFxuICAgIFNlbGVjdEV2ZW50UGx1Z2luOiBTZWxlY3RFdmVudFBsdWdpbixcbiAgICBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gIH0pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MoXG4gICAgUmVhY3RET01Db21wb25lbnRcbiAgKTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0VGV4dENvbXBvbmVudENsYXNzKFxuICAgIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RBdXRvV3JhcHBlcihcbiAgICBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3NcbiAgKTtcblxuICAvLyBUaGlzIG5lZWRzIHRvIGhhcHBlbiBiZWZvcmUgY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoKSBvdGhlcndpc2UgdGhlIG1peGluXG4gIC8vIHdvbid0IGJlIGluY2x1ZGVkLlxuICBSZWFjdEluamVjdGlvbi5DbGFzcy5pbmplY3RNaXhpbihSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbik7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdENvbXBvbmVudENsYXNzZXMoe1xuICAgICdidXR0b24nOiBSZWFjdERPTUJ1dHRvbixcbiAgICAnZm9ybSc6IFJlYWN0RE9NRm9ybSxcbiAgICAnaWZyYW1lJzogUmVhY3RET01JZnJhbWUsXG4gICAgJ2ltZyc6IFJlYWN0RE9NSW1nLFxuICAgICdpbnB1dCc6IFJlYWN0RE9NSW5wdXQsXG4gICAgJ29wdGlvbic6IFJlYWN0RE9NT3B0aW9uLFxuICAgICdzZWxlY3QnOiBSZWFjdERPTVNlbGVjdCxcbiAgICAndGV4dGFyZWEnOiBSZWFjdERPTVRleHRhcmVhLFxuXG4gICAgJ2h0bWwnOiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgnaHRtbCcpLFxuICAgICdoZWFkJzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2hlYWQnKSxcbiAgICAnYm9keSc6IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KCdib2R5JylcbiAgfSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50KCdub3NjcmlwdCcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oXG4gICAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICApO1xuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koXG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlJvb3RJbmRleC5pbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleChcbiAgICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gP1xuICAgICAgQ2xpZW50UmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggOlxuICAgICAgU2VydmVyUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgKTtcblxuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xuICBSZWFjdEluamVjdGlvbi5ET01Db21wb25lbnQuaW5qZWN0SURPcGVyYXRpb25zKFJlYWN0RE9NSURPcGVyYXRpb25zKTtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFyIHVybCA9IChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYpIHx8ICcnO1xuICAgIGlmICgoL1s/Jl1yZWFjdF9wZXJmXFxiLykudGVzdCh1cmwpKSB7XG4gICAgICB2YXIgUmVhY3REZWZhdWx0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdFBlcmZcIik7XG4gICAgICBSZWFjdERlZmF1bHRQZXJmLnN0YXJ0KCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbmplY3Q6IGluamVjdFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcmVxdWlyZShcIi4vcGVyZm9ybWFuY2VOb3dcIik7XG5cbmZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGFkZFZhbHVlKG9iaiwga2V5LCB2YWwpIHtcbiAgb2JqW2tleV0gPSAob2JqW2tleV0gfHwgMCkgKyB2YWw7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmID0ge1xuICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuICBfbW91bnRTdGFjazogWzBdLFxuICBfaW5qZWN0ZWQ6IGZhbHNlLFxuXG4gIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIVJlYWN0RGVmYXVsdFBlcmYuX2luamVjdGVkKSB7XG4gICAgICBSZWFjdFBlcmYuaW5qZWN0aW9uLmluamVjdE1lYXN1cmUoUmVhY3REZWZhdWx0UGVyZi5tZWFzdXJlKTtcbiAgICB9XG5cbiAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoID0gMDtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IHRydWU7XG4gIH0sXG5cbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSBmYWxzZTtcbiAgfSxcblxuICBnZXRMYXN0TWVhc3VyZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICB9LFxuXG4gIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEV4Y2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdDb21wb25lbnQgY2xhc3MgbmFtZSc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1RvdGFsIGluY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uaW5jbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSByZW5kZXIgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnJlbmRlciksXG4gICAgICAgICdNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSAvIGl0ZW0uY291bnQpLFxuICAgICAgICAnUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICAvLyBUT0RPOiBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBjb3JyZWN0XG4gICAgLy8gbnVtYmVyLlxuICB9LFxuXG4gIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ0luY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0udGltZSksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KFxuICAgICAgbWVhc3VyZW1lbnRzLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIHByaW50V2FzdGVkOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIGNvbnNvbGUudGFibGUoUmVhY3REZWZhdWx0UGVyZi5nZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwKG1lYXN1cmVtZW50cykpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ1RvdGFsIHRpbWU6JyxcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcydcbiAgICApO1xuICB9LFxuXG4gIHByaW50RE9NOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdFtET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRV0gPSBpdGVtLmlkO1xuICAgICAgcmVzdWx0Wyd0eXBlJ10gPSBpdGVtLnR5cGU7XG4gICAgICByZXN1bHRbJ2FyZ3MnXSA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBfcmVjb3JkV3JpdGU6IGZ1bmN0aW9uKGlkLCBmbk5hbWUsIHRvdGFsVGltZSwgYXJncykge1xuICAgIC8vIFRPRE86IHRvdGFsVGltZSBpc24ndCB0aGF0IHVzZWZ1bCBzaW5jZSBpdCBkb2Vzbid0IGNvdW50IHBhaW50cy9yZWZsb3dzXG4gICAgdmFyIHdyaXRlcyA9XG4gICAgICBSZWFjdERlZmF1bHRQZXJmXG4gICAgICAgIC5fYWxsTWVhc3VyZW1lbnRzW1JlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXVxuICAgICAgICAud3JpdGVzO1xuICAgIHdyaXRlc1tpZF0gPSB3cml0ZXNbaWRdIHx8IFtdO1xuICAgIHdyaXRlc1tpZF0ucHVzaCh7XG4gICAgICB0eXBlOiBmbk5hbWUsXG4gICAgICB0aW1lOiB0b3RhbFRpbWUsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gIH0sXG5cbiAgbWVhc3VyZTogZnVuY3Rpb24obW9kdWxlTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0wLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICAgIHZhciB0b3RhbFRpbWU7XG4gICAgICB2YXIgcnY7XG4gICAgICB2YXIgc3RhcnQ7XG5cbiAgICAgIGlmIChmbk5hbWUgPT09ICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcgfHxcbiAgICAgICAgICBmbk5hbWUgPT09ICdmbHVzaEJhdGNoZWRVcGRhdGVzJykge1xuICAgICAgICAvLyBBIFwibWVhc3VyZW1lbnRcIiBpcyBhIHNldCBvZiBtZXRyaWNzIHJlY29yZGVkIGZvciBlYWNoIGZsdXNoLiBXZSB3YW50XG4gICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuICAgICAgICAvLyBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgYW5kIHRoZSBET00gb3BlcmF0aW9ucyB0aGF0IGFjdHVhbGx5XG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGRldGVybWluZSB0aGUgYW1vdW50IG9mIFwid2FzdGVkIHdvcmtcIiBwZXJmb3JtZWQuXG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICBleGNsdXNpdmU6IHt9LFxuICAgICAgICAgIGluY2x1c2l2ZToge30sXG4gICAgICAgICAgcmVuZGVyOiB7fSxcbiAgICAgICAgICBjb3VudHM6IHt9LFxuICAgICAgICAgIHdyaXRlczoge30sXG4gICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICAgICAgICB0b3RhbFRpbWU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXS50b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAoZm5OYW1lID09PSAnX21vdW50SW1hZ2VJbnRvTm9kZScgfHxcbiAgICAgICAgICBtb2R1bGVOYW1lID09PSAnUmVhY3RET01JRE9wZXJhdGlvbnMnKSB7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ19tb3VudEltYWdlSW50b05vZGUnKSB7XG4gICAgICAgICAgdmFyIG1vdW50SUQgPSBSZWFjdE1vdW50LmdldElEKGFyZ3NbMV0pO1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBmb3JtYXRcbiAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24odXBkYXRlKSB7XG4gICAgICAgICAgICB2YXIgd3JpdGVBcmdzID0ge307XG4gICAgICAgICAgICBpZiAodXBkYXRlLmZyb21JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MuZnJvbUluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUudG9JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudG9JbmRleCA9IHVwZGF0ZS50b0luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50ZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudGV4dENvbnRlbnQgPSB1cGRhdGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLm1hcmt1cEluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5tYXJrdXAgPSBhcmdzWzFdW3VwZGF0ZS5tYXJrdXBJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShcbiAgICAgICAgICAgICAgdXBkYXRlLnBhcmVudElELFxuICAgICAgICAgICAgICB1cGRhdGUudHlwZSxcbiAgICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgICB3cml0ZUFyZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYmFzaWMgZm9ybWF0XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoXG4gICAgICAgICAgICBhcmdzWzBdLFxuICAgICAgICAgICAgZm5OYW1lLFxuICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyAmJiAoXG4gICAgICAgICgvLyBUT0RPOiByZWNlaXZlQ29tcG9uZW50KCk/XG4gICAgICAgIChmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgfHxcbiAgICAgICAgZm5OYW1lID09PSAndXBkYXRlQ29tcG9uZW50JyB8fCBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpKSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb290Tm9kZUlEID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnID9cbiAgICAgICAgICBhcmdzWzBdIDpcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgICB2YXIgaXNSZW5kZXIgPSBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JztcbiAgICAgICAgdmFyIGlzTW91bnQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCc7XG5cbiAgICAgICAgdmFyIG1vdW50U3RhY2sgPSBSZWFjdERlZmF1bHRQZXJmLl9tb3VudFN0YWNrO1xuICAgICAgICB2YXIgZW50cnkgPSBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5jb3VudHMsIHJvb3ROb2RlSUQsIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91bnQpIHtcbiAgICAgICAgICBtb3VudFN0YWNrLnB1c2goMCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgdG90YWxUaW1lID0gcGVyZm9ybWFuY2VOb3coKSAtIHN0YXJ0O1xuXG4gICAgICAgIGlmIChpc1JlbmRlcikge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LnJlbmRlciwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG4gICAgICAgICAgdmFyIHN1Yk1vdW50VGltZSA9IG1vdW50U3RhY2sucG9wKCk7XG4gICAgICAgICAgbW91bnRTdGFja1ttb3VudFN0YWNrLmxlbmd0aCAtIDFdICs9IHRvdGFsVGltZTtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5leGNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSAtIHN1Yk1vdW50VGltZSk7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuaW5jbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVudHJ5LmRpc3BsYXlOYW1lc1tyb290Tm9kZUlEXSA9IHtcbiAgICAgICAgICBjdXJyZW50OiB0aGlzLmdldE5hbWUoKSxcbiAgICAgICAgICBvd25lcjogdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyID9cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgOlxuICAgICAgICAgICAgJzxyb290PidcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmY7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXG4gKi9cblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbi8vIERvbid0IHRyeSB0byBzYXZlIHVzZXJzIGxlc3MgdGhhbiAxLjJtcyAoYSBudW1iZXIgSSBtYWRlIHVwKVxudmFyIERPTlRfQ0FSRV9USFJFU0hPTEQgPSAxLjI7XG52YXIgRE9NX09QRVJBVElPTl9UWVBFUyA9IHtcbiAgJ19tb3VudEltYWdlSW50b05vZGUnOiAnc2V0IGlubmVySFRNTCcsXG4gIElOU0VSVF9NQVJLVVA6ICdzZXQgaW5uZXJIVE1MJyxcbiAgTU9WRV9FWElTVElORzogJ21vdmUnLFxuICBSRU1PVkVfTk9ERTogJ3JlbW92ZScsXG4gIFRFWFRfQ09OVEVOVDogJ3NldCB0ZXh0Q29udGVudCcsXG4gICd1cGRhdGVQcm9wZXJ0eUJ5SUQnOiAndXBkYXRlIGF0dHJpYnV0ZScsXG4gICdkZWxldGVQcm9wZXJ0eUJ5SUQnOiAnZGVsZXRlIGF0dHJpYnV0ZScsXG4gICd1cGRhdGVTdHlsZXNCeUlEJzogJ3VwZGF0ZSBzdHlsZXMnLFxuICAndXBkYXRlSW5uZXJIVE1MQnlJRCc6ICdzZXQgaW5uZXJIVE1MJyxcbiAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCc6ICdyZXBsYWNlJ1xufTtcblxuZnVuY3Rpb24gZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykge1xuICAvLyBUT0RPOiByZXR1cm4gbnVtYmVyIG9mIERPTSBvcHM/IGNvdWxkIGJlIG1pc2xlYWRpbmcuXG4gIC8vIFRPRE86IG1lYXN1cmUgZHJvcHBlZCBmcmFtZXMgYWZ0ZXIgcmVjb25jaWxlP1xuICAvLyBUT0RPOiBsb2cgdG90YWwgdGltZSBvZiBlYWNoIHJlY29uY2lsZSBhbmQgdGhlIHRvcC1sZXZlbCBjb21wb25lbnRcbiAgLy8gY2xhc3MgdGhhdCB0cmlnZ2VyZWQgaXQuXG4gIHZhciB0b3RhbFRpbWUgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB0b3RhbFRpbWUgKz0gbWVhc3VyZW1lbnQudG90YWxUaW1lO1xuICB9XG4gIHJldHVybiB0b3RhbFRpbWU7XG59XG5cbmZ1bmN0aW9uIGdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKSB7XG4gIHZhciBpdGVtcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgaWQ7XG5cbiAgICBmb3IgKGlkIGluIG1lYXN1cmVtZW50LndyaXRlcykge1xuICAgICAgbWVhc3VyZW1lbnQud3JpdGVzW2lkXS5mb3JFYWNoKGZ1bmN0aW9uKHdyaXRlKSB7XG4gICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICB0eXBlOiBET01fT1BFUkFUSU9OX1RZUEVTW3dyaXRlLnR5cGVdIHx8IHdyaXRlLnR5cGUsXG4gICAgICAgICAgYXJnczogd3JpdGUuYXJnc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXRlbXM7XG59XG5cbmZ1bmN0aW9uIGdldEV4Y2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKSB7XG4gIHZhciBjYW5kaWRhdGVzID0ge307XG4gIHZhciBkaXNwbGF5TmFtZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgYWxsSURzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBtZWFzdXJlbWVudC5leGNsdXNpdmUsXG4gICAgICBtZWFzdXJlbWVudC5pbmNsdXNpdmVcbiAgICApO1xuXG4gICAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgICBkaXNwbGF5TmFtZSA9IG1lYXN1cmVtZW50LmRpc3BsYXlOYW1lc1tpZF0uY3VycmVudDtcblxuICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0gPSBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSB8fCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgICBpbmNsdXNpdmU6IDAsXG4gICAgICAgIGV4Y2x1c2l2ZTogMCxcbiAgICAgICAgcmVuZGVyOiAwLFxuICAgICAgICBjb3VudDogMFxuICAgICAgfTtcbiAgICAgIGlmIChtZWFzdXJlbWVudC5yZW5kZXJbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLnJlbmRlciArPSBtZWFzdXJlbWVudC5yZW5kZXJbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmV4Y2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uZXhjbHVzaXZlICs9IG1lYXN1cmVtZW50LmV4Y2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5pbmNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5jb3VudHNbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKGRpc3BsYXlOYW1lIGluIGNhbmRpZGF0ZXMpIHtcbiAgICBpZiAoY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uZXhjbHVzaXZlID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcbiAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdKTtcbiAgICB9XG4gIH1cblxuICBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIuZXhjbHVzaXZlIC0gYS5leGNsdXNpdmU7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzLCBvbmx5Q2xlYW4pIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcbiAgdmFyIGluY2x1c2l2ZUtleTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgYWxsSURzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBtZWFzdXJlbWVudC5leGNsdXNpdmUsXG4gICAgICBtZWFzdXJlbWVudC5pbmNsdXNpdmVcbiAgICApO1xuICAgIHZhciBjbGVhbkNvbXBvbmVudHM7XG5cbiAgICBpZiAob25seUNsZWFuKSB7XG4gICAgICBjbGVhbkNvbXBvbmVudHMgPSBnZXRVbmNoYW5nZWRDb21wb25lbnRzKG1lYXN1cmVtZW50KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICAgIGlmIChvbmx5Q2xlYW4gJiYgIWNsZWFuQ29tcG9uZW50c1tpZF0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IG1lYXN1cmVtZW50LmRpc3BsYXlOYW1lc1tpZF07XG5cbiAgICAgIC8vIEluY2x1c2l2ZSB0aW1lIGlzIG5vdCB1c2VmdWwgZm9yIG1hbnkgY29tcG9uZW50cyB3aXRob3V0IGtub3dpbmcgd2hlcmVcbiAgICAgIC8vIHRoZXkgYXJlIGluc3RhbnRpYXRlZC4gU28gd2UgYWdncmVnYXRlIGluY2x1c2l2ZSB0aW1lIHdpdGggYm90aCB0aGVcbiAgICAgIC8vIG93bmVyIGFuZCBjdXJyZW50IGRpc3BsYXlOYW1lIGFzIHRoZSBrZXkuXG4gICAgICBpbmNsdXNpdmVLZXkgPSBkaXNwbGF5TmFtZS5vd25lciArICcgPiAnICsgZGlzcGxheU5hbWUuY3VycmVudDtcblxuICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldID0gY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldIHx8IHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogaW5jbHVzaXZlS2V5LFxuICAgICAgICB0aW1lOiAwLFxuICAgICAgICBjb3VudDogMFxuICAgICAgfTtcblxuICAgICAgaWYgKG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLnRpbWUgKz0gbWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5jb3VudHNbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS5jb3VudCArPSBtZWFzdXJlbWVudC5jb3VudHNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vdyBtYWtlIGEgc29ydGVkIGFycmF5IHdpdGggdGhlIHJlc3VsdHMuXG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yIChpbmNsdXNpdmVLZXkgaW4gY2FuZGlkYXRlcykge1xuICAgIGlmIChjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0udGltZSA+PSBET05UX0NBUkVfVEhSRVNIT0xEKSB7XG4gICAgICBhcnIucHVzaChjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0pO1xuICAgIH1cbiAgfVxuXG4gIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi50aW1lIC0gYS50aW1lO1xuICB9KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBnZXRVbmNoYW5nZWRDb21wb25lbnRzKG1lYXN1cmVtZW50KSB7XG4gIC8vIEZvciBhIGdpdmVuIHJlY29uY2lsZSwgbG9vayBhdCB3aGljaCBjb21wb25lbnRzIGRpZCBub3QgYWN0dWFsbHlcbiAgLy8gcmVuZGVyIGFueXRoaW5nIHRvIHRoZSBET00gYW5kIHJldHVybiBhIG1hcHBpbmcgb2YgdGhlaXIgSUQgdG9cbiAgLy8gdGhlIGFtb3VudCBvZiB0aW1lIGl0IHRvb2sgdG8gcmVuZGVyIHRoZSBlbnRpcmUgc3VidHJlZS5cbiAgdmFyIGNsZWFuQ29tcG9uZW50cyA9IHt9O1xuICB2YXIgZGlydHlMZWFmSURzID0gT2JqZWN0LmtleXMobWVhc3VyZW1lbnQud3JpdGVzKTtcbiAgdmFyIGFsbElEcyA9IGFzc2lnbih7fSwgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLCBtZWFzdXJlbWVudC5pbmNsdXNpdmUpO1xuXG4gIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgIHZhciBpc0RpcnR5ID0gZmFsc2U7XG4gICAgLy8gRm9yIGVhY2ggY29tcG9uZW50IHRoYXQgcmVuZGVyZWQsIHNlZSBpZiBhIGNvbXBvbmVudCB0aGF0IHRyaWdnZXJlZFxuICAgIC8vIGEgRE9NIG9wIGlzIGluIGl0cyBzdWJ0cmVlLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlydHlMZWFmSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZGlydHlMZWFmSURzW2ldLmluZGV4T2YoaWQpID09PSAwKSB7XG4gICAgICAgIGlzRGlydHkgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc0RpcnR5ICYmIG1lYXN1cmVtZW50LmNvdW50c1tpZF0gPiAwKSB7XG4gICAgICBjbGVhbkNvbXBvbmVudHNbaWRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsZWFuQ29tcG9uZW50cztcbn1cblxudmFyIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyA9IHtcbiAgZ2V0RXhjbHVzaXZlU3VtbWFyeTogZ2V0RXhjbHVzaXZlU3VtbWFyeSxcbiAgZ2V0SW5jbHVzaXZlU3VtbWFyeTogZ2V0SW5jbHVzaXZlU3VtbWFyeSxcbiAgZ2V0RE9NU3VtbWFyeTogZ2V0RE9NU3VtbWFyeSxcbiAgZ2V0VG90YWxUaW1lOiBnZXRUb3RhbFRpbWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RWxlbWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29udGV4dCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29udGV4dFwiKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICBrZXk6IHRydWUsXG4gIHJlZjogdHJ1ZVxufTtcblxuLyoqXG4gKiBXYXJuIGZvciBtdXRhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cbmZ1bmN0aW9uIGRlZmluZVdhcm5pbmdQcm9wZXJ0eShvYmplY3QsIGtleSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcblxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcblxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX3N0b3JlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3N0b3JlW2tleV07XG4gICAgfSxcblxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0RvblxcJ3Qgc2V0IHRoZSAlcyBwcm9wZXJ0eSBvZiB0aGUgUmVhY3QgZWxlbWVudC4gSW5zdGVhZCwgJyArXG4gICAgICAgICdzcGVjaWZ5IHRoZSBjb3JyZWN0IHZhbHVlIHdoZW4gaW5pdGlhbGx5IGNyZWF0aW5nIHRoZSBlbGVtZW50LicsXG4gICAgICAgIGtleVxuICAgICAgKSA6IG51bGwpO1xuICAgICAgdGhpcy5fc3RvcmVba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIHVwZGF0ZWQgdG8gdHJ1ZSBpZiB0aGUgbWVtYnJhbmUgaXMgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQuXG4gKi9cbnZhciB1c2VNdXRhdGlvbk1lbWJyYW5lID0gZmFsc2U7XG5cbi8qKlxuICogV2FybiBmb3IgbXV0YXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZGVmaW5lTXV0YXRpb25NZW1icmFuZShwcm90b3R5cGUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcHNldWRvRnJvemVuUHJvcGVydGllcyA9IHtcbiAgICAgIHByb3BzOiB0cnVlXG4gICAgfTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHNldWRvRnJvemVuUHJvcGVydGllcykge1xuICAgICAgZGVmaW5lV2FybmluZ1Byb3BlcnR5KHByb3RvdHlwZSwga2V5KTtcbiAgICB9XG4gICAgdXNlTXV0YXRpb25NZW1icmFuZSA9IHRydWU7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHlcbiAgfVxufVxuXG4vKipcbiAqIEJhc2UgY29uc3RydWN0b3IgZm9yIGFsbCBSZWFjdCBlbGVtZW50cy4gVGhpcyBpcyBvbmx5IHVzZWQgdG8gbWFrZSB0aGlzXG4gKiB3b3JrIHdpdGggYSBkeW5hbWljIGluc3RhbmNlb2YgY2hlY2suIE5vdGhpbmcgc2hvdWxkIGxpdmUgb24gdGhpcyBwcm90b3R5cGUuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZlxuICogQHBhcmFtIHsqfSBrZXlcbiAqIEBwYXJhbSB7Kn0gcHJvcHNcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwga2V5LCByZWYsIG93bmVyLCBjb250ZXh0LCBwcm9wcykge1xuICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMua2V5ID0ga2V5O1xuICB0aGlzLnJlZiA9IHJlZjtcblxuICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBlbGVtZW50LlxuICB0aGlzLl9vd25lciA9IG93bmVyO1xuXG4gIC8vIFRPRE86IERlcHJlY2F0ZSB3aXRoQ29udGV4dCwgYW5kIHRoZW4gdGhlIGNvbnRleHQgYmVjb21lcyBhY2Nlc3NpYmxlXG4gIC8vIHRocm91Z2ggdGhlIG93bmVyLlxuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBhbmQgcHJvcHMgYXJlIGN1cnJlbnRseSBtdXRhdGl2ZS4gV2UgcHV0IHRoZW0gb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICB0aGlzLl9zdG9yZSA9IHtwcm9wczogcHJvcHMsIG9yaWdpbmFsUHJvcHM6IGFzc2lnbih7fSwgcHJvcHMpfTtcblxuICAgIC8vIFRvIG1ha2UgY29tcGFyaW5nIFJlYWN0RWxlbWVudHMgZWFzaWVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSBtYWtlXG4gICAgLy8gdGhlIHZhbGlkYXRpb24gZmxhZyBub24tZW51bWVyYWJsZSAod2hlcmUgcG9zc2libGUsIHdoaWNoIHNob3VsZFxuICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrXG4gICAgLy8gaWdub3JlcyBpdC5cbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuX3N0b3JlLCAndmFsaWRhdGVkJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICB9XG4gICAgdGhpcy5fc3RvcmUudmFsaWRhdGVkID0gZmFsc2U7XG5cbiAgICAvLyBXZSdyZSBub3QgYWxsb3dlZCB0byBzZXQgcHJvcHMgZGlyZWN0bHkgb24gdGhlIG9iamVjdCBzbyB3ZSBlYXJseVxuICAgIC8vIHJldHVybiBhbmQgcmVseSBvbiB0aGUgcHJvdG90eXBlIG1lbWJyYW5lIHRvIGZvcndhcmQgdG8gdGhlIGJhY2tpbmdcbiAgICAvLyBzdG9yZS5cbiAgICBpZiAodXNlTXV0YXRpb25NZW1icmFuZSkge1xuICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB0aGlzLnByb3BzID0gcHJvcHM7XG59O1xuXG4vLyBXZSBpbnRlbnRpb25hbGx5IGRvbid0IGV4cG9zZSB0aGUgZnVuY3Rpb24gb24gdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5LlxuLy8gUmVhY3RFbGVtZW50IHNob3VsZCBiZSBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuUmVhY3RFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgX2lzUmVhY3RFbGVtZW50OiB0cnVlXG59O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIGRlZmluZU11dGF0aW9uTWVtYnJhbmUoUmVhY3RFbGVtZW50LnByb3RvdHlwZSk7XG59XG5cblJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIgcHJvcHMgPSB7fTtcblxuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIHJlZiA9IG51bGw7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgcmVmID0gY29uZmlnLnJlZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5yZWY7XG4gICAga2V5ID0gY29uZmlnLmtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gYSBuZXcgcHJvcHMgb2JqZWN0XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICAgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgdHlwZSxcbiAgICBrZXksXG4gICAgcmVmLFxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXG4gICAgUmVhY3RDb250ZXh0LmN1cnJlbnQsXG4gICAgcHJvcHNcbiAgKTtcbn07XG5cblJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gIC8vIEV4cG9zZSB0aGUgdHlwZSBvbiB0aGUgZmFjdG9yeSBhbmQgdGhlIHByb3RvdHlwZSBzbyB0aGF0IGl0IGNhbiBiZVxuICAvLyBlYXNpbHkgYWNjZXNzZWQgb24gZWxlbWVudHMuIEUuZy4gPEZvbyAvPi50eXBlID09PSBGb28udHlwZS5cbiAgLy8gVGhpcyBzaG91bGQgbm90IGJlIG5hbWVkIGBjb25zdHJ1Y3RvcmAgc2luY2UgdGhpcyBtYXkgbm90IGJlIHRoZSBmdW5jdGlvblxuICAvLyB0aGF0IGNyZWF0ZWQgdGhlIGVsZW1lbnQsIGFuZCBpdCBtYXkgbm90IGV2ZW4gYmUgYSBjb25zdHJ1Y3Rvci5cbiAgLy8gTGVnYWN5IGhvb2sgVE9ETzogV2FybiBpZiB0aGlzIGlzIGFjY2Vzc2VkXG4gIGZhY3RvcnkudHlwZSA9IHR5cGU7XG4gIHJldHVybiBmYWN0b3J5O1xufTtcblxuUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzID0gZnVuY3Rpb24ob2xkRWxlbWVudCwgbmV3UHJvcHMpIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBuZXcgUmVhY3RFbGVtZW50KFxuICAgIG9sZEVsZW1lbnQudHlwZSxcbiAgICBvbGRFbGVtZW50LmtleSxcbiAgICBvbGRFbGVtZW50LnJlZixcbiAgICBvbGRFbGVtZW50Ll9vd25lcixcbiAgICBvbGRFbGVtZW50Ll9jb250ZXh0LFxuICAgIG5ld1Byb3BzXG4gICk7XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIC8vIElmIHRoZSBrZXkgb24gdGhlIG9yaWdpbmFsIGlzIHZhbGlkLCB0aGVuIHRoZSBjbG9uZSBpcyB2YWxpZFxuICAgIG5ld0VsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IG9sZEVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZDtcbiAgfVxuICByZXR1cm4gbmV3RWxlbWVudDtcbn07XG5cblJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBPcmlnaW5hbCBwcm9wcyBhcmUgY29waWVkXG4gIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcyk7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcblxuICAvLyBPd25lciB3aWxsIGJlIHByZXNlcnZlZCwgdW5sZXNzIHJlZiBpcyBvdmVycmlkZGVuXG4gIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChjb25maWcucmVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFNpbGVudGx5IHN0ZWFsIHRoZSByZWYgZnJvbSB0aGUgcGFyZW50LlxuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICAgIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBvdmVycmlkZSBleGlzdGluZyBwcm9wc1xuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAgICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlYWN0RWxlbWVudChcbiAgICBlbGVtZW50LnR5cGUsXG4gICAga2V5LFxuICAgIHJlZixcbiAgICBvd25lcixcbiAgICBlbGVtZW50Ll9jb250ZXh0LFxuICAgIHByb3BzXG4gICk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgY29tcG9uZW50LlxuICogQGZpbmFsXG4gKi9cblJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAvLyBSZWFjdFRlc3RVdGlscyBpcyBvZnRlbiB1c2VkIG91dHNpZGUgb2YgYmVmb3JlRWFjaCB3aGVyZSBhcyBSZWFjdCBpc1xuICAvLyB3aXRoaW4gaXQuIFRoaXMgbGVhZHMgdG8gdHdvIGRpZmZlcmVudCBpbnN0YW5jZXMgb2YgUmVhY3Qgb24gdGhlIHNhbWVcbiAgLy8gcGFnZS4gVG8gaWRlbnRpZnkgYSBlbGVtZW50IGZyb20gYSBkaWZmZXJlbnQgUmVhY3QgaW5zdGFuY2Ugd2UgdXNlXG4gIC8vIGEgZmxhZyBpbnN0ZWFkIG9mIGFuIGluc3RhbmNlb2YgY2hlY2suXG4gIHZhciBpc0VsZW1lbnQgPSAhIShvYmplY3QgJiYgb2JqZWN0Ll9pc1JlYWN0RWxlbWVudCk7XG4gIC8vIGlmIChpc0VsZW1lbnQgJiYgIShvYmplY3QgaW5zdGFuY2VvZiBSZWFjdEVsZW1lbnQpKSB7XG4gIC8vIFRoaXMgaXMgYW4gaW5kaWNhdG9yIHRoYXQgeW91J3JlIHVzaW5nIG11bHRpcGxlIHZlcnNpb25zIG9mIFJlYWN0IGF0IHRoZVxuICAvLyBzYW1lIHRpbWUuIFRoaXMgd2lsbCBzY3JldyB3aXRoIG93bmVyc2hpcCBhbmQgc3R1ZmYuIEZpeCBpdCwgcGxlYXNlLlxuICAvLyBUT0RPOiBXZSBjb3VsZCBwb3NzaWJseSB3YXJuIGhlcmUuXG4gIC8vIH1cbiAgcmV0dXJuIGlzRWxlbWVudDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RWxlbWVudFZhbGlkYXRvclxuICovXG5cbi8qKlxuICogUmVhY3RFbGVtZW50VmFsaWRhdG9yIHByb3ZpZGVzIGEgd3JhcHBlciBhcm91bmQgYSBlbGVtZW50IGZhY3RvcnlcbiAqIHdoaWNoIHZhbGlkYXRlcyB0aGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBlbGVtZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gKiB1c2VkIG9ubHkgaW4gREVWIGFuZCBjb3VsZCBiZSByZXBsYWNlZCBieSBhIHN0YXRpYyB0eXBlIGNoZWNrZXIgZm9yIGxhbmd1YWdlc1xuICogdGhhdCBzdXBwb3J0IGl0LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEZyYWdtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RGcmFnbWVudFwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKFwiLi9nZXRJdGVyYXRvckZuXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG52YXIgTlVNRVJJQ19QUk9QRVJUWV9SRUdFWCA9IC9eXFxkKyQvO1xuXG4vKipcbiAqIEdldHMgdGhlIGluc3RhbmNlJ3MgbmFtZSBmb3IgdXNlIGluIHdhcm5pbmdzLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybiB7P3N0cmluZ30gRGlzcGxheSBuYW1lIG9yIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBnZXROYW1lKGluc3RhbmNlKSB7XG4gIHZhciBwdWJsaWNJbnN0YW5jZSA9IGluc3RhbmNlICYmIGluc3RhbmNlLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gIGlmICghcHVibGljSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHZhciBjb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICBpZiAoIWNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IubmFtZSB8fCB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgY3VycmVudCBvd25lcidzIGRpc3BsYXlOYW1lIGZvciB1c2UgaW4gd2FybmluZ3MuXG4gKlxuICogQGludGVybmFsXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBEaXNwbGF5IG5hbWUgb3IgdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lKCkge1xuICB2YXIgY3VycmVudCA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gIHJldHVybiAoXG4gICAgY3VycmVudCAmJiBnZXROYW1lKGN1cnJlbnQpIHx8IHVuZGVmaW5lZFxuICApO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmIChlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFxuICAgICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nLFxuICAgIGVsZW1lbnQsXG4gICAgcGFyZW50VHlwZVxuICApO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGtleSBpcyBiZWluZyBkZWZpbmVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eSBidXQgaGFzIGFuIGluY29ycmVjdFxuICogdmFsdWUuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBrZXkuXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBDb21wb25lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eUtleShuYW1lLCBlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghTlVNRVJJQ19QUk9QRVJUWV9SRUdFWC50ZXN0KG5hbWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFxuICAgICdDaGlsZCBvYmplY3RzIHNob3VsZCBoYXZlIG5vbi1udW1lcmljIGtleXMgc28gb3JkZXJpbmcgaXMgcHJlc2VydmVkLicsXG4gICAgZWxlbWVudCxcbiAgICBwYXJlbnRUeXBlXG4gICk7XG59XG5cbi8qKlxuICogU2hhcmVkIHdhcm5pbmcgYW5kIG1vbml0b3JpbmcgY29kZSBmb3IgdGhlIGtleSB3YXJuaW5ncy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBiYXNlIHdhcm5pbmcgdGhhdCBnZXRzIG91dHB1dC5cbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IENvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB3YXJuQW5kTW9uaXRvckZvcktleVVzZShtZXNzYWdlLCBlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIHZhciBvd25lck5hbWUgPSBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpO1xuICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/XG4gICAgcGFyZW50VHlwZSA6IHBhcmVudFR5cGUuZGlzcGxheU5hbWUgfHwgcGFyZW50VHlwZS5uYW1lO1xuXG4gIHZhciB1c2VOYW1lID0gb3duZXJOYW1lIHx8IHBhcmVudE5hbWU7XG4gIHZhciBtZW1vaXplciA9IG93bmVySGFzS2V5VXNlV2FybmluZ1ttZXNzYWdlXSB8fCAoXG4gICAgKG93bmVySGFzS2V5VXNlV2FybmluZ1ttZXNzYWdlXSA9IHt9KVxuICApO1xuICBpZiAobWVtb2l6ZXIuaGFzT3duUHJvcGVydHkodXNlTmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbWVtb2l6ZXJbdXNlTmFtZV0gPSB0cnVlO1xuXG4gIHZhciBwYXJlbnRPck93bmVyQWRkZW5kdW0gPVxuICAgIG93bmVyTmFtZSA/IChcIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBcIiArIG93bmVyTmFtZSArIFwiLlwiKSA6XG4gICAgcGFyZW50TmFtZSA/IChcIiBDaGVjayB0aGUgUmVhY3QucmVuZGVyIGNhbGwgdXNpbmcgPFwiICsgcGFyZW50TmFtZSArIFwiPi5cIikgOlxuICAgICcnO1xuXG4gIC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gIC8vIHByb3BlcnR5LCBpdCBtYXkgYmUgdGhlIGNyZWF0b3Igb2YgdGhlIGNoaWxkIHRoYXQncyByZXNwb25zaWJsZSBmb3JcbiAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuICB2YXIgY2hpbGRPd25lckFkZGVuZHVtID0gJyc7XG4gIGlmIChlbGVtZW50ICYmXG4gICAgICBlbGVtZW50Ll9vd25lciAmJlxuICAgICAgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAvLyBOYW1lIG9mIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICB2YXIgY2hpbGRPd25lck5hbWUgPSBnZXROYW1lKGVsZW1lbnQuX293bmVyKTtcblxuICAgIGNoaWxkT3duZXJBZGRlbmR1bSA9IChcIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSBcIiArIGNoaWxkT3duZXJOYW1lICsgXCIuXCIpO1xuICB9XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgZmFsc2UsXG4gICAgbWVzc2FnZSArICclcyVzIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgIHBhcmVudE9yT3duZXJBZGRlbmR1bSxcbiAgICBjaGlsZE93bmVyQWRkZW5kdW1cbiAgKSA6IG51bGwpO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAvLyBUaGlzIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAobm9kZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihub2RlKTtcbiAgICAvLyBFbnRyeSBpdGVyYXRvcnMgcHJvdmlkZSBpbXBsaWNpdCBrZXlzLlxuICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgZnJhZ21lbnQgPSBSZWFjdEZyYWdtZW50LmV4dHJhY3RJZkZyYWdtZW50KG5vZGUpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGZyYWdtZW50KSB7XG4gICAgICAgIGlmIChmcmFnbWVudC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdmFsaWRhdGVQcm9wZXJ0eUtleShrZXksIGZyYWdtZW50W2tleV0sIHBhcmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcFR5cGVzIE1hcCBvZiBwcm9wIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUsIHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICB0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgICAnUmVhY3QuUHJvcFR5cGVzLicsXG4gICAgICAgICAgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSxcbiAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICApIDogaW52YXJpYW50KHR5cGVvZiBwcm9wVHlwZXNbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nKSk7XG4gICAgICAgIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGVycm9yID0gZXg7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0odGhpcyk7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogbnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciB3YXJuZWRQcm9wc011dGF0aW9ucyA9IHt9O1xuXG4vKipcbiAqIFdhcm4gYWJvdXQgbXV0YXRpbmcgcHJvcHMgd2hlbiBzZXR0aW5nIGBwcm9wTmFtZWAgb24gYGVsZW1lbnRgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wTmFtZSBUaGUgc3RyaW5nIGtleSB3aXRoaW4gcHJvcHMgdGhhdCB3YXMgc2V0XG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiB3YXJuRm9yUHJvcHNNdXRhdGlvbihwcm9wTmFtZSwgZWxlbWVudCkge1xuICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGVsZW1lbnROYW1lID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZSA6IHR5cGUuZGlzcGxheU5hbWU7XG4gIHZhciBvd25lck5hbWUgPSBlbGVtZW50Ll9vd25lciA/XG4gICAgZWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA6IG51bGw7XG5cbiAgdmFyIHdhcm5pbmdLZXkgPSBwcm9wTmFtZSArICd8JyArIGVsZW1lbnROYW1lICsgJ3wnICsgb3duZXJOYW1lO1xuICBpZiAod2FybmVkUHJvcHNNdXRhdGlvbnMuaGFzT3duUHJvcGVydHkod2FybmluZ0tleSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FybmVkUHJvcHNNdXRhdGlvbnNbd2FybmluZ0tleV0gPSB0cnVlO1xuXG4gIHZhciBlbGVtZW50SW5mbyA9ICcnO1xuICBpZiAoZWxlbWVudE5hbWUpIHtcbiAgICBlbGVtZW50SW5mbyA9ICcgPCcgKyBlbGVtZW50TmFtZSArICcgLz4nO1xuICB9XG4gIHZhciBvd25lckluZm8gPSAnJztcbiAgaWYgKG93bmVyTmFtZSkge1xuICAgIG93bmVySW5mbyA9ICcgVGhlIGVsZW1lbnQgd2FzIGNyZWF0ZWQgYnkgJyArIG93bmVyTmFtZSArICcuJztcbiAgfVxuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgIGZhbHNlLFxuICAgICdEb25cXCd0IHNldCAucHJvcHMuJXMgb2YgdGhlIFJlYWN0IGNvbXBvbmVudCVzLiBJbnN0ZWFkLCBzcGVjaWZ5IHRoZSAnICtcbiAgICAnY29ycmVjdCB2YWx1ZSB3aGVuIGluaXRpYWxseSBjcmVhdGluZyB0aGUgZWxlbWVudCBvciB1c2UgJyArXG4gICAgJ1JlYWN0LmNsb25lRWxlbWVudCB0byBtYWtlIGEgbmV3IGVsZW1lbnQgd2l0aCB1cGRhdGVkIHByb3BzLiVzJyxcbiAgICBwcm9wTmFtZSxcbiAgICBlbGVtZW50SW5mbyxcbiAgICBvd25lckluZm9cbiAgKSA6IG51bGwpO1xufVxuXG4vLyBJbmxpbmUgT2JqZWN0LmlzIHBvbHlmaWxsXG5mdW5jdGlvbiBpcyhhLCBiKSB7XG4gIGlmIChhICE9PSBhKSB7XG4gICAgLy8gTmFOXG4gICAgcmV0dXJuIGIgIT09IGI7XG4gIH1cbiAgaWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuICAgIC8vICstMFxuICAgIHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG4gIH1cbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gZWxlbWVudCwgY2hlY2sgaWYgaXRzIHByb3BzIGhhdmUgYmVlbiBtdXRhdGVkIHNpbmNlIGVsZW1lbnRcbiAqIGNyZWF0aW9uIChvciB0aGUgbGFzdCBjYWxsIHRvIHRoaXMgZnVuY3Rpb24pLiBJbiBwYXJ0aWN1bGFyLCBjaGVjayBpZiBhbnlcbiAqIG5ldyBwcm9wcyBoYXZlIGJlZW4gYWRkZWQsIHdoaWNoIHdlIGNhbid0IGRpcmVjdGx5IGNhdGNoIGJ5IGRlZmluaW5nIHdhcm5pbmdcbiAqIHByb3BlcnRpZXMgb24gdGhlIHByb3BzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQuX3N0b3JlKSB7XG4gICAgLy8gRWxlbWVudCB3YXMgY3JlYXRlZCB1c2luZyBgbmV3IFJlYWN0RWxlbWVudGAgZGlyZWN0bHkgb3Igd2l0aFxuICAgIC8vIGBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudGA7IHNraXAgbXV0YXRpb24gY2hlY2tpbmdcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgb3JpZ2luYWxQcm9wcyA9IGVsZW1lbnQuX3N0b3JlLm9yaWdpbmFsUHJvcHM7XG4gIHZhciBwcm9wcyA9IGVsZW1lbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBpZiAoIW9yaWdpbmFsUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpIHx8XG4gICAgICAgICAgIWlzKG9yaWdpbmFsUHJvcHNbcHJvcE5hbWVdLCBwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHdhcm5Gb3JQcm9wc011dGF0aW9uKHByb3BOYW1lLCBlbGVtZW50KTtcblxuICAgICAgICAvLyBDb3B5IG92ZXIgdGhlIG5ldyB2YWx1ZSBzbyB0aGF0IHRoZSB0d28gcHJvcHMgb2JqZWN0cyBtYXRjaCBhZ2FpblxuICAgICAgICBvcmlnaW5hbFByb3BzW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09IG51bGwpIHtcbiAgICAvLyBUaGlzIGhhcyBhbHJlYWR5IHdhcm5lZC4gRG9uJ3QgdGhyb3cuXG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIEV4dHJhY3QgdGhlIGNvbXBvbmVudCBjbGFzcyBmcm9tIHRoZSBlbGVtZW50LiBDb252ZXJ0cyBzdHJpbmcgdHlwZXNcbiAgLy8gdG8gYSBjb21wb3NpdGUgY2xhc3Mgd2hpY2ggbWF5IGhhdmUgcHJvcFR5cGVzLlxuICAvLyBUT0RPOiBWYWxpZGF0aW5nIGEgc3RyaW5nJ3MgcHJvcFR5cGVzIGlzIG5vdCBkZWNvdXBsZWQgZnJvbSB0aGVcbiAgLy8gcmVuZGVyaW5nIHRhcmdldCB3aGljaCBpcyBwcm9ibGVtYXRpYy5cbiAgdmFyIGNvbXBvbmVudENsYXNzID0gUmVhY3ROYXRpdmVDb21wb25lbnQuZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50KFxuICAgIGVsZW1lbnRcbiAgKTtcbiAgdmFyIG5hbWUgPSBjb21wb25lbnRDbGFzcy5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnRDbGFzcy5uYW1lO1xuICBpZiAoY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzKSB7XG4gICAgY2hlY2tQcm9wVHlwZXMoXG4gICAgICBuYW1lLFxuICAgICAgY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLFxuICAgICAgZWxlbWVudC5wcm9wcyxcbiAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcFxuICAgICk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGNvbXBvbmVudENsYXNzLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcbiAgICAgICdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArXG4gICAgICAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLidcbiAgICApIDogbnVsbCk7XG4gIH1cbn1cblxudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcblxuICBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHM6IGNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyxcblxuICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbih0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB0eXBlICE9IG51bGwsXG4gICAgICAnUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBzaG91bGQgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLiBJdCBzaG91bGQgJyArXG4gICAgICAgICdiZSBhIHN0cmluZyAoZm9yIERPTSBlbGVtZW50cykgb3IgYSBSZWFjdENsYXNzIChmb3IgY29tcG9zaXRlICcgK1xuICAgICAgICAnY29tcG9uZW50cykuJ1xuICAgICkgOiBudWxsKTtcblxuICAgIHZhciBlbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG4gICAgLy8gVE9ETzogRHJvcCB0aGlzIHdoZW4gdGhlc2UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50LlxuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIHR5cGUpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgY3JlYXRlRmFjdG9yeTogZnVuY3Rpb24odHlwZSkge1xuICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChcbiAgICAgIG51bGwsXG4gICAgICB0eXBlXG4gICAgKTtcbiAgICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgICB2YWxpZGF0ZWRGYWN0b3J5LnR5cGUgPSB0eXBlO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgIHZhbGlkYXRlZEZhY3RvcnksXG4gICAgICAgICAgJ3R5cGUnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgJ0ZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5ICcgK1xuICAgICAgICAgICAgICAgICdiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LidcbiAgICAgICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3R5cGUnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHR5cGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5IChlczUtc2hpbS9zaGFtIHRvbylcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xuICB9LFxuXG4gIGNsb25lRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgbmV3RWxlbWVudC50eXBlKTtcbiAgICB9XG4gICAgdmFsaWRhdGVQcm9wVHlwZXMobmV3RWxlbWVudCk7XG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbXB0eUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGNvbXBvbmVudDtcbi8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2YgdGhlIFJlYWN0IElEcyBvZiB0aGUgY29tcG9uZW50cyB0aGF0IHJlbmRlcmVkIHRvXG4vLyBgbnVsbGAgKGluIHJlYWxpdHkgYSBwbGFjZWhvbGRlciBzdWNoIGFzIGBub3NjcmlwdGApXG52YXIgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5ID0ge307XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICBpbmplY3RFbXB0eUNvbXBvbmVudDogZnVuY3Rpb24oZW1wdHlDb21wb25lbnQpIHtcbiAgICBjb21wb25lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShlbXB0eUNvbXBvbmVudCk7XG4gIH1cbn07XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50VHlwZSA9IGZ1bmN0aW9uKCkge307XG5SZWFjdEVtcHR5Q29tcG9uZW50VHlwZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKTtcbiAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIHJ1biB0aGVzZSBtZXRob2RzIGluIHRoZSBjb3JyZWN0IG9yZGVyLCB3ZSBzaG91bGRuJ3RcbiAgLy8gbmVlZCB0aGlzIGNoZWNrLiBXZSdyZSBnb2luZyB0byBhc3N1bWUgaWYgd2UncmUgaGVyZSBpdCBtZWFucyB3ZSByYW5cbiAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgYWxyZWFkeSBzbyB0aGVyZSBpcyBubyBpbnRlcm5hbCBpbnN0YW5jZSAoaXQgZ2V0c1xuICAvLyByZW1vdmVkIGFzIHBhcnQgb2YgdGhlIHVubW91bnRpbmcgcHJvY2VzcykuXG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZWdpc3Rlck51bGxDb21wb25lbnRJRChpbnRlcm5hbEluc3RhbmNlLl9yb290Tm9kZUlEKTtcbn07XG5SZWFjdEVtcHR5Q29tcG9uZW50VHlwZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKTtcbiAgLy8gVE9ETzogR2V0IHJpZCBvZiB0aGlzIGNoZWNrLiBTZWUgVE9ETyBpbiBjb21wb25lbnREaWRNb3VudC5cbiAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaW50ZXJuYWxJbnN0YW5jZS5fcm9vdE5vZGVJRCk7XG59O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGNvbXBvbmVudCxcbiAgICAnVHJ5aW5nIHRvIHJldHVybiBudWxsIGZyb20gYSByZW5kZXIsIGJ1dCBubyBudWxsIHBsYWNlaG9sZGVyIGNvbXBvbmVudCAnICtcbiAgICAnd2FzIGluamVjdGVkLidcbiAgKSA6IGludmFyaWFudChjb21wb25lbnQpKTtcbiAgcmV0dXJuIGNvbXBvbmVudCgpO1xufTtcblxudmFyIGVtcHR5RWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50KFJlYWN0RW1wdHlDb21wb25lbnRUeXBlKTtcblxuLyoqXG4gKiBNYXJrIHRoZSBjb21wb25lbnQgYXMgaGF2aW5nIHJlbmRlcmVkIHRvIG51bGwuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaWQpIHtcbiAgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXSA9IHRydWU7XG59XG5cbi8qKlxuICogVW5tYXJrIHRoZSBjb21wb25lbnQgYXMgaGF2aW5nIHJlbmRlcmVkIHRvIG51bGw6IGl0IHJlbmRlcnMgdG8gc29tZXRoaW5nIG5vdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICovXG5mdW5jdGlvbiBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIGRlbGV0ZSBudWxsQ29tcG9uZW50SURzUmVnaXN0cnlbaWRdO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHRvIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGlzTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIHJldHVybiAhIW51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF07XG59XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0ge1xuICBlbXB0eUVsZW1lbnQ6IGVtcHR5RWxlbWVudCxcbiAgaW5qZWN0aW9uOiBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uLFxuICBpc051bGxDb21wb25lbnRJRDogaXNOdWxsQ29tcG9uZW50SURcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbXB0eUNvbXBvbmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVycm9yVXRpbHNcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVycm9yVXRpbHMgPSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZ3VhcmRlZCB2ZXJzaW9uIG9mIGEgZnVuY3Rpb24uIFRoaXMgaXMgc3VwcG9zZWQgdG8gbWFrZSBkZWJ1Z2dpbmdcbiAgICogb2YgZXZlbnQgaGFuZGxlcnMgZWFzaWVyLiBUbyBhaWQgZGVidWdnaW5nIHdpdGggdGhlIGJyb3dzZXIncyBkZWJ1Z2dlcixcbiAgICogdGhpcyBjdXJyZW50bHkgc2ltcGx5IHJldHVybnMgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBndWFyZFxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIGd1YXJkOiBmdW5jdGlvbihmdW5jLCBuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFcnJvclV0aWxzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xuXG5mdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudHMpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHtcblxuICAvKipcbiAgICogU3RyZWFtcyBhIGZpcmVkIHRvcC1sZXZlbCBldmVudCB0byBgRXZlbnRQbHVnaW5IdWJgIHdoZXJlIHBsdWdpbnMgaGF2ZSB0aGVcbiAgICogb3Bwb3J0dW5pdHkgdG8gY3JlYXRlIGBSZWFjdEV2ZW50YHMgdG8gYmUgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGVudmlyb25tZW50IGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICB2YXIgZXZlbnRzID0gRXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50cyhcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcblxuICAgIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudEVtaXR0ZXJNaXhpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL0V2ZW50TGlzdGVuZXJcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xudmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZShcIi4vZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb25cIik7XG5cbi8qKlxuICogRmluZHMgdGhlIHBhcmVudCBSZWFjdCBjb21wb25lbnQgb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSB7Kn0gbm9kZVxuICogQHJldHVybiB7P0RPTUV2ZW50VGFyZ2V0fSBQYXJlbnQgY29udGFpbmVyLCBvciBgbnVsbGAgaWYgdGhlIHNwZWNpZmllZCBub2RlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIG5vdCBuZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQYXJlbnQobm9kZSkge1xuICAvLyBUT0RPOiBJdCBtYXkgYmUgYSBnb29kIGlkZWEgdG8gY2FjaGUgdGhpcyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IERPTVxuICAvLyB0cmF2ZXJzYWwsIGJ1dCBjYWNoaW5nIGlzIGRpZmZpY3VsdCB0byBkbyBjb3JyZWN0bHkgd2l0aG91dCB1c2luZyBhXG4gIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuICB2YXIgbm9kZUlEID0gUmVhY3RNb3VudC5nZXRJRChub2RlKTtcbiAgdmFyIHJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChub2RlSUQpO1xuICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChyb290SUQpO1xuICB2YXIgcGFyZW50ID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NKGNvbnRhaW5lcik7XG4gIHJldHVybiBwYXJlbnQ7XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYW5jZXN0b3IgaGllcmFyY2h5IGluIHRvcCBsZXZlbCBjYWxsYmFja1xuZnVuY3Rpb24gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy50b3BMZXZlbFR5cGUgPSB0b3BMZXZlbFR5cGU7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgdGhpcy5hbmNlc3RvcnMgPSBbXTtcbn1cbmFzc2lnbihUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucHJvdG90eXBlLCB7XG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudG9wTGV2ZWxUeXBlID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmFuY2VzdG9ycy5sZW5ndGggPSAwO1xuICB9XG59KTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhcbiAgVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLFxuICBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlclxuKTtcblxuZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxJbXBsKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0b3BMZXZlbFRhcmdldCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShcbiAgICBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudClcbiAgKSB8fCB3aW5kb3c7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBoaWVyYXJjaHksIGluIGNhc2UgdGhlcmUncyBhbnkgbmVzdGVkIGNvbXBvbmVudHMuXG4gIC8vIEl0J3MgaW1wb3J0YW50IHRoYXQgd2UgYnVpbGQgdGhlIGFycmF5IG9mIGFuY2VzdG9ycyBiZWZvcmUgY2FsbGluZyBhbnlcbiAgLy8gZXZlbnQgaGFuZGxlcnMsIGJlY2F1c2UgZXZlbnQgaGFuZGxlcnMgY2FuIG1vZGlmeSB0aGUgRE9NLCBsZWFkaW5nIHRvXG4gIC8vIGluY29uc2lzdGVuY2llcyB3aXRoIFJlYWN0TW91bnQncyBub2RlIGNhY2hlLiBTZWUgIzExMDUuXG4gIHZhciBhbmNlc3RvciA9IHRvcExldmVsVGFyZ2V0O1xuICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICBib29rS2VlcGluZy5hbmNlc3RvcnMucHVzaChhbmNlc3Rvcik7XG4gICAgYW5jZXN0b3IgPSBmaW5kUGFyZW50KGFuY2VzdG9yKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHRvcExldmVsVGFyZ2V0ID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzW2ldO1xuICAgIHZhciB0b3BMZXZlbFRhcmdldElEID0gUmVhY3RNb3VudC5nZXRJRCh0b3BMZXZlbFRhcmdldCkgfHwgJyc7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbChcbiAgICAgIGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY3JvbGxWYWx1ZU1vbml0b3IoY2IpIHtcbiAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24od2luZG93KTtcbiAgY2Ioc2Nyb2xsUG9zaXRpb24pO1xufVxuXG52YXIgUmVhY3RFdmVudExpc3RlbmVyID0ge1xuICBfZW5hYmxlZDogdHJ1ZSxcbiAgX2hhbmRsZVRvcExldmVsOiBudWxsLFxuXG4gIFdJTkRPV19IQU5ETEU6IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHdpbmRvdyA6IG51bGwsXG5cbiAgc2V0SGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKGhhbmRsZVRvcExldmVsKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbCA9IGhhbmRsZVRvcExldmVsO1xuICB9LFxuXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gIH0sXG5cbiAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFRyYXBzIHRvcC1sZXZlbCBldmVudHMgYnkgdXNpbmcgZXZlbnQgYnViYmxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBoYW5kbGUgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIubGlzdGVuKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIuY2FwdHVyZShcbiAgICAgIGVsZW1lbnQsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSlcbiAgICApO1xuICB9LFxuXG4gIG1vbml0b3JTY3JvbGxWYWx1ZTogZnVuY3Rpb24ocmVmcmVzaCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNjcm9sbFZhbHVlTW9uaXRvci5iaW5kKG51bGwsIHJlZnJlc2gpO1xuICAgIEV2ZW50TGlzdGVuZXIubGlzdGVuKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKCFSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYm9va0tlZXBpbmcgPSBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcuZ2V0UG9vbGVkKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIHRyeSB7XG4gICAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgICAvLyBgcHJldmVudERlZmF1bHRgLlxuICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGhhbmRsZVRvcExldmVsSW1wbCwgYm9va0tlZXBpbmcpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4qIEBwcm92aWRlc01vZHVsZSBSZWFjdEZyYWdtZW50XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLyoqXG4gKiBXZSB1c2VkIHRvIGFsbG93IGtleWVkIG9iamVjdHMgdG8gc2VydmUgYXMgYSBjb2xsZWN0aW9uIG9mIFJlYWN0RWxlbWVudHMsXG4gKiBvciBuZXN0ZWQgc2V0cy4gVGhpcyBhbGxvd2VkIHVzIGEgd2F5IHRvIGV4cGxpY2l0bHkga2V5IGEgc2V0IGEgZnJhZ21lbnQgb2ZcbiAqIGNvbXBvbmVudHMuIFRoaXMgaXMgbm93IGJlaW5nIHJlcGxhY2VkIHdpdGggYW4gb3BhcXVlIGRhdGEgc3RydWN0dXJlLlxuICogVGhlIHVwZ3JhZGUgcGF0aCBpcyB0byBjYWxsIFJlYWN0LmFkZG9ucy5jcmVhdGVGcmFnbWVudCh7IGtleTogdmFsdWUgfSkgdG9cbiAqIGNyZWF0ZSBhIGtleWVkIGZyYWdtZW50LiBUaGUgcmVzdWx0aW5nIGRhdGEgc3RydWN0dXJlIGlzIG9wYXF1ZSwgZm9yIG5vdy5cbiAqL1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHZhciBmcmFnbWVudEtleSA9ICdfcmVhY3RGcmFnbWVudCc7XG4gIHZhciBkaWRXYXJuS2V5ID0gJ19yZWFjdERpZFdhcm4nO1xuICB2YXIgY2FuV2FybkZvclJlYWN0RnJhZ21lbnQgPSBmYWxzZTtcblxuICB0cnkge1xuICAgIC8vIEZlYXR1cmUgdGVzdC4gRG9uJ3QgZXZlbiB0cnkgdG8gaXNzdWUgdGhpcyB3YXJuaW5nIGlmIHdlIGNhbid0IHVzZVxuICAgIC8vIGVudW1lcmFibGU6IGZhbHNlLlxuXG4gICAgdmFyIGR1bW15ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAge30sXG4gICAgICBmcmFnbWVudEtleSxcbiAgICAgIHtlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IHRydWV9XG4gICAgKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHt9LFxuICAgICAgJ2tleScsXG4gICAgICB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkdW1teX1cbiAgICApO1xuXG4gICAgY2FuV2FybkZvclJlYWN0RnJhZ21lbnQgPSB0cnVlO1xuICB9IGNhdGNoICh4KSB7IH1cblxuICB2YXIgcHJveHlQcm9wZXJ0eUFjY2Vzc1dpdGhXYXJuaW5nID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICB0aGlzW2RpZFdhcm5LZXldLFxuICAgICAgICAgICdBIFJlYWN0RnJhZ21lbnQgaXMgYW4gb3BhcXVlIHR5cGUuIEFjY2Vzc2luZyBhbnkgb2YgaXRzICcgK1xuICAgICAgICAgICdwcm9wZXJ0aWVzIGlzIGRlcHJlY2F0ZWQuIFBhc3MgaXQgdG8gb25lIG9mIHRoZSBSZWFjdC5DaGlsZHJlbiAnICtcbiAgICAgICAgICAnaGVscGVycy4nXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgdGhpc1tkaWRXYXJuS2V5XSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzW2ZyYWdtZW50S2V5XVtrZXldO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgdGhpc1tkaWRXYXJuS2V5XSxcbiAgICAgICAgICAnQSBSZWFjdEZyYWdtZW50IGlzIGFuIGltbXV0YWJsZSBvcGFxdWUgdHlwZS4gTXV0YXRpbmcgaXRzICcgK1xuICAgICAgICAgICdwcm9wZXJ0aWVzIGlzIGRlcHJlY2F0ZWQuJ1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICAgIHRoaXNbZGlkV2FybktleV0gPSB0cnVlO1xuICAgICAgICB0aGlzW2ZyYWdtZW50S2V5XVtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGlzc3VlZFdhcm5pbmdzID0ge307XG5cbiAgdmFyIGRpZFdhcm5Gb3JGcmFnbWVudCA9IGZ1bmN0aW9uKGZyYWdtZW50KSB7XG4gICAgLy8gV2UgdXNlIHRoZSBrZXlzIGFuZCB0aGUgdHlwZSBvZiB0aGUgdmFsdWUgYXMgYSBoZXVyaXN0aWMgdG8gZGVkdXBlIHRoZVxuICAgIC8vIHdhcm5pbmcgdG8gYXZvaWQgc3BhbW1pbmcgdG9vIG11Y2guXG4gICAgdmFyIGZyYWdtZW50Q2FjaGVLZXkgPSAnJztcbiAgICBmb3IgKHZhciBrZXkgaW4gZnJhZ21lbnQpIHtcbiAgICAgIGZyYWdtZW50Q2FjaGVLZXkgKz0ga2V5ICsgJzonICsgKHR5cGVvZiBmcmFnbWVudFtrZXldKSArICcsJztcbiAgICB9XG4gICAgdmFyIGFscmVhZHlXYXJuZWRPbmNlID0gISFpc3N1ZWRXYXJuaW5nc1tmcmFnbWVudENhY2hlS2V5XTtcbiAgICBpc3N1ZWRXYXJuaW5nc1tmcmFnbWVudENhY2hlS2V5XSA9IHRydWU7XG4gICAgcmV0dXJuIGFscmVhZHlXYXJuZWRPbmNlO1xuICB9O1xufVxuXG52YXIgUmVhY3RGcmFnbWVudCA9IHtcbiAgLy8gV3JhcCBhIGtleWVkIG9iamVjdCBpbiBhbiBvcGFxdWUgcHJveHkgdGhhdCB3YXJucyB5b3UgaWYgeW91IGFjY2VzcyBhbnlcbiAgLy8gb2YgaXRzIHByb3BlcnRpZXMuXG4gIGNyZWF0ZTogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgaWYgKHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIHx8ICFvYmplY3QgfHwgQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdSZWFjdC5hZGRvbnMuY3JlYXRlRnJhZ21lbnQgb25seSBhY2NlcHRzIGEgc2luZ2xlIG9iamVjdC4nLFxuICAgICAgICAgIG9iamVjdFxuICAgICAgICApIDogbnVsbCk7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG9iamVjdCkpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ1JlYWN0LmFkZG9ucy5jcmVhdGVGcmFnbWVudCBkb2VzIG5vdCBhY2NlcHQgYSBSZWFjdEVsZW1lbnQgJyArXG4gICAgICAgICAgJ3dpdGhvdXQgYSB3cmFwcGVyIG9iamVjdC4nXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIGlmIChjYW5XYXJuRm9yUmVhY3RGcmFnbWVudCkge1xuICAgICAgICB2YXIgcHJveHkgPSB7fTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCBmcmFnbWVudEtleSwge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBvYmplY3RcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm94eSwgZGlkV2FybktleSwge1xuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIHByb3h5UHJvcGVydHlBY2Nlc3NXaXRoV2FybmluZyhwcm94eSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnMocHJveHkpO1xuICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0sXG4gIC8vIEV4dHJhY3QgdGhlIG9yaWdpbmFsIGtleWVkIG9iamVjdCBmcm9tIHRoZSBmcmFnbWVudCBvcGFxdWUgdHlwZS4gV2FybiBpZlxuICAvLyBhIHBsYWluIG9iamVjdCBpcyBwYXNzZWQgaGVyZS5cbiAgZXh0cmFjdDogZnVuY3Rpb24oZnJhZ21lbnQpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBpZiAoY2FuV2FybkZvclJlYWN0RnJhZ21lbnQpIHtcbiAgICAgICAgaWYgKCFmcmFnbWVudFtmcmFnbWVudEtleV0pIHtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgIGRpZFdhcm5Gb3JGcmFnbWVudChmcmFnbWVudCksXG4gICAgICAgICAgICAnQW55IHVzZSBvZiBhIGtleWVkIG9iamVjdCBzaG91bGQgYmUgd3JhcHBlZCBpbiAnICtcbiAgICAgICAgICAgICdSZWFjdC5hZGRvbnMuY3JlYXRlRnJhZ21lbnQob2JqZWN0KSBiZWZvcmUgYmVpbmcgcGFzc2VkIGFzIGEgJyArXG4gICAgICAgICAgICAnY2hpbGQuJ1xuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyYWdtZW50W2ZyYWdtZW50S2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9LFxuICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgZnJhZ21lbnQgYW5kIGlmIHNvLCBleHRyYWN0IHRoZSBrZXllZCBvYmplY3QuIElmIGl0XG4gIC8vIGlzIGEgZnJhZ21lbnQtbGlrZSBvYmplY3QsIHdhcm4gdGhhdCBpdCBzaG91bGQgYmUgd3JhcHBlZC4gSWdub3JlIGlmIHdlXG4gIC8vIGNhbid0IGRldGVybWluZSB3aGF0IGtpbmQgb2Ygb2JqZWN0IHRoaXMgaXMuXG4gIGV4dHJhY3RJZkZyYWdtZW50OiBmdW5jdGlvbihmcmFnbWVudCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGlmIChjYW5XYXJuRm9yUmVhY3RGcmFnbWVudCkge1xuICAgICAgICAvLyBJZiBpdCBpcyB0aGUgb3BhcXVlIHR5cGUsIHJldHVybiB0aGUga2V5ZWQgb2JqZWN0LlxuICAgICAgICBpZiAoZnJhZ21lbnRbZnJhZ21lbnRLZXldKSB7XG4gICAgICAgICAgcmV0dXJuIGZyYWdtZW50W2ZyYWdtZW50S2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGVhY2ggcHJvcGVydHkgaWYgaXQgaGFzIGFuIGVsZW1lbnQsIGlmIGl0IGRvZXNcbiAgICAgICAgLy8gaXQgaXMgcHJvYmFibHkgbWVhbnQgYXMgYSBmcmFnbWVudCwgc28gd2UgY2FuIHdhcm4gZWFybHkuIERlZmVyLFxuICAgICAgICAvLyB0aGUgd2FybmluZyB0byBleHRyYWN0LlxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZnJhZ21lbnQpIHtcbiAgICAgICAgICBpZiAoZnJhZ21lbnQuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuICAgICAgICAgICAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZnJhZ21lbnRba2V5XSkpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbG9va3MgbGlrZSBhIGZyYWdtZW50IG9iamVjdCwgd2Ugc2hvdWxkIHByb3ZpZGUgYW5cbiAgICAgICAgICAgIC8vIGVhcmx5IHdhcm5pbmcuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3RGcmFnbWVudC5leHRyYWN0KGZyYWdtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RnJhZ21lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbmplY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9SZWFjdFJvb3RJbmRleFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBSZWFjdEluamVjdGlvbiA9IHtcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LmluamVjdGlvbixcbiAgQ2xhc3M6IFJlYWN0Q2xhc3MuaW5qZWN0aW9uLFxuICBET01Db21wb25lbnQ6IFJlYWN0RE9NQ29tcG9uZW50LmluamVjdGlvbixcbiAgRE9NUHJvcGVydHk6IERPTVByb3BlcnR5LmluamVjdGlvbixcbiAgRW1wdHlDb21wb25lbnQ6IFJlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uLFxuICBFdmVudFBsdWdpbkh1YjogRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLFxuICBFdmVudEVtaXR0ZXI6IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pbmplY3Rpb24sXG4gIE5hdGl2ZUNvbXBvbmVudDogUmVhY3ROYXRpdmVDb21wb25lbnQuaW5qZWN0aW9uLFxuICBQZXJmOiBSZWFjdFBlcmYuaW5qZWN0aW9uLFxuICBSb290SW5kZXg6IFJlYWN0Um9vdEluZGV4LmluamVjdGlvbixcbiAgVXBkYXRlczogUmVhY3RVcGRhdGVzLmluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluamVjdGlvbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdElucHV0U2VsZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERPTVNlbGVjdGlvblwiKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKFwiLi9mb2N1c05vZGVcIik7XG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoXCIuL2dldEFjdGl2ZUVsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuXG4gIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24oZWxlbSkge1xuICAgIHJldHVybiBlbGVtICYmIChcbiAgICAgICgoZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtLnR5cGUgPT09ICd0ZXh0JykgfHxcbiAgICAgIGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJylcbiAgICApO1xuICB9LFxuXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOlxuICAgICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGZvY3VzZWRFbGVtKSA/XG4gICAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDpcbiAgICAgICAgICBudWxsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gICAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICAgKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICovXG4gIHJlc3RvcmVTZWxlY3Rpb246IGZ1bmN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pIHtcbiAgICB2YXIgY3VyRm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICAgIHZhciBwcmlvclNlbGVjdGlvblJhbmdlID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZWxlY3Rpb25SYW5nZTtcbiAgICBpZiAoY3VyRm9jdXNlZEVsZW0gIT09IHByaW9yRm9jdXNlZEVsZW0gJiZcbiAgICAgICAgaXNJbkRvY3VtZW50KHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICBpZiAoUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5zZXRTZWxlY3Rpb24oXG4gICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcbiAgICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBmb2N1c05vZGUocHJpb3JGb2N1c2VkRWxlbSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAZ2V0U2VsZWN0aW9uOiBHZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgZm9jdXNlZCB0ZXh0YXJlYSwgaW5wdXQgb3JcbiAgICogY29udGVudEVkaXRhYmxlIG5vZGUuXG4gICAqIC1AaW5wdXQ6IExvb2sgdXAgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0XG4gICAqIC1AcmV0dXJuIHtzdGFydDogc2VsZWN0aW9uU3RhcnQsIGVuZDogc2VsZWN0aW9uRW5kfVxuICAgKi9cbiAgZ2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIHZhciBzZWxlY3Rpb247XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgLy8gSUU4IGlucHV0LlxuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgc2VsZWN0aW9uIHBlciBkb2N1bWVudCBpbiBJRSwgc28gaXQgbXVzdFxuICAgICAgLy8gYmUgaW4gb3VyIGVsZW1lbnQuXG4gICAgICBpZiAocmFuZ2UucGFyZW50RWxlbWVudCgpID09PSBpbnB1dCkge1xuICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIGVuZDogLXJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0gUmVhY3RET01TZWxlY3Rpb24uZ2V0T2Zmc2V0cyhpbnB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7c3RhcnQ6IDAsIGVuZDogMH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzZXRTZWxlY3Rpb246IFNldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSB0ZXh0YXJlYSBvciBpbnB1dCBhbmQgZm9jdXNlc1xuICAgKiB0aGUgaW5wdXQuXG4gICAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAgICogLUBvZmZzZXRzICAgT2JqZWN0IG9mIHNhbWUgZm9ybSB0aGF0IGlzIHJldHVybmVkIGZyb20gZ2V0KlxuICAgKi9cbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgIHZhciByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERPTVNlbGVjdGlvbi5zZXRPZmZzZXRzKGlucHV0LCBvZmZzZXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnB1dFNlbGVjdGlvbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEluc3RhbmNlSGFuZGxlc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL1JlYWN0Um9vdEluZGV4XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNFUEFSQVRPUl9MRU5HVEggPSBTRVBBUkFUT1IubGVuZ3RoO1xuXG4vKipcbiAqIE1heGltdW0gZGVwdGggb2YgdHJhdmVyc2FscyBiZWZvcmUgd2UgY29uc2lkZXIgdGhlIHBvc3NpYmlsaXR5IG9mIGEgYmFkIElELlxuICovXG52YXIgTUFYX1RSRUVfREVQVEggPSAxMDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIERPTSBJRCBwcmVmaXggdG8gdXNlIHdoZW4gbW91bnRpbmcgUmVhY3QgY29tcG9uZW50cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggQSB1bmlxdWUgaW50ZWdlclxuICogQHJldHVybiB7c3RyaW5nfSBSZWFjdCByb290IElELlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdElEU3RyaW5nKGluZGV4KSB7XG4gIHJldHVybiBTRVBBUkFUT1IgKyBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2hhcmFjdGVyIGluIHRoZSBzdXBwbGllZCBJRCBpcyBhIHNlcGFyYXRvciBvciB0aGUgZW5kLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBvZiB0aGUgY2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY2hhcmFjdGVyIGlzIGEgc2VwYXJhdG9yIG9yIGVuZCBvZiB0aGUgSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc0JvdW5kYXJ5KGlkLCBpbmRleCkge1xuICByZXR1cm4gaWQuY2hhckF0KGluZGV4KSA9PT0gU0VQQVJBVE9SIHx8IGluZGV4ID09PSBpZC5sZW5ndGg7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzdXBwbGllZCBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QgRE9NIElELCBtYXliZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHN0cmluZyBpcyBhIHZhbGlkIFJlYWN0IERPTSBJRC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRJRChpZCkge1xuICByZXR1cm4gaWQgPT09ICcnIHx8IChcbiAgICBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiAmJiBpZC5jaGFyQXQoaWQubGVuZ3RoIC0gMSkgIT09IFNFUEFSQVRPUlxuICApO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3QgSUQgaXMgYW4gYW5jZXN0b3Igb2Ygb3IgZXF1YWwgdG8gdGhlIHNlY29uZCBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jZXN0b3JJRFxuICogQHBhcmFtIHtzdHJpbmd9IGRlc2NlbmRhbnRJRFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgYW5jZXN0b3JJRGAgaXMgYW4gYW5jZXN0b3Igb2YgYGRlc2NlbmRhbnRJRGAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzY2VuZGFudElEKSB7XG4gIHJldHVybiAoXG4gICAgZGVzY2VuZGFudElELmluZGV4T2YoYW5jZXN0b3JJRCkgPT09IDAgJiZcbiAgICBpc0JvdW5kYXJ5KGRlc2NlbmRhbnRJRCwgYW5jZXN0b3JJRC5sZW5ndGgpXG4gICk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcGFyZW50IElEIG9mIHRoZSBzdXBwbGllZCBSZWFjdCBET00gSUQsIGBpZGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGEgY29tcG9uZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgcGFyZW50LCBvciBhbiBlbXB0eSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRJRChpZCkge1xuICByZXR1cm4gaWQgPyBpZC5zdWJzdHIoMCwgaWQubGFzdEluZGV4T2YoU0VQQVJBVE9SKSkgOiAnJztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IERPTSBJRCBvbiB0aGUgdHJlZSBwYXRoIGZyb20gdGhlIHN1cHBsaWVkIGBhbmNlc3RvcklEYCB0byB0aGVcbiAqIHN1cHBsaWVkIGBkZXN0aW5hdGlvbklEYC4gSWYgdGhleSBhcmUgZXF1YWwsIHRoZSBJRCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jZXN0b3JJRCBJRCBvZiBhbiBhbmNlc3RvciBub2RlIG9mIGBkZXN0aW5hdGlvbklEYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0aW5hdGlvbklEIElEIG9mIHRoZSBkZXN0aW5hdGlvbiBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBOZXh0IElEIG9uIHRoZSBwYXRoIGZyb20gYGFuY2VzdG9ySURgIHRvIGBkZXN0aW5hdGlvbklEYC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldE5leHREZXNjZW5kYW50SUQoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlzVmFsaWRJRChhbmNlc3RvcklEKSAmJiBpc1ZhbGlkSUQoZGVzdGluYXRpb25JRCksXG4gICAgJ2dldE5leHREZXNjZW5kYW50SUQoJXMsICVzKTogUmVjZWl2ZWQgYW4gaW52YWxpZCBSZWFjdCBET00gSUQuJyxcbiAgICBhbmNlc3RvcklELFxuICAgIGRlc3RpbmF0aW9uSURcbiAgKSA6IGludmFyaWFudChpc1ZhbGlkSUQoYW5jZXN0b3JJRCkgJiYgaXNWYWxpZElEKGRlc3RpbmF0aW9uSUQpKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCksXG4gICAgJ2dldE5leHREZXNjZW5kYW50SUQoLi4uKTogUmVhY3QgaGFzIG1hZGUgYW4gaW52YWxpZCBhc3N1bXB0aW9uIGFib3V0ICcgK1xuICAgICd0aGUgRE9NIGhpZXJhcmNoeS4gRXhwZWN0ZWQgYCVzYCB0byBiZSBhbiBhbmNlc3RvciBvZiBgJXNgLicsXG4gICAgYW5jZXN0b3JJRCxcbiAgICBkZXN0aW5hdGlvbklEXG4gICkgOiBpbnZhcmlhbnQoaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkpKTtcbiAgaWYgKGFuY2VzdG9ySUQgPT09IGRlc3RpbmF0aW9uSUQpIHtcbiAgICByZXR1cm4gYW5jZXN0b3JJRDtcbiAgfVxuICAvLyBTa2lwIG92ZXIgdGhlIGFuY2VzdG9yIGFuZCB0aGUgaW1tZWRpYXRlIHNlcGFyYXRvci4gVHJhdmVyc2UgdW50aWwgd2UgaGl0XG4gIC8vIGFub3RoZXIgc2VwYXJhdG9yIG9yIHdlIHJlYWNoIHRoZSBlbmQgb2YgYGRlc3RpbmF0aW9uSURgLlxuICB2YXIgc3RhcnQgPSBhbmNlc3RvcklELmxlbmd0aCArIFNFUEFSQVRPUl9MRU5HVEg7XG4gIHZhciBpO1xuICBmb3IgKGkgPSBzdGFydDsgaSA8IGRlc3RpbmF0aW9uSUQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNCb3VuZGFyeShkZXN0aW5hdGlvbklELCBpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbklELnN1YnN0cigwLCBpKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCBvZiB0d28gSURzLlxuICpcbiAqIFVzaW5nIHRoaXMgSUQgc2NoZW1lLCB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQgaXMgdGhlIGxvbmdlc3QgY29tbW9uXG4gKiBwcmVmaXggb2YgdGhlIHR3byBJRHMgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWRlZCBhIFwibWFya2VyXCIgaW4gYm90aCBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVJRFxuICogQHBhcmFtIHtzdHJpbmd9IHR3b0lEXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElELCBvciB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vbmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQob25lSUQsIHR3b0lEKSB7XG4gIHZhciBtaW5MZW5ndGggPSBNYXRoLm1pbihvbmVJRC5sZW5ndGgsIHR3b0lELmxlbmd0aCk7XG4gIGlmIChtaW5MZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IDA7XG4gIC8vIFVzZSBgPD1gIHRvIHRyYXZlcnNlIHVudGlsIHRoZSBcIkVPTFwiIG9mIHRoZSBzaG9ydGVyIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbWluTGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNCb3VuZGFyeShvbmVJRCwgaSkgJiYgaXNCb3VuZGFyeSh0d29JRCwgaSkpIHtcbiAgICAgIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IGk7XG4gICAgfSBlbHNlIGlmIChvbmVJRC5jaGFyQXQoaSkgIT09IHR3b0lELmNoYXJBdChpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBsb25nZXN0Q29tbW9uSUQgPSBvbmVJRC5zdWJzdHIoMCwgbGFzdENvbW1vbk1hcmtlckluZGV4KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpc1ZhbGlkSUQobG9uZ2VzdENvbW1vbklEKSxcbiAgICAnZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKCVzLCAlcyk6IEV4cGVjdGVkIGEgdmFsaWQgUmVhY3QgRE9NIElEOiAlcycsXG4gICAgb25lSUQsXG4gICAgdHdvSUQsXG4gICAgbG9uZ2VzdENvbW1vbklEXG4gICkgOiBpbnZhcmlhbnQoaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCkpKTtcbiAgcmV0dXJuIGxvbmdlc3RDb21tb25JRDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgdGhlIHBhcmVudCBwYXRoIGJldHdlZW4gdHdvIElEcyAoZWl0aGVyIHVwIG9yIGRvd24pLiBUaGUgSURzIG11c3RcbiAqIG5vdCBiZSB0aGUgc2FtZSwgYW5kIHRoZXJlIG11c3QgZXhpc3QgYSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHRoZW0uIElmIHRoZVxuICogY2FsbGJhY2sgcmV0dXJucyBgZmFsc2VgLCB0cmF2ZXJzYWwgaXMgc3RvcHBlZC5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0YXJ0IElEIGF0IHdoaWNoIHRvIHN0YXJ0IHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gc3RvcCBJRCBhdCB3aGljaCB0byBlbmQgdHJhdmVyc2FsLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlIGVhY2ggSUQgd2l0aC5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBGaXJzdCBXaGV0aGVyIG9yIG5vdCB0byBza2lwIHRoZSBmaXJzdCBub2RlLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gc2tpcExhc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgbGFzdCBub2RlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VQYXJlbnRQYXRoKHN0YXJ0LCBzdG9wLCBjYiwgYXJnLCBza2lwRmlyc3QsIHNraXBMYXN0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgJyc7XG4gIHN0b3AgPSBzdG9wIHx8ICcnO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHN0YXJ0ICE9PSBzdG9wLFxuICAgICd0cmF2ZXJzZVBhcmVudFBhdGgoLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gYW5kIHRvIHRoZSBzYW1lIElELCBgJXNgLicsXG4gICAgc3RhcnRcbiAgKSA6IGludmFyaWFudChzdGFydCAhPT0gc3RvcCkpO1xuICB2YXIgdHJhdmVyc2VVcCA9IGlzQW5jZXN0b3JJRE9mKHN0b3AsIHN0YXJ0KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSxcbiAgICAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gdHdvIElEcyB0aGF0IGRvICcgK1xuICAgICdub3QgaGF2ZSBhIHBhcmVudCBwYXRoLicsXG4gICAgc3RhcnQsXG4gICAgc3RvcFxuICApIDogaW52YXJpYW50KHRyYXZlcnNlVXAgfHwgaXNBbmNlc3RvcklET2Yoc3RhcnQsIHN0b3ApKSk7XG4gIC8vIFRyYXZlcnNlIGZyb20gYHN0YXJ0YCB0byBgc3RvcGAgb25lIGRlcHRoIGF0IGEgdGltZS5cbiAgdmFyIGRlcHRoID0gMDtcbiAgdmFyIHRyYXZlcnNlID0gdHJhdmVyc2VVcCA/IGdldFBhcmVudElEIDogZ2V0TmV4dERlc2NlbmRhbnRJRDtcbiAgZm9yICh2YXIgaWQgPSBzdGFydDsgLyogdW50aWwgYnJlYWsgKi87IGlkID0gdHJhdmVyc2UoaWQsIHN0b3ApKSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoKCFza2lwRmlyc3QgfHwgaWQgIT09IHN0YXJ0KSAmJiAoIXNraXBMYXN0IHx8IGlkICE9PSBzdG9wKSkge1xuICAgICAgcmV0ID0gY2IoaWQsIHRyYXZlcnNlVXAsIGFyZyk7XG4gICAgfVxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IGlkID09PSBzdG9wKSB7XG4gICAgICAvLyBPbmx5IGJyZWFrIC8vYWZ0ZXIvLyB2aXNpdGluZyBgc3RvcGAuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGRlcHRoKysgPCBNQVhfVFJFRV9ERVBUSCxcbiAgICAgICd0cmF2ZXJzZVBhcmVudFBhdGgoJXMsICVzLCAuLi4pOiBEZXRlY3RlZCBhbiBpbmZpbml0ZSBsb29wIHdoaWxlICcgK1xuICAgICAgJ3RyYXZlcnNpbmcgdGhlIFJlYWN0IERPTSBJRCB0cmVlLiBUaGlzIG1heSBiZSBkdWUgdG8gbWFsZm9ybWVkIElEczogJXMnLFxuICAgICAgc3RhcnQsIHN0b3BcbiAgICApIDogaW52YXJpYW50KGRlcHRoKysgPCBNQVhfVFJFRV9ERVBUSCkpO1xuICB9XG59XG5cbi8qKlxuICogTWFuYWdlcyB0aGUgSURzIGFzc2lnbmVkIHRvIERPTSByZXByZXNlbnRhdGlvbnMgb2YgUmVhY3QgY29tcG9uZW50cy4gVGhpc1xuICogdXNlcyBhIHNwZWNpZmljIHNjaGVtZSBpbiBvcmRlciB0byB0cmF2ZXJzZSB0aGUgRE9NIGVmZmljaWVudGx5IChlLmcuIGluXG4gKiBvcmRlciB0byBzaW11bGF0ZSBldmVudHMpLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCByb290IElEXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCByb290IElELlxuICAgKi9cbiAgY3JlYXRlUmVhY3RSb290SUQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnZXRSZWFjdFJvb3RJRFN0cmluZyhSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCgpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWN0IElEIGJ5IGpvaW5pbmcgYSByb290IElEIHdpdGggYSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFJvb3QgSUQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIGNvbXBvbmVudCdzIG5hbWUgKGFzIGZsYXR0ZW5lZCBjaGlsZHJlbikuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCBJRC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBjcmVhdGVSZWFjdElEOiBmdW5jdGlvbihyb290SUQsIG5hbWUpIHtcbiAgICByZXR1cm4gcm9vdElEICsgbmFtZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdCBvZiB0aGUgdHJlZSB0aGF0XG4gICAqIGNvbnRhaW5zIHRoZSBSZWFjdCBjb21wb25lbnQgd2l0aCB0aGUgc3VwcGxpZWQgRE9NIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgRE9NIElEIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBET00gSUQgb2YgdGhlIFJlYWN0IGNvbXBvbmVudCB0aGF0IGlzIHRoZSByb290LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldFJlYWN0Um9vdElERnJvbU5vZGVJRDogZnVuY3Rpb24oaWQpIHtcbiAgICBpZiAoaWQgJiYgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGluZGV4ID0gaWQuaW5kZXhPZihTRVBBUkFUT1IsIDEpO1xuICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpZC5zdWJzdHIoMCwgaW5kZXgpIDogaWQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdGhlIElEIGhpZXJhcmNoeSBhbmQgaW52b2tlcyB0aGUgc3VwcGxpZWQgYGNiYCBvbiBhbnkgSURzIHRoYXRcbiAgICogc2hvdWxkIHdvdWxkIHJlY2VpdmUgYSBgbW91c2VFbnRlcmAgb3IgYG1vdXNlTGVhdmVgIGV2ZW50LlxuICAgKlxuICAgKiBOT1RFOiBEb2VzIG5vdCBpbnZva2UgdGhlIGNhbGxiYWNrIG9uIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBiZWNhdXNlXG4gICAqIG5vdGhpbmcgXCJlbnRlcmVkXCIgb3IgXCJsZWZ0XCIgdGhhdCBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGVhdmVJRCBJRCBiZWluZyBsZWZ0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50ZXJJRCBJRCBiZWluZyBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2Ugb24gZWFjaCBlbnRlcmVkL2xlZnQgSUQuXG4gICAqIEBwYXJhbSB7Kn0gdXBBcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIG9uIGxlZnQgSURzLlxuICAgKiBAcGFyYW0geyp9IGRvd25BcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIG9uIGVudGVyZWQgSURzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlRW50ZXJMZWF2ZTogZnVuY3Rpb24obGVhdmVJRCwgZW50ZXJJRCwgY2IsIHVwQXJnLCBkb3duQXJnKSB7XG4gICAgdmFyIGFuY2VzdG9ySUQgPSBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQobGVhdmVJRCwgZW50ZXJJRCk7XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGxlYXZlSUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChsZWF2ZUlELCBhbmNlc3RvcklELCBjYiwgdXBBcmcsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGVudGVySUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChhbmNlc3RvcklELCBlbnRlcklELCBjYiwgZG93bkFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2ltdWxhdGVzIHRoZSB0cmF2ZXJzYWwgb2YgYSB0d28tcGhhc2UsIGNhcHR1cmUvYnViYmxlIGV2ZW50IGRpc3BhdGNoLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uKHRhcmdldElELCBjYiwgYXJnKSB7XG4gICAgaWYgKHRhcmdldElEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoJycsIHRhcmdldElELCBjYiwgYXJnLCB0cnVlLCBmYWxzZSk7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgodGFyZ2V0SUQsICcnLCBjYiwgYXJnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZSBhIG5vZGUgSUQsIGNhbGxpbmcgdGhlIHN1cHBsaWVkIGBjYmAgZm9yIGVhY2ggYW5jZXN0b3IgSUQuIEZvclxuICAgKiBleGFtcGxlLCBwYXNzaW5nIGAuMC4kcm93LTAuMWAgd291bGQgcmVzdWx0IGluIGBjYmAgZ2V0dGluZyBjYWxsZWRcbiAgICogd2l0aCBgLjBgLCBgLjAuJHJvdy0wYCwgYW5kIGAuMC4kcm93LTAuMWAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgdHJhdmVyc2FsIGhhcHBlbnMgb24gSURzIHdpdGhvdXQgdG91Y2hpbmcgdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldElEIElEIG9mIHRoZSB0YXJnZXQgbm9kZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IGFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGguXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhdmVyc2VBbmNlc3RvcnM6IGZ1bmN0aW9uKHRhcmdldElELCBjYiwgYXJnKSB7XG4gICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEOiBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXROZXh0RGVzY2VuZGFudElEOiBnZXROZXh0RGVzY2VuZGFudElELFxuXG4gIGlzQW5jZXN0b3JJRE9mOiBpc0FuY2VzdG9ySURPZixcblxuICBTRVBBUkFUT1I6IFNFUEFSQVRPUlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5zdGFuY2VNYXBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogYFJlYWN0SW5zdGFuY2VNYXBgIG1haW50YWlucyBhIG1hcHBpbmcgZnJvbSBhIHB1YmxpYyBmYWNpbmcgc3RhdGVmdWxcbiAqIGluc3RhbmNlIChrZXkpIGFuZCB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gKHZhbHVlKS4gVGhpcyBhbGxvd3MgcHVibGljXG4gKiBtZXRob2RzIHRvIGFjY2VwdCB0aGUgdXNlciBmYWNpbmcgaW5zdGFuY2UgYXMgYW4gYXJndW1lbnQgYW5kIG1hcCB0aGVtIGJhY2tcbiAqIHRvIGludGVybmFsIG1ldGhvZHMuXG4gKi9cblxuLy8gVE9ETzogUmVwbGFjZSB0aGlzIHdpdGggRVM2OiB2YXIgUmVhY3RJbnN0YW5jZU1hcCA9IG5ldyBNYXAoKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0ge1xuXG4gIC8qKlxuICAgKiBUaGlzIEFQSSBzaG91bGQgYmUgY2FsbGVkIGBkZWxldGVgIGJ1dCB3ZSdkIGhhdmUgdG8gbWFrZSBzdXJlIHRvIGFsd2F5c1xuICAgKiB0cmFuc2Zvcm0gdGhlc2UgdG8gc3RyaW5ncyBmb3IgSUUgc3VwcG9ydC4gV2hlbiB0aGlzIHRyYW5zZm9ybSBpcyBmdWxseVxuICAgKiBzdXBwb3J0ZWQgd2UgY2FuIHJlbmFtZSBpdC5cbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2U7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT09IHVuZGVmaW5lZDtcbiAgfSxcblxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RMaWZlQ3ljbGVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgbWFuYWdlcyB0aGUgYm9va2tlZXBpbmcgd2hlbiBhIGNvbXBvbmVudCBpcyBpbiB0aGUgcHJvY2Vzc1xuICogb2YgYmVpbmcgbW91bnRlZCBvciBiZWluZyB1bm1vdW50ZWQuIFRoaXMgaXMgdXNlZCBhcyBhIHdheSB0byBlbmZvcmNlXG4gKiBpbnZhcmlhbnRzIChvciB3YXJuaW5ncykgd2hlbiBpdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gY2FsbFxuICogc2V0U3RhdGUvZm9yY2VVcGRhdGUuXG4gKlxuICogY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZTogRHVyaW5nIHRoZSBjb25zdHJ1Y3Rpb24gcGhhc2UsIGl0IGlzIG5vdCBwb3NzaWJsZVxuICogdG8gdHJpZ2dlciBhbiB1cGRhdGUgc2luY2UgdGhlIGluc3RhbmNlIGlzIG5vdCBmdWxseSBtb3VudGVkIHlldC4gSG93ZXZlciwgd2VcbiAqIGN1cnJlbnRseSBhbGxvdyB0aGlzIGFzIGEgY29udmVuaWVuY2UgZm9yIG11dGF0aW5nIHRoZSBpbml0aWFsIHN0YXRlLlxuICpcbiAqIGN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZTogRHVyaW5nIHRoZSB1bm1vdW50aW5nIHBoYXNlLCB0aGUgaW5zdGFuY2UgaXNcbiAqIHN0aWxsIG1vdW50ZWQgYW5kIGNhbiB0aGVyZWZvcmUgc2NoZWR1bGUgYW4gdXBkYXRlLiBIb3dldmVyLCB0aGlzIGlzIG5vdFxuICogcmVjb21tZW5kZWQgYW5kIHByb2JhYmx5IGFuIGVycm9yIHNpbmNlIGl0J3MgYWJvdXQgdG8gYmUgdW5tb3VudGVkLlxuICogVGhlcmVmb3JlIHdlIHN0aWxsIHdhbnQgdG8gdHJpZ2dlciBpbiBhbiBlcnJvciBmb3IgdGhhdCBjYXNlLlxuICovXG5cbnZhciBSZWFjdExpZmVDeWNsZSA9IHtcbiAgY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZTogbnVsbCxcbiAgY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlOiBudWxsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TGlmZUN5Y2xlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TGlua1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVhY3RMaW5rIGVuY2Fwc3VsYXRlcyBhIGNvbW1vbiBwYXR0ZXJuIGluIHdoaWNoIGEgY29tcG9uZW50IHdhbnRzIHRvIG1vZGlmeVxuICogYSBwcm9wIHJlY2VpdmVkIGZyb20gaXRzIHBhcmVudC4gUmVhY3RMaW5rIGFsbG93cyB0aGUgcGFyZW50IHRvIHBhc3MgZG93biBhXG4gKiB2YWx1ZSBjb3VwbGVkIHdpdGggYSBjYWxsYmFjayB0aGF0LCB3aGVuIGludm9rZWQsIGV4cHJlc3NlcyBhbiBpbnRlbnQgdG9cbiAqIG1vZGlmeSB0aGF0IHZhbHVlLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHt2YWx1ZTogJyd9O1xuICogICB9LFxuICogICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgIHZhciB2YWx1ZUxpbmsgPSBuZXcgUmVhY3RMaW5rKHRoaXMuc3RhdGUudmFsdWUsIHRoaXMuX2hhbmRsZVZhbHVlQ2hhbmdlKTtcbiAqICAgICByZXR1cm4gPGlucHV0IHZhbHVlTGluaz17dmFsdWVMaW5rfSAvPjtcbiAqICAgfSxcbiAqICAgdGhpcy5faGFuZGxlVmFsdWVDaGFuZ2U6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gKiAgICAgdGhpcy5zZXRTdGF0ZSh7dmFsdWU6IG5ld1ZhbHVlfSk7XG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIFdlIGhhdmUgcHJvdmlkZWQgc29tZSBzdWdhcnkgbWl4aW5zIHRvIG1ha2UgdGhlIGNyZWF0aW9uIGFuZFxuICogY29uc3VtcHRpb24gb2YgUmVhY3RMaW5rIGVhc2llcjsgc2VlIExpbmtlZFZhbHVlVXRpbHMgYW5kIExpbmtlZFN0YXRlTWl4aW4uXG4gKi9cblxudmFyIFJlYWN0ID0gcmVxdWlyZShcIi4vUmVhY3RcIik7XG5cbi8qKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBsaW5rXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZXF1ZXN0Q2hhbmdlIGNhbGxiYWNrIHRvIHJlcXVlc3QgYSBjaGFuZ2VcbiAqL1xuZnVuY3Rpb24gUmVhY3RMaW5rKHZhbHVlLCByZXF1ZXN0Q2hhbmdlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5yZXF1ZXN0Q2hhbmdlID0gcmVxdWVzdENoYW5nZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUHJvcFR5cGUgdGhhdCBlbmZvcmNlcyB0aGUgUmVhY3RMaW5rIEFQSSBhbmQgb3B0aW9uYWxseSBjaGVja3MgdGhlXG4gKiB0eXBlIG9mIHRoZSB2YWx1ZSBiZWluZyBwYXNzZWQgaW5zaWRlIHRoZSBsaW5rLiBFeGFtcGxlOlxuICpcbiAqIE15Q29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAqICAgdGFiSW5kZXhMaW5rOiBSZWFjdExpbmsuUHJvcFR5cGVzLmxpbmsoUmVhY3QuUHJvcFR5cGVzLm51bWJlcilcbiAqIH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTGlua1R5cGVDaGVja2VyKGxpbmtUeXBlKSB7XG4gIHZhciBzaGFwZXMgPSB7XG4gICAgdmFsdWU6IHR5cGVvZiBsaW5rVHlwZSA9PT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgUmVhY3QuUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkIDpcbiAgICAgIGxpbmtUeXBlLmlzUmVxdWlyZWQsXG4gICAgcmVxdWVzdENoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuICByZXR1cm4gUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHNoYXBlcyk7XG59XG5cblJlYWN0TGluay5Qcm9wVHlwZXMgPSB7XG4gIGxpbms6IGNyZWF0ZUxpbmtUeXBlQ2hlY2tlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdExpbms7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNYXJrdXBDaGVja3N1bVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFkbGVyMzIgPSByZXF1aXJlKFwiLi9hZGxlcjMyXCIpO1xuXG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcgd2l0aCBjaGVja3N1bSBhdHRyaWJ1dGUgYXR0YWNoZWRcbiAgICovXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoXG4gICAgICAnPicsXG4gICAgICAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCI+J1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgdG8gdXNlXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCByb290IFJlYWN0IGVsZW1lbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBtYXJrdXAgaXMgdGhlIHNhbWVcbiAgICovXG4gIGNhblJldXNlTWFya3VwOiBmdW5jdGlvbihtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUVcbiAgICApO1xuICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcbiAgICB2YXIgbWFya3VwQ2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cENoZWNrc3VtID09PSBleGlzdGluZ0NoZWNrc3VtO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya3VwQ2hlY2tzdW07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNb3VudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlUXVldWVcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKFwiLi9jb250YWluc05vZGVcIik7XG52YXIgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyID0gcmVxdWlyZShcIi4vZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXCIpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIik7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIFNFUEFSQVRPUiA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLlNFUEFSQVRPUjtcblxudmFyIEFUVFJfTkFNRSA9IERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FO1xudmFyIG5vZGVDYWNoZSA9IHt9O1xuXG52YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xudmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuXG4vKiogTWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS4gKi9cbnZhciBpbnN0YW5jZXNCeVJlYWN0Um9vdElEID0ge307XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gYGNvbnRhaW5lcmAgbm9kZXMuICovXG52YXIgY29udGFpbmVyc0J5UmVhY3RSb290SUQgPSB7fTtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAvKiogX19ERVZfXy1vbmx5IG1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byByb290IGVsZW1lbnRzLiAqL1xuICB2YXIgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCA9IHt9O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGJyZWFkdGgtZmlyc3Qgc2VhcmNoIHN0YXRlIGluIGZpbmRDb21wb25lbnRSb290LlxudmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSA9IFtdO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gKiB0aGF0J3Mgbm90IGNvbW1vbiBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gc3RyaW5ncy5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgY2hhcmFjdGVyIHdoZXJlIHRoZSBzdHJpbmdzIGRpdmVyZ2VcbiAqL1xuZnVuY3Rpb24gZmlyc3REaWZmZXJlbmNlSW5kZXgoc3RyaW5nMSwgc3RyaW5nMikge1xuICB2YXIgbWluTGVuID0gTWF0aC5taW4oc3RyaW5nMS5sZW5ndGgsIHN0cmluZzIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW5MZW47IGkrKykge1xuICAgIGlmIChzdHJpbmcxLmNoYXJBdChpKSAhPT0gc3RyaW5nMi5jaGFyQXQoaSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyaW5nMS5sZW5ndGggPT09IHN0cmluZzIubGVuZ3RoID8gLTEgOiBtaW5MZW47XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpbiBhIFJlYWN0IGNvbXBvbmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IEEgXCJyZWFjdFJvb3RcIiBJRCwgaWYgYSBSZWFjdCBjb21wb25lbnQgaXMgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdElEKGNvbnRhaW5lcikge1xuICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgcmV0dXJuIHJvb3RFbGVtZW50ICYmIFJlYWN0TW91bnQuZ2V0SUQocm9vdEVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEFjY2Vzc2luZyBub2RlW0FUVFJfTkFNRV0gb3IgY2FsbGluZyBnZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSBvbiBhIGZvcm1cbiAqIGVsZW1lbnQgY2FuIHJldHVybiBpdHMgY29udHJvbCB3aG9zZSBuYW1lIG9yIElEIGVxdWFscyBBVFRSX05BTUUuIEFsbFxuICogRE9NIG5vZGVzIHN1cHBvcnQgYGdldEF0dHJpYnV0ZU5vZGVgIGJ1dCB0aGlzIGNhbiBhbHNvIGdldCBjYWxsZWQgb25cbiAqIG90aGVyIG9iamVjdHMgc28ganVzdCByZXR1cm4gJycgaWYgd2UncmUgZ2l2ZW4gc29tZXRoaW5nIG90aGVyIHRoYW4gYVxuICogRE9NIG5vZGUgKHN1Y2ggYXMgd2luZG93KS5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fERPTVdpbmRvd3xET01Eb2N1bWVudHxET01UZXh0Tm9kZX0gbm9kZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gSUQgb2YgdGhlIHN1cHBsaWVkIGBkb21Ob2RlYC5cbiAqL1xuZnVuY3Rpb24gZ2V0SUQobm9kZSkge1xuICB2YXIgaWQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAoaWQpIHtcbiAgICBpZiAobm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgdmFyIGNhY2hlZCA9IG5vZGVDYWNoZVtpZF07XG4gICAgICBpZiAoY2FjaGVkICE9PSBub2RlKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgIWlzVmFsaWQoY2FjaGVkLCBpZCksXG4gICAgICAgICAgJ1JlYWN0TW91bnQ6IFR3byB2YWxpZCBidXQgdW5lcXVhbCBub2RlcyB3aXRoIHRoZSBzYW1lIGAlc2A6ICVzJyxcbiAgICAgICAgICBBVFRSX05BTUUsIGlkXG4gICAgICAgICkgOiBpbnZhcmlhbnQoIWlzVmFsaWQoY2FjaGVkLCBpZCkpKTtcblxuICAgICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZUNhY2hlW2lkXSA9IG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEdldElEKG5vZGUpIHtcbiAgLy8gSWYgbm9kZSBpcyBzb21ldGhpbmcgbGlrZSBhIHdpbmRvdywgZG9jdW1lbnQsIG9yIHRleHQgbm9kZSwgbm9uZSBvZlxuICAvLyB3aGljaCBzdXBwb3J0IGF0dHJpYnV0ZXMgb3IgYSAuZ2V0QXR0cmlidXRlIG1ldGhvZCwgZ3JhY2VmdWxseSByZXR1cm5cbiAgLy8gdGhlIGVtcHR5IHN0cmluZywgYXMgaWYgdGhlIGF0dHJpYnV0ZSB3ZXJlIG1pc3NpbmcuXG4gIHJldHVybiBub2RlICYmIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgfHwgJyc7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgUmVhY3Qtc3BlY2lmaWMgSUQgb2YgdGhlIGdpdmVuIG5vZGUuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIFRoZSBET00gbm9kZSB3aG9zZSBJRCB3aWxsIGJlIHNldC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdmFsdWUgb2YgdGhlIElEIGF0dHJpYnV0ZS5cbiAqL1xuZnVuY3Rpb24gc2V0SUQobm9kZSwgaWQpIHtcbiAgdmFyIG9sZElEID0gaW50ZXJuYWxHZXRJRChub2RlKTtcbiAgaWYgKG9sZElEICE9PSBpZCkge1xuICAgIGRlbGV0ZSBub2RlQ2FjaGVbb2xkSURdO1xuICB9XG4gIG5vZGUuc2V0QXR0cmlidXRlKEFUVFJfTkFNRSwgaWQpO1xuICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBSZWFjdC1nZW5lcmF0ZWQgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGVkIGBpZGAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZShpZCkge1xuICBpZiAoIW5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkgfHwgIWlzVmFsaWQobm9kZUNhY2hlW2lkXSwgaWQpKSB7XG4gICAgbm9kZUNhY2hlW2lkXSA9IFJlYWN0TW91bnQuZmluZFJlYWN0Tm9kZUJ5SUQoaWQpO1xuICB9XG4gIHJldHVybiBub2RlQ2FjaGVbaWRdO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIHB1YmxpYyBSZWFjdCBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0geyp9IGluc3RhbmNlIEEgcHVibGljIFJlYWN0IGluc3RhbmNlLlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9IERPTSBub2RlIHdpdGggdGhlIHN1cHBsZWQgYGlkYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3RhbmNlKSB7XG4gIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KGluc3RhbmNlKS5fcm9vdE5vZGVJRDtcbiAgaWYgKFJlYWN0RW1wdHlDb21wb25lbnQuaXNOdWxsQ29tcG9uZW50SUQoaWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKCFub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpIHx8ICFpc1ZhbGlkKG5vZGVDYWNoZVtpZF0sIGlkKSkge1xuICAgIG5vZGVDYWNoZVtpZF0gPSBSZWFjdE1vdW50LmZpbmRSZWFjdE5vZGVCeUlEKGlkKTtcbiAgfVxuICByZXR1cm4gbm9kZUNhY2hlW2lkXTtcbn1cblxuLyoqXG4gKiBBIG5vZGUgaXMgXCJ2YWxpZFwiIGlmIGl0IGlzIGNvbnRhaW5lZCBieSBhIGN1cnJlbnRseSBtb3VudGVkIGNvbnRhaW5lci5cbiAqXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhlIG5vZGUgZG9lcyBub3QgaGF2ZSB0byBiZSBjb250YWluZWQgYnkgYSBkb2N1bWVudCBpblxuICogb3JkZXIgdG8gYmUgY29uc2lkZXJlZCB2YWxpZC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGV4cGVjdGVkIElEIG9mIHRoZSBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbm9kZSBpcyBjb250YWluZWQgYnkgYSBtb3VudGVkIGNvbnRhaW5lci5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZChub2RlLCBpZCkge1xuICBpZiAobm9kZSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpbnRlcm5hbEdldElEKG5vZGUpID09PSBpZCxcbiAgICAgICdSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgJyxcbiAgICAgIEFUVFJfTkFNRVxuICAgICkgOiBpbnZhcmlhbnQoaW50ZXJuYWxHZXRJRChub2RlKSA9PT0gaWQpKTtcblxuICAgIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5zTm9kZShjb250YWluZXIsIG5vZGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2F1c2VzIHRoZSBjYWNoZSB0byBmb3JnZXQgYWJvdXQgb25lIFJlYWN0LXNwZWNpZmljIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgdG8gZm9yZ2V0LlxuICovXG5mdW5jdGlvbiBwdXJnZUlEKGlkKSB7XG4gIGRlbGV0ZSBub2RlQ2FjaGVbaWRdO1xufVxuXG52YXIgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG5mdW5jdGlvbiBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbChhbmNlc3RvcklEKSB7XG4gIHZhciBhbmNlc3RvciA9IG5vZGVDYWNoZVthbmNlc3RvcklEXTtcbiAgaWYgKGFuY2VzdG9yICYmIGlzVmFsaWQoYW5jZXN0b3IsIGFuY2VzdG9ySUQpKSB7XG4gICAgZGVlcGVzdE5vZGVTb0ZhciA9IGFuY2VzdG9yO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgbm9kZSBpc24ndCBwb3B1bGF0ZWQgaW4gdGhlIGNhY2hlLCBzbyBwcmVzdW1hYmx5IG5vbmUgb2YgaXRzXG4gICAgLy8gZGVzY2VuZGFudHMgYXJlLiBCcmVhayBvdXQgb2YgdGhlIGxvb3AuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBkZWVwZXN0IGNhY2hlZCBub2RlIHdob3NlIElEIGlzIGEgcHJlZml4IG9mIGB0YXJnZXRJRGAuXG4gKi9cbmZ1bmN0aW9uIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpIHtcbiAgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG4gIFJlYWN0SW5zdGFuY2VIYW5kbGVzLnRyYXZlcnNlQW5jZXN0b3JzKFxuICAgIHRhcmdldElELFxuICAgIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3JJbXBsXG4gICk7XG5cbiAgdmFyIGZvdW5kTm9kZSA9IGRlZXBlc3ROb2RlU29GYXI7XG4gIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuICByZXR1cm4gZm91bmROb2RlO1xufVxuXG4vKipcbiAqIE1vdW50cyB0aGlzIGNvbXBvbmVudCBhbmQgaW5zZXJ0cyBpdCBpbnRvIHRoZSBET00uXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50SW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIG1vdW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIG1vdW50IGludG8uXG4gKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIElmIHRydWUsIGRvIG5vdCBpbnNlcnQgbWFya3VwXG4gKi9cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50SW50b05vZGUoXG4gICAgY29tcG9uZW50SW5zdGFuY2UsXG4gICAgcm9vdElELFxuICAgIGNvbnRhaW5lcixcbiAgICB0cmFuc2FjdGlvbixcbiAgICBzaG91bGRSZXVzZU1hcmt1cCkge1xuICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgIGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIHRyYW5zYWN0aW9uLCBlbXB0eU9iamVjdFxuICApO1xuICBjb21wb25lbnRJbnN0YW5jZS5faXNUb3BMZXZlbCA9IHRydWU7XG4gIFJlYWN0TW91bnQuX21vdW50SW1hZ2VJbnRvTm9kZShtYXJrdXAsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXApO1xufVxuXG4vKipcbiAqIEJhdGNoZWQgbW91bnQuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50SW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIG1vdW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIG1vdW50IGludG8uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIElmIHRydWUsIGRvIG5vdCBpbnNlcnQgbWFya3VwXG4gKi9cbmZ1bmN0aW9uIGJhdGNoZWRNb3VudENvbXBvbmVudEludG9Ob2RlKFxuICAgIGNvbXBvbmVudEluc3RhbmNlLFxuICAgIHJvb3RJRCxcbiAgICBjb250YWluZXIsXG4gICAgc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgdmFyIHRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gIHRyYW5zYWN0aW9uLnBlcmZvcm0oXG4gICAgbW91bnRDb21wb25lbnRJbnRvTm9kZSxcbiAgICBudWxsLFxuICAgIGNvbXBvbmVudEluc3RhbmNlLFxuICAgIHJvb3RJRCxcbiAgICBjb250YWluZXIsXG4gICAgdHJhbnNhY3Rpb24sXG4gICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgKTtcbiAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG59XG5cbi8qKlxuICogTW91bnRpbmcgaXMgdGhlIHByb2Nlc3Mgb2YgaW5pdGlhbGl6aW5nIGEgUmVhY3QgY29tcG9uZW50IGJ5IGNyZWF0aW5nIGl0c1xuICogcmVwcmVzZW50YXRpdmUgRE9NIGVsZW1lbnRzIGFuZCBpbnNlcnRpbmcgdGhlbSBpbnRvIGEgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gKiBBbnkgcHJpb3IgY29udGVudCBpbnNpZGUgYGNvbnRhaW5lcmAgaXMgZGVzdHJveWVkIGluIHRoZSBwcm9jZXNzLlxuICpcbiAqICAgUmVhY3RNb3VudC5yZW5kZXIoXG4gKiAgICAgY29tcG9uZW50LFxuICogICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKVxuICogICApO1xuICpcbiAqICAgPGRpdiBpZD1cImNvbnRhaW5lclwiPiAgICAgICAgICAgICAgICAgICA8LS0gU3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gKiAgICAgPGRpdiBkYXRhLXJlYWN0aWQ9XCIuM1wiPiAgICAgICAgICAgICAgPC0tIFJlbmRlcmVkIHJlYWN0Um9vdCBvZiBSZWFjdFxuICogICAgICAgLy8gLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LlxuICogICAgIDwvZGl2PlxuICogICA8L2Rpdj5cbiAqXG4gKiBJbnNpZGUgb2YgYGNvbnRhaW5lcmAsIHRoZSBmaXJzdCBlbGVtZW50IHJlbmRlcmVkIGlzIHRoZSBcInJlYWN0Um9vdFwiLlxuICovXG52YXIgUmVhY3RNb3VudCA9IHtcbiAgLyoqIEV4cG9zZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcyAqKi9cbiAgX2luc3RhbmNlc0J5UmVhY3RSb290SUQ6IGluc3RhbmNlc0J5UmVhY3RSb290SUQsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYSBob29rIHByb3ZpZGVkIHRvIHN1cHBvcnQgcmVuZGVyaW5nIFJlYWN0IGNvbXBvbmVudHMgd2hpbGVcbiAgICogZW5zdXJpbmcgdGhhdCB0aGUgYXBwYXJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9mIGl0cyBgY29udGFpbmVyYCBkb2VzIG5vdFxuICAgKiBjaGFuZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIFRoZSBgY29udGFpbmVyYCBiZWluZyByZW5kZXJlZCBpbnRvLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZW5kZXJDYWxsYmFjayBUaGlzIG11c3QgYmUgY2FsbGVkIG9uY2UgdG8gZG8gdGhlIHJlbmRlci5cbiAgICovXG4gIHNjcm9sbE1vbml0b3I6IGZ1bmN0aW9uKGNvbnRhaW5lciwgcmVuZGVyQ2FsbGJhY2spIHtcbiAgICByZW5kZXJDYWxsYmFjaygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUYWtlIGEgY29tcG9uZW50IHRoYXQncyBhbHJlYWR5IG1vdW50ZWQgaW50byB0aGUgRE9NIGFuZCByZXBsYWNlIGl0cyBwcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBwcmV2Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSBhbHJlYWR5IGluIHRoZSBET01cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0cmlnZ2VyZWQgb24gY29tcGxldGlvblxuICAgKi9cbiAgX3VwZGF0ZVJvb3RDb21wb25lbnQ6IGZ1bmN0aW9uKFxuICAgICAgcHJldkNvbXBvbmVudCxcbiAgICAgIG5leHRFbGVtZW50LFxuICAgICAgY29udGFpbmVyLFxuICAgICAgY2FsbGJhY2spIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKG5leHRFbGVtZW50KTtcbiAgICB9XG5cbiAgICBSZWFjdE1vdW50LnNjcm9sbE1vbml0b3IoY29udGFpbmVyLCBmdW5jdGlvbigpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbChwcmV2Q29tcG9uZW50LCBuZXh0RWxlbWVudCk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbChwcmV2Q29tcG9uZW50LCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXSA9XG4gICAgICAgIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNvbXBvbmVudCBpbnRvIHRoZSBpbnN0YW5jZSBtYXAgYW5kIHN0YXJ0cyBzY3JvbGwgdmFsdWVcbiAgICogbW9uaXRvcmluZ1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcmVhY3RSb290IElEIHByZWZpeFxuICAgKi9cbiAgX3JlZ2lzdGVyQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0Q29tcG9uZW50LCBjb250YWluZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgY29udGFpbmVyICYmIChcbiAgICAgICAgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKVxuICAgICAgKSxcbiAgICAgICdfcmVnaXN0ZXJDb21wb25lbnQoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nXG4gICAgKSA6IGludmFyaWFudChjb250YWluZXIgJiYgKFxuICAgICAgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKVxuICAgICkpKTtcblxuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5lbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3JpbmcoKTtcblxuICAgIHZhciByZWFjdFJvb3RJRCA9IFJlYWN0TW91bnQucmVnaXN0ZXJDb250YWluZXIoY29udGFpbmVyKTtcbiAgICBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IG5leHRDb21wb25lbnQ7XG4gICAgcmV0dXJuIHJlYWN0Um9vdElEO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBuZXcgY29tcG9uZW50IGludG8gdGhlIERPTS5cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IGVsZW1lbnQgdG8gcmVuZGVyXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIGNvbnRhaW5lciB0byByZW5kZXIgaW50b1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIGlmIHdlIHNob3VsZCBza2lwIHRoZSBtYXJrdXAgaW5zZXJ0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50XG4gICAqL1xuICBfcmVuZGVyTmV3Um9vdENvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgbmV4dEVsZW1lbnQsXG4gICAgY29udGFpbmVyLFxuICAgIHNob3VsZFJldXNlTWFya3VwXG4gICkge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAgICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuICAgICAgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSAnICtcbiAgICAgICdyZW5kZXIgaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICtcbiAgICAgICdjb21wb25lbnREaWRVcGRhdGUuJ1xuICAgICkgOiBudWxsKTtcblxuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIG51bGwpO1xuICAgIHZhciByZWFjdFJvb3RJRCA9IFJlYWN0TW91bnQuX3JlZ2lzdGVyQ29tcG9uZW50KFxuICAgICAgY29tcG9uZW50SW5zdGFuY2UsXG4gICAgICBjb250YWluZXJcbiAgICApO1xuXG4gICAgLy8gVGhlIGluaXRpYWwgcmVuZGVyIGlzIHN5bmNocm9ub3VzIGJ1dCBhbnkgdXBkYXRlcyB0aGF0IGhhcHBlbiBkdXJpbmdcbiAgICAvLyByZW5kZXJpbmcsIGluIGNvbXBvbmVudFdpbGxNb3VudCBvciBjb21wb25lbnREaWRNb3VudCwgd2lsbCBiZSBiYXRjaGVkXG4gICAgLy8gYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IGJhdGNoaW5nIHN0cmF0ZWd5LlxuXG4gICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKFxuICAgICAgYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUsXG4gICAgICBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgIHJlYWN0Um9vdElELFxuICAgICAgY29udGFpbmVyLFxuICAgICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgICApO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gUmVjb3JkIHRoZSByb290IGVsZW1lbnQgaW4gY2FzZSBpdCBsYXRlciBnZXRzIHRyYW5zcGxhbnRlZC5cbiAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID1cbiAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgQ29tcG9uZW50IGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCksXG4gICAgICAnUmVhY3QucmVuZGVyKCk6IEludmFsaWQgY29tcG9uZW50IGVsZW1lbnQuJXMnLFxuICAgICAgKFxuICAgICAgICB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAnIEluc3RlYWQgb2YgcGFzc2luZyBhbiBlbGVtZW50IHN0cmluZywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgK1xuICAgICAgICAgICdpdCBieSBwYXNzaW5nIGl0IHRvIFJlYWN0LmNyZWF0ZUVsZW1lbnQuJyA6XG4gICAgICAgIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgJyBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjb21wb25lbnQgY2xhc3MsIG1ha2Ugc3VyZSB0byBpbnN0YW50aWF0ZSAnICtcbiAgICAgICAgICAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOlxuICAgICAgICAvLyBDaGVjayBpZiBpdCBxdWFja3MgbGlrZSBhbiBlbGVtZW50XG4gICAgICAgIG5leHRFbGVtZW50ICE9IG51bGwgJiYgbmV4dEVsZW1lbnQucHJvcHMgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgJyBUaGlzIG1heSBiZSBjYXVzZWQgYnkgdW5pbnRlbnRpb25hbGx5IGxvYWRpbmcgdHdvIGluZGVwZW5kZW50ICcgK1xuICAgICAgICAgICdjb3BpZXMgb2YgUmVhY3QuJyA6XG4gICAgICAgICAgJydcbiAgICAgIClcbiAgICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCkpKTtcblxuICAgIHZhciBwcmV2Q29tcG9uZW50ID0gaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXTtcblxuICAgIGlmIChwcmV2Q29tcG9uZW50KSB7XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q29tcG9uZW50Ll9jdXJyZW50RWxlbWVudDtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdE1vdW50Ll91cGRhdGVSb290Q29tcG9uZW50KFxuICAgICAgICAgIHByZXZDb21wb25lbnQsXG4gICAgICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZShjb250YWluZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWFjdFJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGNvbnRhaW5lckhhc1JlYWN0TWFya3VwID1cbiAgICAgIHJlYWN0Um9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5pc1JlbmRlcmVkQnlSZWFjdChyZWFjdFJvb3RFbGVtZW50KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGlmICghY29udGFpbmVySGFzUmVhY3RNYXJrdXAgfHwgcmVhY3RSb290RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnRTaWJsaW5nID0gcmVhY3RSb290RWxlbWVudDtcbiAgICAgICAgd2hpbGUgKHJvb3RFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGlmIChSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KHJvb3RFbGVtZW50U2libGluZykpIHtcbiAgICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ3JlbmRlcigpOiBUYXJnZXQgbm9kZSBoYXMgbWFya3VwIHJlbmRlcmVkIGJ5IFJlYWN0LCBidXQgdGhlcmUgJyArXG4gICAgICAgICAgICAgICdhcmUgdW5yZWxhdGVkIG5vZGVzIGFzIHdlbGwuIFRoaXMgaXMgbW9zdCBjb21tb25seSBjYXVzZWQgYnkgJyArXG4gICAgICAgICAgICAgICd3aGl0ZS1zcGFjZSBpbnNlcnRlZCBhcm91bmQgc2VydmVyLXJlbmRlcmVkIG1hcmt1cC4nXG4gICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByb290RWxlbWVudFNpYmxpbmcgPSByb290RWxlbWVudFNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkUmV1c2VNYXJrdXAgPSBjb250YWluZXJIYXNSZWFjdE1hcmt1cCAmJiAhcHJldkNvbXBvbmVudDtcblxuICAgIHZhciBjb21wb25lbnQgPSBSZWFjdE1vdW50Ll9yZW5kZXJOZXdSb290Q29tcG9uZW50KFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBzaG91bGRSZXVzZU1hcmt1cFxuICAgICkuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwoY29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgIHdpdGggYGluaXRpYWxQcm9wc2AgYW5kXG4gICAqIHJlbmRlcnMgaXQgaW50byB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yIFJlYWN0IGNvbXBvbmVudCBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wcyBJbml0aWFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIGBjb250YWluZXJgLlxuICAgKi9cbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50OiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgcHJvcHMsIGNvbnRhaW5lcikge1xuICAgIHZhciBlbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQoY29uc3RydWN0b3IsIHByb3BzKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5yZW5kZXIoZWxlbWVudCwgY29udGFpbmVyKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgIHdpdGggYGluaXRpYWxQcm9wc2AgYW5kXG4gICAqIHJlbmRlcnMgaXQgaW50byBhIGNvbnRhaW5lciBub2RlIGlkZW50aWZpZWQgYnkgc3VwcGxpZWQgYGlkYC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcG9uZW50Q29uc3RydWN0b3IgUmVhY3QgY29tcG9uZW50IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHMgSW5pdGlhbCBwcm9wcyBvZiB0aGUgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIHRoZSBjb250YWluZXIgbm9kZS5cbiAgICovXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQ6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBwcm9wcywgaWQpIHtcbiAgICB2YXIgZG9tTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZG9tTm9kZSxcbiAgICAgICdUcmllZCB0byBnZXQgZWxlbWVudCB3aXRoIGlkIG9mIFwiJXNcIiBidXQgaXQgaXMgbm90IHByZXNlbnQgb24gdGhlIHBhZ2UuJyxcbiAgICAgIGlkXG4gICAgKSA6IGludmFyaWFudChkb21Ob2RlKSk7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50KGNvbnN0cnVjdG9yLCBwcm9wcywgZG9tTm9kZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNvbnRhaW5lciBub2RlIGludG8gd2hpY2ggUmVhY3QgY29tcG9uZW50cyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKiBUaGlzIGFsc28gY3JlYXRlcyB0aGUgXCJyZWFjdFJvb3RcIiBJRCB0aGF0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGVsZW1lbnRcbiAgICogcmVuZGVyZWQgd2l0aGluLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZWdpc3RlciBhcyBhIGNvbnRhaW5lci5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgXCJyZWFjdFJvb3RcIiBJRCBvZiBlbGVtZW50cyByZW5kZXJlZCB3aXRoaW4uXG4gICAqL1xuICByZWdpc3RlckNvbnRhaW5lcjogZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtcbiAgICBpZiAocmVhY3RSb290SUQpIHtcbiAgICAgIC8vIElmIG9uZSBleGlzdHMsIG1ha2Ugc3VyZSBpdCBpcyBhIHZhbGlkIFwicmVhY3RSb290XCIgSUQuXG4gICAgICByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChyZWFjdFJvb3RJRCk7XG4gICAgfVxuICAgIGlmICghcmVhY3RSb290SUQpIHtcbiAgICAgIC8vIE5vIHZhbGlkIFwicmVhY3RSb290XCIgSUQgZm91bmQsIGNyZWF0ZSBvbmUuXG4gICAgICByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgfVxuICAgIGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lcjtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGFuZCBkZXN0cm95cyB0aGUgUmVhY3QgY29tcG9uZW50IHJlbmRlcmVkIGluIHRoZSBgY29udGFpbmVyYC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgY29udGFpbmluZyBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIGNvbXBvbmVudCB3YXMgZm91bmQgaW4gYW5kIHVubW91bnRlZCBmcm9tXG4gICAqICAgICAgICAgICAgICAgICAgIGBjb250YWluZXJgXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChTdHJpY3RseSBzcGVha2luZywgdW5tb3VudGluZyB3b24ndCBjYXVzZSBhXG4gICAgLy8gcmVuZGVyIGJ1dCB3ZSBzdGlsbCBkb24ndCBleHBlY3QgdG8gYmUgaW4gYSByZW5kZXIgY2FsbCBoZXJlLilcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAgICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgJyArXG4gICAgICAncHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyAnICtcbiAgICAgICdub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuICAgICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGNvbnRhaW5lciAmJiAoXG4gICAgICAgIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSlcbiAgICAgICksXG4gICAgICAndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LidcbiAgICApIDogaW52YXJpYW50KGNvbnRhaW5lciAmJiAoXG4gICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgKSkpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtcbiAgICB2YXIgY29tcG9uZW50ID0gaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50RnJvbU5vZGUoY29tcG9uZW50LCBjb250YWluZXIpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBkZWxldGUgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGRlbGV0ZSByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGEgY29tcG9uZW50IGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5zdGFuY2UgUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byB1bm1vdW50IGZyb20uXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7UmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlfVxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudEZyb21Ob2RlOiBmdW5jdGlvbihpbnN0YW5jZSwgY29udGFpbmVyKSB7XG4gICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQoaW5zdGFuY2UpO1xuXG4gICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbXB0eWluZy1hLW5vZGVcbiAgICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRmluZHMgdGhlIGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIFJlYWN0IGNvbXBvbmVudCB0byB3aGljaCB0aGVcbiAgICogc3VwcGxpZWQgRE9NIGBpZGAgYmVsb25ncy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgYGlkYC5cbiAgICovXG4gIGZpbmRSZWFjdENvbnRhaW5lckZvcklEOiBmdW5jdGlvbihpZCkge1xuICAgIHZhciByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChpZCk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgICAgaWYgKHJvb3RFbGVtZW50ICYmIHJvb3RFbGVtZW50LnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuICAgICAgICAgIC8vIGZpbmRSZWFjdENvbnRhaW5lckZvcklEICh0aGlzIGZ1bmN0aW9uKS5cbiAgICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQsXG4gICAgICAgICAgJ1JlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBJRCBkaWZmZXJlZCBmcm9tIHJlYWN0Um9vdElELidcbiAgICAgICAgKSA6IGludmFyaWFudCgvLyBDYWxsIGludGVybmFsR2V0SUQgaGVyZSBiZWNhdXNlIGdldElEIGNhbGxzIGlzVmFsaWQgd2hpY2ggY2FsbHNcbiAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQpKTtcblxuICAgICAgICB2YXIgY29udGFpbmVyQ2hpbGQgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGNvbnRhaW5lckNoaWxkICYmXG4gICAgICAgICAgICByZWFjdFJvb3RJRCA9PT0gaW50ZXJuYWxHZXRJRChjb250YWluZXJDaGlsZCkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgY29udGFpbmVyIGhhcyBhIG5ldyBjaGlsZCB3aXRoIHRoZSBzYW1lIElEIGFzIHRoZSBvbGRcbiAgICAgICAgICAvLyByb290IGVsZW1lbnQsIHRoZW4gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gaXNcbiAgICAgICAgICAvLyBqdXN0IHN0YWxlIGFuZCBuZWVkcyB0byBiZSB1cGRhdGVkLiBUaGUgY2FzZSB0aGF0IGRlc2VydmVzIGFcbiAgICAgICAgICAvLyB3YXJuaW5nIGlzIHdoZW4gdGhlIGNvbnRhaW5lciBpcyBlbXB0eS5cbiAgICAgICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lckNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBpdHMgb3JpZ2luYWwgJyArXG4gICAgICAgICAgICAnY29udGFpbmVyLiBOZXcgY29udGFpbmVyOicsIHJvb3RFbGVtZW50LnBhcmVudE5vZGVcbiAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IFJlYWN0IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgYSBET00gbm9kZSBpbiB0aGUgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBSb290IERPTSBub2RlIG9mIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqL1xuICBmaW5kUmVhY3ROb2RlQnlJRDogZnVuY3Rpb24oaWQpIHtcbiAgICB2YXIgcmVhY3RSb290ID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuZmluZENvbXBvbmVudFJvb3QocmVhY3RSb290LCBpZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIGBub2RlYCBpcyByZW5kZXJlZCBieSBSZWFjdC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBub2RlIERPTSBFbGVtZW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gRWxlbWVudCBhcHBlYXJzIHRvIGJlIHJlbmRlcmVkIGJ5IFJlYWN0LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGlzUmVuZGVyZWRCeVJlYWN0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgIC8vIE5vdCBhIERPTUVsZW1lbnQsIHRoZXJlZm9yZSBub3QgYSBSZWFjdCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRChub2RlKTtcbiAgICByZXR1cm4gaWQgPyBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiA6IGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdXAgdGhlIGFuY2VzdG9ycyBvZiB0aGUgc3VwcGxpZWQgbm9kZSB0byBmaW5kIGEgbm9kZSB0aGF0IGlzIGFcbiAgICogRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG5vZGVcbiAgICogQHJldHVybiB7P0RPTUV2ZW50VGFyZ2V0fVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldEZpcnN0UmVhY3RET006IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgY3VycmVudCA9IG5vZGU7XG4gICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnROb2RlICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoUmVhY3RNb3VudC5pc1JlbmRlcmVkQnlSZWFjdChjdXJyZW50KSkge1xuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYCBpbnNpZGUgb2YgdGhlIHN1cHBsaWVkXG4gICAqIGBhbmNlc3Rvck5vZGVgLiAgRXhwbG9pdHMgdGhlIElEIG5hbWluZyBzY2hlbWUgdG8gcGVyZm9ybSB0aGUgc2VhcmNoXG4gICAqIHF1aWNrbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IGFuY2VzdG9yTm9kZSBTZWFyY2ggZnJvbSB0aGlzIHJvb3QuXG4gICAqIEBwYXJhcm0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBmaW5kQ29tcG9uZW50Um9vdDogZnVuY3Rpb24oYW5jZXN0b3JOb2RlLCB0YXJnZXRJRCkge1xuICAgIHZhciBmaXJzdENoaWxkcmVuID0gZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5O1xuICAgIHZhciBjaGlsZEluZGV4ID0gMDtcblxuICAgIHZhciBkZWVwZXN0QW5jZXN0b3IgPSBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB8fCBhbmNlc3Rvck5vZGU7XG5cbiAgICBmaXJzdENoaWxkcmVuWzBdID0gZGVlcGVzdEFuY2VzdG9yLmZpcnN0Q2hpbGQ7XG4gICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSAxO1xuXG4gICAgd2hpbGUgKGNoaWxkSW5kZXggPCBmaXJzdENoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkID0gZmlyc3RDaGlsZHJlbltjaGlsZEluZGV4KytdO1xuICAgICAgdmFyIHRhcmdldENoaWxkO1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGNoaWxkSUQgPSBSZWFjdE1vdW50LmdldElEKGNoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkSUQpIHtcbiAgICAgICAgICAvLyBFdmVuIGlmIHdlIGZpbmQgdGhlIG5vZGUgd2UncmUgbG9va2luZyBmb3IsIHdlIGZpbmlzaCBsb29waW5nXG4gICAgICAgICAgLy8gdGhyb3VnaCBpdHMgc2libGluZ3MgdG8gZW5zdXJlIHRoZXkncmUgY2FjaGVkIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZVxuICAgICAgICAgIC8vIHRvIHJldmlzaXQgdGhpcyBub2RlIGFnYWluLiBPdGhlcndpc2UsIHdlIG1ha2Ugbl4yIGNhbGxzIHRvIGdldElEXG4gICAgICAgICAgLy8gd2hlbiB2aXNpdGluZyB0aGUgbWFueSBjaGlsZHJlbiBvZiBhIHNpbmdsZSBub2RlIGluIG9yZGVyLlxuXG4gICAgICAgICAgaWYgKHRhcmdldElEID09PSBjaGlsZElEKSB7XG4gICAgICAgICAgICB0YXJnZXRDaGlsZCA9IGNoaWxkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoUmVhY3RJbnN0YW5jZUhhbmRsZXMuaXNBbmNlc3RvcklET2YoY2hpbGRJRCwgdGFyZ2V0SUQpKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmaW5kIGEgY2hpbGQgd2hvc2UgSUQgaXMgYW4gYW5jZXN0b3Igb2YgdGhlIGdpdmVuIElELFxuICAgICAgICAgICAgLy8gdGhlbiB3ZSBjYW4gYmUgc3VyZSB0aGF0IHdlIG9ubHkgd2FudCB0byBzZWFyY2ggdGhlIHN1YnRyZWVcbiAgICAgICAgICAgIC8vIHJvb3RlZCBhdCB0aGlzIGNoaWxkLCBzbyB3ZSBjYW4gdGhyb3cgb3V0IHRoZSByZXN0IG9mIHRoZVxuICAgICAgICAgICAgLy8gc2VhcmNoIHN0YXRlLlxuICAgICAgICAgICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSBjaGlsZEluZGV4ID0gMDtcbiAgICAgICAgICAgIGZpcnN0Q2hpbGRyZW4ucHVzaChjaGlsZC5maXJzdENoaWxkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNoaWxkIGhhZCBubyBJRCwgdGhlbiB0aGVyZSdzIGEgY2hhbmNlIHRoYXQgaXQgd2FzXG4gICAgICAgICAgLy8gaW5qZWN0ZWQgYXV0b21hdGljYWxseSBieSB0aGUgYnJvd3NlciwgYXMgd2hlbiBhIGA8dGFibGU+YFxuICAgICAgICAgIC8vIGVsZW1lbnQgc3Byb3V0cyBhbiBleHRyYSBgPHRib2R5PmAgY2hpbGQgYXMgYSBzaWRlIGVmZmVjdCBvZlxuICAgICAgICAgIC8vIGAuaW5uZXJIVE1MYCBwYXJzaW5nLiBPcHRpbWlzdGljYWxseSBjb250aW51ZSBkb3duIHRoaXNcbiAgICAgICAgICAvLyBicmFuY2gsIGJ1dCBub3QgYmVmb3JlIGV4YW1pbmluZyB0aGUgb3RoZXIgc2libGluZ3MuXG4gICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldENoaWxkKSB7XG4gICAgICAgIC8vIEVtcHR5aW5nIGZpcnN0Q2hpbGRyZW4vZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5IGlzXG4gICAgICAgIC8vIG5vdCBuZWNlc3NhcnkgZm9yIGNvcnJlY3RuZXNzLCBidXQgaXQgaGVscHMgdGhlIEdDIHJlY2xhaW1cbiAgICAgICAgLy8gYW55IG5vZGVzIHRoYXQgd2VyZSBsZWZ0IGF0IHRoZSBlbmQgb2YgdGhlIHNlYXJjaC5cbiAgICAgICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSAwO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXRDaGlsZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnZmluZENvbXBvbmVudFJvb3QoLi4uLCAlcyk6IFVuYWJsZSB0byBmaW5kIGVsZW1lbnQuIFRoaXMgcHJvYmFibHkgJyArXG4gICAgICAnbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSBicm93c2VyKSwgJyArXG4gICAgICAndXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsIG5lc3RpbmcgdGFncyAnICtcbiAgICAgICdsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgaW4gYW4gPHN2Zz4gJyArXG4gICAgICAncGFyZW50LiAnICtcbiAgICAgICdUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgd2l0aCBSZWFjdCBJRCBgJXNgLicsXG4gICAgICB0YXJnZXRJRCxcbiAgICAgIFJlYWN0TW91bnQuZ2V0SUQoYW5jZXN0b3JOb2RlKVxuICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgfSxcblxuICBfbW91bnRJbWFnZUludG9Ob2RlOiBmdW5jdGlvbihtYXJrdXAsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgY29udGFpbmVyICYmIChcbiAgICAgICAgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKVxuICAgICAgKSxcbiAgICAgICdtb3VudENvbXBvbmVudEludG9Ob2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IHZhbGlkLidcbiAgICApIDogaW52YXJpYW50KGNvbnRhaW5lciAmJiAoXG4gICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgKSkpO1xuXG4gICAgaWYgKHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgIGlmIChSZWFjdE1hcmt1cENoZWNrc3VtLmNhblJldXNlTWFya3VwKG1hcmt1cCwgcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGVja3N1bSA9IHJvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShcbiAgICAgICAgICBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRVxuICAgICAgICApO1xuICAgICAgICByb290RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuXG4gICAgICAgIHZhciByb290TWFya3VwID0gcm9vdEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICByb290RWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUsXG4gICAgICAgICAgY2hlY2tzdW1cbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgZGlmZkluZGV4ID0gZmlyc3REaWZmZXJlbmNlSW5kZXgobWFya3VwLCByb290TWFya3VwKTtcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAnIChjbGllbnQpICcgK1xuICAgICAgICAgIG1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKSArXG4gICAgICAgICAgJ1xcbiAoc2VydmVyKSAnICsgcm9vdE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKTtcblxuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcbiAgICAgICAgICAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgdXNpbmcgJyArXG4gICAgICAgICAgJ3NlcnZlciByZW5kZXJpbmcgYnV0IHRoZSBjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyB1c3VhbGx5ICcgK1xuICAgICAgICAgICdtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gJyArXG4gICAgICAgICAgJ3RoZSBjbGllbnQgZnJvbSB0aGUgb25lIG9uIHRoZSBzZXJ2ZXIsIG9yIHlvdXIgcmVuZGVyKCkgJyArXG4gICAgICAgICAgJ21ldGhvZHMgYXJlIGltcHVyZS4gUmVhY3QgY2Fubm90IGhhbmRsZSB0aGlzIGNhc2UgZHVlIHRvICcgK1xuICAgICAgICAgICdjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSAnICtcbiAgICAgICAgICAnc2hvdWxkIGxvb2sgZm9yIGVudmlyb25tZW50IGRlcGVuZGVudCBjb2RlIGluIHlvdXIgY29tcG9uZW50cyAnICtcbiAgICAgICAgICAnYW5kIGVuc3VyZSB0aGUgcHJvcHMgYXJlIHRoZSBzYW1lIGNsaWVudCBhbmQgc2VydmVyIHNpZGU6XFxuJXMnLFxuICAgICAgICAgIGRpZmZlcmVuY2VcbiAgICAgICAgKSA6IGludmFyaWFudChjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpKTtcblxuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICdSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgJyArXG4gICAgICAgICAgICAnY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgeW91IGFyZSAnICtcbiAgICAgICAgICAgICd1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGFuZCB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgJyArXG4gICAgICAgICAgICAnc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkICcgK1xuICAgICAgICAgICAgJ25ldyBtYXJrdXAgdG8gY29tcGVuc2F0ZSB3aGljaCB3b3JrcyBidXQgeW91IGhhdmUgbG9zdCBtYW55ICcgK1xuICAgICAgICAgICAgJ29mIHRoZSBiZW5lZml0cyBvZiBzZXJ2ZXIgcmVuZGVyaW5nLiBJbnN0ZWFkLCBmaWd1cmUgb3V0ICcgK1xuICAgICAgICAgICAgJ3doeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCAnICtcbiAgICAgICAgICAgICdvciBzZXJ2ZXI6XFxuJXMnLFxuICAgICAgICAgICAgZGlmZmVyZW5jZVxuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUsXG4gICAgICAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgYnV0ICcgK1xuICAgICAgICAneW91IGRpZG5cXCd0IHVzZSBzZXJ2ZXIgcmVuZGVyaW5nLiBXZSBjYW5cXCd0IGRvIHRoaXMgJyArXG4gICAgICAgICd3aXRob3V0IHVzaW5nIHNlcnZlciByZW5kZXJpbmcgZHVlIHRvIGNyb3NzLWJyb3dzZXIgcXVpcmtzLiAnICtcbiAgICAgICAgJ1NlZSBSZWFjdC5yZW5kZXJUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLidcbiAgICApIDogaW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkpO1xuXG4gICAgc2V0SW5uZXJIVE1MKGNvbnRhaW5lciwgbWFya3VwKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVhY3QgSUQgdXRpbGl0aWVzLlxuICAgKi9cblxuICBnZXRSZWFjdFJvb3RJRDogZ2V0UmVhY3RSb290SUQsXG5cbiAgZ2V0SUQ6IGdldElELFxuXG4gIHNldElEOiBzZXRJRCxcblxuICBnZXROb2RlOiBnZXROb2RlLFxuXG4gIGdldE5vZGVGcm9tSW5zdGFuY2U6IGdldE5vZGVGcm9tSW5zdGFuY2UsXG5cbiAgcHVyZ2VJRDogcHVyZ2VJRFxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0TW91bnQsICdSZWFjdE1vdW50Jywge1xuICBfcmVuZGVyTmV3Um9vdENvbXBvbmVudDogJ19yZW5kZXJOZXdSb290Q29tcG9uZW50JyxcbiAgX21vdW50SW1hZ2VJbnRvTm9kZTogJ19tb3VudEltYWdlSW50b05vZGUnXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCIpO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZShcIi4vUmVhY3RSZWNvbmNpbGVyXCIpO1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0gcmVxdWlyZShcIi4vUmVhY3RDaGlsZFJlY29uY2lsZXJcIik7XG5cbi8qKlxuICogVXBkYXRpbmcgY2hpbGRyZW4gb2YgYSBjb21wb25lbnQgbWF5IHRyaWdnZXIgcmVjdXJzaXZlIHVwZGF0ZXMuIFRoZSBkZXB0aCBpc1xuICogdXNlZCB0byBiYXRjaCByZWN1cnNpdmUgdXBkYXRlcyB0byByZW5kZXIgbWFya3VwIG1vcmUgZWZmaWNpZW50bHkuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1cGRhdGVEZXB0aCA9IDA7XG5cbi8qKlxuICogUXVldWUgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0cy5cbiAqXG4gKiBFYWNoIG9iamVjdCBoYXMgYSBgdHlwZWAgcHJvcGVydHkgdGhhdCBpcyBpbiBgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNgLlxuICpcbiAqIEB0eXBlIHthcnJheTxvYmplY3Q+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZVF1ZXVlID0gW107XG5cbi8qKlxuICogUXVldWUgb2YgbWFya3VwIHRvIGJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHthcnJheTxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG1hcmt1cFF1ZXVlID0gW107XG5cbi8qKlxuICogRW5xdWV1ZXMgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVNYXJrdXAocGFyZW50SUQsIG1hcmt1cCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG1hcmt1cFF1ZXVlLnB1c2gobWFya3VwKSAtIDEsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIHRvSW5kZXg6IHRvSW5kZXhcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgbW92aW5nIGFuIGV4aXN0aW5nIGVsZW1lbnQgdG8gYW5vdGhlciBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFNvdXJjZSBpbmRleCBvZiB0aGUgZXhpc3RpbmcgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZU1vdmUocGFyZW50SUQsIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVJlbW92ZShwYXJlbnRJRCwgZnJvbUluZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVGV4dENvbnRlbnQocGFyZW50SUQsIHRleHRDb250ZW50KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIHRleHRDb250ZW50OiB0ZXh0Q29udGVudCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzZXMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKCkge1xuICBpZiAodXBkYXRlUXVldWUubGVuZ3RoKSB7XG4gICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzKFxuICAgICAgdXBkYXRlUXVldWUsXG4gICAgICBtYXJrdXBRdWV1ZVxuICAgICk7XG4gICAgY2xlYXJRdWV1ZSgpO1xuICB9XG59XG5cbi8qKlxuICogQ2xlYXJzIGFueSBlbnF1ZXVlZCB1cGRhdGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyUXVldWUoKSB7XG4gIHVwZGF0ZVF1ZXVlLmxlbmd0aCA9IDA7XG4gIG1hcmt1cFF1ZXVlLmxlbmd0aCA9IDA7XG59XG5cbi8qKlxuICogUmVhY3RNdWx0aUNoaWxkIGFyZSBjYXBhYmxlIG9mIHJlY29uY2lsaW5nIG11bHRpcGxlIGNoaWxkcmVuLlxuICpcbiAqIEBjbGFzcyBSZWFjdE11bHRpQ2hpbGRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkID0ge1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3IgY29tcG9uZW50cyB0aGF0IG11c3QgcmVjb25jaWxlIG11bHRpcGxlXG4gICAqIGNoaWxkcmVuLiBUaGlzIGlzIHVzZWQgYnkgYFJlYWN0RE9NQ29tcG9uZW50YCB0byBtb3VudCwgdXBkYXRlLCBhbmRcbiAgICogdW5tb3VudCBjaGlsZCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAbGVuZHMge1JlYWN0TXVsdGlDaGlsZC5wcm90b3R5cGV9XG4gICAqL1xuICBNaXhpbjoge1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICAgKiBvZiBgUmVhY3RET01Db21wb25lbnRgLCBhIG1vdW50IGltYWdlIGlzIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHJldHVybiB7YXJyYXl9IEFuIGFycmF5IG9mIG1vdW50ZWQgcmVwcmVzZW50YXRpb25zLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihcbiAgICAgICAgbmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICAgICApO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgICAgICB2YXIgcm9vdElEID0gdGhpcy5fcm9vdE5vZGVJRCArIG5hbWU7XG4gICAgICAgICAgdmFyIG1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoXG4gICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgIHJvb3RJRCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgICBtb3VudEltYWdlcy5wdXNoKG1vdW50SW1hZ2UpO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtb3VudEltYWdlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW55IHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5leHRDb250ZW50IFN0cmluZyBvZiBjb250ZW50LlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZVRleHRDb250ZW50OiBmdW5jdGlvbihuZXh0Q29udGVudCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cbiAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbik7XG4gICAgICAgIC8vIFRPRE86IFRoZSBzZXRUZXh0Q29udGVudCBvcGVyYXRpb24gc2hvdWxkIGJlIGVub3VnaFxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGRyZW5bbmFtZV0sIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgbmV3IHRleHQgY29udGVudC5cbiAgICAgICAgdGhpcy5zZXRUZXh0Q29udGVudChuZXh0Q29udGVudCk7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB1cGRhdGVEZXB0aC0tO1xuICAgICAgICBpZiAoIXVwZGF0ZURlcHRoKSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjbGVhclF1ZXVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIG5ldyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW1wcm92ZSBwZXJmb3JtYW5jZSBieSBpc29sYXRpbmcgdGhpcyBob3QgY29kZSBwYXRoIGZyb20gdGhlIHRyeS9jYXRjaFxuICAgICAqIGJsb2NrIGluIGB1cGRhdGVDaGlsZHJlbmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGZpbmFsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4oXG4gICAgICAgIHByZXZDaGlsZHJlbiwgbmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dFxuICAgICAgKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW47XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lO1xuICAgICAgLy8gYG5leHRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gYG5leHRDaGlsZHJlbmAsIGJ1dFxuICAgICAgLy8gYGxhc3RJbmRleGAgd2lsbCBiZSB0aGUgbGFzdCBpbmRleCB2aXNpdGVkIGluIGBwcmV2Q2hpbGRyZW5gLlxuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKHByZXZDaGlsZCA9PT0gbmV4dENoaWxkKSB7XG4gICAgICAgICAgdGhpcy5tb3ZlQ2hpbGQocHJldkNoaWxkLCBuZXh0SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgYGxhc3RJbmRleGAgYmVmb3JlIGBfbW91bnRJbmRleGAgZ2V0cyB1bnNldCBieSB1bm1vdW50aW5nLlxuICAgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZCwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRoZSBjaGlsZCBtdXN0IGJlIGluc3RhbnRpYXRlZCBiZWZvcmUgaXQncyBtb3VudGVkLlxuICAgICAgICAgIHRoaXMuX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4KFxuICAgICAgICAgICAgbmV4dENoaWxkLCBuYW1lLCBuZXh0SW5kZXgsIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGRyZW5bbmFtZV0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZW5kZXJlZENoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihyZW5kZXJlZENoaWxkcmVuKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBhIGNoaWxkIGNvbXBvbmVudCB0byB0aGUgc3VwcGxpZWQgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW92ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEluZGV4IExhc3QgaW5kZXggdmlzaXRlZCBvZiB0aGUgc2libGluZ3Mgb2YgYGNoaWxkYC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbW92ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCwgdG9JbmRleCwgbGFzdEluZGV4KSB7XG4gICAgICAvLyBJZiB0aGUgaW5kZXggb2YgYGNoaWxkYCBpcyBsZXNzIHRoYW4gYGxhc3RJbmRleGAsIHRoZW4gaXQgbmVlZHMgdG9cbiAgICAgIC8vIGJlIG1vdmVkLiBPdGhlcndpc2UsIHdlIGRvIG5vdCBuZWVkIHRvIG1vdmUgaXQgYmVjYXVzZSBhIGNoaWxkIHdpbGwgYmVcbiAgICAgIC8vIGluc2VydGVkIG9yIG1vdmVkIGJlZm9yZSBgY2hpbGRgLlxuICAgICAgaWYgKGNoaWxkLl9tb3VudEluZGV4IDwgbGFzdEluZGV4KSB7XG4gICAgICAgIGVucXVldWVNb3ZlKHRoaXMuX3Jvb3ROb2RlSUQsIGNoaWxkLl9tb3VudEluZGV4LCB0b0luZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vdW50SW1hZ2UgTWFya3VwIHRvIGluc2VydC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBtb3VudEltYWdlKSB7XG4gICAgICBlbnF1ZXVlTWFya3VwKHRoaXMuX3Jvb3ROb2RlSUQsIG1vdW50SW1hZ2UsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENoaWxkIHRvIHJlbW92ZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBlbnF1ZXVlUmVtb3ZlKHRoaXMuX3Jvb3ROb2RlSUQsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGlzIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQgVGV4dCBjb250ZW50IHRvIHNldC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc2V0VGV4dENvbnRlbnQ6IGZ1bmN0aW9uKHRleHRDb250ZW50KSB7XG4gICAgICBlbnF1ZXVlVGV4dENvbnRlbnQodGhpcy5fcm9vdE5vZGVJRCwgdGV4dENvbnRlbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3VudHMgYSBjaGlsZCB3aXRoIHRoZSBzdXBwbGllZCBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNoaWxkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tb3VudENoaWxkQnlOYW1lQXRJbmRleDogZnVuY3Rpb24oXG4gICAgICBjaGlsZCxcbiAgICAgIG5hbWUsXG4gICAgICBpbmRleCxcbiAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgY29udGV4dCkge1xuICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG4gICAgICB2YXIgcm9vdElEID0gdGhpcy5fcm9vdE5vZGVJRCArIG5hbWU7XG4gICAgICB2YXIgbW91bnRJbWFnZSA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgbW91bnRJbWFnZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGEgcmVuZGVyZWQgY2hpbGQgYnkgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byB1bm1vdW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNoaWxkIGluIGB0aGlzLl9yZW5kZXJlZENoaWxkcmVuYC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91bm1vdW50Q2hpbGRCeU5hbWU6IGZ1bmN0aW9uKGNoaWxkLCBuYW1lKSB7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxuLyoqXG4gKiBXaGVuIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYXJlIHVwZGF0ZWQsIGEgc2VyaWVzIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9uXG4gKiBvYmplY3RzIGFyZSBjcmVhdGVkIGluIG9yZGVyIHRvIGJhdGNoIGFuZCBzZXJpYWxpemUgdGhlIHJlcXVpcmVkIGNoYW5nZXMuXG4gKlxuICogRW51bWVyYXRlcyBhbGwgdGhlIHBvc3NpYmxlIHR5cGVzIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0ga2V5TWlycm9yKHtcbiAgSU5TRVJUX01BUktVUDogbnVsbCxcbiAgTU9WRV9FWElTVElORzogbnVsbCxcbiAgUkVNT1ZFX05PREU6IG51bGwsXG4gIFRFWFRfQ09OVEVOVDogbnVsbFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3ROYXRpdmVDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyA9IG51bGw7XG52YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbi8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2Ygd3JhcHBlciBjbGFzc2VzIGFyb3VuZCBuYXRpdmUgdGFnc1xudmFyIHRhZ1RvQ29tcG9uZW50Q2xhc3MgPSB7fTtcbnZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIC8vIFRoaXMgYWNjZXB0cyBhIGNsYXNzIHRoYXQgcmVjZWl2ZXMgdGhlIHRhZyBzdHJpbmcuIFRoaXMgaXMgYSBjYXRjaCBhbGxcbiAgLy8gdGhhdCBjYW4gcmVuZGVyIGFueSBraW5kIG9mIHRhZy5cbiAgaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSB0ZXh0IGNvbXBvbmVudCBjbGFzcyB0aGF0IHRha2VzIHRoZSB0ZXh0IHN0cmluZyB0byBiZVxuICAvLyByZW5kZXJlZCBhcyBwcm9wcy5cbiAgaW5qZWN0VGV4dENvbXBvbmVudENsYXNzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgIHRleHRDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSBrZXllZCBvYmplY3Qgd2l0aCBjbGFzc2VzIGFzIHZhbHVlcy4gRWFjaCBrZXkgcmVwcmVzZW50cyBhXG4gIC8vIHRhZy4gVGhhdCBwYXJ0aWN1bGFyIHRhZyB3aWxsIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgdGhlIGdlbmVyaWMgb25lLlxuICBpbmplY3RDb21wb25lbnRDbGFzc2VzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzc2VzKSB7XG4gICAgYXNzaWduKHRhZ1RvQ29tcG9uZW50Q2xhc3MsIGNvbXBvbmVudENsYXNzZXMpO1xuICB9LFxuICAvLyBUZW1wb3JhcnkgaGFjayBzaW5jZSB3ZSBleHBlY3QgRE9NIHJlZnMgdG8gYmVoYXZlIGxpa2UgY29tcG9zaXRlcyxcbiAgLy8gZm9yIHRoaXMgcmVsZWFzZS5cbiAgaW5qZWN0QXV0b1dyYXBwZXI6IGZ1bmN0aW9uKHdyYXBwZXJGYWN0b3J5KSB7XG4gICAgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gd3JhcHBlckZhY3Rvcnk7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGEgY29tcG9zaXRlIGNvbXBvbmVudCB3cmFwcGVyIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgdGFnIGZvciB3aGljaCB0byBnZXQgdGhlIGNsYXNzLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBSZWFjdCBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICB9XG4gIHZhciB0YWcgPSBlbGVtZW50LnR5cGU7XG4gIHZhciBjb21wb25lbnRDbGFzcyA9IHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXTtcbiAgaWYgKGNvbXBvbmVudENsYXNzID09IG51bGwpIHtcbiAgICB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ10gPSBjb21wb25lbnRDbGFzcyA9IGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0YWcpO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRDbGFzcztcbn1cblxuLyoqXG4gKiBHZXQgYSBuYXRpdmUgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzLFxuICAgICdUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlcycsXG4gICAgZWxlbWVudC50eXBlXG4gICkgOiBpbnZhcmlhbnQoZ2VuZXJpY0NvbXBvbmVudENsYXNzKSk7XG4gIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKGVsZW1lbnQudHlwZSwgZWxlbWVudC5wcm9wcyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdFRleHR9IHRleHRcbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUZvclRleHQodGV4dCkge1xuICByZXR1cm4gbmV3IHRleHRDb21wb25lbnRDbGFzcyh0ZXh0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVGV4dENvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudCBpbnN0YW5jZW9mIHRleHRDb21wb25lbnRDbGFzcztcbn1cblxudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0ge1xuICBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQ6IGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCxcbiAgY3JlYXRlSW50ZXJuYWxDb21wb25lbnQ6IGNyZWF0ZUludGVybmFsQ29tcG9uZW50LFxuICBjcmVhdGVJbnN0YW5jZUZvclRleHQ6IGNyZWF0ZUluc3RhbmNlRm9yVGV4dCxcbiAgaXNUZXh0Q29tcG9uZW50OiBpc1RleHRDb21wb25lbnQsXG4gIGluamVjdGlvbjogUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVDb21wb25lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RPd25lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBSZWFjdE93bmVycyBhcmUgY2FwYWJsZSBvZiBzdG9yaW5nIHJlZmVyZW5jZXMgdG8gb3duZWQgY29tcG9uZW50cy5cbiAqXG4gKiBBbGwgY29tcG9uZW50cyBhcmUgY2FwYWJsZSBvZiAvL2JlaW5nLy8gcmVmZXJlbmNlZCBieSBvd25lciBjb21wb25lbnRzLCBidXRcbiAqIG9ubHkgUmVhY3RPd25lciBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vcmVmZXJlbmNpbmcvLyBvd25lZCBjb21wb25lbnRzLlxuICogVGhlIG5hbWVkIHJlZmVyZW5jZSBpcyBrbm93biBhcyBhIFwicmVmXCIuXG4gKlxuICogUmVmcyBhcmUgYXZhaWxhYmxlIHdoZW4gbW91bnRlZCBhbmQgdXBkYXRlZCBkdXJpbmcgcmVjb25jaWxpYXRpb24uXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiAoXG4gKiAgICAgICAgIDxkaXYgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30+XG4gKiAgICAgICAgICAgPEN1c3RvbUNvbXBvbmVudCByZWY9XCJjdXN0b21cIiAvPlxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgICk7XG4gKiAgICAgfSxcbiAqICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24oKSB7XG4gKiAgICAgICB0aGlzLnJlZnMuY3VzdG9tLmhhbmRsZUNsaWNrKCk7XG4gKiAgICAgfSxcbiAqICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gKiAgICAgICB0aGlzLnJlZnMuY3VzdG9tLmluaXRpYWxpemUoKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFJlZnMgc2hvdWxkIHJhcmVseSBiZSB1c2VkLiBXaGVuIHJlZnMgYXJlIHVzZWQsIHRoZXkgc2hvdWxkIG9ubHkgYmUgZG9uZSB0b1xuICogY29udHJvbCBkYXRhIHRoYXQgaXMgbm90IGhhbmRsZWQgYnkgUmVhY3QncyBkYXRhIGZsb3cuXG4gKlxuICogQGNsYXNzIFJlYWN0T3duZXJcbiAqL1xudmFyIFJlYWN0T3duZXIgPSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBvd25lci5cbiAgICogQGZpbmFsXG4gICAqL1xuICBpc1ZhbGlkT3duZXI6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiAhIShcbiAgICAgIChvYmplY3QgJiZcbiAgICAgIHR5cGVvZiBvYmplY3QuYXR0YWNoUmVmID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmplY3QuZGV0YWNoUmVmID09PSAnZnVuY3Rpb24nKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjb21wb25lbnQgYnkgcmVmIHRvIGFuIG93bmVyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byByZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBieSB3aGljaCB0byByZWZlciB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge1JlYWN0T3duZXJ9IG93bmVyIENvbXBvbmVudCBvbiB3aGljaCB0byByZWNvcmQgdGhlIHJlZi5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYWRkQ29tcG9uZW50QXNSZWZUbzogZnVuY3Rpb24oY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSxcbiAgICAgICdhZGRDb21wb25lbnRBc1JlZlRvKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFRoaXMgJyArXG4gICAgICAndXN1YWxseSBtZWFucyB0aGF0IHlvdVxcJ3JlIHRyeWluZyB0byBhZGQgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCAnICtcbiAgICAgICdkb2VzblxcJ3QgaGF2ZSBhbiBvd25lciAodGhhdCBpcywgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBvZiBhbm90aGVyICcgK1xuICAgICAgJ2NvbXBvbmVudFxcJ3MgYHJlbmRlcmAgbWV0aG9kKS4gVHJ5IHJlbmRlcmluZyB0aGlzIGNvbXBvbmVudCBpbnNpZGUgb2YgJyArXG4gICAgICAnYSBuZXcgdG9wLWxldmVsIGNvbXBvbmVudCB3aGljaCB3aWxsIGhvbGQgdGhlIHJlZi4nXG4gICAgKSA6IGludmFyaWFudChSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lcikpKTtcbiAgICBvd25lci5hdHRhY2hSZWYocmVmLCBjb21wb25lbnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgY29tcG9uZW50IGJ5IHJlZiBmcm9tIGFuIG93bmVyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byBkZXJlZmVyZW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIG9mIHRoZSByZWYgdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0ge1JlYWN0T3duZXJ9IG93bmVyIENvbXBvbmVudCBvbiB3aGljaCB0aGUgcmVmIGlzIHJlY29yZGVkLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZW1vdmVDb21wb25lbnRBc1JlZkZyb206IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXG4gICAgICAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFRoaXMgJyArXG4gICAgICAndXN1YWxseSBtZWFucyB0aGF0IHlvdVxcJ3JlIHRyeWluZyB0byByZW1vdmUgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCAnICtcbiAgICAgICdkb2VzblxcJ3QgaGF2ZSBhbiBvd25lciAodGhhdCBpcywgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBvZiBhbm90aGVyICcgK1xuICAgICAgJ2NvbXBvbmVudFxcJ3MgYHJlbmRlcmAgbWV0aG9kKS4gVHJ5IHJlbmRlcmluZyB0aGlzIGNvbXBvbmVudCBpbnNpZGUgb2YgJyArXG4gICAgICAnYSBuZXcgdG9wLWxldmVsIGNvbXBvbmVudCB3aGljaCB3aWxsIGhvbGQgdGhlIHJlZi4nXG4gICAgKSA6IGludmFyaWFudChSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lcikpKTtcbiAgICAvLyBDaGVjayB0aGF0IGBjb21wb25lbnRgIGlzIHN0aWxsIHRoZSBjdXJyZW50IHJlZiBiZWNhdXNlIHdlIGRvIG5vdCB3YW50IHRvXG4gICAgLy8gZGV0YWNoIHRoZSByZWYgaWYgYW5vdGhlciBjb21wb25lbnQgc3RvbGUgaXQuXG4gICAgaWYgKG93bmVyLmdldFB1YmxpY0luc3RhbmNlKCkucmVmc1tyZWZdID09PSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSkge1xuICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RPd25lcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlYWN0UGVyZiBpcyBhIGdlbmVyYWwgQU9QIHN5c3RlbSBkZXNpZ25lZCB0byBtZWFzdXJlIHBlcmZvcm1hbmNlLiBUaGlzXG4gKiBtb2R1bGUgb25seSBoYXMgdGhlIGhvb2tzOiBzZWUgUmVhY3REZWZhdWx0UGVyZiBmb3IgdGhlIGFuYWx5c2lzIHRvb2wuXG4gKi9cbnZhciBSZWFjdFBlcmYgPSB7XG4gIC8qKlxuICAgKiBCb29sZWFuIHRvIGVuYWJsZS9kaXNhYmxlIG1lYXN1cmVtZW50LiBTZXQgdG8gZmFsc2UgYnkgZGVmYXVsdCB0byBwcmV2ZW50XG4gICAqIGFjY2lkZW50YWwgbG9nZ2luZyBhbmQgcGVyZiBsb3NzLlxuICAgKi9cbiAgZW5hYmxlTWVhc3VyZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhvbGRzIG9udG8gdGhlIG1lYXN1cmUgZnVuY3Rpb24gaW4gdXNlLiBCeSBkZWZhdWx0LCBkb24ndCBtZWFzdXJlXG4gICAqIGFueXRoaW5nLCBidXQgd2UnbGwgb3ZlcnJpZGUgdGhpcyBpZiB3ZSBpbmplY3QgYSBtZWFzdXJlIGZ1bmN0aW9uLlxuICAgKi9cbiAgc3RvcmVkTWVhc3VyZTogX25vTWVhc3VyZSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0TmFtZVxuICAgKiBAcGFyYW0ge29iamVjdDxzdHJpbmc+fSBtZXRob2ROYW1lc1xuICAgKi9cbiAgbWVhc3VyZU1ldGhvZHM6IGZ1bmN0aW9uKG9iamVjdCwgb2JqZWN0TmFtZSwgbWV0aG9kTmFtZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kTmFtZXMpIHtcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0W2tleV0gPSBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAgICAgICBvYmplY3ROYW1lLFxuICAgICAgICAgIG1ldGhvZE5hbWVzW2tleV0sXG4gICAgICAgICAgb2JqZWN0W2tleV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHdyYXAgbWV0aG9kcyB5b3Ugd2FudCB0byBtZWFzdXJlLiBaZXJvIG92ZXJoZWFkIGluIHByb2R1Y3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIG1lYXN1cmU6IGZ1bmN0aW9uKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBtZWFzdXJlZEZ1bmMgPSBudWxsO1xuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlKSB7XG4gICAgICAgICAgaWYgKCFtZWFzdXJlZEZ1bmMpIHtcbiAgICAgICAgICAgIG1lYXN1cmVkRnVuYyA9IFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBwZXIuZGlzcGxheU5hbWUgPSBvYmpOYW1lICsgJ18nICsgZm5OYW1lO1xuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lYXN1cmVcbiAgICAgKi9cbiAgICBpbmplY3RNZWFzdXJlOiBmdW5jdGlvbihtZWFzdXJlKSB7XG4gICAgICBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFNpbXBseSBwYXNzZXMgdGhyb3VnaCB0aGUgbWVhc3VyZWQgZnVuY3Rpb24sIHdpdGhvdXQgbWVhc3VyaW5nIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gX25vTWVhc3VyZShvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQZXJmO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFRyYW5zZmVyZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xudmFyIGpvaW5DbGFzc2VzID0gcmVxdWlyZShcIi4vam9pbkNsYXNzZXNcIik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRyYW5zZmVyIHN0cmF0ZWd5IHRoYXQgd2lsbCBtZXJnZSBwcm9wIHZhbHVlcyB1c2luZyB0aGUgc3VwcGxpZWRcbiAqIGBtZXJnZVN0cmF0ZWd5YC4gSWYgYSBwcm9wIHdhcyBwcmV2aW91c2x5IHVuc2V0LCB0aGlzIGp1c3Qgc2V0cyBpdC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXJnZVN0cmF0ZWd5XG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNmZXJTdHJhdGVneShtZXJnZVN0cmF0ZWd5KSB7XG4gIHJldHVybiBmdW5jdGlvbihwcm9wcywga2V5LCB2YWx1ZSkge1xuICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wc1trZXldID0gbWVyZ2VTdHJhdGVneShwcm9wc1trZXldLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgdHJhbnNmZXJTdHJhdGVneU1lcmdlID0gY3JlYXRlVHJhbnNmZXJTdHJhdGVneShmdW5jdGlvbihhLCBiKSB7XG4gIC8vIGBtZXJnZWAgb3ZlcnJpZGVzIHRoZSBmaXJzdCBvYmplY3QncyAoYHByb3BzW2tleV1gIGFib3ZlKSBrZXlzIHVzaW5nIHRoZVxuICAvLyBzZWNvbmQgb2JqZWN0J3MgKGB2YWx1ZWApIGtleXMuIEFuIG9iamVjdCdzIHN0eWxlJ3MgZXhpc3RpbmcgYHByb3BBYCB3b3VsZFxuICAvLyBnZXQgb3ZlcnJpZGRlbi4gRmxpcCB0aGUgb3JkZXIgaGVyZS5cbiAgcmV0dXJuIGFzc2lnbih7fSwgYiwgYSk7XG59KTtcblxuLyoqXG4gKiBUcmFuc2ZlciBzdHJhdGVnaWVzIGRpY3RhdGUgaG93IHByb3BzIGFyZSB0cmFuc2ZlcnJlZCBieSBgdHJhbnNmZXJQcm9wc1RvYC5cbiAqIE5PVEU6IGlmIHlvdSBhZGQgYW55IG1vcmUgZXhjZXB0aW9ucyB0byB0aGlzIGxpc3QgeW91IHNob3VsZCBiZSBzdXJlIHRvXG4gKiB1cGRhdGUgYGNsb25lV2l0aFByb3BzKClgIGFjY29yZGluZ2x5LlxuICovXG52YXIgVHJhbnNmZXJTdHJhdGVnaWVzID0ge1xuICAvKipcbiAgICogTmV2ZXIgdHJhbnNmZXIgYGNoaWxkcmVuYC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbXB0eUZ1bmN0aW9uLFxuICAvKipcbiAgICogVHJhbnNmZXIgdGhlIGBjbGFzc05hbWVgIHByb3AgYnkgbWVyZ2luZyB0aGVtLlxuICAgKi9cbiAgY2xhc3NOYW1lOiBjcmVhdGVUcmFuc2ZlclN0cmF0ZWd5KGpvaW5DbGFzc2VzKSxcbiAgLyoqXG4gICAqIFRyYW5zZmVyIHRoZSBgc3R5bGVgIHByb3AgKHdoaWNoIGlzIGFuIG9iamVjdCkgYnkgbWVyZ2luZyB0aGVtLlxuICAgKi9cbiAgc3R5bGU6IHRyYW5zZmVyU3RyYXRlZ3lNZXJnZVxufTtcblxuLyoqXG4gKiBNdXRhdGVzIHRoZSBmaXJzdCBhcmd1bWVudCBieSB0cmFuc2ZlcnJpbmcgdGhlIHByb3BlcnRpZXMgZnJvbSB0aGUgc2Vjb25kXG4gKiBhcmd1bWVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiB0cmFuc2ZlckludG8ocHJvcHMsIG5ld1Byb3BzKSB7XG4gIGZvciAodmFyIHRoaXNLZXkgaW4gbmV3UHJvcHMpIHtcbiAgICBpZiAoIW5ld1Byb3BzLmhhc093blByb3BlcnR5KHRoaXNLZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmZXJTdHJhdGVneSA9IFRyYW5zZmVyU3RyYXRlZ2llc1t0aGlzS2V5XTtcblxuICAgIGlmICh0cmFuc2ZlclN0cmF0ZWd5ICYmIFRyYW5zZmVyU3RyYXRlZ2llcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuICAgICAgdHJhbnNmZXJTdHJhdGVneShwcm9wcywgdGhpc0tleSwgbmV3UHJvcHNbdGhpc0tleV0pO1xuICAgIH0gZWxzZSBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHRoaXNLZXkpKSB7XG4gICAgICBwcm9wc1t0aGlzS2V5XSA9IG5ld1Byb3BzW3RoaXNLZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcHM7XG59XG5cbi8qKlxuICogUmVhY3RQcm9wVHJhbnNmZXJlciBhcmUgY2FwYWJsZSBvZiB0cmFuc2ZlcnJpbmcgcHJvcHMgdG8gYW5vdGhlciBjb21wb25lbnRcbiAqIHVzaW5nIGEgYHRyYW5zZmVyUHJvcHNUb2AgbWV0aG9kLlxuICpcbiAqIEBjbGFzcyBSZWFjdFByb3BUcmFuc2ZlcmVyXG4gKi9cbnZhciBSZWFjdFByb3BUcmFuc2ZlcmVyID0ge1xuXG4gIC8qKlxuICAgKiBNZXJnZSB0d28gcHJvcHMgb2JqZWN0cyB1c2luZyBUcmFuc2ZlclN0cmF0ZWdpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvbGRQcm9wcyBvcmlnaW5hbCBwcm9wcyAodGhleSB0YWtlIHByZWNlZGVuY2UpXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wcyBuZXcgcHJvcHMgdG8gbWVyZ2UgaW5cbiAgICogQHJldHVybiB7b2JqZWN0fSBhIG5ldyBvYmplY3QgY29udGFpbmluZyBib3RoIHNldHMgb2YgcHJvcHMgbWVyZ2VkLlxuICAgKi9cbiAgbWVyZ2VQcm9wczogZnVuY3Rpb24ob2xkUHJvcHMsIG5ld1Byb3BzKSB7XG4gICAgcmV0dXJuIHRyYW5zZmVySW50byhhc3NpZ24oe30sIG9sZFByb3BzKSwgbmV3UHJvcHMpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHJhbnNmZXJlcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0ga2V5TWlycm9yKHtcbiAgcHJvcDogbnVsbCxcbiAgY29udGV4dDogbnVsbCxcbiAgY2hpbGRDb250ZXh0OiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25zO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIik7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIG1ldGhvZHMgdGhhdCBhbGxvdyBkZWNsYXJhdGlvbiBhbmQgdmFsaWRhdGlvbiBvZiBwcm9wcyB0aGF0IGFyZVxuICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgIHZhciBQcm9wcyA9IHJlcXVpcmUoJ1JlYWN0UHJvcFR5cGVzJyk7XG4gKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcHJvcFR5cGVzOiB7XG4gKiAgICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgcHJvcCBuYW1lZCBcImRlc2NyaXB0aW9uXCIuXG4gKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICpcbiAqICAgICAgIC8vIEEgcmVxdWlyZWQgZW51bSBwcm9wIG5hbWVkIFwiY2F0ZWdvcnlcIi5cbiAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAqXG4gKiAgICAgICAvLyBBIHByb3AgbmFtZWQgXCJkaWFsb2dcIiB0aGF0IHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIERpYWxvZy5cbiAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAqICAgICB9LFxuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7IC4uLiB9XG4gKiAgIH0pO1xuICpcbiAqIEEgbW9yZSBmb3JtYWwgc3BlY2lmaWNhdGlvbiBvZiBob3cgdGhlc2UgbWV0aG9kcyBhcmUgdXNlZDpcbiAqXG4gKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAqICAgZGVjbCA6PSBSZWFjdFByb3BUeXBlcy57dHlwZX0oLmlzUmVxdWlyZWQpP1xuICpcbiAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAqIGFsbG93cyB0aGUgY3JlYXRpb24gb2YgY3VzdG9tIHZhbGlkYXRpb24gZnVuY3Rpb25zLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgIHByb3BUeXBlczoge1xuICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICogICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICogICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICogICAgICAgICAgKTtcbiAqICAgICAgICB9XG4gKiAgICAgIH1cbiAqICAgIH0sXG4gKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAqICB9KTtcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG52YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuXG52YXIgZWxlbWVudFR5cGVDaGVja2VyID0gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCk7XG52YXIgbm9kZVR5cGVDaGVja2VyID0gY3JlYXRlTm9kZUNoZWNrZXIoKTtcblxudmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG4gIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG4gIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuXG4gIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgYXJyYXlPZjogY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyLFxuICBlbGVtZW50OiBlbGVtZW50VHlwZUNoZWNrZXIsXG4gIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gIG5vZGU6IG5vZGVUeXBlQ2hlY2tlcixcbiAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gIG9uZU9mOiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIsXG4gIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgKFwiUmVxdWlyZWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCB3YXMgbm90IHNwZWNpZmllZCBpbiBcIikgK1xuICAgICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXCIpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJlY2lzZVR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYFwiICsgZXhwZWN0ZWRUeXBlICsgXCJgLlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKG51bGwpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIFwiKSArXG4gICAgICAgIChcImBcIiArIHByb3BUeXBlICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGFuIGFycmF5LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICBpZiAoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIHN1cHBsaWVkIHRvIFwiKSArXG4gICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGEgUmVhY3RFbGVtZW50LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgYFwiICsgZXhwZWN0ZWRDbGFzc05hbWUgKyBcImAuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gZXhwZWN0ZWRWYWx1ZXNbaV0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdmFsdWUgYFwiICsgcHJvcFZhbHVlICsgXCJgIFwiKSArXG4gICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIgKyB2YWx1ZXNTdHJpbmcgKyBcIi5cIilcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcbiAgICAgICAgKFwiYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYC5cIilcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBwcm9wVHlwZSArIFwiYCBcIikgK1xuICAgICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBgb2JqZWN0YC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBwcm9wVmFsdWUgPSBSZWFjdEZyYWdtZW50LmV4dHJhY3RJZkZyYWdtZW50KHByb3BWYWx1ZSk7XG4gICAgICBmb3IgKHZhciBrIGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoIWlzTm9kZShwcm9wVmFsdWVba10pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdhcnJheSc7XG4gIH1cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuZnVuY3Rpb24gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlKCkge1xuICB0aGlzLmxpc3RlbmVyc1RvUHV0ID0gW107XG59XG5cbmFzc2lnbihSZWFjdFB1dExpc3RlbmVyUXVldWUucHJvdG90eXBlLCB7XG4gIGVucXVldWVQdXRMaXN0ZW5lcjogZnVuY3Rpb24ocm9vdE5vZGVJRCwgcHJvcEtleSwgcHJvcFZhbHVlKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNUb1B1dC5wdXNoKHtcbiAgICAgIHJvb3ROb2RlSUQ6IHJvb3ROb2RlSUQsXG4gICAgICBwcm9wS2V5OiBwcm9wS2V5LFxuICAgICAgcHJvcFZhbHVlOiBwcm9wVmFsdWVcbiAgICB9KTtcbiAgfSxcblxuICBwdXRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnNUb1B1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyVG9QdXQgPSB0aGlzLmxpc3RlbmVyc1RvUHV0W2ldO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKFxuICAgICAgICBsaXN0ZW5lclRvUHV0LnJvb3ROb2RlSUQsXG4gICAgICAgIGxpc3RlbmVyVG9QdXQucHJvcEtleSxcbiAgICAgICAgbGlzdGVuZXJUb1B1dC5wcm9wVmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxpc3RlbmVyc1RvUHV0Lmxlbmd0aCA9IDA7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoXCIuL0NhbGxiYWNrUXVldWVcIik7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIik7XG52YXIgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RQdXRMaXN0ZW5lclF1ZXVlXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCwgd2hlbiBwb3NzaWJsZSwgdGhlIHNlbGVjdGlvbiByYW5nZSAoY3VycmVudGx5IHNlbGVjdGVkIHRleHRcbiAqIGlucHV0KSBpcyBub3QgZGlzdHVyYmVkIGJ5IHBlcmZvcm1pbmcgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgU0VMRUNUSU9OX1JFU1RPUkFUSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7U2VsZWN0aW9ufSBTZWxlY3Rpb24gaW5mb3JtYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICAvKipcbiAgICogQHBhcmFtIHtTZWxlY3Rpb259IHNlbCBTZWxlY3Rpb24gaW5mb3JtYXRpb24gcmV0dXJuZWQgZnJvbSBgaW5pdGlhbGl6ZWAuXG4gICAqL1xuICBjbG9zZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5yZXN0b3JlU2VsZWN0aW9uXG59O1xuXG4vKipcbiAqIFN1cHByZXNzZXMgZXZlbnRzIChibHVyL2ZvY3VzKSB0aGF0IGNvdWxkIGJlIGluYWR2ZXJ0ZW50bHkgZGlzcGF0Y2hlZCBkdWUgdG9cbiAqIGhpZ2ggbGV2ZWwgRE9NIG1hbmlwdWxhdGlvbnMgKGxpa2UgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgYSB0ZXh0IGlucHV0IGZyb20gdGhlXG4gKiBET00pLlxuICovXG52YXIgRVZFTlRfU1VQUFJFU1NJT04gPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUaGUgZW5hYmxlZCBzdGF0dXMgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlXG4gICAqIHRoZSByZWNvbmNpbGlhdGlvbi5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50bHlFbmFibGVkID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmlzRW5hYmxlZCgpO1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICByZXR1cm4gY3VycmVudGx5RW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBwcmV2aW91c2x5RW5hYmxlZCBFbmFibGVkIHN0YXR1cyBvZlxuICAgKiAgIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZSB0aGUgcmVjb25jaWxpYXRpb24gb2NjdXJlZC4gYGNsb3NlYFxuICAgKiAgIHJlc3RvcmVzIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbihwcmV2aW91c2x5RW5hYmxlZCkge1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKHByZXZpb3VzbHlFbmFibGVkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIHF1ZXVlIGZvciBjb2xsZWN0aW5nIGBjb21wb25lbnREaWRNb3VudGAgYW5kXG4gKiBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgZHVyaW5nIHRoZSB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQWZ0ZXIgRE9NIGlzIGZsdXNoZWQsIGludm9rZSBhbGwgcmVnaXN0ZXJlZCBgb25ET01SZWFkeWAgY2FsbGJhY2tzLlxuICAgKi9cbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG52YXIgUFVUX0xJU1RFTkVSX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnB1dExpc3RlbmVycygpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbXG4gIFBVVF9MSVNURU5FUl9RVUVVRUlORyxcbiAgU0VMRUNUSU9OX1JFU1RPUkFUSU9OLFxuICBFVkVOVF9TVVBQUkVTU0lPTixcbiAgT05fRE9NX1JFQURZX1FVRVVFSU5HXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseTpcbiAqIC0gVGhlIG9yZGVyIHRoYXQgdGhlc2UgYXJlIGxpc3RlZCBpbiB0aGUgdHJhbnNhY3Rpb24gaXMgY3JpdGljYWw6XG4gKiAtIFN1cHByZXNzZXMgZXZlbnRzLlxuICogLSBSZXN0b3JlcyBzZWxlY3Rpb24gcmFuZ2UuXG4gKlxuICogRnV0dXJlOlxuICogLSBSZXN0b3JlIGRvY3VtZW50L292ZXJmbG93IHNjcm9sbCBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVuaW50ZW50aW9uYWxseVxuICogICBtb2RpZmllZCB2aWEgRE9NIGluc2VydGlvbnMgYWJvdmUgdGhlIHRvcCB2aWV3cG9ydCBib3VuZGFyeS5cbiAqIC0gSW1wbGVtZW50L2ludGVncmF0ZSB3aXRoIGN1c3RvbWl6ZWQgY29uc3RyYWludCBiYXNlZCBsYXlvdXQgc3lzdGVtIGFuZCBrZWVwXG4gKiAgIHRyYWNrIG9mIHdoaWNoIGRpbWVuc2lvbnMgbXVzdCBiZSByZW1lYXN1cmVkLlxuICpcbiAqIEBjbGFzcyBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgLy8gT25seSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcmVhbGx5IG5lZWRzIHRoaXMgb3B0aW9uIChzZWVcbiAgLy8gYFJlYWN0U2VydmVyUmVuZGVyaW5nYCksIGJ1dCBzZXJ2ZXItc2lkZSB1c2VzXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uYCBpbnN0ZWFkLiBUaGlzIG9wdGlvbiBpcyBoZXJlIHNvIHRoYXQgaXQnc1xuICAvLyBhY2Nlc3NpYmxlIGFuZCBkZWZhdWx0cyB0byBmYWxzZSB3aGVuIGBSZWFjdERPTUNvbXBvbmVudGAgYW5kXG4gIC8vIGBSZWFjdFRleHRDb21wb25lbnRgIGNoZWNrcyBpdCBpbiBgbW91bnRDb21wb25lbnRgLmBcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGZhbHNlO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBSZWFjdFB1dExpc3RlbmVyUXVldWUuZ2V0UG9vbGVkKCk7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheTxvYmplY3Q+fSBMaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZWR1cmVzLlxuICAgKiAgIFRPRE86IGNvbnZlcnQgdG8gYXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuICB9LFxuXG4gIGdldFB1dExpc3RlbmVyUXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnB1dExpc3RlbmVyUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJlc3VzZWQuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcblxuICAgIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5yZWxlYXNlKHRoaXMucHV0TGlzdGVuZXJRdWV1ZSk7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gbnVsbDtcbiAgfVxufTtcblxuXG5hc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVjb25jaWxlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UmVmID0gcmVxdWlyZShcIi4vUmVhY3RSZWZcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xuXG4vKipcbiAqIEhlbHBlciB0byBjYWxsIFJlYWN0UmVmLmF0dGFjaFJlZnMgd2l0aCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQsIHNwbGl0IG91dFxuICogdG8gYXZvaWQgYWxsb2NhdGlvbnMgaW4gdGhlIHRyYW5zYWN0aW9uIG1vdW50LXJlYWR5IHF1ZXVlLlxuICovXG5mdW5jdGlvbiBhdHRhY2hSZWZzKCkge1xuICBSZWFjdFJlZi5hdHRhY2hSZWZzKHRoaXMsIHRoaXMuX2N1cnJlbnRFbGVtZW50KTtcbn1cblxudmFyIFJlYWN0UmVjb25jaWxlciA9IHtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBtYXJrdXAgPSBpbnRlcm5hbEluc3RhbmNlLm1vdW50Q29tcG9uZW50KHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMoXG4gICAgICAgIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50XG4gICAgICApO1xuICAgIH1cbiAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICBSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UsIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50KTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLnVubW91bnRDb21wb25lbnQoKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIGEgY29tcG9uZW50IHVzaW5nIGEgbmV3IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihcbiAgICBpbnRlcm5hbEluc3RhbmNlLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgKSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgPT09IHByZXZFbGVtZW50ICYmIG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsKSB7XG4gICAgICAvLyBTaW5jZSBlbGVtZW50cyBhcmUgaW1tdXRhYmxlIGFmdGVyIHRoZSBvd25lciBpcyByZW5kZXJlZCxcbiAgICAgIC8vIHdlIGNhbiBkbyBhIGNoZWFwIGlkZW50aXR5IGNvbXBhcmUgaGVyZSB0byBkZXRlcm1pbmUgaWYgdGhpcyBpcyBhXG4gICAgICAvLyBzdXBlcmZsdW91cyByZWNvbmNpbGUuIEl0J3MgcG9zc2libGUgZm9yIHN0YXRlIHRvIGJlIG11dGFibGUgYnV0IHN1Y2hcbiAgICAgIC8vIGNoYW5nZSBzaG91bGQgdHJpZ2dlciBhbiB1cGRhdGUgb2YgdGhlIG93bmVyIHdoaWNoIHdvdWxkIHJlY3JlYXRlXG4gICAgICAvLyB0aGUgZWxlbWVudC4gV2UgZXhwbGljaXRseSBjaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBvd25lciBzaW5jZVxuICAgICAgLy8gaXQncyBwb3NzaWJsZSBmb3IgYW4gZWxlbWVudCBjcmVhdGVkIG91dHNpZGUgYSBjb21wb3NpdGUgdG8gYmVcbiAgICAgIC8vIGRlZXBseSBtdXRhdGVkIGFuZCByZXVzZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyhuZXh0RWxlbWVudCk7XG4gICAgfVxuXG4gICAgdmFyIHJlZnNDaGFuZ2VkID0gUmVhY3RSZWYuc2hvdWxkVXBkYXRlUmVmcyhcbiAgICAgIHByZXZFbGVtZW50LFxuICAgICAgbmV4dEVsZW1lbnRcbiAgICApO1xuXG4gICAgaWYgKHJlZnNDaGFuZ2VkKSB7XG4gICAgICBSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UsIHByZXZFbGVtZW50KTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZsdXNoIGFueSBkaXJ0eSBjaGFuZ2VzIGluIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uKFxuICAgIGludGVybmFsSW5zdGFuY2UsXG4gICAgdHJhbnNhY3Rpb25cbiAgKSB7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVmXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0T3duZXJcIik7XG5cbnZhciBSZWFjdFJlZiA9IHt9O1xuXG5mdW5jdGlvbiBhdHRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMZWdhY3kgcmVmXG4gICAgUmVhY3RPd25lci5hZGRDb21wb25lbnRBc1JlZlRvKGNvbXBvbmVudCwgcmVmLCBvd25lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihudWxsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMZWdhY3kgcmVmXG4gICAgUmVhY3RPd25lci5yZW1vdmVDb21wb25lbnRBc1JlZkZyb20oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgfVxufVxuXG5SZWFjdFJlZi5hdHRhY2hSZWZzID0gZnVuY3Rpb24oaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBhdHRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5SZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzID0gZnVuY3Rpb24ocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSB7XG4gIC8vIElmIGVpdGhlciB0aGUgb3duZXIgb3IgYSBgcmVmYCBoYXMgY2hhbmdlZCwgbWFrZSBzdXJlIHRoZSBuZXdlc3Qgb3duZXJcbiAgLy8gaGFzIHN0b3JlZCBhIHJlZmVyZW5jZSB0byBgdGhpc2AsIGFuZCB0aGUgcHJldmlvdXMgb3duZXIgKGlmIGRpZmZlcmVudClcbiAgLy8gaGFzIGZvcmdvdHRlbiB0aGUgcmVmZXJlbmNlIHRvIGB0aGlzYC4gV2UgdXNlIHRoZSBlbGVtZW50IGluc3RlYWRcbiAgLy8gb2YgdGhlIHB1YmxpYyB0aGlzLnByb3BzIGJlY2F1c2UgdGhlIHBvc3QgcHJvY2Vzc2luZyBjYW5ub3QgZGV0ZXJtaW5lXG4gIC8vIGEgcmVmLiBUaGUgcmVmIGNvbmNlcHR1YWxseSBsaXZlcyBvbiB0aGUgZWxlbWVudC5cblxuICAvLyBUT0RPOiBTaG91bGQgdGhpcyBldmVuIGJlIHBvc3NpYmxlPyBUaGUgb3duZXIgY2Fubm90IGNoYW5nZSBiZWNhdXNlXG4gIC8vIGl0J3MgZm9yYmlkZGVuIGJ5IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LiBUaGUgcmVmIGNhbiBjaGFuZ2VcbiAgLy8gaWYgeW91IHN3YXAgdGhlIGtleXMgb2YgYnV0IG5vdCB0aGUgcmVmcy4gUmVjb25zaWRlciB3aGVyZSB0aGlzIGNoZWNrXG4gIC8vIGlzIG1hZGUuIEl0IHByb2JhYmx5IGJlbG9uZ3Mgd2hlcmUgdGhlIGtleSBjaGVja2luZyBhbmRcbiAgLy8gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCBpcyBkb25lLlxuXG4gIHJldHVybiAoXG4gICAgbmV4dEVsZW1lbnQuX293bmVyICE9PSBwcmV2RWxlbWVudC5fb3duZXIgfHxcbiAgICBuZXh0RWxlbWVudC5yZWYgIT09IHByZXZFbGVtZW50LnJlZlxuICApO1xufTtcblxuUmVhY3RSZWYuZGV0YWNoUmVmcyA9IGZ1bmN0aW9uKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgZGV0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlZjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJvb3RJbmRleEluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9jcmVhdGVSZWFjdFJvb3RJbmRleFxuICAgKi9cbiAgaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKF9jcmVhdGVSZWFjdFJvb3RJbmRleCkge1xuICAgIFJlYWN0Um9vdEluZGV4LmNyZWF0ZVJlYWN0Um9vdEluZGV4ID0gX2NyZWF0ZVJlYWN0Um9vdEluZGV4O1xuICB9XG59O1xuXG52YXIgUmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBudWxsLFxuICBpbmplY3Rpb246IFJlYWN0Um9vdEluZGV4SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Um9vdEluZGV4O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0gcmVxdWlyZShcIi4vUmVhY3RNYXJrdXBDaGVja3N1bVwiKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID1cbiAgcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblwiKTtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZShcIi4vZW1wdHlPYmplY3RcIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cFxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0cmluZyhlbGVtZW50KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpLFxuICAgICdyZW5kZXJUb1N0cmluZygpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LidcbiAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpKTtcblxuICB2YXIgdHJhbnNhY3Rpb247XG4gIHRyeSB7XG4gICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKGZhbHNlKTtcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcbiAgICAgIHZhciBtYXJrdXAgPVxuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0KTtcbiAgICAgIHJldHVybiBSZWFjdE1hcmt1cENoZWNrc3VtLmFkZENoZWNrc3VtVG9NYXJrdXAobWFya3VwKTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwLCB3aXRob3V0IHRoZSBleHRyYSBSZWFjdCBJRCBhbmQgY2hlY2tzdW1cbiAqIChmb3IgZ2VuZXJhdGluZyBzdGF0aWMgcGFnZXMpXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RhdGljTWFya3VwKGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksXG4gICAgJ3JlbmRlclRvU3RhdGljTWFya3VwKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkpO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQodHJ1ZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG4gICAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnQoaWQsIHRyYW5zYWN0aW9uLCBlbXB0eU9iamVjdCk7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyVG9TdHJpbmc6IHJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogcmVuZGVyVG9TdGF0aWNNYXJrdXBcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIGBDYWxsYmFja1F1ZXVlYCBxdWV1ZSBmb3IgY29sbGVjdGluZyBgb25ET01SZWFkeWAgY2FsbGJhY2tzXG4gKiBkdXJpbmcgdGhlIHBlcmZvcm1pbmcgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGVtcHR5RnVuY3Rpb25cbn07XG5cbnZhciBQVVRfTElTVEVORVJfUVVFVUVJTkcgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5yZXNldCgpO1xuICB9LFxuXG4gIGNsb3NlOiBlbXB0eUZ1bmN0aW9uXG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbXG4gIFBVVF9MSVNURU5FUl9RVUVVRUlORyxcbiAgT05fRE9NX1JFQURZX1FVRVVFSU5HXG5dO1xuXG4vKipcbiAqIEBjbGFzcyBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlbmRlclRvU3RhdGljTWFya3VwXG4gKi9cbmZ1bmN0aW9uIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ocmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXA7XG4gIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQobnVsbCk7XG4gIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5nZXRQb29sZWQoKTtcbn1cblxudmFyIE1peGluID0ge1xuICAvKipcbiAgICogQHNlZSBUcmFuc2FjdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICogQGZpbmFsXG4gICAqIEByZXR1cm4ge2FycmF5fSBFbXB0eSBsaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZWR1cmVzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuICB9LFxuXG4gIGdldFB1dExpc3RlbmVyUXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnB1dExpc3RlbmVyUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJlc3VzZWQuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcblxuICAgIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5yZWxlYXNlKHRoaXMucHV0TGlzdGVuZXJRdWV1ZSk7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gbnVsbDtcbiAgfVxufTtcblxuXG5hc3NpZ24oXG4gIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLFxuICBUcmFuc2FjdGlvbi5NaXhpbixcbiAgTWl4aW5cbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U3RhdGVTZXR0ZXJzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RTdGF0ZVNldHRlcnMgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYWxscyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24sIGFuZCB1c2VzIHRoZSByZXN1bHRcbiAgICogb2YgdGhhdCB0byBzZXQgdGhlIGNvbXBvbmVudCdzIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50fSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1JldHVybmluZ1N0YXRlIFJldHVybmVkIGNhbGxiYWNrIHVzZXMgdGhpcyB0b1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIGhvdyB0byB1cGRhdGUgc3RhdGUuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjYWxsYmFjayB0aGF0IHdoZW4gaW52b2tlZCB1c2VzIGZ1bmNSZXR1cm5pbmdTdGF0ZSB0b1xuICAgKiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lZCB0aGUgb2JqZWN0IGxpdGVyYWwgdG8gc2V0U3RhdGUuXG4gICAqL1xuICBjcmVhdGVTdGF0ZVNldHRlcjogZnVuY3Rpb24oY29tcG9uZW50LCBmdW5jUmV0dXJuaW5nU3RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgdmFyIHBhcnRpYWxTdGF0ZSA9IGZ1bmNSZXR1cm5pbmdTdGF0ZS5jYWxsKGNvbXBvbmVudCwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICBpZiAocGFydGlhbFN0YXRlKSB7XG4gICAgICAgIGNvbXBvbmVudC5zZXRTdGF0ZShwYXJ0aWFsU3RhdGUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGUtYXJndW1lbnQgY2FsbGJhY2sgdGhhdCBjYW4gYmUgdXNlZCB0byB1cGRhdGUgYSBzaW5nbGVcbiAgICoga2V5IGluIHRoZSBjb21wb25lbnQncyBzdGF0ZS5cbiAgICpcbiAgICogTm90ZTogdGhpcyBpcyBtZW1vaXplZCBmdW5jdGlvbiwgd2hpY2ggbWFrZXMgaXQgaW5leHBlbnNpdmUgdG8gY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvc2l0ZUNvbXBvbmVudH0gY29tcG9uZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBpbiB0aGUgc3RhdGUgdGhhdCB5b3Ugc2hvdWxkIHVwZGF0ZS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IGNhbGxiYWNrIG9mIDEgYXJndW1lbnQgd2hpY2ggY2FsbHMgc2V0U3RhdGUoKSB3aXRoXG4gICAqICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmlkZWQga2V5TmFtZSBhbmQgY2FsbGJhY2sgYXJndW1lbnQuXG4gICAqL1xuICBjcmVhdGVTdGF0ZUtleVNldHRlcjogZnVuY3Rpb24oY29tcG9uZW50LCBrZXkpIHtcbiAgICAvLyBNZW1vaXplIHRoZSBzZXR0ZXJzLlxuICAgIHZhciBjYWNoZSA9IGNvbXBvbmVudC5fX2tleVNldHRlcnMgfHwgKGNvbXBvbmVudC5fX2tleVNldHRlcnMgPSB7fSk7XG4gICAgcmV0dXJuIGNhY2hlW2tleV0gfHwgKGNhY2hlW2tleV0gPSBjcmVhdGVTdGF0ZUtleVNldHRlcihjb21wb25lbnQsIGtleSkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZUtleVNldHRlcihjb21wb25lbnQsIGtleSkge1xuICAvLyBQYXJ0aWFsIHN0YXRlIGlzIGFsbG9jYXRlZCBvdXRzaWRlIG9mIHRoZSBmdW5jdGlvbiBjbG9zdXJlIHNvIGl0IGNhbiBiZVxuICAvLyByZXVzZWQgd2l0aCBldmVyeSBjYWxsLCBhdm9pZGluZyBtZW1vcnkgYWxsb2NhdGlvbiB3aGVuIHRoaXMgZnVuY3Rpb25cbiAgLy8gaXMgY2FsbGVkLlxuICB2YXIgcGFydGlhbFN0YXRlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBzdGF0ZUtleVNldHRlcih2YWx1ZSkge1xuICAgIHBhcnRpYWxTdGF0ZVtrZXldID0gdmFsdWU7XG4gICAgY29tcG9uZW50LnNldFN0YXRlKHBhcnRpYWxTdGF0ZSk7XG4gIH07XG59XG5cblJlYWN0U3RhdGVTZXR0ZXJzLk1peGluID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FsbHMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLCBhbmQgdXNlcyB0aGUgcmVzdWx0XG4gICAqIG9mIHRoYXQgdG8gc2V0IHRoZSBjb21wb25lbnQncyBzdGF0ZS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIHRoZXNlIHN0YXRlbWVudHMgYXJlIGVxdWl2YWxlbnQ6XG4gICAqXG4gICAqICAgdGhpcy5zZXRTdGF0ZSh7eDogMX0pO1xuICAgKiAgIHRoaXMuY3JlYXRlU3RhdGVTZXR0ZXIoZnVuY3Rpb24oeFZhbHVlKSB7XG4gICAqICAgICByZXR1cm4ge3g6IHhWYWx1ZX07XG4gICAqICAgfSkoMSk7XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNSZXR1cm5pbmdTdGF0ZSBSZXR1cm5lZCBjYWxsYmFjayB1c2VzIHRoaXMgdG9cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSBob3cgdG8gdXBkYXRlIHN0YXRlLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gY2FsbGJhY2sgdGhhdCB3aGVuIGludm9rZWQgdXNlcyBmdW5jUmV0dXJuaW5nU3RhdGUgdG9cbiAgICogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQgdGhlIG9iamVjdCBsaXRlcmFsIHRvIHNldFN0YXRlLlxuICAgKi9cbiAgY3JlYXRlU3RhdGVTZXR0ZXI6IGZ1bmN0aW9uKGZ1bmNSZXR1cm5pbmdTdGF0ZSkge1xuICAgIHJldHVybiBSZWFjdFN0YXRlU2V0dGVycy5jcmVhdGVTdGF0ZVNldHRlcih0aGlzLCBmdW5jUmV0dXJuaW5nU3RhdGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xlLWFyZ3VtZW50IGNhbGxiYWNrIHRoYXQgY2FuIGJlIHVzZWQgdG8gdXBkYXRlIGEgc2luZ2xlXG4gICAqIGtleSBpbiB0aGUgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCB0aGVzZSBzdGF0ZW1lbnRzIGFyZSBlcXVpdmFsZW50OlxuICAgKlxuICAgKiAgIHRoaXMuc2V0U3RhdGUoe3g6IDF9KTtcbiAgICogICB0aGlzLmNyZWF0ZVN0YXRlS2V5U2V0dGVyKCd4JykoMSk7XG4gICAqXG4gICAqIE5vdGU6IHRoaXMgaXMgbWVtb2l6ZWQgZnVuY3Rpb24sIHdoaWNoIG1ha2VzIGl0IGluZXhwZW5zaXZlIHRvIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBpbiB0aGUgc3RhdGUgdGhhdCB5b3Ugc2hvdWxkIHVwZGF0ZS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IGNhbGxiYWNrIG9mIDEgYXJndW1lbnQgd2hpY2ggY2FsbHMgc2V0U3RhdGUoKSB3aXRoXG4gICAqICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmlkZWQga2V5TmFtZSBhbmQgY2FsbGJhY2sgYXJndW1lbnQuXG4gICAqL1xuICBjcmVhdGVTdGF0ZUtleVNldHRlcjogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIFJlYWN0U3RhdGVTZXR0ZXJzLmNyZWF0ZVN0YXRlS2V5U2V0dGVyKHRoaXMsIGtleSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTdGF0ZVNldHRlcnM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RUZXN0VXRpbHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgUmVhY3QgPSByZXF1aXJlKFwiLi9SZWFjdFwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG5mdW5jdGlvbiBFdmVudChzdWZmaXgpIHt9XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0VGVzdFV0aWxzXG4gKi9cblxuLyoqXG4gKiBUb2RvOiBTdXBwb3J0IHRoZSBlbnRpcmUgRE9NLnNjcnkgcXVlcnkgc3ludGF4LiBGb3Igbm93LCB0aGVzZSBzaW1wbGVcbiAqIHV0aWxpdGllcyB3aWxsIHN1ZmZpY2UgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKiBAbGVuZHMgUmVhY3RUZXN0VXRpbHNcbiAqL1xudmFyIFJlYWN0VGVzdFV0aWxzID0ge1xuICByZW5kZXJJbnRvRG9jdW1lbnQ6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIC8vIE5vbmUgb2Ygb3VyIHRlc3RzIGFjdHVhbGx5IHJlcXVpcmUgYXR0YWNoaW5nIHRoZSBjb250YWluZXIgdG8gdGhlXG4gICAgLy8gRE9NLCBhbmQgZG9pbmcgc28gY3JlYXRlcyBhIG1lc3MgdGhhdCB3ZSByZWx5IG9uIHRlc3QgaXNvbGF0aW9uIHRvXG4gICAgLy8gY2xlYW4gdXAsIHNvIHdlJ3JlIGdvaW5nIHRvIHN0b3AgaG9ub3JpbmcgdGhlIG5hbWUgb2YgdGhpcyBtZXRob2RcbiAgICAvLyAoYW5kIHByb2JhYmx5IHJlbmFtZSBpdCBldmVudHVhbGx5KSBpZiBubyBwcm9ibGVtcyBhcmlzZS5cbiAgICAvLyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICByZXR1cm4gUmVhY3QucmVuZGVyKGluc3RhbmNlLCBkaXYpO1xuICB9LFxuXG4gIGlzRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCk7XG4gIH0sXG5cbiAgaXNFbGVtZW50T2ZUeXBlOiBmdW5jdGlvbihpbnN0LCBjb252ZW5pZW5jZUNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChpbnN0KSAmJlxuICAgICAgaW5zdC50eXBlID09PSBjb252ZW5pZW5jZUNvbnN0cnVjdG9yXG4gICAgKTtcbiAgfSxcblxuICBpc0RPTUNvbXBvbmVudDogZnVuY3Rpb24oaW5zdCkge1xuICAgIC8vIFRPRE86IEZpeCB0aGlzIGhldXJpc3RpYy4gSXQncyBqdXN0IGhlcmUgYmVjYXVzZSBjb21wb3NpdGVzIGNhbiBjdXJyZW50bHlcbiAgICAvLyBwcmV0ZW5kIHRvIGJlIERPTSBjb21wb25lbnRzLlxuICAgIHJldHVybiAhIShpbnN0ICYmIGluc3QudGFnTmFtZSAmJiBpbnN0LmdldERPTU5vZGUpO1xuICB9LFxuXG4gIGlzRE9NQ29tcG9uZW50RWxlbWVudDogZnVuY3Rpb24oaW5zdCkge1xuICAgIHJldHVybiAhIShpbnN0ICYmXG4gICAgICAgICAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChpbnN0KSAmJlxuICAgICAgICAgICAgICAhIWluc3QudGFnTmFtZSk7XG4gIH0sXG5cbiAgaXNDb21wb3NpdGVDb21wb25lbnQ6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIGluc3QucmVuZGVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgIHR5cGVvZiBpbnN0LnNldFN0YXRlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuXG4gIGlzQ29tcG9zaXRlQ29tcG9uZW50V2l0aFR5cGU6IGZ1bmN0aW9uKGluc3QsIHR5cGUpIHtcbiAgICByZXR1cm4gISEoUmVhY3RUZXN0VXRpbHMuaXNDb21wb3NpdGVDb21wb25lbnQoaW5zdCkgJiZcbiAgICAgICAgICAgICAoaW5zdC5jb25zdHJ1Y3RvciA9PT0gdHlwZSkpO1xuICB9LFxuXG4gIGlzQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudDogZnVuY3Rpb24oaW5zdCkge1xuICAgIGlmICghUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGluc3QpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFdlIGNoZWNrIHRoZSBwcm90b3R5cGUgb2YgdGhlIHR5cGUgdGhhdCB3aWxsIGdldCBtb3VudGVkLCBub3QgdGhlXG4gICAgLy8gaW5zdGFuY2UgaXRzZWxmLiBUaGlzIGlzIGEgZnV0dXJlIHByb29mIHdheSBvZiBkdWNrIHR5cGluZy5cbiAgICB2YXIgcHJvdG90eXBlID0gaW5zdC50eXBlLnByb3RvdHlwZTtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIHByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBwcm90b3R5cGUuc2V0U3RhdGUgPT09ICdmdW5jdGlvbidcbiAgICApO1xuICB9LFxuXG4gIGlzQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudFdpdGhUeXBlOiBmdW5jdGlvbihpbnN0LCB0eXBlKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0VGVzdFV0aWxzLmlzQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudChpbnN0KSAmJlxuICAgICAgICAgICAgIChpbnN0LmNvbnN0cnVjdG9yID09PSB0eXBlKSk7XG4gIH0sXG5cbiAgZ2V0UmVuZGVyZWRDaGlsZE9mQ29tcG9zaXRlQ29tcG9uZW50OiBmdW5jdGlvbihpbnN0KSB7XG4gICAgaWYgKCFSZWFjdFRlc3RVdGlscy5pc0NvbXBvc2l0ZUNvbXBvbmVudChpbnN0KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdCk7XG4gICAgcmV0dXJuIGludGVybmFsSW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7XG4gIH0sXG5cbiAgZmluZEFsbEluUmVuZGVyZWRUcmVlOiBmdW5jdGlvbihpbnN0LCB0ZXN0KSB7XG4gICAgaWYgKCFpbnN0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciByZXQgPSB0ZXN0KGluc3QpID8gW2luc3RdIDogW107XG4gICAgaWYgKFJlYWN0VGVzdFV0aWxzLmlzRE9NQ29tcG9uZW50KGluc3QpKSB7XG4gICAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KGluc3QpO1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSBpbnRlcm5hbEluc3RhbmNlXG4gICAgICAgIC5fcmVuZGVyZWRDb21wb25lbnRcbiAgICAgICAgLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIGtleTtcbiAgICAgIGZvciAoa2V5IGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFyZW5kZXJlZENoaWxkcmVuLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlbmRlcmVkQ2hpbGRyZW5ba2V5XS5nZXRQdWJsaWNJbnN0YW5jZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldCA9IHJldC5jb25jYXQoXG4gICAgICAgICAgUmVhY3RUZXN0VXRpbHMuZmluZEFsbEluUmVuZGVyZWRUcmVlKFxuICAgICAgICAgICAgcmVuZGVyZWRDaGlsZHJlbltrZXldLmdldFB1YmxpY0luc3RhbmNlKCksXG4gICAgICAgICAgICB0ZXN0XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoUmVhY3RUZXN0VXRpbHMuaXNDb21wb3NpdGVDb21wb25lbnQoaW5zdCkpIHtcbiAgICAgIHJldCA9IHJldC5jb25jYXQoXG4gICAgICAgIFJlYWN0VGVzdFV0aWxzLmZpbmRBbGxJblJlbmRlcmVkVHJlZShcbiAgICAgICAgICBSZWFjdFRlc3RVdGlscy5nZXRSZW5kZXJlZENoaWxkT2ZDb21wb3NpdGVDb21wb25lbnQoaW5zdCksXG4gICAgICAgICAgdGVzdFxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgaW5zdGFuY2Ugb2YgY29tcG9uZW50cyBpbiB0aGUgcmVuZGVyZWQgdHJlZSB0aGF0IGFyZSBET01cbiAgICogY29tcG9uZW50cyB3aXRoIHRoZSBjbGFzcyBuYW1lIG1hdGNoaW5nIGBjbGFzc05hbWVgLlxuICAgKiBAcmV0dXJuIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlcy5cbiAgICovXG4gIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3M6IGZ1bmN0aW9uKHJvb3QsIGNsYXNzTmFtZSkge1xuICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5maW5kQWxsSW5SZW5kZXJlZFRyZWUocm9vdCwgZnVuY3Rpb24oaW5zdCkge1xuICAgICAgdmFyIGluc3RDbGFzc05hbWUgPSBpbnN0LnByb3BzLmNsYXNzTmFtZTtcbiAgICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5pc0RPTUNvbXBvbmVudChpbnN0KSAmJiAoXG4gICAgICAgIChpbnN0Q2xhc3NOYW1lICYmICgnICcgKyBpbnN0Q2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgIT09IC0xKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogTGlrZSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzIGJ1dCBleHBlY3RzIHRoZXJlIHRvIGJlIG9uZSByZXN1bHQsXG4gICAqIGFuZCByZXR1cm5zIHRoYXQgb25lIHJlc3VsdCwgb3IgdGhyb3dzIGV4Y2VwdGlvbiBpZiB0aGVyZSBpcyBhbnkgb3RoZXJcbiAgICogbnVtYmVyIG9mIG1hdGNoZXMgYmVzaWRlcyBvbmUuXG4gICAqIEByZXR1cm4geyFSZWFjdERPTUNvbXBvbmVudH0gVGhlIG9uZSBtYXRjaC5cbiAgICovXG4gIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzczogZnVuY3Rpb24ocm9vdCwgY2xhc3NOYW1lKSB7XG4gICAgdmFyIGFsbCA9XG4gICAgICBSZWFjdFRlc3RVdGlscy5zY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKHJvb3QsIGNsYXNzTmFtZSk7XG4gICAgaWYgKGFsbC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGlkIG5vdCBmaW5kIGV4YWN0bHkgb25lIG1hdGNoICcgK1xuICAgICAgICAnKGZvdW5kOiAnICsgYWxsLmxlbmd0aCArICcpIGZvciBjbGFzczonICsgY2xhc3NOYW1lXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYWxsWzBdO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBpbnN0YW5jZSBvZiBjb21wb25lbnRzIGluIHRoZSByZW5kZXJlZCB0cmVlIHRoYXQgYXJlIERPTVxuICAgKiBjb21wb25lbnRzIHdpdGggdGhlIHRhZyBuYW1lIG1hdGNoaW5nIGB0YWdOYW1lYC5cbiAgICogQHJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXMuXG4gICAqL1xuICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aFRhZzogZnVuY3Rpb24ocm9vdCwgdGFnTmFtZSkge1xuICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5maW5kQWxsSW5SZW5kZXJlZFRyZWUocm9vdCwgZnVuY3Rpb24oaW5zdCkge1xuICAgICAgcmV0dXJuIFJlYWN0VGVzdFV0aWxzLmlzRE9NQ29tcG9uZW50KGluc3QpICYmXG4gICAgICAgICAgICBpbnN0LnRhZ05hbWUgPT09IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogTGlrZSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aFRhZyBidXQgZXhwZWN0cyB0aGVyZSB0byBiZSBvbmUgcmVzdWx0LFxuICAgKiBhbmQgcmV0dXJucyB0aGF0IG9uZSByZXN1bHQsIG9yIHRocm93cyBleGNlcHRpb24gaWYgdGhlcmUgaXMgYW55IG90aGVyXG4gICAqIG51bWJlciBvZiBtYXRjaGVzIGJlc2lkZXMgb25lLlxuICAgKiBAcmV0dXJuIHshUmVhY3RET01Db21wb25lbnR9IFRoZSBvbmUgbWF0Y2guXG4gICAqL1xuICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoVGFnOiBmdW5jdGlvbihyb290LCB0YWdOYW1lKSB7XG4gICAgdmFyIGFsbCA9IFJlYWN0VGVzdFV0aWxzLnNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoVGFnKHJvb3QsIHRhZ05hbWUpO1xuICAgIGlmIChhbGwubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RpZCBub3QgZmluZCBleGFjdGx5IG9uZSBtYXRjaCBmb3IgdGFnOicgKyB0YWdOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbFswXTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgaW5zdGFuY2VzIG9mIGNvbXBvbmVudHMgd2l0aCB0eXBlIGVxdWFsIHRvIGBjb21wb25lbnRUeXBlYC5cbiAgICogQHJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXMuXG4gICAqL1xuICBzY3J5UmVuZGVyZWRDb21wb25lbnRzV2l0aFR5cGU6IGZ1bmN0aW9uKHJvb3QsIGNvbXBvbmVudFR5cGUpIHtcbiAgICByZXR1cm4gUmVhY3RUZXN0VXRpbHMuZmluZEFsbEluUmVuZGVyZWRUcmVlKHJvb3QsIGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5pc0NvbXBvc2l0ZUNvbXBvbmVudFdpdGhUeXBlKFxuICAgICAgICBpbnN0LFxuICAgICAgICBjb21wb25lbnRUeXBlXG4gICAgICApO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIGBzY3J5UmVuZGVyZWRDb21wb25lbnRzV2l0aFR5cGVgIGJ1dCBleHBlY3RzIHRoZXJlIHRvIGJlIG9uZSByZXN1bHRcbiAgICogYW5kIHJldHVybnMgdGhhdCBvbmUgcmVzdWx0LCBvciB0aHJvd3MgZXhjZXB0aW9uIGlmIHRoZXJlIGlzIGFueSBvdGhlclxuICAgKiBudW1iZXIgb2YgbWF0Y2hlcyBiZXNpZGVzIG9uZS5cbiAgICogQHJldHVybiB7IVJlYWN0Q29tcG9uZW50fSBUaGUgb25lIG1hdGNoLlxuICAgKi9cbiAgZmluZFJlbmRlcmVkQ29tcG9uZW50V2l0aFR5cGU6IGZ1bmN0aW9uKHJvb3QsIGNvbXBvbmVudFR5cGUpIHtcbiAgICB2YXIgYWxsID0gUmVhY3RUZXN0VXRpbHMuc2NyeVJlbmRlcmVkQ29tcG9uZW50c1dpdGhUeXBlKFxuICAgICAgcm9vdCxcbiAgICAgIGNvbXBvbmVudFR5cGVcbiAgICApO1xuICAgIGlmIChhbGwubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdEaWQgbm90IGZpbmQgZXhhY3RseSBvbmUgbWF0Y2ggZm9yIGNvbXBvbmVudFR5cGU6JyArIGNvbXBvbmVudFR5cGVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhbGxbMF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBhc3MgYSBtb2NrZWQgY29tcG9uZW50IG1vZHVsZSB0byB0aGlzIG1ldGhvZCB0byBhdWdtZW50IGl0IHdpdGhcbiAgICogdXNlZnVsIG1ldGhvZHMgdGhhdCBhbGxvdyBpdCB0byBiZSB1c2VkIGFzIGEgZHVtbXkgUmVhY3QgY29tcG9uZW50LlxuICAgKiBJbnN0ZWFkIG9mIHJlbmRlcmluZyBhcyB1c3VhbCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlY29tZSBhIHNpbXBsZVxuICAgKiA8ZGl2PiBjb250YWluaW5nIGFueSBwcm92aWRlZCBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG1vZHVsZSB0aGUgbW9jayBmdW5jdGlvbiBvYmplY3QgZXhwb3J0ZWQgZnJvbSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlIHRoYXQgZGVmaW5lcyB0aGUgY29tcG9uZW50IHRvIGJlIG1vY2tlZFxuICAgKiBAcGFyYW0gez9zdHJpbmd9IG1vY2tUYWdOYW1lIG9wdGlvbmFsIGR1bW15IHJvb3QgdGFnIG5hbWUgdG8gcmV0dXJuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSByZW5kZXIgbWV0aG9kIChvdmVycmlkZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUubW9ja1RhZ05hbWUgaWYgcHJvdmlkZWQpXG4gICAqIEByZXR1cm4ge29iamVjdH0gdGhlIFJlYWN0VGVzdFV0aWxzIG9iamVjdCAoZm9yIGNoYWluaW5nKVxuICAgKi9cbiAgbW9ja0NvbXBvbmVudDogZnVuY3Rpb24obW9kdWxlLCBtb2NrVGFnTmFtZSkge1xuICAgIG1vY2tUYWdOYW1lID0gbW9ja1RhZ05hbWUgfHwgbW9kdWxlLm1vY2tUYWdOYW1lIHx8IFwiZGl2XCI7XG5cbiAgICBtb2R1bGUucHJvdG90eXBlLnJlbmRlci5tb2NrSW1wbGVtZW50YXRpb24oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgbW9ja1RhZ05hbWUsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogU2ltdWxhdGVzIGEgdG9wIGxldmVsIGV2ZW50IGJlaW5nIGRpc3BhdGNoZWQgZnJvbSBhIHJhdyBldmVudCB0aGF0IG9jY3VyZWRcbiAgICogb24gYW4gYEVsZW1lbnRgIG5vZGUuXG4gICAqIEBwYXJhbSB0b3BMZXZlbFR5cGUge09iamVjdH0gQSB0eXBlIGZyb20gYEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNgXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGUgVGhlIGRvbSB0byBzaW11bGF0ZSBhbiBldmVudCBvY2N1cnJpbmcgb24uXG4gICAqIEBwYXJhbSB7P0V2ZW50fSBmYWtlTmF0aXZlRXZlbnQgRmFrZSBuYXRpdmUgZXZlbnQgdG8gdXNlIGluIFN5bnRoZXRpY0V2ZW50LlxuICAgKi9cbiAgc2ltdWxhdGVOYXRpdmVFdmVudE9uTm9kZTogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBub2RlLCBmYWtlTmF0aXZlRXZlbnQpIHtcbiAgICBmYWtlTmF0aXZlRXZlbnQudGFyZ2V0ID0gbm9kZTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBmYWtlTmF0aXZlRXZlbnRcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTaW11bGF0ZXMgYSB0b3AgbGV2ZWwgZXZlbnQgYmVpbmcgZGlzcGF0Y2hlZCBmcm9tIGEgcmF3IGV2ZW50IHRoYXQgb2NjdXJlZFxuICAgKiBvbiB0aGUgYFJlYWN0RE9NQ29tcG9uZW50YCBgY29tcGAuXG4gICAqIEBwYXJhbSB0b3BMZXZlbFR5cGUge09iamVjdH0gQSB0eXBlIGZyb20gYEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNgLlxuICAgKiBAcGFyYW0gY29tcCB7IVJlYWN0RE9NQ29tcG9uZW50fVxuICAgKiBAcGFyYW0gez9FdmVudH0gZmFrZU5hdGl2ZUV2ZW50IEZha2UgbmF0aXZlIGV2ZW50IHRvIHVzZSBpbiBTeW50aGV0aWNFdmVudC5cbiAgICovXG4gIHNpbXVsYXRlTmF0aXZlRXZlbnRPbkRPTUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBjb21wLFxuICAgICAgZmFrZU5hdGl2ZUV2ZW50KSB7XG4gICAgUmVhY3RUZXN0VXRpbHMuc2ltdWxhdGVOYXRpdmVFdmVudE9uTm9kZShcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGNvbXAuZ2V0RE9NTm9kZSgpLFxuICAgICAgZmFrZU5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgfSxcblxuICBuYXRpdmVUb3VjaERhdGE6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG91Y2hlczogW1xuICAgICAgICB7cGFnZVg6IHgsIHBhZ2VZOiB5fVxuICAgICAgXVxuICAgIH07XG4gIH0sXG5cbiAgY3JlYXRlUmVuZGVyZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVhY3RTaGFsbG93UmVuZGVyZXIoKTtcbiAgfSxcblxuICBTaW11bGF0ZTogbnVsbCxcbiAgU2ltdWxhdGVOYXRpdmU6IHt9XG59O1xuXG4vKipcbiAqIEBjbGFzcyBSZWFjdFNoYWxsb3dSZW5kZXJlclxuICovXG52YXIgUmVhY3RTaGFsbG93UmVuZGVyZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xufTtcblxuUmVhY3RTaGFsbG93UmVuZGVyZXIucHJvdG90eXBlLmdldFJlbmRlck91dHB1dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKFxuICAgICh0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQgJiZcbiAgICAgdGhpcy5faW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50Ll9yZW5kZXJlZE91dHB1dClcbiAgICB8fCBudWxsXG4gICk7XG59O1xuXG52YXIgTm9vcEludGVybmFsQ29tcG9uZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB0aGlzLl9yZW5kZXJlZE91dHB1dCA9IGVsZW1lbnQ7XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSA/XG4gICAgUmVhY3RFbXB0eUNvbXBvbmVudC5lbXB0eUVsZW1lbnQgOlxuICAgIGVsZW1lbnQ7XG59O1xuXG5Ob29wSW50ZXJuYWxDb21wb25lbnQucHJvdG90eXBlID0ge1xuXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdGhpcy5fcmVuZGVyZWRPdXRwdXQgPSBlbGVtZW50O1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSA/XG4gICAgICBSZWFjdEVtcHR5Q29tcG9uZW50LmVtcHR5RWxlbWVudCA6XG4gICAgICBlbGVtZW50O1xuICB9LFxuXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICB9XG5cbn07XG5cbnZhciBTaGFsbG93Q29tcG9uZW50V3JhcHBlciA9IGZ1bmN0aW9uKCkgeyB9O1xuYXNzaWduKFxuICBTaGFsbG93Q29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUsXG4gIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLCB7XG4gICAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgTm9vcEludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgIH0sXG4gICAgX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IGZ1bmN0aW9uKCkge30sXG4gICAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDpcbiAgICAgIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLlxuICAgICAgICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0XG4gIH1cbik7XG5cblJlYWN0U2hhbGxvd1JlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihlbGVtZW50LCBjb250ZXh0KSB7XG4gIGlmICghY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBlbXB0eU9iamVjdDtcbiAgfVxuICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgdGhpcy5fcmVuZGVyKGVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG59O1xuXG5SZWFjdFNoYWxsb3dSZW5kZXJlci5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5faW5zdGFuY2UpIHtcbiAgICB0aGlzLl9pbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gIH1cbn07XG5cblJlYWN0U2hhbGxvd1JlbmRlcmVyLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24oZWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgIHZhciByb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBTaGFsbG93Q29tcG9uZW50V3JhcHBlcihlbGVtZW50LnR5cGUpO1xuICAgIGluc3RhbmNlLmNvbnN0cnVjdChlbGVtZW50KTtcblxuICAgIGluc3RhbmNlLm1vdW50Q29tcG9uZW50KHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9pbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KGVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHBvcnRzOlxuICpcbiAqIC0gYFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlLmNsaWNrKEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSBgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGUubW91c2VNb3ZlKEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSBgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGUuY2hhbmdlKEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSAuLi4gKEFsbCBrZXlzIGZyb20gZXZlbnQgcGx1Z2luIGBldmVudFR5cGVzYCBvYmplY3RzKVxuICovXG5mdW5jdGlvbiBtYWtlU2ltdWxhdG9yKGV2ZW50VHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZG9tQ29tcG9uZW50T3JOb2RlLCBldmVudERhdGEpIHtcbiAgICB2YXIgbm9kZTtcbiAgICBpZiAoUmVhY3RUZXN0VXRpbHMuaXNET01Db21wb25lbnQoZG9tQ29tcG9uZW50T3JOb2RlKSkge1xuICAgICAgbm9kZSA9IGRvbUNvbXBvbmVudE9yTm9kZS5nZXRET01Ob2RlKCk7XG4gICAgfSBlbHNlIGlmIChkb21Db21wb25lbnRPck5vZGUudGFnTmFtZSkge1xuICAgICAgbm9kZSA9IGRvbUNvbXBvbmVudE9yTm9kZTtcbiAgICB9XG5cbiAgICB2YXIgZmFrZU5hdGl2ZUV2ZW50ID0gbmV3IEV2ZW50KCk7XG4gICAgZmFrZU5hdGl2ZUV2ZW50LnRhcmdldCA9IG5vZGU7XG4gICAgLy8gV2UgZG9uJ3QgdXNlIFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZCBpbiBvcmRlciB0byBub3QgaGF2ZSB0byB3b3JyeSBhYm91dFxuICAgIC8vIHByb3Blcmx5IGRlc3Ryb3lpbmcgYW55IHByb3BlcnRpZXMgYXNzaWduZWQgZnJvbSBgZXZlbnREYXRhYCB1cG9uIHJlbGVhc2VcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50VHlwZV0sXG4gICAgICBSZWFjdE1vdW50LmdldElEKG5vZGUpLFxuICAgICAgZmFrZU5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBhc3NpZ24oZXZlbnQsIGV2ZW50RGF0YSk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblxuICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpIHtcbiAgICAgIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICAgICAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRTaW11bGF0b3JzKCkge1xuICBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSA9IHt9O1xuXG4gIHZhciBldmVudFR5cGU7XG4gIGZvciAoZXZlbnRUeXBlIGluIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFFbGVtZW50IHx8IFJlYWN0RE9NQ29tcG9uZW50fSBkb21Db21wb25lbnRPck5vZGVcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50RGF0YSBGYWtlIGV2ZW50IGRhdGEgdG8gdXNlIGluIFN5bnRoZXRpY0V2ZW50LlxuICAgICAqL1xuICAgIFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlW2V2ZW50VHlwZV0gPSBtYWtlU2ltdWxhdG9yKGV2ZW50VHlwZSk7XG4gIH1cbn1cblxuLy8gUmVidWlsZCBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSB3aGVuZXZlciBldmVudCBwbHVnaW5zIGFyZSBpbmplY3RlZFxudmFyIG9sZEluamVjdEV2ZW50UGx1Z2luT3JkZXIgPSBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjtcbkV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyID0gZnVuY3Rpb24oKSB7XG4gIG9sZEluamVjdEV2ZW50UGx1Z2luT3JkZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgYnVpbGRTaW11bGF0b3JzKCk7XG59O1xudmFyIG9sZEluamVjdEV2ZW50UGx1Z2lucyA9IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWU7XG5FdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lID0gZnVuY3Rpb24oKSB7XG4gIG9sZEluamVjdEV2ZW50UGx1Z2lucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBidWlsZFNpbXVsYXRvcnMoKTtcbn07XG5cbmJ1aWxkU2ltdWxhdG9ycygpO1xuXG4vKipcbiAqIEV4cG9ydHM6XG4gKlxuICogLSBgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGVOYXRpdmUuY2xpY2soRWxlbWVudC9SZWFjdERPTUNvbXBvbmVudClgXG4gKiAtIGBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZU5hdGl2ZS5tb3VzZU1vdmUoRWxlbWVudC9SZWFjdERPTUNvbXBvbmVudClgXG4gKiAtIGBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZU5hdGl2ZS5tb3VzZUluL1JlYWN0RE9NQ29tcG9uZW50KWBcbiAqIC0gYFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlTmF0aXZlLm1vdXNlT3V0KEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSAuLi4gKEFsbCBrZXlzIGZyb20gYEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNgKVxuICpcbiAqIE5vdGU6IFRvcCBsZXZlbCBldmVudCB0eXBlcyBhcmUgYSBzdWJzZXQgb2YgdGhlIGVudGlyZSBzZXQgb2YgaGFuZGxlciB0eXBlc1xuICogKHdoaWNoIGluY2x1ZGUgYSBicm9hZGVyIHNldCBvZiBcInN5bnRoZXRpY1wiIGV2ZW50cykuIEZvciBleGFtcGxlLCBvbkRyYWdEb25lXG4gKiBpcyBhIHN5bnRoZXRpYyBldmVudC4gRXhjZXB0IHdoZW4gdGVzdGluZyBhbiBldmVudCBwbHVnaW4gb3IgUmVhY3QncyBldmVudFxuICogaGFuZGxpbmcgY29kZSBzcGVjaWZpY2FsbHksIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZVxuICogdG8gZGlzcGF0Y2ggc3ludGhldGljIGV2ZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBtYWtlTmF0aXZlU2ltdWxhdG9yKGV2ZW50VHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZG9tQ29tcG9uZW50T3JOb2RlLCBuYXRpdmVFdmVudERhdGEpIHtcbiAgICB2YXIgZmFrZU5hdGl2ZUV2ZW50ID0gbmV3IEV2ZW50KGV2ZW50VHlwZSk7XG4gICAgYXNzaWduKGZha2VOYXRpdmVFdmVudCwgbmF0aXZlRXZlbnREYXRhKTtcbiAgICBpZiAoUmVhY3RUZXN0VXRpbHMuaXNET01Db21wb25lbnQoZG9tQ29tcG9uZW50T3JOb2RlKSkge1xuICAgICAgUmVhY3RUZXN0VXRpbHMuc2ltdWxhdGVOYXRpdmVFdmVudE9uRE9NQ29tcG9uZW50KFxuICAgICAgICBldmVudFR5cGUsXG4gICAgICAgIGRvbUNvbXBvbmVudE9yTm9kZSxcbiAgICAgICAgZmFrZU5hdGl2ZUV2ZW50XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoISFkb21Db21wb25lbnRPck5vZGUudGFnTmFtZSkge1xuICAgICAgLy8gV2lsbCBhbGxvdyBvbiBhY3R1YWwgZG9tIG5vZGVzLlxuICAgICAgUmVhY3RUZXN0VXRpbHMuc2ltdWxhdGVOYXRpdmVFdmVudE9uTm9kZShcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICBkb21Db21wb25lbnRPck5vZGUsXG4gICAgICAgIGZha2VOYXRpdmVFdmVudFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBldmVudFR5cGU7XG5mb3IgKGV2ZW50VHlwZSBpbiB0b3BMZXZlbFR5cGVzKSB7XG4gIC8vIEV2ZW50IHR5cGUgaXMgc3RvcmVkIGFzICd0b3BDbGljaycgLSB3ZSB0cmFuc2Zvcm0gdGhhdCB0byAnY2xpY2snXG4gIHZhciBjb252ZW5pZW5jZU5hbWUgPSBldmVudFR5cGUuaW5kZXhPZigndG9wJykgPT09IDAgP1xuICAgIGV2ZW50VHlwZS5jaGFyQXQoMykudG9Mb3dlckNhc2UoKSArIGV2ZW50VHlwZS5zdWJzdHIoNCkgOiBldmVudFR5cGU7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50IHx8IFJlYWN0RE9NQ29tcG9uZW50fSBkb21Db21wb25lbnRPck5vZGVcbiAgICogQHBhcmFtIHs/RXZlbnR9IG5hdGl2ZUV2ZW50RGF0YSBGYWtlIG5hdGl2ZSBldmVudCB0byB1c2UgaW4gU3ludGhldGljRXZlbnQuXG4gICAqL1xuICBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZU5hdGl2ZVtjb252ZW5pZW5jZU5hbWVdID1cbiAgICBtYWtlTmF0aXZlU2ltdWxhdG9yKGV2ZW50VHlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUZXN0VXRpbHM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkcmVuXCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xuXG52YXIgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nID0ge1xuICAvKipcbiAgICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLiBKdXN0XG4gICAqIHNpbXBsZSBzeW50YWN0aWMgc3VnYXIgYXJvdW5kIFJlYWN0Q2hpbGRyZW4ubWFwKCkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gICAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAgICovXG4gIGdldENoaWxkTWFwcGluZzogZnVuY3Rpb24oY2hpbGRyZW4pIHtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiBSZWFjdEZyYWdtZW50LmV4dHJhY3QoUmVhY3RDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAgICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gICAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gICAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICAgKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICAgKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICAgKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAgICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICAgKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gICAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAgICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAgICovXG4gIG1lcmdlQ2hpbGRNYXBwaW5nczogZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgIHByZXYgPSBwcmV2IHx8IHt9O1xuICAgIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHJldHVybiBuZXh0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJldltrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAgIC8vIHRoZSBjb21iaW5lZCBsaXN0XG4gICAgdmFyIG5leHRLZXlzUGVuZGluZyA9IHt9O1xuXG4gICAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShwcmV2S2V5KSkge1xuICAgICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG4gICAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgICBpZiAobmV4dEtleXNQZW5kaW5nLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShcbiAgICAgICAgICAgIHBlbmRpbmdOZXh0S2V5XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG4gICAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZE1hcHBpbmc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VHJhbnNpdGlvbkV2ZW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbi8qKlxuICogRVZFTlRfTkFNRV9NQVAgaXMgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggZXZlbnQgZmlyZWQgd2hlbiBhXG4gKiB0cmFuc2l0aW9uL2FuaW1hdGlvbiBlbmRzLCBiYXNlZCBvbiB0aGUgc3R5bGUgcHJvcGVydHkgdXNlZCB0b1xuICogZGVmaW5lIHRoYXQgZXZlbnQuXG4gKi9cbnZhciBFVkVOVF9OQU1FX01BUCA9IHtcbiAgdHJhbnNpdGlvbmVuZDoge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ21velRyYW5zaXRpb25FbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvVHJhbnNpdGlvbkVuZCcsXG4gICAgJ21zVHJhbnNpdGlvbic6ICdNU1RyYW5zaXRpb25FbmQnXG4gIH0sXG5cbiAgYW5pbWF0aW9uZW5kOiB7XG4gICAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb25lbmQnLFxuICAgICdXZWJraXRBbmltYXRpb24nOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcbiAgICAnTW96QW5pbWF0aW9uJzogJ21vekFuaW1hdGlvbkVuZCcsXG4gICAgJ09BbmltYXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgJ21zQW5pbWF0aW9uJzogJ01TQW5pbWF0aW9uRW5kJ1xuICB9XG59O1xuXG52YXIgZW5kRXZlbnRzID0gW107XG5cbmZ1bmN0aW9uIGRldGVjdEV2ZW50cygpIHtcbiAgdmFyIHRlc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgc3R5bGUgPSB0ZXN0RWwuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2VhYmxlLCBhbmQgaWYgbm90IHJlbW92ZSB0aGVtXG4gIC8vIGZyb20gdGhlIG1hcFxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgfVxuXG4gIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgRVZFTlRfTkFNRV9NQVAudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uO1xuICB9XG5cbiAgZm9yICh2YXIgYmFzZUV2ZW50TmFtZSBpbiBFVkVOVF9OQU1FX01BUCkge1xuICAgIHZhciBiYXNlRXZlbnRzID0gRVZFTlRfTkFNRV9NQVBbYmFzZUV2ZW50TmFtZV07XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIGJhc2VFdmVudHMpIHtcbiAgICAgIGlmIChzdHlsZU5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgZW5kRXZlbnRzLnB1c2goYmFzZUV2ZW50c1tzdHlsZU5hbWVdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgZGV0ZWN0RXZlbnRzKCk7XG59XG5cbi8vIFdlIHVzZSB0aGUgcmF3IHthZGR8cmVtb3ZlfUV2ZW50TGlzdGVuZXIoKSBjYWxsIGJlY2F1c2UgRXZlbnRMaXN0ZW5lclxuLy8gZG9lcyBub3Qga25vdyBob3cgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBhbmQgd2UgcmVhbGx5IHNob3VsZFxuLy8gY2xlYW4gdXAuIEFsc28sIHRoZXNlIGV2ZW50cyBhcmUgbm90IHRyaWdnZXJlZCBpbiBvbGRlciBicm93c2Vyc1xuLy8gc28gd2Ugc2hvdWxkIGJlIEEtT0sgaGVyZS5cblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIpIHtcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcikge1xuICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG59XG5cbnZhciBSZWFjdFRyYW5zaXRpb25FdmVudHMgPSB7XG4gIGFkZEVuZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKG5vZGUsIGV2ZW50TGlzdGVuZXIpIHtcbiAgICBpZiAoZW5kRXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gSWYgQ1NTIHRyYW5zaXRpb25zIGFyZSBub3Qgc3VwcG9ydGVkLCB0cmlnZ2VyIGFuIFwiZW5kIGFuaW1hdGlvblwiXG4gICAgICAvLyBldmVudCBpbW1lZGlhdGVseS5cbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGV2ZW50TGlzdGVuZXIsIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbmRFdmVudHMuZm9yRWFjaChmdW5jdGlvbihlbmRFdmVudCkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRFdmVudCwgZXZlbnRMaXN0ZW5lcik7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVtb3ZlRW5kRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24obm9kZSwgZXZlbnRMaXN0ZW5lcikge1xuICAgIGlmIChlbmRFdmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVuZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVuZEV2ZW50KSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGVuZEV2ZW50LCBldmVudExpc3RlbmVyKTtcbiAgICB9KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFRyYW5zaXRpb25FdmVudHM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RUcmFuc2l0aW9uR3JvdXBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCIuL1JlYWN0XCIpO1xudmFyIFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZyA9IHJlcXVpcmUoXCIuL1JlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZ1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgY2xvbmVXaXRoUHJvcHMgPSByZXF1aXJlKFwiLi9jbG9uZVdpdGhQcm9wc1wiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxudmFyIFJlYWN0VHJhbnNpdGlvbkdyb3VwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0VHJhbnNpdGlvbkdyb3VwJyxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb21wb25lbnQ6IFJlYWN0LlByb3BUeXBlcy5hbnksXG4gICAgY2hpbGRGYWN0b3J5OiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBvbmVudDogJ3NwYW4nLFxuICAgICAgY2hpbGRGYWN0b3J5OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnRcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMgPSB7fTtcbiAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5pdGlhbENoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxDaGlsZE1hcHBpbmcpIHtcbiAgICAgIGlmIChpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0pIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtQXBwZWFyKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcykge1xuICAgIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZyhcbiAgICAgIG5leHRQcm9wcy5jaGlsZHJlblxuICAgICk7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSB0aGlzLnN0YXRlLmNoaWxkcmVuO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjaGlsZHJlbjogUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLm1lcmdlQ2hpbGRNYXBwaW5ncyhcbiAgICAgICAgcHJldkNoaWxkTWFwcGluZyxcbiAgICAgICAgbmV4dENoaWxkTWFwcGluZ1xuICAgICAgKVxuICAgIH0pO1xuXG4gICAgdmFyIGtleTtcblxuICAgIGZvciAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNQcmV2ID0gcHJldkNoaWxkTWFwcGluZyAmJiBwcmV2Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAobmV4dENoaWxkTWFwcGluZ1trZXldICYmICFoYXNQcmV2ICYmXG4gICAgICAgICAgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSkge1xuICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKSB7XG4gICAgICB2YXIgaGFzTmV4dCA9IG5leHRDaGlsZE1hcHBpbmcgJiYgbmV4dENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgaWYgKHByZXZDaGlsZE1hcHBpbmdba2V5XSAmJiAhaGFzTmV4dCAmJlxuICAgICAgICAgICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0pIHtcbiAgICAgICAgdGhpcy5rZXlzVG9MZWF2ZS5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2Ugd2FudCB0byBzb21lZGF5IGNoZWNrIGZvciByZW9yZGVyaW5nLCB3ZSBjb3VsZCBkbyBpdCBoZXJlLlxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXNUb0VudGVyID0gdGhpcy5rZXlzVG9FbnRlcjtcbiAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAga2V5c1RvRW50ZXIuZm9yRWFjaCh0aGlzLnBlcmZvcm1FbnRlcik7XG5cbiAgICB2YXIga2V5c1RvTGVhdmUgPSB0aGlzLmtleXNUb0xlYXZlO1xuICAgIHRoaXMua2V5c1RvTGVhdmUgPSBbXTtcbiAgICBrZXlzVG9MZWF2ZS5mb3JFYWNoKHRoaXMucGVyZm9ybUxlYXZlKTtcbiAgfSxcblxuICBwZXJmb3JtQXBwZWFyOiBmdW5jdGlvbihrZXkpIHtcbiAgICB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuXG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEFwcGVhcihcbiAgICAgICAgdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZy5iaW5kKHRoaXMsIGtleSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZURvbmVBcHBlYXJpbmc6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLnJlZnNba2V5XTtcbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcikge1xuICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcigpO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcblxuICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgYXBwZWFyZWQuIFJlbW92ZSBpdC5cbiAgICAgIHRoaXMucGVyZm9ybUxlYXZlKGtleSk7XG4gICAgfVxuICB9LFxuXG4gIHBlcmZvcm1FbnRlcjogZnVuY3Rpb24oa2V5KSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLnJlZnNba2V5XTtcblxuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKFxuICAgICAgICB0aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcuYmluZCh0aGlzLCBrZXkpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZURvbmVFbnRlcmluZzogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcigpO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcblxuICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgZW50ZXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgdGhpcy5wZXJmb3JtTGVhdmUoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgcGVyZm9ybUxlYXZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKHRoaXMuX2hhbmRsZURvbmVMZWF2aW5nLmJpbmQodGhpcywga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIHNvbWV3aGF0IGRhbmdlcm91cyBiL2MgaXQgY2FsbHMgc2V0U3RhdGUoKVxuICAgICAgLy8gYWdhaW4sIGVmZmVjdGl2ZWx5IG11dGF0aW5nIHRoZSBjb21wb25lbnQgYmVmb3JlIGFsbCB0aGUgd29ya1xuICAgICAgLy8gaXMgZG9uZS5cbiAgICAgIHRoaXMuX2hhbmRsZURvbmVMZWF2aW5nKGtleSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVEb25lTGVhdmluZzogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuXG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRMZWF2ZSkge1xuICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZyhcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuXG4gICAgaWYgKGN1cnJlbnRDaGlsZE1hcHBpbmcgJiYgY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAvLyBUaGlzIGVudGVyZWQgYWdhaW4gYmVmb3JlIGl0IGZ1bGx5IGxlZnQuIEFkZCBpdCBhZ2Fpbi5cbiAgICAgIHRoaXMucGVyZm9ybUVudGVyKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS5jaGlsZHJlbik7XG4gICAgICBkZWxldGUgbmV3Q2hpbGRyZW5ba2V5XTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2NoaWxkcmVuOiBuZXdDaGlsZHJlbn0pO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE86IHdlIGNvdWxkIGdldCByaWQgb2YgdGhlIG5lZWQgZm9yIHRoZSB3cmFwcGVyIG5vZGVcbiAgICAvLyBieSBjbG9uaW5nIGEgc2luZ2xlIGNoaWxkXG4gICAgdmFyIGNoaWxkcmVuVG9SZW5kZXIgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zdGF0ZS5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkID0gdGhpcy5zdGF0ZS5jaGlsZHJlbltrZXldO1xuICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIC8vIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgbGVhdmluZy5cbiAgICAgICAgLy8gVGhlIG5vcm1hbCBSZWFjdCB3YXkgdG8gZG8gaXQgd29uJ3Qgd29yayBzaW5jZSB0aGUgY2hpbGQgd2lsbCBoYXZlXG4gICAgICAgIC8vIGFscmVhZHkgYmVlbiByZW1vdmVkLiBJbiBjYXNlIHlvdSBuZWVkIHRoaXMgYmVoYXZpb3IgeW91IGNhbiBwcm92aWRlXG4gICAgICAgIC8vIGEgY2hpbGRGYWN0b3J5IGZ1bmN0aW9uIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmVcbiAgICAgICAgLy8gbGVhdmluZy5cbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5wdXNoKGNsb25lV2l0aFByb3BzKFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRGYWN0b3J5KGNoaWxkKSxcbiAgICAgICAgICB7cmVmOiBrZXksIGtleToga2V5fVxuICAgICAgICApKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICB0aGlzLnByb3BzLmNvbXBvbmVudCxcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBjaGlsZHJlblRvUmVuZGVyXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uR3JvdXA7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VXBkYXRlUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdExpZmVDeWNsZSA9IHJlcXVpcmUoXCIuL1JlYWN0TGlmZUN5Y2xlXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpIHtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UgIT09IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2UpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiBhIGNvbXBvbmVudFdpbGxNb3VudCBoYW5kbGVyLCBkb24ndCBlbnF1ZXVlIGEgcmVyZW5kZXJcbiAgICAvLyBiZWNhdXNlIFJlYWN0VXBkYXRlcyBhc3N1bWVzIHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0ICh3aGljaCBpc1xuICAgIC8vIHdyb25nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nKSBhbmQgd2UncmUgYWJvdXQgdG8gZG8gYSByZW5kZXIgYW55d2F5LlxuICAgIC8vIFNlZSBidWcgaW4gIzE3NDAuXG4gICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICclcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uICcgK1xuICAgICcoc3VjaCBhcyB3aXRoaW4gYHJlbmRlcmApLiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuICAgICdvZiBwcm9wcyBhbmQgc3RhdGUuJyxcbiAgICBjYWxsZXJOYW1lXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsKSk7XG5cbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIE9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBjYWxsZXJOYW1lLiBPdGhlcndpc2Ugd2Ugc2hvdWxkIGJlIHNpbGVudC5cbiAgICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNhbGxpbmcgZnJvbSBlbnF1ZXVlQ2FsbGJhY2suIFdlIGRvbid0IHdhbnQgdG8gd2FyblxuICAgICAgLy8gdGhlcmUgYmVjYXVzZSB3ZSBhbHJlYWR5IHdhcm5lZCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgbGlmZWN5Y2xlIG1ldGhvZC5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhY2FsbGVyTmFtZSxcbiAgICAgICAgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICtcbiAgICAgICAgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkICcgK1xuICAgICAgICAnY29tcG9uZW50LiBUaGlzIGlzIGEgbm8tb3AuJyxcbiAgICAgICAgY2FsbGVyTmFtZSxcbiAgICAgICAgY2FsbGVyTmFtZVxuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpbnRlcm5hbEluc3RhbmNlID09PSBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpbnRlcm5hbEluc3RhbmNlO1xufVxuXG4vKipcbiAqIFJlYWN0VXBkYXRlUXVldWUgYWxsb3dzIGZvciBzdGF0ZSB1cGRhdGVzIHRvIGJlIHNjaGVkdWxlZCBpbnRvIGEgbGF0ZXJcbiAqIHJlY29uY2lsaWF0aW9uIHN0ZXAuXG4gKi9cbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0ge1xuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaykge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicsXG4gICAgICAnZW5xdWV1ZUNhbGxiYWNrKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCwgYHJlcGxhY2VQcm9wc2AsICcgK1xuICAgICAgJ2BzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0ICcgK1xuICAgICAgJ2lzblxcJ3QgY2FsbGFibGUuJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSk7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuXG4gICAgLy8gUHJldmlvdXNseSB3ZSB3b3VsZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgaGF2ZSBhbiBpbnRlcm5hbFxuICAgIC8vIGluc3RhbmNlLiBTaW5jZSB3ZSB3YW50IHRvIG1ha2UgaXQgYSBuby1vcCBpbnN0ZWFkLCB3ZSBtaXJyb3IgdGhlIHNhbWVcbiAgICAvLyBiZWhhdmlvciB3ZSBoYXZlIGluIG90aGVyIGVucXVldWUqIG1ldGhvZHMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGlnbm9yZSBjYWxsYmFja3MgaW4gY29tcG9uZW50V2lsbE1vdW50LiBTZWVcbiAgICAvLyBlbnF1ZXVlVXBkYXRlcy5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UgfHxcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9PT0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgIH1cbiAgICAvLyBUT0RPOiBUaGUgY2FsbGJhY2sgaGVyZSBpcyBpZ25vcmVkIHdoZW4gc2V0U3RhdGUgaXMgY2FsbGVkIGZyb21cbiAgICAvLyBjb21wb25lbnRXaWxsTW91bnQuIEVpdGhlciBmaXggaXQgb3IgZGlzYWxsb3cgZG9pbmcgc28gY29tcGxldGVseSBpblxuICAgIC8vIGZhdm9yIG9mIGdldEluaXRpYWxTdGF0ZS4gQWx0ZXJuYXRpdmVseSwgd2UgY2FuIGRpc2FsbG93XG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGR1cmluZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICBlbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ2VucXVldWVDYWxsYmFjayguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2AsIGByZXBsYWNlUHJvcHNgLCAnICtcbiAgICAgICdgc2V0U3RhdGVgLCBgcmVwbGFjZVN0YXRlYCwgb3IgYGZvcmNlVXBkYXRlYCB3aXRoIGEgY2FsbGJhY2sgdGhhdCAnICtcbiAgICAgICdpc25cXCd0IGNhbGxhYmxlLidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZFVwZGF0ZUNvbXBvbmVudGAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoXG4gICAgICBwdWJsaWNJbnN0YW5jZSxcbiAgICAgICdmb3JjZVVwZGF0ZSdcbiAgICApO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gdHJ1ZTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKFxuICAgICAgcHVibGljSW5zdGFuY2UsXG4gICAgICAncmVwbGFjZVN0YXRlJ1xuICAgICk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gdHJ1ZTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShcbiAgICAgIHB1YmxpY0luc3RhbmNlLFxuICAgICAgJ3NldFN0YXRlJ1xuICAgICk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcXVldWUgPVxuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgfHxcbiAgICAgIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHBhcnRpYWxTdGF0ZSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRQcm9wczogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKFxuICAgICAgcHVibGljSW5zdGFuY2UsXG4gICAgICAnc2V0UHJvcHMnXG4gICAgKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9pc1RvcExldmVsLFxuICAgICAgJ3NldFByb3BzKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCBvbiBhICcgK1xuICAgICAgJ2NvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsICcgK1xuICAgICAgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArXG4gICAgICAnYHJlbmRlcmAgbWV0aG9kIHRvIHBhc3MgdGhlIGNvcnJlY3QgdmFsdWUgYXMgcHJvcHMgdG8gdGhlIGNvbXBvbmVudCAnICtcbiAgICAgICd3aGVyZSBpdCBpcyBjcmVhdGVkLidcbiAgICApIDogaW52YXJpYW50KGludGVybmFsSW5zdGFuY2UuX2lzVG9wTGV2ZWwpKTtcblxuICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgLy8gZWxlbWVudCBwcm9wcy5cbiAgICB2YXIgZWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcyk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoXG4gICAgICBlbGVtZW50LFxuICAgICAgcHJvcHNcbiAgICApO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBOZXcgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VQcm9wczogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoXG4gICAgICBwdWJsaWNJbnN0YW5jZSxcbiAgICAgICdyZXBsYWNlUHJvcHMnXG4gICAgKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9pc1RvcExldmVsLFxuICAgICAgJ3JlcGxhY2VQcm9wcyguLi4pOiBZb3UgY2FsbGVkIGByZXBsYWNlUHJvcHNgIG9uIGEgJyArXG4gICAgICAnY29tcG9uZW50IHdpdGggYSBwYXJlbnQuIFRoaXMgaXMgYW4gYW50aS1wYXR0ZXJuIHNpbmNlIHByb3BzIHdpbGwgJyArXG4gICAgICAnZ2V0IHJlYWN0aXZlbHkgdXBkYXRlZCB3aGVuIHJlbmRlcmVkLiBJbnN0ZWFkLCBjaGFuZ2UgdGhlIG93bmVyXFwncyAnICtcbiAgICAgICdgcmVuZGVyYCBtZXRob2QgdG8gcGFzcyB0aGUgY29ycmVjdCB2YWx1ZSBhcyBwcm9wcyB0byB0aGUgY29tcG9uZW50ICcgK1xuICAgICAgJ3doZXJlIGl0IGlzIGNyZWF0ZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoaW50ZXJuYWxJbnN0YW5jZS5faXNUb3BMZXZlbCkpO1xuXG4gICAgLy8gTWVyZ2Ugd2l0aCB0aGUgcGVuZGluZyBlbGVtZW50IGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3RpbmdcbiAgICAvLyBlbGVtZW50IHByb3BzLlxuICAgIHZhciBlbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0VsZW1lbnQgfHxcbiAgICAgICAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIHByb3BzXG4gICAgKTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgbmV3RWxlbWVudCkge1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gbmV3RWxlbWVudDtcbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVRdWV1ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZShcIi4vQ2FsbGJhY2tRdWV1ZVwiKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBkaXJ0eUNvbXBvbmVudHMgPSBbXTtcbnZhciBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG52YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG5cbnZhciBiYXRjaGluZ1N0cmF0ZWd5ID0gbnVsbDtcblxuZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSxcbiAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgJyArXG4gICAgJ3N0cmF0ZWd5J1xuICApIDogaW52YXJpYW50KFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uICYmIGJhdGNoaW5nU3RyYXRlZ3kpKTtcbn1cblxudmFyIE5FU1RFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IGRpcnR5Q29tcG9uZW50cy5sZW5ndGg7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggIT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIEFkZGl0aW9uYWwgdXBkYXRlcyB3ZXJlIGVucXVldWVkIGJ5IGNvbXBvbmVudERpZFVwZGF0ZSBoYW5kbGVycyBvclxuICAgICAgLy8gc2ltaWxhcjsgYmVmb3JlIG91ciBvd24gVVBEQVRFX1FVRVVFSU5HIHdyYXBwZXIgY2xvc2VzLCB3ZSB3YW50IHRvIHJ1blxuICAgICAgLy8gdGhlc2UgbmV3IHVwZGF0ZXMgc28gdGhhdCBpZiBBJ3MgY29tcG9uZW50RGlkVXBkYXRlIGNhbGxzIHNldFN0YXRlIG9uXG4gICAgICAvLyBCLCBCIHdpbGwgdXBkYXRlIGJlZm9yZSB0aGUgY2FsbGJhY2sgQSdzIHVwZGF0ZXIgcHJvdmlkZWQgd2hlbiBjYWxsaW5nXG4gICAgICAvLyBzZXRTdGF0ZS5cbiAgICAgIGRpcnR5Q29tcG9uZW50cy5zcGxpY2UoMCwgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGgpO1xuICAgICAgZmx1c2hCYXRjaGVkVXBkYXRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBVUERBVEVfUVVFVUVJTkcgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5yZXNldCgpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlLm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbTkVTVEVEX1VQREFURVMsIFVQREFURV9RVUVVRUlOR107XG5cbmZ1bmN0aW9uIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBudWxsO1xuICB0aGlzLmNhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID1cbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbn1cblxuYXNzaWduKFxuICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgVHJhbnNhY3Rpb24uTWl4aW4sIHtcbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKTtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBudWxsO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IG51bGw7XG4gIH0sXG5cbiAgcGVyZm9ybTogZnVuY3Rpb24obWV0aG9kLCBzY29wZSwgYSkge1xuICAgIC8vIEVzc2VudGlhbGx5IGNhbGxzIGB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0obWV0aG9kLCBzY29wZSwgYSlgXG4gICAgLy8gd2l0aCB0aGlzIHRyYW5zYWN0aW9uJ3Mgd3JhcHBlcnMgYXJvdW5kIGl0LlxuICAgIHJldHVybiBUcmFuc2FjdGlvbi5NaXhpbi5wZXJmb3JtLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtLFxuICAgICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIHNjb3BlLFxuICAgICAgYVxuICAgICk7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7XG5cbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkKSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG4gIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQpO1xufVxuXG4vKipcbiAqIEFycmF5IGNvbXBhcmF0b3IgZm9yIFJlYWN0Q29tcG9uZW50cyBieSBtb3VudCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMSBmaXJzdCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybiB2YWx1ZSB1c2FibGUgYnkgQXJyYXkucHJvdG90eXBlLnNvcnQoKS5cbiAqL1xuZnVuY3Rpb24gbW91bnRPcmRlckNvbXBhcmF0b3IoYzEsIGMyKSB7XG4gIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xufVxuXG5mdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICB2YXIgbGVuID0gdHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCxcbiAgICAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvICcgK1xuICAgICdtYXRjaCBkaXJ0eS1jb21wb25lbnRzIGFycmF5IGxlbmd0aCAoJXMpLicsXG4gICAgbGVuLFxuICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGhcbiAgKSA6IGludmFyaWFudChsZW4gPT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpKTtcblxuICAvLyBTaW5jZSByZWNvbmNpbGluZyBhIGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIG93bmVyIGhpZXJhcmNoeSB1c3VhbGx5IChub3RcbiAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuICAvLyB0aGVtIGJlZm9yZSB0aGVpciBjaGlsZHJlbiBieSBzb3J0aW5nIHRoZSBhcnJheS5cbiAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnRPcmRlckNvbXBhcmF0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIHBlbmRpbmcgY2hhbmdlcyBhcHBseSwgaXQgd2lsbCBzdGlsbFxuICAgIC8vIGJlIGhlcmUsIGJ1dCB3ZSBhc3N1bWUgdGhhdCBpdCBoYXMgY2xlYXJlZCBpdHMgX3BlbmRpbmdDYWxsYmFja3MgYW5kXG4gICAgLy8gdGhhdCBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaXMgYSBub29wLlxuICAgIHZhciBjb21wb25lbnQgPSBkaXJ0eUNvbXBvbmVudHNbaV07XG5cbiAgICAvLyBJZiBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaGFwcGVucyB0byBlbnF1ZXVlIGFueSBuZXcgdXBkYXRlcywgd2VcbiAgICAvLyBzaG91bGRuJ3QgZXhlY3V0ZSB0aGUgY2FsbGJhY2tzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBoYXBwZW5zLCBzb1xuICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3RcbiAgICB2YXIgY2FsbGJhY2tzID0gY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzO1xuICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cbiAgICBSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KFxuICAgICAgY29tcG9uZW50LFxuICAgICAgdHJhbnNhY3Rpb24ucmVjb25jaWxlVHJhbnNhY3Rpb25cbiAgICApO1xuXG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uY2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKFxuICAgICAgICAgIGNhbGxiYWNrc1tqXSxcbiAgICAgICAgICBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uJ3Mgd3JhcHBlcnMgd2lsbCBjbGVhciB0aGUgZGlydHlDb21wb25lbnRzXG4gIC8vIGFycmF5IGFuZCBwZXJmb3JtIGFueSB1cGRhdGVzIGVucXVldWVkIGJ5IG1vdW50LXJlYWR5IGhhbmRsZXJzIChpLmUuLFxuICAvLyBjb21wb25lbnREaWRVcGRhdGUpIGJ1dCB3ZSBuZWVkIHRvIGNoZWNrIGhlcmUgdG9vIGluIG9yZGVyIHRvIGNhdGNoXG4gIC8vIHVwZGF0ZXMgZW5xdWV1ZWQgYnkgc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCBhc2FwIGNhbGxzLlxuICB3aGlsZSAoZGlydHlDb21wb25lbnRzLmxlbmd0aCB8fCBhc2FwRW5xdWV1ZWQpIHtcbiAgICBpZiAoZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0ocnVuQmF0Y2hlZFVwZGF0ZXMsIG51bGwsIHRyYW5zYWN0aW9uKTtcbiAgICAgIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGFzYXBFbnF1ZXVlZCkge1xuICAgICAgYXNhcEVucXVldWVkID0gZmFsc2U7XG4gICAgICB2YXIgcXVldWUgPSBhc2FwQ2FsbGJhY2tRdWV1ZTtcbiAgICAgIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgICAgIHF1ZXVlLm5vdGlmeUFsbCgpO1xuICAgICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHF1ZXVlKTtcbiAgICB9XG4gIH1cbn07XG5mbHVzaEJhdGNoZWRVcGRhdGVzID0gUmVhY3RQZXJmLm1lYXN1cmUoXG4gICdSZWFjdFVwZGF0ZXMnLFxuICAnZmx1c2hCYXRjaGVkVXBkYXRlcycsXG4gIGZsdXNoQmF0Y2hlZFVwZGF0ZXNcbik7XG5cbi8qKlxuICogTWFyayBhIGNvbXBvbmVudCBhcyBuZWVkaW5nIGEgcmVyZW5kZXIsIGFkZGluZyBhbiBvcHRpb25hbCBjYWxsYmFjayB0byBhXG4gKiBsaXN0IG9mIGZ1bmN0aW9ucyB3aGljaCB3aWxsIGJlIGV4ZWN1dGVkIG9uY2UgdGhlIHJlcmVuZGVyIG9jY3Vycy5cbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShjb21wb25lbnQpIHtcbiAgZW5zdXJlSW5qZWN0ZWQoKTtcblxuICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFRoaXMgaXMgY2FsbGVkIGJ5IGVhY2ggdG9wLWxldmVsIHVwZGF0ZVxuICAvLyBmdW5jdGlvbiwgbGlrZSBzZXRQcm9wcywgc2V0U3RhdGUsIGZvcmNlVXBkYXRlLCBldGMuOyBjcmVhdGlvbiBhbmRcbiAgLy8gZGVzdHJ1Y3Rpb24gb2YgdG9wLWxldmVsIGNvbXBvbmVudHMgaXMgZ3VhcmRlZCBpbiBSZWFjdE1vdW50LilcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICdlbnF1ZXVlVXBkYXRlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgJyArXG4gICAgJ2FuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90ICcgK1xuICAgICdhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArXG4gICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG4gICkgOiBudWxsKTtcblxuICBpZiAoIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGVucXVldWVVcGRhdGUsIGNvbXBvbmVudCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGlydHlDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdG8gYmUgcnVuIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYmF0Y2hpbmcgY3ljbGUuIFRocm93c1xuICogaWYgbm8gdXBkYXRlcyBhcmUgY3VycmVudGx5IGJlaW5nIHBlcmZvcm1lZC5cbiAqL1xuZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgY29udGV4dCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMsXG4gICAgJ1JlYWN0VXBkYXRlcy5hc2FwOiBDYW5cXCd0IGVucXVldWUgYW4gYXNhcCBjYWxsYmFjayBpbiBhIGNvbnRleHQgd2hlcmUnICtcbiAgICAndXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJ1xuICApIDogaW52YXJpYW50KGJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMpKTtcbiAgYXNhcENhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFjaywgY29udGV4dCk7XG4gIGFzYXBFbnF1ZXVlZCA9IHRydWU7XG59XG5cbnZhciBSZWFjdFVwZGF0ZXNJbmplY3Rpb24gPSB7XG4gIGluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBmdW5jdGlvbihSZWNvbmNpbGVUcmFuc2FjdGlvbikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBSZWNvbmNpbGVUcmFuc2FjdGlvbixcbiAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcydcbiAgICApIDogaW52YXJpYW50KFJlY29uY2lsZVRyYW5zYWN0aW9uKSk7XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiAgfSxcblxuICBpbmplY3RCYXRjaGluZ1N0cmF0ZWd5OiBmdW5jdGlvbihfYmF0Y2hpbmdTdHJhdGVneSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBfYmF0Y2hpbmdTdHJhdGVneSxcbiAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoaW5nIHN0cmF0ZWd5J1xuICAgICkgOiBpbnZhcmlhbnQoX2JhdGNoaW5nU3RyYXRlZ3kpKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hlZFVwZGF0ZXMoKSBmdW5jdGlvbidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJyxcbiAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZSdcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9PT0gJ2Jvb2xlYW4nKSk7XG4gICAgYmF0Y2hpbmdTdHJhdGVneSA9IF9iYXRjaGluZ1N0cmF0ZWd5O1xuICB9XG59O1xuXG52YXIgUmVhY3RVcGRhdGVzID0ge1xuICAvKipcbiAgICogUmVhY3QgcmVmZXJlbmNlcyBgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbmAgdXNpbmcgdGhpcyBwcm9wZXJ0eSBpbiBvcmRlclxuICAgKiB0byBhbGxvdyBkZXBlbmRlbmN5IGluamVjdGlvbi5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBudWxsLFxuXG4gIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcbiAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSxcbiAgZmx1c2hCYXRjaGVkVXBkYXRlczogZmx1c2hCYXRjaGVkVXBkYXRlcyxcbiAgaW5qZWN0aW9uOiBSZWFjdFVwZGF0ZXNJbmplY3Rpb24sXG4gIGFzYXA6IGFzYXBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0V2l0aEFkZG9uc1xuICovXG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZXhpc3RzIHB1cmVseSBpbiB0aGUgb3BlbiBzb3VyY2UgcHJvamVjdCwgYW5kIGlzIG1lYW50IGFzIGEgd2F5XG4gKiB0byBjcmVhdGUgYSBzZXBhcmF0ZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFJlYWN0LiBUaGlzIGJ1aWxkIGhhcyBcImFkZG9uc1wiLCBvclxuICogZnVuY3Rpb25hbGl0eSB3ZSd2ZSBidWlsdCBhbmQgdGhpbmsgbWlnaHQgYmUgdXNlZnVsIGJ1dCBkb2Vzbid0IGhhdmUgYSBnb29kXG4gKiBwbGFjZSB0byBsaXZlIGluc2lkZSBSZWFjdCBjb3JlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFN0YXRlTWl4aW4gPSByZXF1aXJlKFwiLi9MaW5rZWRTdGF0ZU1peGluXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcIi4vUmVhY3RcIik7XG52YXIgUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluXCIpO1xudmFyIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZShcIi4vUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBcIik7XG52YXIgUmVhY3RGcmFnbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIik7XG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKFwiLi9SZWFjdFRyYW5zaXRpb25Hcm91cFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBjeCA9IHJlcXVpcmUoXCIuL2N4XCIpO1xudmFyIGNsb25lV2l0aFByb3BzID0gcmVxdWlyZShcIi4vY2xvbmVXaXRoUHJvcHNcIik7XG52YXIgdXBkYXRlID0gcmVxdWlyZShcIi4vdXBkYXRlXCIpO1xuXG5SZWFjdC5hZGRvbnMgPSB7XG4gIENTU1RyYW5zaXRpb25Hcm91cDogUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAsXG4gIExpbmtlZFN0YXRlTWl4aW46IExpbmtlZFN0YXRlTWl4aW4sXG4gIFB1cmVSZW5kZXJNaXhpbjogUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluLFxuICBUcmFuc2l0aW9uR3JvdXA6IFJlYWN0VHJhbnNpdGlvbkdyb3VwLFxuXG4gIGJhdGNoZWRVcGRhdGVzOiBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMsXG4gIGNsYXNzU2V0OiBjeCxcbiAgY2xvbmVXaXRoUHJvcHM6IGNsb25lV2l0aFByb3BzLFxuICBjcmVhdGVGcmFnbWVudDogUmVhY3RGcmFnbWVudC5jcmVhdGUsXG4gIHVwZGF0ZTogdXBkYXRlXG59O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIFJlYWN0LmFkZG9ucy5QZXJmID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZlwiKTtcbiAgUmVhY3QuYWRkb25zLlRlc3RVdGlscyA9IHJlcXVpcmUoXCIuL1JlYWN0VGVzdFV0aWxzXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNWR0RPTVByb3BlcnR5Q29uZmlnXG4gKi9cblxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xuXG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICBjbGlwUGF0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGN4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZHg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZpbGw6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmaWxsT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvbnRGYW1pbHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb250U2l6ZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZ4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGdyYWRpZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJFbmQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJNaWQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJTdGFydDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG9mZnNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwYXR0ZXJuQ29udGVudFVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcGF0dGVyblVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcG9pbnRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3ByZWFkTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RvcENvbG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RvcE9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VEYXNoYXJyYXk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VMaW5lY2FwOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZVdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdGV4dEFuY2hvcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZlcnNpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB2aWV3Qm94OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5MTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHkyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTogTVVTVF9VU0VfQVRUUklCVVRFXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgY2xpcFBhdGg6ICdjbGlwLXBhdGgnLFxuICAgIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICAgIGZvbnRTaXplOiAnZm9udC1zaXplJyxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogJ2dyYWRpZW50VHJhbnNmb3JtJyxcbiAgICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gICAgbWFya2VyRW5kOiAnbWFya2VyLWVuZCcsXG4gICAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgICBzcHJlYWRNZXRob2Q6ICdzcHJlYWRNZXRob2QnLFxuICAgIHN0b3BDb2xvcjogJ3N0b3AtY29sb3InLFxuICAgIHN0b3BPcGFjaXR5OiAnc3RvcC1vcGFjaXR5JyxcbiAgICBzdHJva2VEYXNoYXJyYXk6ICdzdHJva2UtZGFzaGFycmF5JyxcbiAgICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICAgIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gICAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnLFxuICAgIHRleHRBbmNob3I6ICd0ZXh0LWFuY2hvcicsXG4gICAgdmlld0JveDogJ3ZpZXdCb3gnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1ZHRE9NUHJvcGVydHlDb25maWc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VsZWN0RXZlbnRQbHVnaW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZShcIi4vZ2V0QWN0aXZlRWxlbWVudFwiKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKFwiLi9pc1RleHRJbnB1dEVsZW1lbnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKFwiLi9zaGFsbG93RXF1YWxcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIHNlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TZWxlY3Q6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TZWxlY3RDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudSxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXG4gICAgXVxuICB9XG59O1xuXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbnZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbnZhciBtb3VzZURvd24gPSBmYWxzZTtcblxuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIG5vZGUgJiZcbiAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmVudEVsZW1lbnQ6IHJhbmdlLnBhcmVudEVsZW1lbnQoKSxcbiAgICAgIHRleHQ6IHJhbmdlLnRleHQsXG4gICAgICB0b3A6IHJhbmdlLmJvdW5kaW5nVG9wLFxuICAgICAgbGVmdDogcmFuZ2UuYm91bmRpbmdMZWZ0XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFBvbGwgc2VsZWN0aW9uIHRvIHNlZSB3aGV0aGVyIGl0J3MgY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9TeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgaWYgKG1vdXNlRG93biB8fFxuICAgICAgYWN0aXZlRWxlbWVudCA9PSBudWxsIHx8XG4gICAgICBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE9ubHkgZmlyZSB3aGVuIHNlbGVjdGlvbiBoYXMgYWN0dWFsbHkgY2hhbmdlZC5cbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oYWN0aXZlRWxlbWVudCk7XG4gIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgbGFzdFNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG5cbiAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLnNlbGVjdCxcbiAgICAgIGFjdGl2ZUVsZW1lbnRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcblxuICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0JztcbiAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHN5bnRoZXRpY0V2ZW50KTtcblxuICAgIHJldHVybiBzeW50aGV0aWNFdmVudDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uU2VsZWN0YCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgc2VsZWN0IGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gY29udGVudEVkaXRhYmxlXG4gKlxuICogVGhpcyBkaWZmZXJzIGZyb20gbmF0aXZlIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIGluIHRoZSBmb2xsb3dpbmcgd2F5czpcbiAqIC0gRmlyZXMgb24gY29udGVudEVkaXRhYmxlIGZpZWxkcyBhcyB3ZWxsIGFzIGlucHV0cy5cbiAqIC0gRmlyZXMgZm9yIGNvbGxhcHNlZCBzZWxlY3Rpb24uXG4gKiAtIEZpcmVzIGFmdGVyIHVzZXIgaW5wdXQuXG4gKi9cbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0b3BMZXZlbFRhcmdldCkgfHxcbiAgICAgICAgICAgIHRvcExldmVsVGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRJRCA9IHRvcExldmVsVGFyZ2V0SUQ7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgICAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpO1xuXG4gICAgICAvLyBDaHJvbWUgYW5kIElFIGZpcmUgbm9uLXN0YW5kYXJkIGV2ZW50IHdoZW4gc2VsZWN0aW9uIGlzIGNoYW5nZWQgKGFuZFxuICAgICAgLy8gc29tZXRpbWVzIHdoZW4gaXQgaGFzbid0KS5cbiAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgICAgLy8gYWZ0ZXIgZWFjaCBrZXkgZW50cnkuIFRoZSBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciBrZXlkb3duIGFuZCBiZWZvcmVcbiAgICAgIC8vIGtleXVwLCBidXQgd2UgY2hlY2sgb24ga2V5ZG93biBhcyB3ZWxsIGluIHRoZSBjYXNlIG9mIGhvbGRpbmcgZG93biBhXG4gICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RXZlbnRQbHVnaW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VydmVyUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpemUgb2YgdGhlIHJlYWN0Um9vdCBJRCBzcGFjZS4gV2UgZ2VuZXJhdGUgcmFuZG9tIG51bWJlcnMgZm9yIFJlYWN0IHJvb3RcbiAqIElEcyBhbmQgaWYgdGhlcmUncyBhIGNvbGxpc2lvbiB0aGUgZXZlbnRzIGFuZCBET00gdXBkYXRlIHN5c3RlbSB3aWxsXG4gKiBnZXQgY29uZnVzZWQuIEluIHRoZSBmdXR1cmUgd2UgbmVlZCBhIHdheSB0byBnZW5lcmF0ZSBHVUlEcyBidXQgZm9yXG4gKiBub3cgdGhpcyB3aWxsIHdvcmsgb24gYSBzbWFsbGVyIHNjYWxlLlxuICovXG52YXIgR0xPQkFMX01PVU5UX1BPSU5UX01BWCA9IE1hdGgucG93KDIsIDUzKTtcblxudmFyIFNlcnZlclJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogR0xPQkFMX01PVU5UX1BPSU5UX01BWCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmVyUmVhY3RSb290SW5kZXg7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2ltcGxlRXZlbnRQbHVnaW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnRcIik7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcbnZhciBTeW50aGV0aWNGb2N1c0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRm9jdXNFdmVudFwiKTtcbnZhciBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljS2V5Ym9hcmRFdmVudFwiKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNEcmFnRXZlbnRcIik7XG52YXIgU3ludGhldGljVG91Y2hFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1RvdWNoRXZlbnRcIik7XG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIik7XG52YXIgU3ludGhldGljV2hlZWxFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1doZWVsRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBibHVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkJsdXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CbHVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBjbGljazoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25DbGljazogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNsaWNrQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBjb250ZXh0TWVudToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db250ZXh0TWVudTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBjb3B5OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvcHk6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db3B5Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBjdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ3V0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ3V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkb3VibGVDbGljazoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Eb3VibGVDbGljazogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWc6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFbmQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnRW50ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0VudGVyOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0VudGVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnRXhpdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRXhpdDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFeGl0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnTGVhdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0xlYXZlOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0xlYXZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnT3Zlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnT3ZlcjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdPdmVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcmFnU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ1N0YXJ0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ1N0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBkcm9wOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyb3A6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ecm9wQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBmb2N1czoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Gb2N1czogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkZvY3VzQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBpbnB1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25JbnB1dDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbklucHV0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBrZXlEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleURvd246IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlEb3duQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBrZXlQcmVzczoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25LZXlQcmVzczogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbktleVByZXNzQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBrZXlVcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25LZXlVcDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbktleVVwQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBsb2FkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkxvYWQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Mb2FkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBlcnJvcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25FcnJvcjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkVycm9yQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICAvLyBOb3RlOiBXZSBkbyBub3QgYWxsb3cgbGlzdGVuaW5nIHRvIG1vdXNlT3ZlciBldmVudHMuIEluc3RlYWQsIHVzZSB0aGVcbiAgLy8gb25Nb3VzZUVudGVyL29uTW91c2VMZWF2ZSBjcmVhdGVkIGJ5IGBFbnRlckxlYXZlRXZlbnRQbHVnaW5gLlxuICBtb3VzZURvd246IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VEb3duOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBtb3VzZU1vdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VNb3ZlOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VNb3ZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBtb3VzZU91dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU91dDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlT3V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBtb3VzZU92ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VPdmVyOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VPdmVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBtb3VzZVVwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlVXA6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZVVwQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBwYXN0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25QYXN0ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblBhc3RlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICByZXNldDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25SZXNldDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblJlc2V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBzY3JvbGw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2Nyb2xsOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2Nyb2xsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICBzdWJtaXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uU3VibWl0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU3VibWl0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICB0b3VjaENhbmNlbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaENhbmNlbDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoQ2FuY2VsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICB0b3VjaEVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaEVuZDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICB0b3VjaE1vdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hNb3ZlOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hNb3ZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICB0b3VjaFN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoU3RhcnQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaFN0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9LFxuICB3aGVlbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25XaGVlbDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbldoZWVsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgfVxuICB9XG59O1xuXG52YXIgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuICB0b3BCbHVyOiAgICAgICAgZXZlbnRUeXBlcy5ibHVyLFxuICB0b3BDbGljazogICAgICAgZXZlbnRUeXBlcy5jbGljayxcbiAgdG9wQ29udGV4dE1lbnU6IGV2ZW50VHlwZXMuY29udGV4dE1lbnUsXG4gIHRvcENvcHk6ICAgICAgICBldmVudFR5cGVzLmNvcHksXG4gIHRvcEN1dDogICAgICAgICBldmVudFR5cGVzLmN1dCxcbiAgdG9wRG91YmxlQ2xpY2s6IGV2ZW50VHlwZXMuZG91YmxlQ2xpY2ssXG4gIHRvcERyYWc6ICAgICAgICBldmVudFR5cGVzLmRyYWcsXG4gIHRvcERyYWdFbmQ6ICAgICBldmVudFR5cGVzLmRyYWdFbmQsXG4gIHRvcERyYWdFbnRlcjogICBldmVudFR5cGVzLmRyYWdFbnRlcixcbiAgdG9wRHJhZ0V4aXQ6ICAgIGV2ZW50VHlwZXMuZHJhZ0V4aXQsXG4gIHRvcERyYWdMZWF2ZTogICBldmVudFR5cGVzLmRyYWdMZWF2ZSxcbiAgdG9wRHJhZ092ZXI6ICAgIGV2ZW50VHlwZXMuZHJhZ092ZXIsXG4gIHRvcERyYWdTdGFydDogICBldmVudFR5cGVzLmRyYWdTdGFydCxcbiAgdG9wRHJvcDogICAgICAgIGV2ZW50VHlwZXMuZHJvcCxcbiAgdG9wRXJyb3I6ICAgICAgIGV2ZW50VHlwZXMuZXJyb3IsXG4gIHRvcEZvY3VzOiAgICAgICBldmVudFR5cGVzLmZvY3VzLFxuICB0b3BJbnB1dDogICAgICAgZXZlbnRUeXBlcy5pbnB1dCxcbiAgdG9wS2V5RG93bjogICAgIGV2ZW50VHlwZXMua2V5RG93bixcbiAgdG9wS2V5UHJlc3M6ICAgIGV2ZW50VHlwZXMua2V5UHJlc3MsXG4gIHRvcEtleVVwOiAgICAgICBldmVudFR5cGVzLmtleVVwLFxuICB0b3BMb2FkOiAgICAgICAgZXZlbnRUeXBlcy5sb2FkLFxuICB0b3BNb3VzZURvd246ICAgZXZlbnRUeXBlcy5tb3VzZURvd24sXG4gIHRvcE1vdXNlTW92ZTogICBldmVudFR5cGVzLm1vdXNlTW92ZSxcbiAgdG9wTW91c2VPdXQ6ICAgIGV2ZW50VHlwZXMubW91c2VPdXQsXG4gIHRvcE1vdXNlT3ZlcjogICBldmVudFR5cGVzLm1vdXNlT3ZlcixcbiAgdG9wTW91c2VVcDogICAgIGV2ZW50VHlwZXMubW91c2VVcCxcbiAgdG9wUGFzdGU6ICAgICAgIGV2ZW50VHlwZXMucGFzdGUsXG4gIHRvcFJlc2V0OiAgICAgICBldmVudFR5cGVzLnJlc2V0LFxuICB0b3BTY3JvbGw6ICAgICAgZXZlbnRUeXBlcy5zY3JvbGwsXG4gIHRvcFN1Ym1pdDogICAgICBldmVudFR5cGVzLnN1Ym1pdCxcbiAgdG9wVG91Y2hDYW5jZWw6IGV2ZW50VHlwZXMudG91Y2hDYW5jZWwsXG4gIHRvcFRvdWNoRW5kOiAgICBldmVudFR5cGVzLnRvdWNoRW5kLFxuICB0b3BUb3VjaE1vdmU6ICAgZXZlbnRUeXBlcy50b3VjaE1vdmUsXG4gIHRvcFRvdWNoU3RhcnQ6ICBldmVudFR5cGVzLnRvdWNoU3RhcnQsXG4gIHRvcFdoZWVsOiAgICAgICBldmVudFR5cGVzLndoZWVsXG59O1xuXG5mb3IgKHZhciB0eXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZykge1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdHlwZV0uZGVwZW5kZW5jaWVzID0gW3R5cGVdO1xufVxuXG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogU2FtZSBhcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiwgZXhjZXB0IGNhbmNlbHMgdGhlIGV2ZW50IHdoZW4gcmV0dXJuXG4gICAqIHZhbHVlIGlzIGZhbHNlLiBUaGlzIGJlaGF2aW9yIHdpbGwgYmUgZGlzYWJsZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IEV2ZW50IHRvIGJlIGRpc3BhdGNoZWQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZG9tSUQgRE9NIElEIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgZXhlY3V0ZURpc3BhdGNoOiBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIsIGRvbUlEKSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBkb21JRCk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHR5cGVvZiByZXR1cm5WYWx1ZSAhPT0gJ2Jvb2xlYW4nLFxuICAgICAgJ1JldHVybmluZyBgZmFsc2VgIGZyb20gYW4gZXZlbnQgaGFuZGxlciBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlICcgK1xuICAgICAgJ2lnbm9yZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gSW5zdGVhZCwgbWFudWFsbHkgY2FsbCAnICtcbiAgICAgICdlLnN0b3BQcm9wYWdhdGlvbigpIG9yIGUucHJldmVudERlZmF1bHQoKSwgYXMgYXBwcm9wcmlhdGUuJ1xuICAgICkgOiBudWxsKTtcblxuICAgIGlmIChyZXR1cm5WYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO1xuICAgIGlmICghZGlzcGF0Y2hDb25maWcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgRXZlbnRDb25zdHJ1Y3RvcjtcbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcElucHV0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRXJyb3I6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUmVzZXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU3VibWl0OlxuICAgICAgICAvLyBIVE1MIEV2ZW50c1xuICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2luZGV4Lmh0bWwjZXZlbnRzLTBcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgICAgLy8gRmlyZUZveCBjcmVhdGVzIGEga2V5cHJlc3MgZXZlbnQgZm9yIGZ1bmN0aW9uIGtleXMgdG9vLiBUaGlzIHJlbW92ZXNcbiAgICAgICAgLy8gdGhlIHVud2FudGVkIGtleXByZXNzIGV2ZW50cy4gRW50ZXIgaXMgaG93ZXZlciBib3RoIHByaW50YWJsZSBhbmRcbiAgICAgICAgLy8gbm9uLXByaW50YWJsZS4gT25lIHdvdWxkIGV4cGVjdCBUYWIgdG8gYmUgYXMgd2VsbCAoYnV0IGl0IGlzbid0KS5cbiAgICAgICAgaWYgKGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2xpY2s6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGNsaWNrIGV2ZW50IG9uIHJpZ2h0IG1vdXNlIGNsaWNrcy4gVGhpcyByZW1vdmVzIHRoZVxuICAgICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRG91YmxlQ2xpY2s6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWc6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VuZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW50ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0V4aXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0xlYXZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdPdmVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdTdGFydDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcm9wOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRHJhZ0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaENhbmNlbDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1RvdWNoRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29weTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGFzdGU6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBFdmVudENvbnN0cnVjdG9yLFxuICAgICAgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4nLFxuICAgICAgdG9wTGV2ZWxUeXBlXG4gICAgKSA6IGludmFyaWFudChFdmVudENvbnN0cnVjdG9yKSk7XG4gICAgdmFyIGV2ZW50ID0gRXZlbnRDb25zdHJ1Y3Rvci5nZXRQb29sZWQoXG4gICAgICBkaXNwYXRjaENvbmZpZyxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVFdmVudFBsdWdpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY2xpcGJvYXJkLWFwaXMvXG4gKi9cbnZhciBDbGlwYm9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2NsaXBib2FyZERhdGEnIGluIGV2ZW50ID9cbiAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YSA6XG4gICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhXG4gICAgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljQ2xpcGJvYXJkRXZlbnQsIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1jb21wb3NpdGlvbmV2ZW50c1xuICovXG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgZGlzcGF0Y2hDb25maWcsXG4gIGRpc3BhdGNoTWFya2VyLFxuICBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoXG4gIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQsXG4gIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2Vcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNEcmFnRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBEcmFnRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRHJhZ0V2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhVHJhbnNmZXI6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHR5cGU6IG51bGwsXG4gIHRhcmdldDogZ2V0RXZlbnRUYXJnZXQsXG4gIC8vIGN1cnJlbnRUYXJnZXQgaXMgc2V0IHdoZW4gZGlzcGF0Y2hpbmc7IG5vIHVzZSBpbiBjb3B5aW5nIGl0IGhlcmVcbiAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gIGV2ZW50UGhhc2U6IG51bGwsXG4gIGJ1YmJsZXM6IG51bGwsXG4gIGNhbmNlbGFibGU6IG51bGwsXG4gIHRpbWVTdGFtcDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgP1xuICAgIG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOlxuICAgIG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICB9XG4gIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG59XG5cbmFzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcblxuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gIH1cblxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG4vKipcbiAqIEhlbHBlciB0byByZWR1Y2UgYm9pbGVycGxhdGUgd2hlbiBjcmVhdGluZyBzdWJjbGFzc2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENsYXNzXG4gKiBAcGFyYW0gez9vYmplY3R9IEludGVyZmFjZVxuICovXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbihDbGFzcywgSW50ZXJmYWNlKSB7XG4gIHZhciBTdXBlciA9IHRoaXM7XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgQ2xhc3MucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDbGFzcztcblxuICBDbGFzcy5JbnRlcmZhY2UgPSBhc3NpZ24oe30sIFN1cGVyLkludGVyZmFjZSwgSW50ZXJmYWNlKTtcbiAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuXG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDbGFzcywgUG9vbGVkQ2xhc3MudGhyZWVBcmd1bWVudFBvb2xlcik7XG59O1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oU3ludGhldGljRXZlbnQsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0ZvY3VzRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEZvY3VzRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0ZvY3VzRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0ZvY3VzRXZlbnQsIEZvY3VzRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljSW5wdXRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcbiAqICAgICAgLyNldmVudHMtaW5wdXRldmVudHNcbiAqL1xudmFyIElucHV0RXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0lucHV0RXZlbnQoXG4gIGRpc3BhdGNoQ29uZmlnLFxuICBkaXNwYXRjaE1hcmtlcixcbiAgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFxuICBTeW50aGV0aWNJbnB1dEV2ZW50LFxuICBJbnB1dEV2ZW50SW50ZXJmYWNlXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0lucHV0RXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljS2V5Ym9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xudmFyIGdldEV2ZW50S2V5ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRLZXlcIik7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRNb2RpZmllclN0YXRlXCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgLy8gTGVnYWN5IEludGVyZmFjZVxuICBjaGFyQ29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBgY2hhckNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlQcmVzcyBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGUgYWN0dWFsIHByaW50YWJsZSBjaGFyYWN0ZXIuXG5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAga2V5Q29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGB3aGljaGAgaXMgYW4gYWxpYXMgZm9yIGVpdGhlciBga2V5Q29kZWAgb3IgYGNoYXJDb2RlYCBkZXBlbmRpbmcgb24gdGhlXG4gICAgLy8gdHlwZSBvZiB0aGUgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKFwiLi9WaWV3cG9ydE1ldHJpY3NcIik7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIFdlYmtpdCwgRmlyZWZveCwgSUU5K1xuICAgIC8vIHdoaWNoOiAgMSAyIDNcbiAgICAvLyBidXR0b246IDAgMSAyIChzdGFuZGFyZClcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuICAgIGlmICgnd2hpY2gnIGluIGV2ZW50KSB7XG4gICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICAvLyBJRTw5XG4gICAgLy8gd2hpY2g6ICB1bmRlZmluZWRcbiAgICAvLyBidXR0b246IDAgMCAwXG4gICAgLy8gYnV0dG9uOiAxIDQgMiAob25tb3VzZXVwKVxuICAgIHJldHVybiBidXR0b24gPT09IDIgPyAyIDogYnV0dG9uID09PSA0ID8gMSA6IDA7XG4gIH0sXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKFxuICAgICAgKChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KSlcbiAgICApO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWCA6XG4gICAgICBldmVudC5jbGllbnRYICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0O1xuICB9LFxuICBwYWdlWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWSA6XG4gICAgICBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVG91Y2hFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNVSUV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIHRhcmdldCBpcyBhIHdpbmRvdyBvYmplY3RcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICBpZiAoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICB9LFxuICBkZXRhaWw6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmRldGFpbCB8fCAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVUlFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNVSUV2ZW50LCBVSUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1doZWVsRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRlbHRhWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOlxuICAgICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwXG4gICAgKTtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6XG4gICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMFxuICAgICk7XG4gIH0sXG4gIGRlbHRhWjogbnVsbCxcblxuICAvLyBCcm93c2VycyB3aXRob3V0IFwiZGVsdGFNb2RlXCIgaXMgcmVwb3J0aW5nIGluIHJhdyB3aGVlbCBkZWx0YSB3aGVyZSBvbmVcbiAgLy8gbm90Y2ggb24gdGhlIHNjcm9sbCBpcyBhbHdheXMgKy8tIDEyMCwgcm91Z2hseSBlcXVpdmFsZW50IHRvIHBpeGVscy5cbiAgLy8gQSBnb29kIGFwcHJveGltYXRpb24gb2YgRE9NX0RFTFRBX0xJTkUgKDEpIGlzIDUlIG9mIHZpZXdwb3J0IHNpemUgb3JcbiAgLy8gfjQwIHBpeGVscywgZm9yIERPTV9ERUxUQV9TQ1JFRU4gKDIpIGl0IGlzIDg3LjUlIG9mIHZpZXdwb3J0IHNpemUuXG4gIGRlbHRhTW9kZTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljTW91c2VFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljV2hlZWxFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCwgV2hlZWxFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBUcmFuc2FjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBgVHJhbnNhY3Rpb25gIGNyZWF0ZXMgYSBibGFjayBib3ggdGhhdCBpcyBhYmxlIHRvIHdyYXAgYW55IG1ldGhvZCBzdWNoIHRoYXRcbiAqIGNlcnRhaW4gaW52YXJpYW50cyBhcmUgbWFpbnRhaW5lZCBiZWZvcmUgYW5kIGFmdGVyIHRoZSBtZXRob2QgaXMgaW52b2tlZFxuICogKEV2ZW4gaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biB3aGlsZSBpbnZva2luZyB0aGUgd3JhcHBlZCBtZXRob2QpLiBXaG9ldmVyXG4gKiBpbnN0YW50aWF0ZXMgYSB0cmFuc2FjdGlvbiBjYW4gcHJvdmlkZSBlbmZvcmNlcnMgb2YgdGhlIGludmFyaWFudHMgYXRcbiAqIGNyZWF0aW9uIHRpbWUuIFRoZSBgVHJhbnNhY3Rpb25gIGNsYXNzIGl0c2VsZiB3aWxsIHN1cHBseSBvbmUgYWRkaXRpb25hbFxuICogYXV0b21hdGljIGludmFyaWFudCBmb3IgeW91IC0gdGhlIGludmFyaWFudCB0aGF0IGFueSB0cmFuc2FjdGlvbiBpbnN0YW5jZVxuICogc2hvdWxkIG5vdCBiZSBydW4gd2hpbGUgaXQgaXMgYWxyZWFkeSBiZWluZyBydW4uIFlvdSB3b3VsZCB0eXBpY2FsbHkgY3JlYXRlIGFcbiAqIHNpbmdsZSBpbnN0YW5jZSBvZiBhIGBUcmFuc2FjdGlvbmAgZm9yIHJldXNlIG11bHRpcGxlIHRpbWVzLCB0aGF0IHBvdGVudGlhbGx5XG4gKiBpcyB1c2VkIHRvIHdyYXAgc2V2ZXJhbCBkaWZmZXJlbnQgbWV0aG9kcy4gV3JhcHBlcnMgYXJlIGV4dHJlbWVseSBzaW1wbGUgLVxuICogdGhleSBvbmx5IHJlcXVpcmUgaW1wbGVtZW50aW5nIHR3byBtZXRob2RzLlxuICpcbiAqIDxwcmU+XG4gKiAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlcnMgKGluamVjdGVkIGF0IGNyZWF0aW9uIHRpbWUpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS18LS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgdiAgICAgICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICAgICArLS0tLS0tLS0tLS0tLS0tKyAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgKy0tfCAgICB3cmFwcGVyMSAgIHwtLS18LS0tLSsgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICstLS0tLS0tLS0tLS0tLS0rICAgdiAgICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICAgICAgICstLS0tLS0tLS0tLS0tKyAgfCAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgKy0tLS18ICAgd3JhcHBlcjIgIHwtLS0tLS0tLSsgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICB8ICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgdiAgICAgdiAgICAgICAgICAgICAgICAgICAgIHYgICAgIHYgICB8IHdyYXBwZXJcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8IGludmFyaWFudHNcbiAqIHBlcmZvcm0oYW55TWV0aG9kKSB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8IG1haW50YWluZWRcbiAqICstLS0tLS0tLS0tLS0tLS0tLT58LXwtLS18LXwtLS18LS0+fGFueU1ldGhvZHwtLS18LS0tfC18LS0tfC18LS0tLS0tLS0+XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfFxuICogICAgICAgICAgICAgICAgICAgIHwgIGluaXRpYWxpemUgICAgICAgICAgICAgICAgICAgIGNsb3NlICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiA8L3ByZT5cbiAqXG4gKiBVc2UgY2FzZXM6XG4gKiAtIFByZXNlcnZpbmcgdGhlIGlucHV0IHNlbGVjdGlvbiByYW5nZXMgYmVmb3JlL2FmdGVyIHJlY29uY2lsaWF0aW9uLlxuICogICBSZXN0b3Jpbmcgc2VsZWN0aW9uIGV2ZW4gaW4gdGhlIGV2ZW50IG9mIGFuIHVuZXhwZWN0ZWQgZXJyb3IuXG4gKiAtIERlYWN0aXZhdGluZyBldmVudHMgd2hpbGUgcmVhcnJhbmdpbmcgdGhlIERPTSwgcHJldmVudGluZyBibHVycy9mb2N1c2VzLFxuICogICB3aGlsZSBndWFyYW50ZWVpbmcgdGhhdCBhZnRlcndhcmRzLCB0aGUgZXZlbnQgc3lzdGVtIGlzIHJlYWN0aXZhdGVkLlxuICogLSBGbHVzaGluZyBhIHF1ZXVlIG9mIGNvbGxlY3RlZCBET00gbXV0YXRpb25zIHRvIHRoZSBtYWluIFVJIHRocmVhZCBhZnRlciBhXG4gKiAgIHJlY29uY2lsaWF0aW9uIHRha2VzIHBsYWNlIGluIGEgd29ya2VyIHRocmVhZC5cbiAqIC0gSW52b2tpbmcgYW55IGNvbGxlY3RlZCBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgYWZ0ZXIgcmVuZGVyaW5nIG5ld1xuICogICBjb250ZW50LlxuICogLSAoRnV0dXJlIHVzZSBjYXNlKTogV3JhcHBpbmcgcGFydGljdWxhciBmbHVzaGVzIG9mIHRoZSBgUmVhY3RXb3JrZXJgIHF1ZXVlXG4gKiAgIHRvIHByZXNlcnZlIHRoZSBgc2Nyb2xsVG9wYCAoYW4gYXV0b21hdGljIHNjcm9sbCBhd2FyZSBET00pLlxuICogLSAoRnV0dXJlIHVzZSBjYXNlKTogTGF5b3V0IGNhbGN1bGF0aW9ucyBiZWZvcmUgYW5kIGFmdGVyIERPTSB1cGRhdGVzLlxuICpcbiAqIFRyYW5zYWN0aW9uYWwgcGx1Z2luIEFQSTpcbiAqIC0gQSBtb2R1bGUgdGhhdCBoYXMgYW4gYGluaXRpYWxpemVgIG1ldGhvZCB0aGF0IHJldHVybnMgYW55IHByZWNvbXB1dGF0aW9uLlxuICogLSBhbmQgYSBgY2xvc2VgIG1ldGhvZCB0aGF0IGFjY2VwdHMgdGhlIHByZWNvbXB1dGF0aW9uLiBgY2xvc2VgIGlzIGludm9rZWRcbiAqICAgd2hlbiB0aGUgd3JhcHBlZCBwcm9jZXNzIGlzIGNvbXBsZXRlZCwgb3IgaGFzIGZhaWxlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uYWxXcmFwcGVyPn0gdHJhbnNhY3Rpb25XcmFwcGVyIFdyYXBwZXIgbW9kdWxlc1xuICogdGhhdCBpbXBsZW1lbnQgYGluaXRpYWxpemVgIGFuZCBgY2xvc2VgLlxuICogQHJldHVybiB7VHJhbnNhY3Rpb259IFNpbmdsZSB0cmFuc2FjdGlvbiBmb3IgcmV1c2UgaW4gdGhyZWFkLlxuICpcbiAqIEBjbGFzcyBUcmFuc2FjdGlvblxuICovXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBpcyBwcmVwYXJlZCBmb3IgY29sbGVjdGluZyBtZXRyaWNzLiBEb2VzXG4gICAqIHNvIHN1Y2ggdGhhdCB0aGlzIHNldHVwIG1ldGhvZCBtYXkgYmUgdXNlZCBvbiBhbiBpbnN0YW5jZSB0aGF0IGlzIGFscmVhZHlcbiAgICogaW5pdGlhbGl6ZWQsIGluIGEgd2F5IHRoYXQgZG9lcyBub3QgY29uc3VtZSBhZGRpdGlvbmFsIG1lbW9yeSB1cG9uIHJldXNlLlxuICAgKiBUaGF0IGNhbiBiZSB1c2VmdWwgaWYgeW91IGRlY2lkZSB0byBtYWtlIHlvdXIgc3ViY2xhc3Mgb2YgdGhpcyBtaXhpbiBhXG4gICAqIFwiUG9vbGVkQ2xhc3NcIi5cbiAgICovXG4gIHJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLmdldFRyYW5zYWN0aW9uV3JhcHBlcnMoKTtcbiAgICBpZiAoIXRoaXMud3JhcHBlckluaXREYXRhKSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YSA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgIH1cbiAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgfSxcblxuICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge0FycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj59IEFycmF5IG9mIHRyYW5zYWN0aW9uIHdyYXBwZXJzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogbnVsbCxcblxuICBpc0luVHJhbnNhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcbiAgfSxcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIHdpdGhpbiBhIHNhZmV0eSB3aW5kb3cuIFVzZSB0aGlzIGZvciB0aGUgdG9wIGxldmVsXG4gICAqIG1ldGhvZHMgdGhhdCByZXN1bHQgaW4gbGFyZ2UgYW1vdW50cyBvZiBjb21wdXRhdGlvbi9tdXRhdGlvbnMgdGhhdCB3b3VsZFxuICAgKiBuZWVkIHRvIGJlIHNhZmV0eSBjaGVja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWVtYmVyIG9mIHNjb3BlIHRvIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBTY29wZSB0byBpbnZva2UgZnJvbS5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYXJncy4uLiBBcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgbWV0aG9kIChvcHRpb25hbCkuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVscHMgcHJldmVudCBuZWVkIHRvIGJpbmQgaW4gbWFueSBjYXNlcy5cbiAgICogQHJldHVybiBSZXR1cm4gdmFsdWUgZnJvbSBgbWV0aG9kYC5cbiAgICovXG4gIHBlcmZvcm06IGZ1bmN0aW9uKG1ldGhvZCwgc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIXRoaXMuaXNJblRyYW5zYWN0aW9uKCksXG4gICAgICAnVHJhbnNhY3Rpb24ucGVyZm9ybSguLi4pOiBDYW5ub3QgaW5pdGlhbGl6ZSBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgJyArXG4gICAgICAnaXMgYWxyZWFkeSBhbiBvdXRzdGFuZGluZyB0cmFuc2FjdGlvbi4nXG4gICAgKSA6IGludmFyaWFudCghdGhpcy5pc0luVHJhbnNhY3Rpb24oKSkpO1xuICAgIHZhciBlcnJvclRocm93bjtcbiAgICB2YXIgcmV0O1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcbiAgICAgIC8vIG9uZSBvZiB0aGVzZSBjYWxscyB0aHJldy5cbiAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbCgwKTtcbiAgICAgIHJldCA9IG1ldGhvZC5jYWxsKHNjb3BlLCBhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIElmIGBtZXRob2RgIHRocm93cywgcHJlZmVyIHRvIHNob3cgdGhhdCBzdGFjayB0cmFjZSBvdmVyIGFueSB0aHJvd25cbiAgICAgICAgICAvLyBieSBpbnZva2luZyBgY2xvc2VBbGxgLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKDApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTaW5jZSBgbWV0aG9kYCBkaWRuJ3QgdGhyb3csIHdlIGRvbid0IHdhbnQgdG8gc2lsZW5jZSB0aGUgZXhjZXB0aW9uXG4gICAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgICB0aGlzLmNsb3NlQWxsKDApO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBpbml0aWFsaXplQWxsOiBmdW5jdGlvbihzdGFydEluZGV4KSB7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoIHRoZVxuICAgICAgICAvLyBPQlNFUlZFRF9FUlJPUiBzdGF0ZSBiZWZvcmUgb3ZlcndyaXRpbmcgaXQgd2l0aCB0aGUgcmVhbCByZXR1cm4gdmFsdWVcbiAgICAgICAgLy8gb2YgaW5pdGlhbGl6ZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byBPQlNFUlZFRF9FUlJPUiBpbiB0aGUgZmluYWxseVxuICAgICAgICAvLyBibG9jaywgaXQgbWVhbnMgd3JhcHBlci5pbml0aWFsaXplIHRocmV3LlxuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SO1xuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IHdyYXBwZXIuaW5pdGlhbGl6ZSA/XG4gICAgICAgICAgd3JhcHBlci5pbml0aWFsaXplLmNhbGwodGhpcykgOlxuICAgICAgICAgIG51bGw7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGFbaV0gPT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SKSB7XG4gICAgICAgICAgLy8gVGhlIGluaXRpYWxpemVyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGluaXRpYWxpemUgdGhlXG4gICAgICAgICAgLy8gcmVtYWluaW5nIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmVcbiAgICAgICAgICAvLyB0aGF0IHRoZSBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZXMgZWFjaCBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmNsb3NlW2ldYCBmdW5jdGlvbnMsIHBhc3NpbmcgaW50b1xuICAgKiB0aGVtIHRoZSByZXNwZWN0aXZlIHJldHVybiB2YWx1ZXMgb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5pbml0W2ldYFxuICAgKiAoYGNsb3NlYHJzIHRoYXQgY29ycmVzcG9uZCB0byBpbml0aWFsaXplcnMgdGhhdCBmYWlsZWQgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCkuXG4gICAqL1xuICBjbG9zZUFsbDogZnVuY3Rpb24oc3RhcnRJbmRleCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0aGlzLmlzSW5UcmFuc2FjdGlvbigpLFxuICAgICAgJ1RyYW5zYWN0aW9uLmNsb3NlQWxsKCk6IENhbm5vdCBjbG9zZSB0cmFuc2FjdGlvbiB3aGVuIG5vbmUgYXJlIG9wZW4uJ1xuICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc0luVHJhbnNhY3Rpb24oKSkpO1xuICAgIHZhciB0cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgdmFyIGluaXREYXRhID0gdGhpcy53cmFwcGVySW5pdERhdGFbaV07XG4gICAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcbiAgICAgICAgLy8gd3JhcHBlci5jbG9zZSB0aHJldy5cbiAgICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBpZiAoaW5pdERhdGEgIT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SICYmIHdyYXBwZXIuY2xvc2UpIHtcbiAgICAgICAgICB3cmFwcGVyLmNsb3NlLmNhbGwodGhpcywgaW5pdERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBUaGUgY2xvc2VyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGNsb3NlIHRoZSByZW1haW5pbmdcbiAgICAgICAgICAvLyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlIHRoYXQgdGhlXG4gICAgICAgICAgLy8gZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy53cmFwcGVySW5pdERhdGEubGVuZ3RoID0gMDtcbiAgfVxufTtcblxudmFyIFRyYW5zYWN0aW9uID0ge1xuXG4gIE1peGluOiBNaXhpbixcblxuICAvKipcbiAgICogVG9rZW4gdG8gbG9vayBmb3IgdG8gZGV0ZXJtaW5lIGlmIGFuIGVycm9yIG9jY3VyZWQuXG4gICAqL1xuICBPQlNFUlZFRF9FUlJPUjoge31cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBWaWV3cG9ydE1ldHJpY3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBWaWV3cG9ydE1ldHJpY3MgPSB7XG5cbiAgY3VycmVudFNjcm9sbExlZnQ6IDAsXG5cbiAgY3VycmVudFNjcm9sbFRvcDogMCxcblxuICByZWZyZXNoU2Nyb2xsVmFsdWVzOiBmdW5jdGlvbihzY3JvbGxQb3NpdGlvbikge1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdCA9IHNjcm9sbFBvc2l0aW9uLng7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3AgPSBzY3JvbGxQb3NpdGlvbi55O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld3BvcnRNZXRyaWNzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFjY3VtdWxhdGVJbnRvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbmV4dCAhPSBudWxsLFxuICAgICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nXG4gICkgOiBpbnZhcmlhbnQobmV4dCAhPSBudWxsKSk7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5ICYmIG5leHRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhZGxlcjMyXG4gKi9cblxuLyoganNsaW50IGJpdHdpc2U6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gVGhpcyBpcyBhIGNsZWFuLXJvb20gaW1wbGVtZW50YXRpb24gb2YgYWRsZXIzMiBkZXNpZ25lZCBmb3IgZGV0ZWN0aW5nXG4vLyBpZiBtYXJrdXAgaXMgbm90IHdoYXQgd2UgZXhwZWN0IGl0IHRvIGJlLiBJdCBkb2VzIG5vdCBuZWVkIHRvIGJlXG4vLyBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIG9ubHkgcmVhc29uYWJseSBnb29kIGF0IGRldGVjdGluZyBpZiBtYXJrdXBcbi8vIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIGlzIGRpZmZlcmVudCB0aGFuIHRoYXQgb24gdGhlIGNsaWVudC5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgYSA9IChhICsgZGF0YS5jaGFyQ29kZUF0KGkpKSAlIE1PRDtcbiAgICBiID0gKGIgKyBhKSAlIE1PRDtcbiAgfVxuICByZXR1cm4gYSB8IChiIDw8IDE2KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FtZWxpemVTdHlsZU5hbWVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoXCIuL2NhbWVsaXplXCIpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKiBAcHJvdmlkZXNNb2R1bGUgY2xvbmVXaXRoUHJvcHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RQcm9wVHJhbnNmZXJlciA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFRyYW5zZmVyZXJcIik7XG5cbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgQ0hJTERSRU5fUFJPUCA9IGtleU9mKHtjaGlsZHJlbjogbnVsbH0pO1xuXG4vKipcbiAqIFNvbWV0aW1lcyB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIHByb3BzIG9mIGEgY2hpbGQgcGFzc2VkIHRvIHlvdS4gVXN1YWxseVxuICogdGhpcyBpcyB0byBhZGQgYSBDU1MgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGNoaWxkIGNoaWxkIGVsZW1lbnQgeW91J2QgbGlrZSB0byBjbG9uZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIHByb3BzIHlvdSdkIGxpa2UgdG8gbW9kaWZ5LiBjbGFzc05hbWUgYW5kIHN0eWxlIHdpbGwgYmVcbiAqIG1lcmdlZCBhdXRvbWF0aWNhbGx5LlxuICogQHJldHVybiB7UmVhY3RFbGVtZW50fSBhIGNsb25lIG9mIGNoaWxkIHdpdGggcHJvcHMgbWVyZ2VkIGluLlxuICovXG5mdW5jdGlvbiBjbG9uZVdpdGhQcm9wcyhjaGlsZCwgcHJvcHMpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgIWNoaWxkLnJlZixcbiAgICAgICdZb3UgYXJlIGNhbGxpbmcgY2xvbmVXaXRoUHJvcHMoKSBvbiBhIGNoaWxkIHdpdGggYSByZWYuIFRoaXMgaXMgJyArXG4gICAgICAnZGFuZ2Vyb3VzIGJlY2F1c2UgeW91XFwncmUgY3JlYXRpbmcgYSBuZXcgY2hpbGQgd2hpY2ggd2lsbCBub3QgYmUgJyArXG4gICAgICAnYWRkZWQgYXMgYSByZWYgdG8gaXRzIHBhcmVudC4nXG4gICAgKSA6IG51bGwpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0gUmVhY3RQcm9wVHJhbnNmZXJlci5tZXJnZVByb3BzKHByb3BzLCBjaGlsZC5wcm9wcyk7XG5cbiAgLy8gVXNlIGBjaGlsZC5wcm9wcy5jaGlsZHJlbmAgaWYgaXQgaXMgcHJvdmlkZWQuXG4gIGlmICghbmV3UHJvcHMuaGFzT3duUHJvcGVydHkoQ0hJTERSRU5fUFJPUCkgJiZcbiAgICAgIGNoaWxkLnByb3BzLmhhc093blByb3BlcnR5KENISUxEUkVOX1BST1ApKSB7XG4gICAgbmV3UHJvcHMuY2hpbGRyZW4gPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgfVxuXG4gIC8vIFRoZSBjdXJyZW50IEFQSSBkb2Vzbid0IHJldGFpbiBfb3duZXIgYW5kIF9jb250ZXh0LCB3aGljaCBpcyB3aHkgdGhpc1xuICAvLyBkb2Vzbid0IHVzZSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudChjaGlsZC50eXBlLCBuZXdQcm9wcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVXaXRoUHJvcHM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY29udGFpbnNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZShcIi4vaXNUZXh0Tm9kZVwiKTtcblxuLypqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBvdXRlck5vZGUgT3V0ZXIgRE9NIG5vZGUuXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBpbm5lck5vZGUgSW5uZXIgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvdXRlck5vZGVgIGNvbnRhaW5zIG9yIGlzIGBpbm5lck5vZGVgLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb250YWlucykge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZUFycmF5RnJvbU1peGVkXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciB0b0FycmF5ID0gcmVxdWlyZShcIi4vdG9BcnJheVwiKTtcblxuLyoqXG4gKiBQZXJmb3JtIGEgaGV1cmlzdGljIHRlc3QgdG8gZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBcImFycmF5LWxpa2VcIi5cbiAqXG4gKiAgIEEgbW9uayBhc2tlZCBKb3NodSwgYSBaZW4gbWFzdGVyLCBcIkhhcyBhIGRvZyBCdWRkaGEgbmF0dXJlP1wiXG4gKiAgIEpvc2h1IHJlcGxpZWQ6IFwiTXUuXCJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgaXRzIGFyZ3VtZW50IGhhcyBcImFycmF5IG5hdHVyZVwiOiBpdCByZXR1cm5zXG4gKiB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhY3R1YWwgYXJyYXksIGFuIGBhcmd1bWVudHMnIG9iamVjdCwgb3IgYW5cbiAqIEhUTUxDb2xsZWN0aW9uIChlLmcuIG5vZGUuY2hpbGROb2RlcyBvciBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCkpLlxuICpcbiAqIEl0IHdpbGwgcmV0dXJuIGZhbHNlIGZvciBvdGhlciBhcnJheS1saWtlIG9iamVjdHMgbGlrZSBGaWxlbGlzdC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzQXJyYXlOYXR1cmUob2JqKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbm90IG51bGwvZmFsc2VcbiAgICAhIW9iaiAmJlxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJlxuICAgIC8vIHF1YWNrcyBsaWtlIGFuIGFycmF5XG4gICAgKCdsZW5ndGgnIGluIG9iaikgJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgKHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicpICYmXG4gICAgKFxuICAgICAgLy8gYSByZWFsIGFycmF5XG4gICAgICAoLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAgIChBcnJheS5pc0FycmF5KG9iaikgfHxcbiAgICAgIC8vIGFyZ3VtZW50c1xuICAgICAgKCdjYWxsZWUnIGluIG9iaikgfHwgJ2l0ZW0nIGluIG9iaikpXG4gICAgKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gKlxuICogICBmdW5jdGlvbiB0YWtlc09uZU9yTW9yZVRoaW5ncyh0aGluZ3MpIHtcbiAqICAgICB0aGluZ3MgPSBjcmVhdGVBcnJheUZyb21NaXhlZCh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gRGVmZWF0IGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgcmVxdWlyaW5nIHRoaXMgZGlyZWN0bHkuXG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGNvbXBvbmVudCB0aGF0IHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gdW5tb3VudGVkLlxuICpcbiAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICogZWFzaWx5IGluIGEgY3Jvc3MtYnJvd3NlciB3YXksIGhvd2V2ZXIgaXQncyB2YWx1YWJsZSB0byBiZSBhYmxlIHRvXG4gKiB0YWtlIGFkdmFudGFnZSBvZiBSZWFjdCdzIHJlY29uY2lsaWF0aW9uIGZvciBzdHlsaW5nIGFuZCA8dGl0bGU+XG4gKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgdGFnIHRvIHdyYXBcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjb252ZW5pZW5jZSBjb25zdHJ1Y3RvciBvZiBuZXcgY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KHRhZykge1xuICB2YXIgZWxlbWVudEZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xuXG4gIHZhciBGdWxsUGFnZUNvbXBvbmVudCA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICAgIHRhZ05hbWU6IHRhZy50b1VwcGVyQ2FzZSgpLFxuICAgIGRpc3BsYXlOYW1lOiAnUmVhY3RGdWxsUGFnZUNvbXBvbmVudCcgKyB0YWcsXG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJyVzIHRyaWVkIHRvIHVubW91bnQuIEJlY2F1c2Ugb2YgY3Jvc3MtYnJvd3NlciBxdWlya3MgaXQgaXMgJyArXG4gICAgICAgICdpbXBvc3NpYmxlIHRvIHVubW91bnQgc29tZSB0b3AtbGV2ZWwgY29tcG9uZW50cyAoZWcgPGh0bWw+LCA8aGVhZD4sICcgK1xuICAgICAgICAnYW5kIDxib2R5PikgcmVsaWFibHkgYW5kIGVmZmljaWVudGx5LiBUbyBmaXggdGhpcywgaGF2ZSBhIHNpbmdsZSAnICtcbiAgICAgICAgJ3RvcC1sZXZlbCBjb21wb25lbnQgdGhhdCBuZXZlciB1bm1vdW50cyByZW5kZXIgdGhlc2UgZWxlbWVudHMuJyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZVxuICAgICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRGYWN0b3J5KHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIEZ1bGxQYWdlQ29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlLCBzdWI6IHRydWUgKi9cblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoXCIuL2NyZWF0ZUFycmF5RnJvbU1peGVkXCIpO1xudmFyIGdldE1hcmt1cFdyYXAgPSByZXF1aXJlKFwiLi9nZXRNYXJrdXBXcmFwXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBEdW1teSBjb250YWluZXIgdXNlZCB0byByZW5kZXIgYWxsIG1hcmt1cC5cbiAqL1xudmFyIGR1bW15Tm9kZSA9XG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIDogbnVsbDtcblxuLyoqXG4gKiBQYXR0ZXJuIHVzZWQgYnkgYGdldE5vZGVOYW1lYC5cbiAqL1xudmFyIG5vZGVOYW1lUGF0dGVybiA9IC9eXFxzKjwoXFx3KykvO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBOb2RlIG5hbWUgb2YgdGhlIHN1cHBsaWVkIG1hcmt1cC5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gIHZhciBub2RlTmFtZU1hdGNoID0gbWFya3VwLm1hdGNoKG5vZGVOYW1lUGF0dGVybik7XG4gIHJldHVybiBub2RlTmFtZU1hdGNoICYmIG5vZGVOYW1lTWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG5vZGVzIHJlbmRlcmVkIGZyb20gdGhlIHN1cHBsaWVkIG1hcmt1cC4gVGhlXG4gKiBvcHRpb25hbGx5IHN1cHBsaWVkIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGZvciBlYWNoXG4gKiA8c2NyaXB0PiBlbGVtZW50IHRoYXQgaXMgcmVuZGVyZWQuIElmIG5vIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIGlzIHN1cHBsaWVkLFxuICogYW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiBhbnkgPHNjcmlwdD4gZWxlbWVudHMgYXJlIHJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgQSBzdHJpbmcgb2YgdmFsaWQgSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gaGFuZGxlU2NyaXB0IEludm9rZWQgb25jZSBmb3IgZWFjaCByZW5kZXJlZCA8c2NyaXB0Pi5cbiAqIEByZXR1cm4ge2FycmF5PERPTUVsZW1lbnR8RE9NVGV4dE5vZGU+fSBBbiBhcnJheSBvZiByZW5kZXJlZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgaGFuZGxlU2NyaXB0KSB7XG4gIHZhciBub2RlID0gZHVtbXlOb2RlO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KCEhZHVtbXlOb2RlLCAnY3JlYXRlTm9kZXNGcm9tTWFya3VwIGR1bW15IG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KCEhZHVtbXlOb2RlKSk7XG4gIHZhciBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cCk7XG5cbiAgdmFyIHdyYXAgPSBub2RlTmFtZSAmJiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKTtcbiAgaWYgKHdyYXApIHtcbiAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuXG4gICAgdmFyIHdyYXBEZXB0aCA9IHdyYXBbMF07XG4gICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbWFya3VwO1xuICB9XG5cbiAgdmFyIHNjcmlwdHMgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgaWYgKHNjcmlwdHMubGVuZ3RoKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGhhbmRsZVNjcmlwdCxcbiAgICAgICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLidcbiAgICApIDogaW52YXJpYW50KGhhbmRsZVNjcmlwdCkpO1xuICAgIGNyZWF0ZUFycmF5RnJvbU1peGVkKHNjcmlwdHMpLmZvckVhY2goaGFuZGxlU2NyaXB0KTtcbiAgfVxuXG4gIHZhciBub2RlcyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkKG5vZGUuY2hpbGROb2Rlcyk7XG4gIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXA7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3hcbiAqL1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBtYXJrIHN0cmluZyBsaXRlcmFscyByZXByZXNlbnRpbmcgQ1NTIGNsYXNzIG5hbWVzXG4gKiBzbyB0aGF0IHRoZXkgY2FuIGJlIHRyYW5zZm9ybWVkIHN0YXRpY2FsbHkuIFRoaXMgYWxsb3dzIGZvciBtb2R1bGFyaXphdGlvblxuICogYW5kIG1pbmlmaWNhdGlvbiBvZiBDU1MgY2xhc3MgbmFtZXMuXG4gKlxuICogSW4gc3RhdGljX3Vwc3RyZWFtLCB0aGlzIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGltcGxlbWVudGVkLCBidXQgaXQgc2hvdWxkXG4gKiBldmVudHVhbGx5IGJlIHJlcGxhY2VkIHdpdGggc29tZXRoaW5nIG1vcmUgZGVzY3JpcHRpdmUsIGFuZCB0aGUgdHJhbnNmb3JtXG4gKiB0aGF0IGlzIHVzZWQgaW4gdGhlIG1haW4gc3RhY2sgc2hvdWxkIGJlIHBvcnRlZCBmb3IgdXNlIGVsc2V3aGVyZS5cbiAqXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdCBjbGFzc05hbWUgdG8gbW9kdWxhcml6ZSwgb3IgYW4gb2JqZWN0IG9mIGtleS92YWx1ZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICBJbiB0aGUgb2JqZWN0IGNhc2UsIHRoZSB2YWx1ZXMgYXJlIGNvbmRpdGlvbnMgdGhhdFxuICogICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIGlmIHRoZSBjbGFzc05hbWUga2V5cyBzaG91bGQgYmUgaW5jbHVkZWQuXG4gKiBAcGFyYW0gW3N0cmluZyAuLi5dICBWYXJpYWJsZSBsaXN0IG9mIGNsYXNzTmFtZXMgaW4gdGhlIHN0cmluZyBjYXNlLlxuICogQHJldHVybiBzdHJpbmcgICAgICAgUmVuZGVyYWJsZSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzTmFtZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciB3YXJuZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gY3goY2xhc3NOYW1lcykge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB3YXJuZWQsXG4gICAgICAnUmVhY3QuYWRkb25zLmNsYXNzU2V0IHdpbGwgYmUgZGVwcmVjYXRlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiBTZWUgJyArXG4gICAgICAnaHR0cDovL2ZiLm1lL3JlYWN0LWFkZG9ucy1jbGFzc3NldCdcbiAgICApIDogbnVsbCk7XG4gICAgd2FybmVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lcyA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhjbGFzc05hbWVzKS5maWx0ZXIoZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lc1tjbGFzc05hbWVdO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbChhcmd1bWVudHMsICcgJyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjeDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBkYW5nZXJvdXNTdHlsZVZhbHVlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlcIik7XG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0gQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcjtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgaW50byB0aGUgcHJvcGVyIGNzcyB3cml0YWJsZSB2YWx1ZS4gVGhlIHN0eWxlIG5hbWUgYG5hbWVgXG4gKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuICogaW4gYENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG4gKiBAcGFyYW0geyp9IHZhbHVlIENTUyBwcm9wZXJ0eSB2YWx1ZSBzdWNoIGFzIGAxMHB4YC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBzdHlsZSB2YWx1ZSB3aXRoIGRpbWVuc2lvbnMgYXBwbGllZC5cbiAqL1xuZnVuY3Rpb24gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShuYW1lLCB2YWx1ZSkge1xuICAvLyBOb3RlIHRoYXQgd2UndmUgcmVtb3ZlZCBlc2NhcGVUZXh0Rm9yQnJvd3NlcigpIGNhbGxzIGhlcmUgc2luY2UgdGhlXG4gIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cbiAgLy8gdGhlIG1hcmt1cC4gSWYgeW91IHByb3ZpZGUgdW5zYWZlIHVzZXIgZGF0YSBoZXJlIHRoZXkgY2FuIGluamVjdFxuICAvLyBhcmJpdHJhcnkgQ1NTIHdoaWNoIG1heSBiZSBwcm9ibGVtYXRpYyAoSSBjb3VsZG4ndCByZXBybyB0aGlzKTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcbiAgLy8gaHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMDcvMTEvMjYvdWx0aW1hdGUteHNzLWNzcy1pbmplY3Rpb24vXG4gIC8vIFRoaXMgaXMgbm90IGFuIFhTUyBob2xlIGJ1dCBpbnN0ZWFkIGEgcG90ZW50aWFsIENTUyBpbmplY3Rpb24gaXNzdWVcbiAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG4gIC8vIHRydXN0IFVSTHMgbW92aW5nIGZvcndhcmQuIFNlZSAjMjExNTkwMVxuXG4gIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG4gIGlmIChpc0VtcHR5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGlzTm9uTnVtZXJpYyA9IGlzTmFOKHZhbHVlKTtcbiAgaWYgKGlzTm9uTnVtZXJpYyB8fCB2YWx1ZSA9PT0gMCB8fFxuICAgICAgaXNVbml0bGVzc051bWJlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBpc1VuaXRsZXNzTnVtYmVyW25hbWVdKSB7XG4gICAgcmV0dXJuICcnICsgdmFsdWU7IC8vIGNhc3QgdG8gc3RyaW5nXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICB9XG4gIHJldHVybiB2YWx1ZSArICdweCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eUZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbihhcmcpIHsgcmV0dXJuIGFyZzsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5T2JqZWN0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVTQ0FQRV9MT09LVVAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJz4nOiAnJmd0OycsXG4gICc8JzogJyZsdDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgJ1xcJyc6ICcmI3gyNzsnXG59O1xuXG52YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIEVTQ0FQRV9MT09LVVBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGV4dCBUZXh0IHZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZXNjYXBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZpbmRET01Ob2RlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgaXNOb2RlID0gcmVxdWlyZShcIi4vaXNOb2RlXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fERPTUVsZW1lbnR9IGNvbXBvbmVudE9yRWxlbWVudFxuICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICBpZiAob3duZXIgIT09IG51bGwpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXG4gICAgICAgICclcyBpcyBhY2Nlc3NpbmcgZ2V0RE9NTm9kZSBvciBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiAnICtcbiAgICAgICAgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArXG4gICAgICAgICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICtcbiAgICAgICAgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgK1xuICAgICAgICAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChjb21wb25lbnRPckVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc05vZGUoY29tcG9uZW50T3JFbGVtZW50KSkge1xuICAgIHJldHVybiBjb21wb25lbnRPckVsZW1lbnQ7XG4gIH1cbiAgaWYgKFJlYWN0SW5zdGFuY2VNYXAuaGFzKGNvbXBvbmVudE9yRWxlbWVudCkpIHtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5nZXROb2RlRnJvbUluc3RhbmNlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH1cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09IG51bGwgfHxcbiAgICB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAnQ29tcG9uZW50ICh3aXRoIGtleXM6ICVzKSBjb250YWlucyBgcmVuZGVyYCBtZXRob2QgJyArXG4gICAgJ2J1dCBpcyBub3QgbW91bnRlZCBpbiB0aGUgRE9NJyxcbiAgICBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpXG4gICkgOiBpbnZhcmlhbnQoY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciA9PSBudWxsIHx8XG4gIHR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyICE9PSAnZnVuY3Rpb24nKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgZmFsc2UsXG4gICAgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcyknLFxuICAgIE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudClcbiAgKSA6IGludmFyaWFudChmYWxzZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRET01Ob2RlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZsYXR0ZW5DaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IHBhc3NlZCB0aHJvdWdoIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7P1JlYWN0Q29tcG9uZW50fSBjaGlsZCBSZWFjdCBjaGlsZCBjb21wb25lbnQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgU3RyaW5nIG5hbWUgb2Yga2V5IHBhdGggdG8gY2hpbGQuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciByZXN1bHQgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gIHZhciBrZXlVbmlxdWUgPSAhcmVzdWx0Lmhhc093blByb3BlcnR5KG5hbWUpO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBrZXlVbmlxdWUsXG4gICAgICAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArXG4gICAgICAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArXG4gICAgICAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLFxuICAgICAgbmFtZVxuICAgICkgOiBudWxsKTtcbiAgfVxuICBpZiAoa2V5VW5pcXVlICYmIGNoaWxkICE9IG51bGwpIHtcbiAgICByZXN1bHRbbmFtZV0gPSBjaGlsZDtcbiAgfVxufVxuXG4vKipcbiAqIEZsYXR0ZW5zIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC4gQW55IG51bGxcbiAqIGNoaWxkcmVuIHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgb2JqZWN0LlxuICogQHJldHVybiB7IW9iamVjdH0gZmxhdHRlbmVkIGNoaWxkcmVuIGtleWVkIGJ5IG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5DaGlsZHJlbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoKGUpIHtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb3JFYWNoQWNjdW11bGF0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHthcnJheX0gYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqL1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IGZ1bmN0aW9uKGFyciwgY2IsIHNjb3BlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBhcnIuZm9yRWFjaChjYiwgc2NvcGUpO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGNiLmNhbGwoc2NvcGUsIGFycik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaEFjY3VtdWxhdGVkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEFjdGl2ZUVsZW1lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgYm9keSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSAvKj9ET01FbGVtZW50Ki8ge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRDaGFyQ29kZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogYGNoYXJDb2RlYCByZXByZXNlbnRzIHRoZSBhY3R1YWwgXCJjaGFyYWN0ZXIgY29kZVwiIGFuZCBpcyBzYWZlIHRvIHVzZSB3aXRoXG4gKiBgU3RyaW5nLmZyb21DaGFyQ29kZWAuIEFzIHN1Y2gsIG9ubHkga2V5cyB0aGF0IGNvcnJlc3BvbmQgdG8gcHJpbnRhYmxlXG4gKiBjaGFyYWN0ZXJzIHByb2R1Y2UgYSB2YWxpZCBgY2hhckNvZGVgLCB0aGUgb25seSBleGNlcHRpb24gdG8gdGhpcyBpcyBFbnRlci5cbiAqIFRoZSBUYWIta2V5IGlzIGNvbnNpZGVyZWQgbm9uLXByaW50YWJsZSBhbmQgZG9lcyBub3QgaGF2ZSBhIGBjaGFyQ29kZWAsXG4gKiBwcmVzdW1hYmx5IGJlY2F1c2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIHRhYi1jaGFyYWN0ZXIgaW4gYnJvd3NlcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBjaGFyQ29kZWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGNoYXJDb2RlO1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG5cbiAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcbiAgICBjaGFyQ29kZSA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlO1xuXG4gICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgY2hhckNvZGUgPSAxMztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBgY2hhckNvZGVgLCBidXQgYGtleUNvZGVgIGhhcyB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gIH1cblxuICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cbiAgLy8gTXVzdCBub3QgZGlzY2FyZCB0aGUgKG5vbi0pcHJpbnRhYmxlIEVudGVyLWtleS5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRLZXlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50Q2hhckNvZGVcIik7XG5cbi8qKlxuICogTm9ybWFsaXphdGlvbiBvZiBkZXByZWNhdGVkIEhUTUw1IGBrZXlgIHZhbHVlc1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIG5vcm1hbGl6ZUtleSA9IHtcbiAgJ0VzYyc6ICdFc2NhcGUnLFxuICAnU3BhY2ViYXInOiAnICcsXG4gICdMZWZ0JzogJ0Fycm93TGVmdCcsXG4gICdVcCc6ICdBcnJvd1VwJyxcbiAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxuICAnRG93bic6ICdBcnJvd0Rvd24nLFxuICAnRGVsJzogJ0RlbGV0ZScsXG4gICdXaW4nOiAnT1MnLFxuICAnTWVudSc6ICdDb250ZXh0TWVudScsXG4gICdBcHBzJzogJ0NvbnRleHRNZW51JyxcbiAgJ1Njcm9sbCc6ICdTY3JvbGxMb2NrJyxcbiAgJ01velByaW50YWJsZUtleSc6ICdVbmlkZW50aWZpZWQnXG59O1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuICogT25seSBzcGVjaWFsIGtleXMgc3VwcG9ydGVkLCBhbGwgb3RoZXJzIGRlcGVuZCBvbiBrZXlib2FyZCBsYXlvdXQgb3IgYnJvd3NlclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICA4OiAnQmFja3NwYWNlJyxcbiAgOTogJ1RhYicsXG4gIDEyOiAnQ2xlYXInLFxuICAxMzogJ0VudGVyJyxcbiAgMTY6ICdTaGlmdCcsXG4gIDE3OiAnQ29udHJvbCcsXG4gIDE4OiAnQWx0JyxcbiAgMTk6ICdQYXVzZScsXG4gIDIwOiAnQ2Fwc0xvY2snLFxuICAyNzogJ0VzY2FwZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQ1OiAnSW5zZXJ0JyxcbiAgNDY6ICdEZWxldGUnLFxuICAxMTI6ICdGMScsIDExMzogJ0YyJywgMTE0OiAnRjMnLCAxMTU6ICdGNCcsIDExNjogJ0Y1JywgMTE3OiAnRjYnLFxuICAxMTg6ICdGNycsIDExOTogJ0Y4JywgMTIwOiAnRjknLCAxMjE6ICdGMTAnLCAxMjI6ICdGMTEnLCAxMjM6ICdGMTInLFxuICAxNDQ6ICdOdW1Mb2NrJyxcbiAgMTQ1OiAnU2Nyb2xsTG9jaycsXG4gIDIyNDogJ01ldGEnXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBga2V5YCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRLZXkobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgIC8vIE5vcm1hbGl6ZSBpbmNvbnNpc3RlbnQgdmFsdWVzIHJlcG9ydGVkIGJ5IGJyb3dzZXJzIGR1ZSB0b1xuICAgIC8vIGltcGxlbWVudGF0aW9ucyBvZiBhIHdvcmtpbmcgZHJhZnQgc3BlY2lmaWNhdGlvbi5cblxuICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG4gICAgLy8gcHJpbnRhYmxlIGNoYXJhY3RlcnMgKG5vcm1hbGl6ZWQgdG8gYFVuaWRlbnRpZmllZGApLCBpZ25vcmUgaXQuXG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCk7XG5cbiAgICAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cbiAgICAvLyB0aHVzIGJlIGNhcHR1cmVkIGJ5IGBrZXlwcmVzc2AsIG5vIG90aGVyIG5vbi1wcmludGFibGUga2V5IHNob3VsZC5cbiAgICByZXR1cm4gY2hhckNvZGUgPT09IDEzID8gJ0VudGVyJyA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICB9XG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5ZG93bicgfHwgbmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgIC8vIFdoaWxlIHVzZXIga2V5Ym9hcmQgbGF5b3V0IGRldGVybWluZXMgdGhlIGFjdHVhbCBtZWFuaW5nIG9mIGVhY2hcbiAgICAvLyBga2V5Q29kZWAgdmFsdWUsIGFsbW9zdCBhbGwgZnVuY3Rpb24ga2V5cyBoYXZlIGEgdW5pdmVyc2FsIHZhbHVlLlxuICAgIHJldHVybiB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCAnVW5pZGVudGlmaWVkJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRLZXk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRNb2RpZmllclN0YXRlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICdBbHQnOiAnYWx0S2V5JyxcbiAgJ0NvbnRyb2wnOiAnY3RybEtleScsXG4gICdNZXRhJzogJ21ldGFLZXknLFxuICAnU2hpZnQnOiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudFRhcmdldFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRJdGVyYXRvckZuXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoXG4gICAgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pXG4gICk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRNYXJrdXBXcmFwXG4gKi9cblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gZGV0ZWN0IHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkuXG4gKi9cbnZhciBkdW1teU5vZGUgPVxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogU29tZSBicm93c2VycyBjYW5ub3QgdXNlIGBpbm5lckhUTUxgIHRvIHJlbmRlciBjZXJ0YWluIGVsZW1lbnRzIHN0YW5kYWxvbmUsXG4gKiBzbyB3ZSB3cmFwIHRoZW0sIHJlbmRlciB0aGUgd3JhcHBlZCBub2RlcywgdGhlbiBleHRyYWN0IHRoZSBkZXNpcmVkIG5vZGUuXG4gKlxuICogSW4gSUU4LCBjZXJ0YWluIGVsZW1lbnRzIGNhbm5vdCByZW5kZXIgYWxvbmUsIHNvIHdyYXAgYWxsIGVsZW1lbnRzICgnKicpLlxuICovXG52YXIgc2hvdWxkV3JhcCA9IHtcbiAgLy8gRm9yY2Ugd3JhcHBpbmcgZm9yIFNWRyBlbGVtZW50cyBiZWNhdXNlIGlmIHRoZXkgZ2V0IGNyZWF0ZWQgaW5zaWRlIGEgPGRpdj4sXG4gIC8vIHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpbiB0aGUgd3JvbmcgbmFtZXNwYWNlIChhbmQgd2lsbCBub3QgZGlzcGxheSkuXG4gICdjaXJjbGUnOiB0cnVlLFxuICAnY2xpcFBhdGgnOiB0cnVlLFxuICAnZGVmcyc6IHRydWUsXG4gICdlbGxpcHNlJzogdHJ1ZSxcbiAgJ2cnOiB0cnVlLFxuICAnbGluZSc6IHRydWUsXG4gICdsaW5lYXJHcmFkaWVudCc6IHRydWUsXG4gICdwYXRoJzogdHJ1ZSxcbiAgJ3BvbHlnb24nOiB0cnVlLFxuICAncG9seWxpbmUnOiB0cnVlLFxuICAncmFkaWFsR3JhZGllbnQnOiB0cnVlLFxuICAncmVjdCc6IHRydWUsXG4gICdzdG9wJzogdHJ1ZSxcbiAgJ3RleHQnOiB0cnVlXG59O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnPicsICc8L3N2Zz4nXTtcblxudmFyIG1hcmt1cFdyYXAgPSB7XG4gICcqJzogWzEsICc/PGRpdj4nLCAnPC9kaXY+J10sXG5cbiAgJ2FyZWEnOiBbMSwgJzxtYXA+JywgJzwvbWFwPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICdsZWdlbmQnOiBbMSwgJzxmaWVsZHNldD4nLCAnPC9maWVsZHNldD4nXSxcbiAgJ3BhcmFtJzogWzEsICc8b2JqZWN0PicsICc8L29iamVjdD4nXSxcbiAgJ3RyJzogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sXG5cbiAgJ29wdGdyb3VwJzogc2VsZWN0V3JhcCxcbiAgJ29wdGlvbic6IHNlbGVjdFdyYXAsXG5cbiAgJ2NhcHRpb24nOiB0YWJsZVdyYXAsXG4gICdjb2xncm91cCc6IHRhYmxlV3JhcCxcbiAgJ3Rib2R5JzogdGFibGVXcmFwLFxuICAndGZvb3QnOiB0YWJsZVdyYXAsXG4gICd0aGVhZCc6IHRhYmxlV3JhcCxcblxuICAndGQnOiB0cldyYXAsXG4gICd0aCc6IHRyV3JhcCxcblxuICAnY2lyY2xlJzogc3ZnV3JhcCxcbiAgJ2NsaXBQYXRoJzogc3ZnV3JhcCxcbiAgJ2RlZnMnOiBzdmdXcmFwLFxuICAnZWxsaXBzZSc6IHN2Z1dyYXAsXG4gICdnJzogc3ZnV3JhcCxcbiAgJ2xpbmUnOiBzdmdXcmFwLFxuICAnbGluZWFyR3JhZGllbnQnOiBzdmdXcmFwLFxuICAncGF0aCc6IHN2Z1dyYXAsXG4gICdwb2x5Z29uJzogc3ZnV3JhcCxcbiAgJ3BvbHlsaW5lJzogc3ZnV3JhcCxcbiAgJ3JhZGlhbEdyYWRpZW50Jzogc3ZnV3JhcCxcbiAgJ3JlY3QnOiBzdmdXcmFwLFxuICAnc3RvcCc6IHN2Z1dyYXAsXG4gICd0ZXh0Jzogc3ZnV3JhcFxufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uIGZvciB0aGUgc3VwcGxpZWQgYG5vZGVOYW1lYC5cbiAqXG4gKiBOT1RFOiBUaGlzIGxhemlseSBkZXRlY3RzIHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lIExvd2VyY2FzZSBgbm9kZU5hbWVgLlxuICogQHJldHVybiB7P2FycmF5fSBNYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uLCBpZiBhcHBsaWNhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdNYXJrdXAgd3JhcHBpbmcgbm9kZSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudCghIWR1bW15Tm9kZSkpO1xuICBpZiAoIW1hcmt1cFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgbm9kZU5hbWUgPSAnKic7XG4gIH1cbiAgaWYgKCFzaG91bGRXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIGlmIChub2RlTmFtZSA9PT0gJyonKSB7XG4gICAgICBkdW1teU5vZGUuaW5uZXJIVE1MID0gJzxsaW5rIC8+JztcbiAgICB9IGVsc2Uge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8JyArIG5vZGVOYW1lICsgJz48LycgKyBub2RlTmFtZSArICc+JztcbiAgICB9XG4gICAgc2hvdWxkV3JhcFtub2RlTmFtZV0gPSAhZHVtbXlOb2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIHNob3VsZFdyYXBbbm9kZU5hbWVdID8gbWFya3VwV3JhcFtub2RlTmFtZV0gOiBudWxsO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFya3VwV3JhcDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTURvY3VtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBSZWFjdCBjb21wb25lbnRcbiAqIEByZXR1cm4gez8qfSBET00gZWxlbWVudCB0aGF0IG1heSBoYXZlIHRoZSByZWFjdFJvb3QgSUQsIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjb250ZW50S2V5ID0gbnVsbDtcblxuLyoqXG4gKiBHZXRzIHRoZSBrZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50IG9uIGEgRE9NIG5vZGUuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gS2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEFjY2Vzc29yKCkge1xuICBpZiAoIWNvbnRlbnRLZXkgJiYgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgLy8gUHJlZmVyIHRleHRDb250ZW50IHRvIGlubmVyVGV4dCBiZWNhdXNlIG1hbnkgYnJvd3NlcnMgc3VwcG9ydCBib3RoIGJ1dFxuICAgIC8vIFNWRyA8dGV4dD4gZWxlbWVudHMgZG9uJ3Qgc3VwcG9ydCBpbm5lclRleHQgZXZlbiB3aGVuIDxkaXY+IGRvZXMuXG4gICAgY29udGVudEtleSA9ICd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID9cbiAgICAgICd0ZXh0Q29udGVudCcgOlxuICAgICAgJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWVzIGFyZSB1bmJvdW5kZWQsIHVubGlrZSBgZ2V0U2Nyb2xsUG9zaXRpb25gLiBUaGlzIG1lYW5zIHRoZXlcbiAqIG1heSBiZSBuZWdhdGl2ZSBvciBleGNlZWQgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmdcbiAqIGluZXJ0aWFsIHNjcm9sbGluZykuXG4gKlxuICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuICogQHJldHVybiB7b2JqZWN0fSBNYXAgd2l0aCBgeGAgYW5kIGB5YCBrZXlzLlxuICovXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKTtcblxudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLy8gVG8gYXZvaWQgYSBjeWNsaWMgZGVwZW5kZW5jeSwgd2UgY3JlYXRlIHRoZSBmaW5hbCBjbGFzcyBpbiB0aGlzIG1vZHVsZVxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciA9IGZ1bmN0aW9uKCkgeyB9O1xuYXNzaWduKFxuICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIucHJvdG90eXBlLFxuICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5NaXhpbixcbiAge1xuICAgIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG4gIH1cbik7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHR5cGUgcmVmZXJlbmNlIGlzIGEga25vd24gaW50ZXJuYWwgdHlwZS4gSS5lLiBub3QgYSB1c2VyXG4gKiBwcm92aWRlZCBjb21wb3NpdGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhpcyBpcyBhIHZhbGlkIGludGVybmFsIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB0eXBlLnByb3RvdHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVhY3ROb2RlLCBjcmVhdGUgYW4gaW5zdGFuY2UgdGhhdCB3aWxsIGFjdHVhbGx5IGJlIG1vdW50ZWQuXG4gKlxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Kn0gcGFyZW50Q29tcG9zaXRlVHlwZSBUaGUgY29tcG9zaXRlIHR5cGUgdGhhdCByZXNvbHZlZCB0aGlzLlxuICogQHJldHVybiB7b2JqZWN0fSBBIG5ldyBpbnN0YW5jZSBvZiB0aGUgZWxlbWVudCdzIGNvbnN0cnVjdG9yLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5vZGUsIHBhcmVudENvbXBvc2l0ZVR5cGUpIHtcbiAgdmFyIGluc3RhbmNlO1xuXG4gIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlKSB7XG4gICAgbm9kZSA9IFJlYWN0RW1wdHlDb21wb25lbnQuZW1wdHlFbGVtZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBub2RlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBlbGVtZW50ID0gbm9kZTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgZWxlbWVudCAmJiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJyksXG4gICAgICAgICdPbmx5IGZ1bmN0aW9ucyBvciBzdHJpbmdzIGNhbiBiZSBtb3VudGVkIGFzIFJlYWN0IGNvbXBvbmVudHMuJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cblxuICAgIC8vIFNwZWNpYWwgY2FzZSBzdHJpbmcgdmFsdWVzXG4gICAgaWYgKHBhcmVudENvbXBvc2l0ZVR5cGUgPT09IGVsZW1lbnQudHlwZSAmJlxuICAgICAgICB0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gQXZvaWQgcmVjdXJzaW9uIGlmIHRoZSB3cmFwcGVyIHJlbmRlcnMgaXRzZWxmLlxuICAgICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KTtcbiAgICAgIC8vIEFsbCBuYXRpdmUgY29tcG9uZW50cyBhcmUgY3VycmVudGx5IHdyYXBwZWQgaW4gYSBjb21wb3NpdGUgc28gd2UncmVcbiAgICAgIC8vIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhpcyBpcyB3aGF0IHdlIHNob3VsZCBpbnN0YW50aWF0ZS5cbiAgICB9IGVsc2UgaWYgKGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKGVsZW1lbnQudHlwZSkpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGVtcG9yYXJpbHkgYXZhaWxhYmxlIGZvciBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSBub3Qgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbmF0aW9ucy4gSS5lLiBBUlQuIE9uY2UgdGhvc2UgYXJlIHVwZGF0ZWQgdG8gdXNlIHRoZSBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9uLCB3ZSBjYW4gZHJvcCB0aGlzIGNvZGUgcGF0aC5cbiAgICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UgPSBuZXcgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICBpbnN0YW5jZSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmNyZWF0ZUluc3RhbmNlRm9yVGV4dChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnRW5jb3VudGVyZWQgaW52YWxpZCBSZWFjdCBub2RlIG9mIHR5cGUgJXMnLFxuICAgICAgdHlwZW9mIG5vZGVcbiAgICApIDogaW52YXJpYW50KGZhbHNlKSk7XG4gIH1cblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB0eXBlb2YgaW5zdGFuY2UuY29uc3RydWN0ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgaW5zdGFuY2UubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICdPbmx5IFJlYWN0IENvbXBvbmVudHMgY2FuIGJlIG1vdW50ZWQuJ1xuICAgICkgOiBudWxsKTtcbiAgfVxuXG4gIC8vIFNldHMgdXAgdGhlIGluc3RhbmNlLiBUaGlzIGNhbiBwcm9iYWJseSBqdXN0IG1vdmUgaW50byB0aGUgY29uc3RydWN0b3Igbm93LlxuICBpbnN0YW5jZS5jb25zdHJ1Y3Qobm9kZSk7XG5cbiAgLy8gVGhlc2UgdHdvIGZpZWxkcyBhcmUgdXNlZCBieSB0aGUgRE9NIGFuZCBBUlQgZGlmZmluZyBhbGdvcml0aG1zXG4gIC8vIHJlc3BlY3RpdmVseS4gSW5zdGVhZCBvZiB1c2luZyBleHBhbmRvcyBvbiBjb21wb25lbnRzLCB3ZSBzaG91bGQgYmVcbiAgLy8gc3RvcmluZyB0aGUgc3RhdGUgbmVlZGVkIGJ5IHRoZSBkaWZmaW5nIGFsZ29yaXRobXMgZWxzZXdoZXJlLlxuICBpbnN0YW5jZS5fbW91bnRJbmRleCA9IDA7XG4gIGluc3RhbmNlLl9tb3VudEltYWdlID0gbnVsbDtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaW5zdGFuY2UuX2lzT3duZXJOZWNlc3NhcnkgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEludGVybmFsIGluc3RhbmNlcyBzaG91bGQgZnVsbHkgY29uc3RydWN0ZWQgYXQgdGhpcyBwb2ludCwgc28gdGhleSBzaG91bGRcbiAgLy8gbm90IGdldCBhbnkgbmV3IGZpZWxkcyBhZGRlZCB0byB0aGVtIGF0IHRoaXMgcG9pbnQuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBpZiAoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG4gICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdJbnZhcmlhbnQgVmlvbGF0aW9uOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIHVzZUhhc0ZlYXR1cmU7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHVzZUhhc0ZlYXR1cmUgPVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAgIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHxcbiAgICAgIGNhcHR1cmUgJiYgISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiB1c2VIYXNGZWF0dXJlICYmIGV2ZW50TmFtZVN1ZmZpeCA9PT0gJ3doZWVsJykge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50U3VwcG9ydGVkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzTm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAoXG4gICAgKCh0eXBlb2YgTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIE5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKVxuICApKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgJ2NvbG9yJzogdHJ1ZSxcbiAgJ2RhdGUnOiB0cnVlLFxuICAnZGF0ZXRpbWUnOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlLFxuICAnZW1haWwnOiB0cnVlLFxuICAnbW9udGgnOiB0cnVlLFxuICAnbnVtYmVyJzogdHJ1ZSxcbiAgJ3Bhc3N3b3JkJzogdHJ1ZSxcbiAgJ3JhbmdlJzogdHJ1ZSxcbiAgJ3NlYXJjaCc6IHRydWUsXG4gICd0ZWwnOiB0cnVlLFxuICAndGV4dCc6IHRydWUsXG4gICd0aW1lJzogdHJ1ZSxcbiAgJ3VybCc6IHRydWUsXG4gICd3ZWVrJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0gJiYgKFxuICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIHN1cHBvcnRlZElucHV0VHlwZXNbZWxlbS50eXBlXSB8fCBlbGVtLm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKVxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dElucHV0RWxlbWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc1RleHROb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKFwiLi9pc05vZGVcIik7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBqb2luQ2xhc3Nlc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29tYmluZXMgbXVsdGlwbGUgY2xhc3NOYW1lIHN0cmluZ3MgaW50byBvbmUuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9qb2luY2xhc3Nlcy1hcmdzLXZzLWFycmF5XG4gKlxuICogQHBhcmFtIHsuLi4/c3RyaW5nfSBjbGFzc2VzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGpvaW5DbGFzc2VzKGNsYXNzTmFtZS8qLCAuLi4gKi8pIHtcbiAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICBjbGFzc05hbWUgPSAnJztcbiAgfVxuICB2YXIgbmV4dENsYXNzO1xuICB2YXIgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGFyZ0xlbmd0aCA+IDEpIHtcbiAgICBmb3IgKHZhciBpaSA9IDE7IGlpIDwgYXJnTGVuZ3RoOyBpaSsrKSB7XG4gICAgICBuZXh0Q2xhc3MgPSBhcmd1bWVudHNbaWldO1xuICAgICAgaWYgKG5leHRDbGFzcykge1xuICAgICAgICBjbGFzc05hbWUgPSAoY2xhc3NOYW1lID8gY2xhc3NOYW1lICsgJyAnIDogJycpICsgbmV4dENsYXNzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGpvaW5DbGFzc2VzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleU1pcnJvclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhbiBlbnVtZXJhdGlvbiB3aXRoIGtleXMgZXF1YWwgdG8gdGhlaXIgdmFsdWUuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogICB2YXIgQ09MT1JTID0ga2V5TWlycm9yKHtibHVlOiBudWxsLCByZWQ6IG51bGx9KTtcbiAqICAgdmFyIG15Q29sb3IgPSBDT0xPUlMuYmx1ZTtcbiAqICAgdmFyIGlzQ29sb3JWYWxpZCA9ICEhQ09MT1JTW215Q29sb3JdO1xuICpcbiAqIFRoZSBsYXN0IGxpbmUgY291bGQgbm90IGJlIHBlcmZvcm1lZCBpZiB0aGUgdmFsdWVzIG9mIHRoZSBnZW5lcmF0ZWQgZW51bSB3ZXJlXG4gKiBub3QgZXF1YWwgdG8gdGhlaXIga2V5cy5cbiAqXG4gKiAgIElucHV0OiAge2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9XG4gKiAgIE91dHB1dDoge2tleTE6IGtleTEsIGtleTI6IGtleTJ9XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG52YXIga2V5TWlycm9yID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgdmFyIGtleTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSxcbiAgICAna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LidcbiAgKSA6IGludmFyaWFudChvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSkpO1xuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5TWlycm9yO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleU9mXG4gKi9cblxuLyoqXG4gKiBBbGxvd3MgZXh0cmFjdGlvbiBvZiBhIG1pbmlmaWVkIGtleS4gTGV0J3MgdGhlIGJ1aWxkIHN5c3RlbSBtaW5pZnkga2V5c1xuICogd2l0aG91dCBsb29zaW5nIHRoZSBhYmlsaXR5IHRvIGR5bmFtaWNhbGx5IHVzZSBrZXkgc3RyaW5ncyBhcyB2YWx1ZXNcbiAqIHRoZW1zZWx2ZXMuIFBhc3MgaW4gYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5L3ZhbCBwYWlyIGFuZCBpdCB3aWxsIHJldHVyblxuICogeW91IHRoZSBzdHJpbmcga2V5IG9mIHRoYXQgc2luZ2xlIHJlY29yZC4gU3VwcG9zZSB5b3Ugd2FudCB0byBncmFiIHRoZVxuICogdmFsdWUgZm9yIGEga2V5ICdjbGFzc05hbWUnIGluc2lkZSBvZiBhbiBvYmplY3QuIEtleS92YWwgbWluaWZpY2F0aW9uIG1heVxuICogaGF2ZSBhbGlhc2VkIHRoYXQga2V5IHRvIGJlICd4YTEyJy4ga2V5T2Yoe2NsYXNzTmFtZTogbnVsbH0pIHdpbGwgcmV0dXJuXG4gKiAneGExMicgaW4gdGhhdCBjYXNlLiBSZXNvbHZlIGtleXMgeW91IHdhbnQgdG8gdXNlIG9uY2UgYXQgc3RhcnR1cCB0aW1lLCB0aGVuXG4gKiByZXVzZSB0aG9zZSByZXNvbHV0aW9ucy5cbiAqL1xudmFyIGtleU9mID0gZnVuY3Rpb24ob25lS2V5T2JqKSB7XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIG9uZUtleU9iaikge1xuICAgIGlmICghb25lS2V5T2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU9mO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1hcE9iamVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcHJvdmlkZWQgYGNhbGxiYWNrYCBvbmNlIGZvciBlYWNoIGVudW1lcmFibGUgb3duIHByb3BlcnR5IGluIHRoZVxuICogb2JqZWN0IGFuZCBjb25zdHJ1Y3RzIGEgbmV3IG9iamVjdCBmcm9tIHRoZSByZXN1bHRzLiBUaGUgYGNhbGxiYWNrYCBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqXG4gKiAgLSB0aGUgcHJvcGVydHkgdmFsdWVcbiAqICAtIHRoZSBwcm9wZXJ0eSBuYW1lXG4gKiAgLSB0aGUgb2JqZWN0IGJlaW5nIHRyYXZlcnNlZFxuICpcbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgYWRkZWQgYWZ0ZXIgdGhlIGNhbGwgdG8gYG1hcE9iamVjdGAgd2lsbCBub3QgYmUgdmlzaXRlZFxuICogYnkgYGNhbGxiYWNrYC4gSWYgdGhlIHZhbHVlcyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzIGFyZSBjaGFuZ2VkLCB0aGUgdmFsdWVcbiAqIHBhc3NlZCB0byBgY2FsbGJhY2tgIHdpbGwgYmUgdGhlIHZhbHVlIGF0IHRoZSB0aW1lIGBtYXBPYmplY3RgIHZpc2l0cyB0aGVtLlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBkZWxldGVkIGJlZm9yZSBiZWluZyB2aXNpdGVkIGFyZSBub3QgdmlzaXRlZC5cbiAqXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmplY3RNYXAoKVxuICogQGdyZXAgZnVuY3Rpb24gb2JqTWFwKClcbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbWFwT2JqZWN0KG9iamVjdCwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBuYW1lKSkge1xuICAgICAgcmVzdWx0W25hbWVdID0gY2FsbGJhY2suY2FsbChjb250ZXh0LCBvYmplY3RbbmFtZV0sIG5hbWUsIG9iamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwT2JqZWN0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1lbW9pemVTdHJpbmdPbmx5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNZW1vaXplcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIG9uZSBzdHJpbmcgYXJndW1lbnQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBtZW1vaXplU3RyaW5nT25seShjYWxsYmFjaykge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIGlmICghY2FjaGUuaGFzT3duUHJvcGVydHkoc3RyaW5nKSkge1xuICAgICAgY2FjaGVbc3RyaW5nXSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW3N0cmluZ107XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVN0cmluZ09ubHk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgb25seUNoaWxkXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzXG4gKiBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0cyBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGVcbiAqIHB1cnBvc2Ugb2YgdGhpcyBoZWxwZXIgZnVuY3Rpb24gaXMgdG8gYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmVcbiAqIG9mIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gY2hpbGRyZW4gQ2hpbGQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdENvbXBvbmVudGAgY29udGFpbmVkIGluIHRoZVxuICogc3RydWN0dXJlLlxuICovXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pLFxuICAgICdvbmx5Q2hpbGQgbXVzdCBiZSBwYXNzZWQgYSBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgb25lIGNoaWxkLidcbiAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvbmx5Q2hpbGQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcGVyZm9ybWFuY2VcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgcGVyZm9ybWFuY2U7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgcGVyZm9ybWFuY2UgPVxuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSB8fFxuICAgIHdpbmRvdy5tc1BlcmZvcm1hbmNlIHx8XG4gICAgd2luZG93LndlYmtpdFBlcmZvcm1hbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlIHx8IHt9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlTm93XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBwZXJmb3JtYW5jZSA9IHJlcXVpcmUoXCIuL3BlcmZvcm1hbmNlXCIpO1xuXG4vKipcbiAqIERldGVjdCBpZiB3ZSBjYW4gdXNlIGB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClgIGFuZCBncmFjZWZ1bGx5IGZhbGxiYWNrIHRvXG4gKiBgRGF0ZS5ub3coKWAgaWYgaXQgZG9lc24ndCBleGlzdC4gV2UgbmVlZCB0byBzdXBwb3J0IEZpcmVmb3ggPCAxNSBmb3Igbm93XG4gKiBiZWNhdXNlIG9mIEZhY2Vib29rJ3MgdGVzdGluZyBpbmZyYXN0cnVjdHVyZS5cbiAqL1xuaWYgKCFwZXJmb3JtYW5jZSB8fCAhcGVyZm9ybWFuY2Uubm93KSB7XG4gIHBlcmZvcm1hbmNlID0gRGF0ZTtcbn1cblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcGVyZm9ybWFuY2Uubm93LmJpbmQocGVyZm9ybWFuY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCIpO1xuXG4vKipcbiAqIEVzY2FwZXMgYXR0cmlidXRlIHZhbHVlIHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSkge1xuICByZXR1cm4gJ1wiJyArIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNldElubmVySFRNTFxuICovXG5cbi8qIGdsb2JhbHMgTVNBcHAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcbnZhciBOT05WSVNJQkxFX1RFU1QgPSAvPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLztcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG59O1xuXG4vLyBXaW44IGFwcHM6IEFsbG93IGFsbCBodG1sIHRvIGJlIGluc2VydGVkXG5pZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfSk7XG4gIH07XG59XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4OiBXaGVuIHVwZGF0aW5nIGEganVzdCBjcmVhdGVkIG5vZGUgd2l0aCBpbm5lckhUTUwgb25seSBsZWFkaW5nXG4gIC8vIHdoaXRlc3BhY2UgaXMgcmVtb3ZlZC4gV2hlbiB1cGRhdGluZyBhbiBleGlzdGluZyBub2RlIHdpdGggaW5uZXJIVE1MXG4gIC8vIHdoaXRlc3BhY2UgaW4gcm9vdCBUZXh0Tm9kZXMgaXMgYWxzbyBjb2xsYXBzZWQuXG4gIC8vIEBzZWUgcXVpcmtzbW9kZS5vcmcvYnVncmVwb3J0cy9hcmNoaXZlcy8yMDA0LzExL2lubmVyaHRtbF9hbmRfdC5odG1sXG5cbiAgLy8gRmVhdHVyZSBkZXRlY3Rpb247IG9ubHkgSUU4IGlzIGtub3duIHRvIGJlaGF2ZSBpbXByb3Blcmx5IGxpa2UgdGhpcy5cbiAgdmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRlc3RFbGVtZW50LmlubmVySFRNTCA9ICcgJztcbiAgaWYgKHRlc3RFbGVtZW50LmlubmVySFRNTCA9PT0gJycpIHtcbiAgICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gICAgICAvLyBNYWdpYyB0aGVvcnk6IElFOCBzdXBwb3NlZGx5IGRpZmZlcmVudGlhdGVzIGJldHdlZW4gYWRkZWQgYW5kIHVwZGF0ZWRcbiAgICAgIC8vIG5vZGVzIHdoZW4gcHJvY2Vzc2luZyBpbm5lckhUTUwsIGlubmVySFRNTCBvbiB1cGRhdGVkIG5vZGVzIHN1ZmZlcnNcbiAgICAgIC8vIGZyb20gd29yc2Ugd2hpdGVzcGFjZSBiZWhhdmlvci4gUmUtYWRkaW5nIGEgbm9kZSBsaWtlIHRoaXMgdHJpZ2dlcnNcbiAgICAgIC8vIHRoZSBpbml0aWFsIGFuZCBtb3JlIGZhdm9yYWJsZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLlxuICAgICAgLy8gVE9ETzogV2hhdCB0byBkbyBvbiBhIGRldGFjaGVkIG5vZGU/XG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGFsc28gaW1wbGVtZW50IGEgd29ya2Fyb3VuZCBmb3Igbm9uLXZpc2libGUgdGFncyBkaXNhcHBlYXJpbmcgaW50b1xuICAgICAgLy8gdGhpbiBhaXIgb24gSUU4LCB0aGlzIG9ubHkgaGFwcGVucyBpZiB0aGVyZSBpcyBubyB2aXNpYmxlIHRleHRcbiAgICAgIC8vIGluLWZyb250IG9mIHRoZSBub24tdmlzaWJsZSB0YWdzLiBQaWdneWJhY2sgb24gdGhlIHdoaXRlc3BhY2UgZml4XG4gICAgICAvLyBhbmQgc2ltcGx5IGNoZWNrIGlmIGFueSBub24tdmlzaWJsZSB0YWdzIGFwcGVhciBpbiB0aGUgc291cmNlLlxuICAgICAgaWYgKFdISVRFU1BBQ0VfVEVTVC50ZXN0KGh0bWwpIHx8XG4gICAgICAgICAgaHRtbFswXSA9PT0gJzwnICYmIE5PTlZJU0lCTEVfVEVTVC50ZXN0KGh0bWwpKSB7XG4gICAgICAgIC8vIFJlY292ZXIgbGVhZGluZyB3aGl0ZXNwYWNlIGJ5IHRlbXBvcmFyaWx5IHByZXBlbmRpbmcgYW55IGNoYXJhY3Rlci5cbiAgICAgICAgLy8gXFx1RkVGRiBoYXMgdGhlIHBvdGVudGlhbCBhZHZhbnRhZ2Ugb2YgYmVpbmcgemVyby13aWR0aC9pbnZpc2libGUuXG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gJ1xcdUZFRkYnICsgaHRtbDtcblxuICAgICAgICAvLyBkZWxldGVEYXRhIGxlYXZlcyBhbiBlbXB0eSBgVGV4dE5vZGVgIHdoaWNoIG9mZnNldHMgdGhlIGluZGV4IG9mIGFsbFxuICAgICAgICAvLyBjaGlsZHJlbi4gRGVmaW5pdGVseSB3YW50IHRvIGF2b2lkIHRoaXMuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHRleHROb2RlLmRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dE5vZGUuZGVsZXRlRGF0YSgwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbm5lckhUTUw7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2V0VGV4dENvbnRlbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIik7XG5cbi8qKlxuICogU2V0IHRoZSB0ZXh0Q29udGVudCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LiBpbm5lclRleHQgaXMgYSBwb29yIHN1YnN0aXR1dGUgZm9yIHRleHRDb250ZW50IGFuZCwgYW1vbmcgbWFueVxuICogaXNzdWVzLCBpbnNlcnRzIDxicj4gaW5zdGVhZCBvZiB0aGUgbGl0ZXJhbCBuZXdsaW5lIGNoYXJzLiBpbm5lckhUTUwgYmVoYXZlc1xuICogYXMgaXQgc2hvdWxkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBpZiAoISgndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkpIHtcbiAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgICAgIHNldElubmVySFRNTChub2RlLCBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUZXh0Q29udGVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZ1xuICogZmFsc2Ugd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuXG4gKiBvYmpBIGFuZCBvYmpCLiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBrZXk7XG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAoa2V5IGluIG9iakEpIHtcbiAgICBpZiAob2JqQS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICghb2JqQi5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IG9iakFba2V5XSAhPT0gb2JqQltrZXldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBUZXN0IGZvciBCJ3Mga2V5cyBtaXNzaW5nIGZyb20gQS5cbiAgZm9yIChrZXkgaW4gb2JqQikge1xuICAgIGlmIChvYmpCLmhhc093blByb3BlcnR5KGtleSkgJiYgIW9iakEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogR2l2ZW4gYSBgcHJldkVsZW1lbnRgIGFuZCBgbmV4dEVsZW1lbnRgLCBkZXRlcm1pbmVzIGlmIHRoZSBleGlzdGluZ1xuICogaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQgYXMgb3Bwb3NlZCB0byBiZWluZyBkZXN0cm95ZWQgb3IgcmVwbGFjZWQgYnkgYSBuZXdcbiAqIGluc3RhbmNlLiBCb3RoIGFyZ3VtZW50cyBhcmUgZWxlbWVudHMuIFRoaXMgZW5zdXJlcyB0aGF0IHRoaXMgbG9naWMgY2FuXG4gKiBvcGVyYXRlIG9uIHN0YXRlbGVzcyB0cmVlcyB3aXRob3V0IGFueSBiYWNraW5nIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJldkVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gbmV4dEVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV4aXN0aW5nIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgaWYgKHByZXZFbGVtZW50ICE9IG51bGwgJiYgbmV4dEVsZW1lbnQgIT0gbnVsbCkge1xuICAgIHZhciBwcmV2VHlwZSA9IHR5cGVvZiBwcmV2RWxlbWVudDtcbiAgICB2YXIgbmV4dFR5cGUgPSB0eXBlb2YgbmV4dEVsZW1lbnQ7XG4gICAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAobmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZXh0VHlwZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICBwcmV2RWxlbWVudC50eXBlID09PSBuZXh0RWxlbWVudC50eXBlICYmXG4gICAgICAgICAgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXkpIHtcbiAgICAgICAgdmFyIG93bmVyc01hdGNoID0gcHJldkVsZW1lbnQuX293bmVyID09PSBuZXh0RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBwcmV2TmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0TmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0RGlzcGxheU5hbWUgPSBudWxsO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgaWYgKCFvd25lcnNNYXRjaCkge1xuICAgICAgICAgICAgaWYgKHByZXZFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJldk5hbWUgPVxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbmV4dE5hbWUgPVxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBuZXh0RGlzcGxheU5hbWUgPSBuZXh0RWxlbWVudC50eXBlLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnR5cGUgIT0gbnVsbCAmJiB0eXBlb2YgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgbmV4dERpc3BsYXlOYW1lID0gbmV4dEVsZW1lbnQudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV4dEVsZW1lbnQudHlwZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC50eXBlID09PSAnaW5wdXQnIHx8XG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICBpZiAoKHByZXZFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPT09IGZhbHNlKSB8fFxuICAgICAgICAgICAgICAgICAgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgJzwlcyAvPiBpcyBiZWluZyByZW5kZXJlZCBieSBib3RoICVzIGFuZCAlcyB1c2luZyB0aGUgc2FtZSAnICtcbiAgICAgICAgICAgICAgICAgICdrZXkgKCVzKSBpbiB0aGUgc2FtZSBwbGFjZS4gQ3VycmVudGx5LCB0aGlzIG1lYW5zIHRoYXQgJyArXG4gICAgICAgICAgICAgICAgICAndGhleSBkb25cXCd0IHByZXNlcnZlIHN0YXRlLiBUaGlzIGJlaGF2aW9yIHNob3VsZCBiZSB2ZXJ5ICcgK1xuICAgICAgICAgICAgICAgICAgJ3JhcmUgc28gd2VcXCdyZSBjb25zaWRlcmluZyBkZXByZWNhdGluZyBpdC4gUGxlYXNlIGNvbnRhY3QgJyArXG4gICAgICAgICAgICAgICAgICAndGhlIFJlYWN0IHRlYW0gYW5kIGV4cGxhaW4geW91ciB1c2UgY2FzZSBzbyB0aGF0IHdlIGNhbiAnICtcbiAgICAgICAgICAgICAgICAgICd0YWtlIHRoYXQgaW50byBjb25zaWRlcmF0aW9uLicsXG4gICAgICAgICAgICAgICAgICBuZXh0RGlzcGxheU5hbWUgfHwgJ1Vua25vd24gQ29tcG9uZW50JyxcbiAgICAgICAgICAgICAgICAgIHByZXZOYW1lIHx8ICdbVW5rbm93bl0nLFxuICAgICAgICAgICAgICAgICAgbmV4dE5hbWUgfHwgJ1tVbmtub3duXScsXG4gICAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5rZXlcbiAgICAgICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG93bmVyc01hdGNoO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9BcnJheVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb21NaXhlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxmaWxlbGlzdH0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgLy8gU29tZSBicm93c2UgYnVpbHRpbiBvYmplY3RzIGNhbiByZXBvcnQgdHlwZW9mICdmdW5jdGlvbicgKGUuZy4gTm9kZUxpc3QgaW5cbiAgLy8gb2xkIHZlcnNpb25zIG9mIFNhZmFyaSkuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUFycmF5LmlzQXJyYXkob2JqKSAmJlxuICAgICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSxcbiAgICAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnXG4gICkgOiBpbnZhcmlhbnQoIUFycmF5LmlzQXJyYXkob2JqKSAmJlxuICAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykpKTtcblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInLFxuICAgICd0b0FycmF5OiBPYmplY3QgbmVlZHMgYSBsZW5ndGggcHJvcGVydHknXG4gICkgOiBpbnZhcmlhbnQodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicpKTtcblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGxlbmd0aCA9PT0gMCB8fFxuICAgIChsZW5ndGggLSAxKSBpbiBvYmosXG4gICAgJ3RvQXJyYXk6IE9iamVjdCBzaG91bGQgaGF2ZSBrZXlzIGZvciBpbmRpY2VzJ1xuICApIDogaW52YXJpYW50KGxlbmd0aCA9PT0gMCB8fFxuICAobGVuZ3RoIC0gMSkgaW4gb2JqKSk7XG5cbiAgLy8gT2xkIElFIGRvZXNuJ3QgZ2l2ZSBjb2xsZWN0aW9ucyBhY2Nlc3MgdG8gaGFzT3duUHJvcGVydHkuIEFzc3VtZSBpbnB1dHNcbiAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG4gIC8vIGZhbGxiYWNrLlxuICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gY29weWluZyBrZXkgYnkga2V5LiBUaGlzIGFzc3VtZXMgYWxsIGtleXMgaGF2ZSBhIHZhbHVlLFxuICAvLyBzbyB3aWxsIG5vdCBwcmVzZXJ2ZSBzcGFyc2VseSBwb3B1bGF0ZWQgaW5wdXRzLlxuICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbmd0aDsgaWkrKykge1xuICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9BcnJheTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0cmF2ZXJzZUFsbENoaWxkcmVuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG5cbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZShcIi4vZ2V0SXRlcmF0b3JGblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBTRVBBUkFUT1IgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5TRVBBUkFUT1I7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuXG4vKipcbiAqIFRPRE86IFRlc3QgdGhhdCBhIHNpbmdsZSBjaGlsZCBhbmQgYW4gYXJyYXkgd2l0aCBvbmUgaXRlbSBoYXZlIHRoZSBzYW1lIGtleVxuICogcGF0dGVybi5cbiAqL1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlckxvb2t1cCA9IHtcbiAgJz0nOiAnPTAnLFxuICAnLic6ICc9MScsXG4gICc6JzogJz0yJ1xufTtcblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1s9LjpdL2c7XG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHVzZXJQcm92aWRlZEtleUVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEga2V5IHN0cmluZyB0aGF0IGlkZW50aWZpZXMgYSBjb21wb25lbnQgd2l0aGluIGEgc2V0LlxuICpcbiAqIEBwYXJhbSB7Kn0gY29tcG9uZW50IEEgY29tcG9uZW50IHRoYXQgY291bGQgY29udGFpbiBhIG1hbnVhbCBrZXkuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggdGhhdCBpcyB1c2VkIGlmIGEgbWFudWFsIGtleSBpcyBub3QgcHJvdmlkZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudEtleShjb21wb25lbnQsIGluZGV4KSB7XG4gIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIHdyYXBVc2VyUHJvdmlkZWRLZXkoY29tcG9uZW50LmtleSk7XG4gIH1cbiAgLy8gSW1wbGljaXQga2V5IGRldGVybWluZWQgYnkgdGhlIGluZGV4IGluIHRoZSBzZXRcbiAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cblxuLyoqXG4gKiBFc2NhcGUgYSBjb21wb25lbnQga2V5IHNvIHRoYXQgaXQgaXMgc2FmZSB0byB1c2UgaW4gYSByZWFjdGlkLlxuICpcbiAqIEBwYXJhbSB7Kn0ga2V5IENvbXBvbmVudCBrZXkgdG8gYmUgZXNjYXBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKFxuICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LFxuICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZXJcbiAgKTtcbn1cblxuLyoqXG4gKiBXcmFwIGEgYGtleWAgdmFsdWUgZXhwbGljaXRseSBwcm92aWRlZCBieSB0aGUgdXNlciB0byBkaXN0aW5ndWlzaCBpdCBmcm9tXG4gKiBpbXBsaWNpdGx5LWdlbmVyYXRlZCBrZXlzIGdlbmVyYXRlZCBieSBhIGNvbXBvbmVudCdzIGluZGV4IGluIGl0cyBwYXJlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBWYWx1ZSBvZiBhIHVzZXItcHJvdmlkZWQgYGtleWAgYXR0cmlidXRlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHdyYXBVc2VyUHJvdmlkZWRLZXkoa2V5KSB7XG4gIHJldHVybiAnJCcgKyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkoa2V5KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVNvRmFyIE5hbWUgb2YgdGhlIGtleSBwYXRoIHNvIGZhci5cbiAqIEBwYXJhbSB7IW51bWJlcn0gaW5kZXhTb0ZhciBOdW1iZXIgb2YgY2hpbGRyZW4gZW5jb3VudGVyZWQgdW50aWwgdGhpcyBwb2ludC5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2l0aCBlYWNoIGNoaWxkIGZvdW5kLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IFVzZWQgdG8gcGFzcyBpbmZvcm1hdGlvbiB0aHJvdWdob3V0IHRoZSB0cmF2ZXJzYWxcbiAqIHByb2Nlc3MuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gIGNoaWxkcmVuLFxuICBuYW1lU29GYXIsXG4gIGluZGV4U29GYXIsXG4gIGNhbGxiYWNrLFxuICB0cmF2ZXJzZUNvbnRleHRcbikge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcblxuICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgLy8gQWxsIG9mIHRoZSBhYm92ZSBhcmUgcGVyY2VpdmVkIGFzIG51bGwuXG4gICAgY2hpbGRyZW4gPSBudWxsO1xuICB9XG5cbiAgaWYgKGNoaWxkcmVuID09PSBudWxsIHx8XG4gICAgICB0eXBlID09PSAnc3RyaW5nJyB8fFxuICAgICAgdHlwZSA9PT0gJ251bWJlcicgfHxcbiAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICBjYWxsYmFjayhcbiAgICAgIHRyYXZlcnNlQ29udGV4dCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAgIC8vIHNvIHRoYXQgaXQncyBjb25zaXN0ZW50IGlmIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gZ3Jvd3MuXG4gICAgICBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0ZhcixcbiAgICAgIGluZGV4U29GYXJcbiAgICApO1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgdmFyIGNoaWxkLCBuZXh0TmFtZSwgbmV4dEluZGV4O1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSAoXG4gICAgICAgIChuYW1lU29GYXIgIT09ICcnID8gbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG4gICAgICAgIGdldENvbXBvbmVudEtleShjaGlsZCwgaSlcbiAgICAgICk7XG4gICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dE5hbWUsXG4gICAgICAgIG5leHRJbmRleCxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHRyYXZlcnNlQ29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGlpID0gMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBuZXh0TmFtZSA9IChcbiAgICAgICAgICAgIChuYW1lU29GYXIgIT09ICcnID8gbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG4gICAgICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGlpKyspXG4gICAgICAgICAgKTtcbiAgICAgICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgbmV4dE5hbWUsXG4gICAgICAgICAgICBuZXh0SW5kZXgsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHRyYXZlcnNlQ29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMsXG4gICAgICAgICAgICAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gJyArXG4gICAgICAgICAgICAnZXhwZXJpbWVudGFsIGZlYXR1cmUgdGhhdCBtaWdodCBiZSByZW1vdmVkLiBDb252ZXJ0IGl0IHRvIGEgJyArXG4gICAgICAgICAgICAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJ1xuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSAoXG4gICAgICAgICAgICAgIChuYW1lU29GYXIgIT09ICcnID8gbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG4gICAgICAgICAgICAgIHdyYXBVc2VyUHJvdmlkZWRLZXkoZW50cnlbMF0pICsgU1VCU0VQQVJBVE9SICtcbiAgICAgICAgICAgICAgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCAwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4U29GYXIgKyBzdWJ0cmVlQ291bnQ7XG4gICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICBuZXh0TmFtZSxcbiAgICAgICAgICAgICAgbmV4dEluZGV4LFxuICAgICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgICAgdHJhdmVyc2VDb250ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIGNoaWxkcmVuLm5vZGVUeXBlICE9PSAxLFxuICAgICAgICAndHJhdmVyc2VBbGxDaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCBhbiBpbnZhbGlkIGNoaWxkOyBET00gJyArXG4gICAgICAgICdlbGVtZW50cyBhcmUgbm90IHZhbGlkIGNoaWxkcmVuIG9mIFJlYWN0IGNvbXBvbmVudHMuJ1xuICAgICAgKSA6IGludmFyaWFudChjaGlsZHJlbi5ub2RlVHlwZSAhPT0gMSkpO1xuICAgICAgdmFyIGZyYWdtZW50ID0gUmVhY3RGcmFnbWVudC5leHRyYWN0KGNoaWxkcmVuKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBmcmFnbWVudCkge1xuICAgICAgICBpZiAoZnJhZ21lbnQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGNoaWxkID0gZnJhZ21lbnRba2V5XTtcbiAgICAgICAgICBuZXh0TmFtZSA9IChcbiAgICAgICAgICAgIChuYW1lU29GYXIgIT09ICcnID8gbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG4gICAgICAgICAgICB3cmFwVXNlclByb3ZpZGVkS2V5KGtleSkgKyBTVUJTRVBBUkFUT1IgK1xuICAgICAgICAgICAgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCAwKVxuICAgICAgICAgICk7XG4gICAgICAgICAgbmV4dEluZGV4ID0gaW5kZXhTb0ZhciArIHN1YnRyZWVDb3VudDtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgIG5leHROYW1lLFxuICAgICAgICAgICAgbmV4dEluZGV4LFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICB0cmF2ZXJzZUNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCAwLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHVwZGF0ZVxuICovXG5cbiAvKiBnbG9iYWwgaGFzT3duUHJvcGVydHk6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4geC5jb25jYXQoKTtcbiAgfSBlbHNlIGlmICh4ICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBhc3NpZ24obmV3IHguY29uc3RydWN0b3IoKSwgeCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbn1cblxudmFyIENPTU1BTkRfUFVTSCA9IGtleU9mKHskcHVzaDogbnVsbH0pO1xudmFyIENPTU1BTkRfVU5TSElGVCA9IGtleU9mKHskdW5zaGlmdDogbnVsbH0pO1xudmFyIENPTU1BTkRfU1BMSUNFID0ga2V5T2YoeyRzcGxpY2U6IG51bGx9KTtcbnZhciBDT01NQU5EX1NFVCA9IGtleU9mKHskc2V0OiBudWxsfSk7XG52YXIgQ09NTUFORF9NRVJHRSA9IGtleU9mKHskbWVyZ2U6IG51bGx9KTtcbnZhciBDT01NQU5EX0FQUExZID0ga2V5T2YoeyRhcHBseTogbnVsbH0pO1xuXG52YXIgQUxMX0NPTU1BTkRTX0xJU1QgPSBbXG4gIENPTU1BTkRfUFVTSCxcbiAgQ09NTUFORF9VTlNISUZULFxuICBDT01NQU5EX1NQTElDRSxcbiAgQ09NTUFORF9TRVQsXG4gIENPTU1BTkRfTUVSR0UsXG4gIENPTU1BTkRfQVBQTFlcbl07XG5cbnZhciBBTExfQ09NTUFORFNfU0VUID0ge307XG5cbkFMTF9DT01NQU5EU19MSVNULmZvckVhY2goZnVuY3Rpb24oY29tbWFuZCkge1xuICBBTExfQ09NTUFORFNfU0VUW2NvbW1hbmRdID0gdHJ1ZTtcbn0pO1xuXG5mdW5jdGlvbiBpbnZhcmlhbnRBcnJheUNhc2UodmFsdWUsIHNwZWMsIGNvbW1hbmQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBBcnJheS5pc0FycmF5KHZhbHVlKSxcbiAgICAndXBkYXRlKCk6IGV4cGVjdGVkIHRhcmdldCBvZiAlcyB0byBiZSBhbiBhcnJheTsgZ290ICVzLicsXG4gICAgY29tbWFuZCxcbiAgICB2YWx1ZVxuICApIDogaW52YXJpYW50KEFycmF5LmlzQXJyYXkodmFsdWUpKSk7XG4gIHZhciBzcGVjVmFsdWUgPSBzcGVjW2NvbW1hbmRdO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIEFycmF5LmlzQXJyYXkoc3BlY1ZhbHVlKSxcbiAgICAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXk7IGdvdCAlcy4gJyArXG4gICAgJ0RpZCB5b3UgZm9yZ2V0IHRvIHdyYXAgeW91ciBwYXJhbWV0ZXIgaW4gYW4gYXJyYXk/JyxcbiAgICBjb21tYW5kLFxuICAgIHNwZWNWYWx1ZVxuICApIDogaW52YXJpYW50KEFycmF5LmlzQXJyYXkoc3BlY1ZhbHVlKSkpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUodmFsdWUsIHNwZWMpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2Ygc3BlYyA9PT0gJ29iamVjdCcsXG4gICAgJ3VwZGF0ZSgpOiBZb3UgcHJvdmlkZWQgYSBrZXkgcGF0aCB0byB1cGRhdGUoKSB0aGF0IGRpZCBub3QgY29udGFpbiBvbmUgJyArXG4gICAgJ29mICVzLiBEaWQgeW91IGZvcmdldCB0byBpbmNsdWRlIHslczogLi4ufT8nLFxuICAgIEFMTF9DT01NQU5EU19MSVNULmpvaW4oJywgJyksXG4gICAgQ09NTUFORF9TRVRcbiAgKSA6IGludmFyaWFudCh0eXBlb2Ygc3BlYyA9PT0gJ29iamVjdCcpKTtcblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1NFVCkpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgT2JqZWN0LmtleXMoc3BlYykubGVuZ3RoID09PSAxLFxuICAgICAgJ0Nhbm5vdCBoYXZlIG1vcmUgdGhhbiBvbmUga2V5IGluIGFuIG9iamVjdCB3aXRoICVzJyxcbiAgICAgIENPTU1BTkRfU0VUXG4gICAgKSA6IGludmFyaWFudChPYmplY3Qua2V5cyhzcGVjKS5sZW5ndGggPT09IDEpKTtcblxuICAgIHJldHVybiBzcGVjW0NPTU1BTkRfU0VUXTtcbiAgfVxuXG4gIHZhciBuZXh0VmFsdWUgPSBzaGFsbG93Q29weSh2YWx1ZSk7XG5cbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9NRVJHRSkpIHtcbiAgICB2YXIgbWVyZ2VPYmogPSBzcGVjW0NPTU1BTkRfTUVSR0VdO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBtZXJnZU9iaiAmJiB0eXBlb2YgbWVyZ2VPYmogPT09ICdvYmplY3QnLFxuICAgICAgJ3VwZGF0ZSgpOiAlcyBleHBlY3RzIGEgc3BlYyBvZiB0eXBlIFxcJ29iamVjdFxcJzsgZ290ICVzJyxcbiAgICAgIENPTU1BTkRfTUVSR0UsXG4gICAgICBtZXJnZU9ialxuICAgICkgOiBpbnZhcmlhbnQobWVyZ2VPYmogJiYgdHlwZW9mIG1lcmdlT2JqID09PSAnb2JqZWN0JykpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBuZXh0VmFsdWUgJiYgdHlwZW9mIG5leHRWYWx1ZSA9PT0gJ29iamVjdCcsXG4gICAgICAndXBkYXRlKCk6ICVzIGV4cGVjdHMgYSB0YXJnZXQgb2YgdHlwZSBcXCdvYmplY3RcXCc7IGdvdCAlcycsXG4gICAgICBDT01NQU5EX01FUkdFLFxuICAgICAgbmV4dFZhbHVlXG4gICAgKSA6IGludmFyaWFudChuZXh0VmFsdWUgJiYgdHlwZW9mIG5leHRWYWx1ZSA9PT0gJ29iamVjdCcpKTtcbiAgICBhc3NpZ24obmV4dFZhbHVlLCBzcGVjW0NPTU1BTkRfTUVSR0VdKTtcbiAgfVxuXG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNwZWMsIENPTU1BTkRfUFVTSCkpIHtcbiAgICBpbnZhcmlhbnRBcnJheUNhc2UodmFsdWUsIHNwZWMsIENPTU1BTkRfUFVTSCk7XG4gICAgc3BlY1tDT01NQU5EX1BVU0hdLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgbmV4dFZhbHVlLnB1c2goaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1VOU0hJRlQpKSB7XG4gICAgaW52YXJpYW50QXJyYXlDYXNlKHZhbHVlLCBzcGVjLCBDT01NQU5EX1VOU0hJRlQpO1xuICAgIHNwZWNbQ09NTUFORF9VTlNISUZUXS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIG5leHRWYWx1ZS51bnNoaWZ0KGl0ZW0pO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9TUExJQ0UpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpLFxuICAgICAgJ0V4cGVjdGVkICVzIHRhcmdldCB0byBiZSBhbiBhcnJheTsgZ290ICVzJyxcbiAgICAgIENPTU1BTkRfU1BMSUNFLFxuICAgICAgdmFsdWVcbiAgICApIDogaW52YXJpYW50KEFycmF5LmlzQXJyYXkodmFsdWUpKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEFycmF5LmlzQXJyYXkoc3BlY1tDT01NQU5EX1NQTElDRV0pLFxuICAgICAgJ3VwZGF0ZSgpOiBleHBlY3RlZCBzcGVjIG9mICVzIHRvIGJlIGFuIGFycmF5IG9mIGFycmF5czsgZ290ICVzLiAnICtcbiAgICAgICdEaWQgeW91IGZvcmdldCB0byB3cmFwIHlvdXIgcGFyYW1ldGVycyBpbiBhbiBhcnJheT8nLFxuICAgICAgQ09NTUFORF9TUExJQ0UsXG4gICAgICBzcGVjW0NPTU1BTkRfU1BMSUNFXVxuICAgICkgOiBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheShzcGVjW0NPTU1BTkRfU1BMSUNFXSkpKTtcbiAgICBzcGVjW0NPTU1BTkRfU1BMSUNFXS5mb3JFYWNoKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIEFycmF5LmlzQXJyYXkoYXJncyksXG4gICAgICAgICd1cGRhdGUoKTogZXhwZWN0ZWQgc3BlYyBvZiAlcyB0byBiZSBhbiBhcnJheSBvZiBhcnJheXM7IGdvdCAlcy4gJyArXG4gICAgICAgICdEaWQgeW91IGZvcmdldCB0byB3cmFwIHlvdXIgcGFyYW1ldGVycyBpbiBhbiBhcnJheT8nLFxuICAgICAgICBDT01NQU5EX1NQTElDRSxcbiAgICAgICAgc3BlY1tDT01NQU5EX1NQTElDRV1cbiAgICAgICkgOiBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheShhcmdzKSkpO1xuICAgICAgbmV4dFZhbHVlLnNwbGljZS5hcHBseShuZXh0VmFsdWUsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9BUFBMWSkpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHNwZWNbQ09NTUFORF9BUFBMWV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYSBmdW5jdGlvbjsgZ290ICVzLicsXG4gICAgICBDT01NQU5EX0FQUExZLFxuICAgICAgc3BlY1tDT01NQU5EX0FQUExZXVxuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHNwZWNbQ09NTUFORF9BUFBMWV0gPT09ICdmdW5jdGlvbicpKTtcbiAgICBuZXh0VmFsdWUgPSBzcGVjW0NPTU1BTkRfQVBQTFldKG5leHRWYWx1ZSk7XG4gIH1cblxuICBmb3IgKHZhciBrIGluIHNwZWMpIHtcbiAgICBpZiAoIShBTExfQ09NTUFORFNfU0VULmhhc093blByb3BlcnR5KGspICYmIEFMTF9DT01NQU5EU19TRVRba10pKSB7XG4gICAgICBuZXh0VmFsdWVba10gPSB1cGRhdGUodmFsdWVba10sIHNwZWNba10pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0VmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHdhcm5pbmdcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0ICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0yLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAvXltzXFxXXSokLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJykgPT09IDApIHtcbiAgICAgIHJldHVybjsgLy8gSWdub3JlIENvbXBvc2l0ZUNvbXBvbmVudCBwcm9wdHlwZSBjaGVjay5cbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSAge3JldHVybiBhcmdzW2FyZ0luZGV4KytdO30pO1xuICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3QnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBFdmVudEVtaXR0ZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRXZlbnQgaGFuZGxlciB0byBiZSBjYWxsZWQuXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IENvbnRleHQgZm9yIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IGVtaXQgb25jZVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogRXZlbnRFbWl0dGVyIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsgLyogTm90aGluZyB0byBzZXQgKi8gfVxuXG4vKipcbiAqIEhvbGRzIHRoZSBhc3NpZ25lZCBFdmVudEVtaXR0ZXJzIGJ5IG5hbWUuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBSZXR1cm4gYSBsaXN0IG9mIGFzc2lnbmVkIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50cyB0aGF0IHNob3VsZCBiZSBsaXN0ZWQuXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2ZW50XSkgcmV0dXJuIFtdO1xuICBpZiAodGhpcy5fZXZlbnRzW2V2ZW50XS5mbikgcmV0dXJuIFt0aGlzLl9ldmVudHNbZXZlbnRdLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX2V2ZW50c1tldmVudF0ubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gdGhpcy5fZXZlbnRzW2V2ZW50XVtpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogRW1pdCBhbiBldmVudCB0byBhbGwgcmVnaXN0ZXJlZCBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIGlmIHdlJ3ZlIGVtaXR0ZWQgYW4gZXZlbnQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1tldmVudF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IEV2ZW50TGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0b259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0ge307XG4gIGlmICghdGhpcy5fZXZlbnRzW2V2ZW50XSkgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IGxpc3RlbmVyO1xuICBlbHNlIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudF0uZm4pIHRoaXMuX2V2ZW50c1tldmVudF0ucHVzaChsaXN0ZW5lcik7XG4gICAgZWxzZSB0aGlzLl9ldmVudHNbZXZlbnRdID0gW1xuICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50XSwgbGlzdGVuZXJcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhbiBFdmVudExpc3RlbmVyIHRoYXQncyBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpIHRoaXMuX2V2ZW50cyA9IHt9O1xuICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudF0pIHRoaXMuX2V2ZW50c1tldmVudF0gPSBsaXN0ZW5lcjtcbiAgZWxzZSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHNbZXZlbnRdLmZuKSB0aGlzLl9ldmVudHNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIGVsc2UgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IFtcbiAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0sIGxpc3RlbmVyXG4gICAgXTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2Ugd2FudCB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgdGhhdCB3ZSBuZWVkIHRvIGZpbmQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25jZSBsaXN0ZW5lcnMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbZXZlbnRdKSByZXR1cm4gdGhpcztcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxuICAgICwgZXZlbnRzID0gW107XG5cbiAgaWYgKGZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5mbiAmJiAobGlzdGVuZXJzLmZuICE9PSBmbiB8fCAob25jZSAmJiAhbGlzdGVuZXJzLm9uY2UpKSkge1xuICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzKTtcbiAgICB9XG4gICAgaWYgKCFsaXN0ZW5lcnMuZm4pIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkpIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gIC8vXG4gIGlmIChldmVudHMubGVuZ3RoKSB7XG4gICAgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb3Igb25seSB0aGUgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2FudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKGV2ZW50KSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2ZW50XTtcbiAgZWxzZSB0aGlzLl9ldmVudHMgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gVGhpcyBmdW5jdGlvbiBkb2Vzbid0IGFwcGx5IGFueW1vcmUuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyMiA9IEV2ZW50RW1pdHRlcjtcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIzID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG4iLCIvKiEgTmF0aXZlIFByb21pc2UgT25seVxuICAgIHYwLjcuOC1hIChjKSBLeWxlIFNpbXBzb25cbiAgICBNSVQgTGljZW5zZTogaHR0cDovL2dldGlmeS5taXQtbGljZW5zZS5vcmdcbiovXG4hZnVuY3Rpb24odCxuLGUpe25bdF09blt0XXx8ZSgpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPW5bdF06XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gblt0XX0pfShcIlByb21pc2VcIixcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDp0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCh0LG4pe2wuYWRkKHQsbiksaHx8KGg9eShsLmRyYWluKSl9ZnVuY3Rpb24gbih0KXt2YXIgbixlPXR5cGVvZiB0O3JldHVybiBudWxsPT10fHxcIm9iamVjdFwiIT1lJiZcImZ1bmN0aW9uXCIhPWV8fChuPXQudGhlbiksXCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uOiExfWZ1bmN0aW9uIGUoKXtmb3IodmFyIHQ9MDt0PHRoaXMuY2hhaW4ubGVuZ3RoO3QrKylvKHRoaXMsMT09PXRoaXMuc3RhdGU/dGhpcy5jaGFpblt0XS5zdWNjZXNzOnRoaXMuY2hhaW5bdF0uZmFpbHVyZSx0aGlzLmNoYWluW3RdKTt0aGlzLmNoYWluLmxlbmd0aD0wfWZ1bmN0aW9uIG8odCxlLG8pe3ZhciByLGk7dHJ5e2U9PT0hMT9vLnJlamVjdCh0Lm1zZyk6KHI9ZT09PSEwP3QubXNnOmUuY2FsbCh2b2lkIDAsdC5tc2cpLHI9PT1vLnByb21pc2U/by5yZWplY3QoVHlwZUVycm9yKFwiUHJvbWlzZS1jaGFpbiBjeWNsZVwiKSk6KGk9bihyKSk/aS5jYWxsKHIsby5yZXNvbHZlLG8ucmVqZWN0KTpvLnJlc29sdmUocikpfWNhdGNoKGMpe28ucmVqZWN0KGMpfX1mdW5jdGlvbiByKG8pe3ZhciBjLHUsYT10aGlzO2lmKCFhLnRyaWdnZXJlZCl7YS50cmlnZ2VyZWQ9ITAsYS5kZWYmJihhPWEuZGVmKTt0cnl7KGM9bihvKSk/KHU9bmV3IGYoYSksYy5jYWxsKG8sZnVuY3Rpb24oKXtyLmFwcGx5KHUsYXJndW1lbnRzKX0sZnVuY3Rpb24oKXtpLmFwcGx5KHUsYXJndW1lbnRzKX0pKTooYS5tc2c9byxhLnN0YXRlPTEsYS5jaGFpbi5sZW5ndGg+MCYmdChlLGEpKX1jYXRjaChzKXtpLmNhbGwodXx8bmV3IGYoYSkscyl9fX1mdW5jdGlvbiBpKG4pe3ZhciBvPXRoaXM7by50cmlnZ2VyZWR8fChvLnRyaWdnZXJlZD0hMCxvLmRlZiYmKG89by5kZWYpLG8ubXNnPW4sby5zdGF0ZT0yLG8uY2hhaW4ubGVuZ3RoPjAmJnQoZSxvKSl9ZnVuY3Rpb24gYyh0LG4sZSxvKXtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKykhZnVuY3Rpb24ocil7dC5yZXNvbHZlKG5bcl0pLnRoZW4oZnVuY3Rpb24odCl7ZShyLHQpfSxvKX0ocil9ZnVuY3Rpb24gZih0KXt0aGlzLmRlZj10LHRoaXMudHJpZ2dlcmVkPSExfWZ1bmN0aW9uIHUodCl7dGhpcy5wcm9taXNlPXQsdGhpcy5zdGF0ZT0wLHRoaXMudHJpZ2dlcmVkPSExLHRoaXMuY2hhaW49W10sdGhpcy5tc2c9dm9pZCAwfWZ1bmN0aW9uIGEobil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtpZigwIT09dGhpcy5fX05QT19fKXRocm93IFR5cGVFcnJvcihcIk5vdCBhIHByb21pc2VcIik7dGhpcy5fX05QT19fPTE7dmFyIG89bmV3IHUodGhpcyk7dGhpcy50aGVuPWZ1bmN0aW9uKG4scil7dmFyIGk9e3N1Y2Nlc3M6XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uOiEwLGZhaWx1cmU6XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9yOiExfTtyZXR1cm4gaS5wcm9taXNlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKGZ1bmN0aW9uKHQsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdHx8XCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtpLnJlc29sdmU9dCxpLnJlamVjdD1ufSksby5jaGFpbi5wdXNoKGkpLDAhPT1vLnN0YXRlJiZ0KGUsbyksaS5wcm9taXNlfSx0aGlzW1wiY2F0Y2hcIl09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsdCl9O3RyeXtuLmNhbGwodm9pZCAwLGZ1bmN0aW9uKHQpe3IuY2FsbChvLHQpfSxmdW5jdGlvbih0KXtpLmNhbGwobyx0KX0pfWNhdGNoKGMpe2kuY2FsbChvLGMpfX12YXIgcyxoLGwscD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLHk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNldEltbWVkaWF0ZT9mdW5jdGlvbih0KXtyZXR1cm4gc2V0SW1tZWRpYXRlKHQpfTpzZXRUaW1lb3V0O3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJ4XCIse30pLHM9ZnVuY3Rpb24odCxuLGUsbyl7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4se3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOm8hPT0hMX0pfX1jYXRjaChkKXtzPWZ1bmN0aW9uKHQsbixlKXtyZXR1cm4gdFtuXT1lLHR9fWw9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsbil7dGhpcy5mbj10LHRoaXMuc2VsZj1uLHRoaXMubmV4dD12b2lkIDB9dmFyIG4sZSxvO3JldHVybnthZGQ6ZnVuY3Rpb24ocixpKXtvPW5ldyB0KHIsaSksZT9lLm5leHQ9bzpuPW8sZT1vLG89dm9pZCAwfSxkcmFpbjpmdW5jdGlvbigpe3ZhciB0PW47Zm9yKG49ZT1oPXZvaWQgMDt0Oyl0LmZuLmNhbGwodC5zZWxmKSx0PXQubmV4dH19fSgpO3ZhciBnPXMoe30sXCJjb25zdHJ1Y3RvclwiLGEsITEpO3JldHVybiBhLnByb3RvdHlwZT1nLHMoZyxcIl9fTlBPX19cIiwwLCExKSxzKGEsXCJyZXNvbHZlXCIsZnVuY3Rpb24odCl7dmFyIG49dGhpcztyZXR1cm4gdCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJjE9PT10Ll9fTlBPX18/dDpuZXcgbihmdW5jdGlvbihuLGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG58fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7bih0KX0pfSkscyhhLFwicmVqZWN0XCIsZnVuY3Rpb24odCl7cmV0dXJuIG5ldyB0aGlzKGZ1bmN0aW9uKG4sZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtlKHQpfSl9KSxzKGEsXCJhbGxcIixmdW5jdGlvbih0KXt2YXIgbj10aGlzO3JldHVyblwiW29iamVjdCBBcnJheV1cIiE9cC5jYWxsKHQpP24ucmVqZWN0KFR5cGVFcnJvcihcIk5vdCBhbiBhcnJheVwiKSk6MD09PXQubGVuZ3RoP24ucmVzb2x2ZShbXSk6bmV3IG4oZnVuY3Rpb24oZSxvKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBvKXRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO3ZhciByPXQubGVuZ3RoLGk9QXJyYXkociksZj0wO2Mobix0LGZ1bmN0aW9uKHQsbil7aVt0XT1uLCsrZj09PXImJmUoaSl9LG8pfSl9KSxzKGEsXCJyYWNlXCIsZnVuY3Rpb24odCl7dmFyIG49dGhpcztyZXR1cm5cIltvYmplY3QgQXJyYXldXCIhPXAuY2FsbCh0KT9uLnJlamVjdChUeXBlRXJyb3IoXCJOb3QgYW4gYXJyYXlcIikpOm5ldyBuKGZ1bmN0aW9uKGUsbyl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZXx8XCJmdW5jdGlvblwiIT10eXBlb2Ygbyl0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtjKG4sdCxmdW5jdGlvbih0LG4pe2Uobil9LG8pfSl9KSxhfSk7XG4iLCIvKipcbiAqIEEgbW9kdWxlIG9mIG1ldGhvZHMgdGhhdCB5b3Ugd2FudCB0byBpbmNsdWRlIGluIGFsbCBhY3Rpb25zLlxuICogVGhpcyBtb2R1bGUgaXMgY29uc3VtZWQgYnkgYGNyZWF0ZUFjdGlvbmAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xufTtcbiIsImV4cG9ydHMuY3JlYXRlZFN0b3JlcyA9IFtdO1xuXG5leHBvcnRzLmNyZWF0ZWRBY3Rpb25zID0gW107XG5cbmV4cG9ydHMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB3aGlsZShleHBvcnRzLmNyZWF0ZWRTdG9yZXMubGVuZ3RoKSB7XG4gICAgICAgIGV4cG9ydHMuY3JlYXRlZFN0b3Jlcy5wb3AoKTtcbiAgICB9XG4gICAgd2hpbGUoZXhwb3J0cy5jcmVhdGVkQWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgZXhwb3J0cy5jcmVhdGVkQWN0aW9ucy5wb3AoKTtcbiAgICB9XG59O1xuIiwidmFyIF8gPSByZXF1aXJlKCcuL3V0aWxzJyksXG4gICAgbWFrZXIgPSByZXF1aXJlKCcuL2pvaW5zJykuaW5zdGFuY2VKb2luQ3JlYXRvcjtcblxuLyoqXG4gKiBFeHRyYWN0IGNoaWxkIGxpc3RlbmFibGVzIGZyb20gYSBwYXJlbnQgZnJvbSB0aGVpclxuICogY2hpbGRyZW4gcHJvcGVydHkgYW5kIHJldHVybiB0aGVtIGluIGEga2V5ZWQgT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGxpc3RlbmFibGUgVGhlIHBhcmVudCBsaXN0ZW5hYmxlXG4gKi9cbnZhciBtYXBDaGlsZExpc3RlbmFibGVzID0gZnVuY3Rpb24obGlzdGVuYWJsZSkge1xuICAgIHZhciBpID0gMCwgY2hpbGRyZW4gPSB7fSwgY2hpbGROYW1lO1xuICAgIGZvciAoO2kgPCAobGlzdGVuYWJsZS5jaGlsZHJlbnx8W10pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNoaWxkTmFtZSA9IGxpc3RlbmFibGUuY2hpbGRyZW5baV07XG4gICAgICAgIGlmKGxpc3RlbmFibGVbY2hpbGROYW1lXSl7XG4gICAgICAgICAgICBjaGlsZHJlbltjaGlsZE5hbWVdID0gbGlzdGVuYWJsZVtjaGlsZE5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbn07XG5cbi8qKlxuICogTWFrZSBhIGZsYXQgZGljdGlvbmFyeSBvZiBhbGwgbGlzdGVuYWJsZXMgaW5jbHVkaW5nIHRoZWlyXG4gKiBwb3NzaWJsZSBjaGlsZHJlbiAocmVjdXJzaXZlbHkpLCBjb25jYXRlbmF0aW5nIG5hbWVzIGluIGNhbWVsQ2FzZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbGlzdGVuYWJsZXMgVGhlIHRvcC1sZXZlbCBsaXN0ZW5hYmxlc1xuICovXG52YXIgZmxhdHRlbkxpc3RlbmFibGVzID0gZnVuY3Rpb24obGlzdGVuYWJsZXMpIHtcbiAgICB2YXIgZmxhdHRlbmVkID0ge307XG4gICAgZm9yKHZhciBrZXkgaW4gbGlzdGVuYWJsZXMpe1xuICAgICAgICB2YXIgbGlzdGVuYWJsZSA9IGxpc3RlbmFibGVzW2tleV07XG4gICAgICAgIHZhciBjaGlsZE1hcCA9IG1hcENoaWxkTGlzdGVuYWJsZXMobGlzdGVuYWJsZSk7XG5cbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgZmxhdHRlbiBjaGlsZHJlblxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBmbGF0dGVuTGlzdGVuYWJsZXMoY2hpbGRNYXApO1xuXG4gICAgICAgIC8vIGFkZCB0aGUgcHJpbWFyeSBsaXN0ZW5hYmxlIGFuZCBjaGlscmVuXG4gICAgICAgIGZsYXR0ZW5lZFtrZXldID0gbGlzdGVuYWJsZTtcbiAgICAgICAgZm9yKHZhciBjaGlsZEtleSBpbiBjaGlsZHJlbil7XG4gICAgICAgICAgICB2YXIgY2hpbGRMaXN0ZW5hYmxlID0gY2hpbGRyZW5bY2hpbGRLZXldO1xuICAgICAgICAgICAgZmxhdHRlbmVkW2tleSArIF8uY2FwaXRhbGl6ZShjaGlsZEtleSldID0gY2hpbGRMaXN0ZW5hYmxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZsYXR0ZW5lZDtcbn07XG5cbi8qKlxuICogQSBtb2R1bGUgb2YgbWV0aG9kcyByZWxhdGVkIHRvIGxpc3RlbmluZy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgYHZhbGlkYXRlTGlzdGVuaW5nYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtBY3Rpb258U3RvcmV9IGxpc3RlbmFibGUgVGhlIGxpc3RlbmFibGUgd2Ugd2FudCB0byBzZWFyY2ggZm9yXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRoZSByZXN1bHQgb2YgYSByZWN1cnNpdmUgc2VhcmNoIGFtb25nIGB0aGlzLnN1YnNjcmlwdGlvbnNgXG4gICAgICovXG4gICAgaGFzTGlzdGVuZXI6IGZ1bmN0aW9uKGxpc3RlbmFibGUpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBqLCBsaXN0ZW5lciwgbGlzdGVuYWJsZXM7XG4gICAgICAgIGZvciAoO2kgPCAodGhpcy5zdWJzY3JpcHRpb25zfHxbXSkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxpc3RlbmFibGVzID0gW10uY29uY2F0KHRoaXMuc3Vic2NyaXB0aW9uc1tpXS5saXN0ZW5hYmxlKTtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsaXN0ZW5hYmxlcy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5hYmxlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIgPT09IGxpc3RlbmFibGUgfHwgbGlzdGVuZXIuaGFzTGlzdGVuZXIgJiYgbGlzdGVuZXIuaGFzTGlzdGVuZXIobGlzdGVuYWJsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQSBjb252ZW5pZW5jZSBtZXRob2QgdGhhdCBsaXN0ZW5zIHRvIGFsbCBsaXN0ZW5hYmxlcyBpbiB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxpc3RlbmFibGVzIEFuIG9iamVjdCBvZiBsaXN0ZW5hYmxlcy4gS2V5cyB3aWxsIGJlIHVzZWQgYXMgY2FsbGJhY2sgbWV0aG9kIG5hbWVzLlxuICAgICAqL1xuICAgIGxpc3RlblRvTWFueTogZnVuY3Rpb24obGlzdGVuYWJsZXMpe1xuICAgICAgICB2YXIgYWxsTGlzdGVuYWJsZXMgPSBmbGF0dGVuTGlzdGVuYWJsZXMobGlzdGVuYWJsZXMpO1xuICAgICAgICBmb3IodmFyIGtleSBpbiBhbGxMaXN0ZW5hYmxlcyl7XG4gICAgICAgICAgICB2YXIgY2JuYW1lID0gXy5jYWxsYmFja05hbWUoa2V5KSxcbiAgICAgICAgICAgICAgICBsb2NhbG5hbWUgPSB0aGlzW2NibmFtZV0gPyBjYm5hbWUgOiB0aGlzW2tleV0gPyBrZXkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAobG9jYWxuYW1lKXtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGFsbExpc3RlbmFibGVzW2tleV0sbG9jYWxuYW1lLHRoaXNbY2JuYW1lK1wiRGVmYXVsdFwiXXx8dGhpc1tsb2NhbG5hbWUrXCJEZWZhdWx0XCJdfHxsb2NhbG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBjb250ZXh0IGNhbiBsaXN0ZW4gdG8gdGhlIHN1cHBsaWVkIGxpc3RlbmFibGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QWN0aW9ufFN0b3JlfSBsaXN0ZW5hYmxlIEFuIEFjdGlvbiBvciBTdG9yZSB0aGF0IHNob3VsZCBiZVxuICAgICAqICBsaXN0ZW5lZCB0by5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfFVuZGVmaW5lZH0gQW4gZXJyb3IgbWVzc2FnZSwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIHdhcyBubyBwcm9ibGVtLlxuICAgICAqL1xuICAgIHZhbGlkYXRlTGlzdGVuaW5nOiBmdW5jdGlvbihsaXN0ZW5hYmxlKXtcbiAgICAgICAgaWYgKGxpc3RlbmFibGUgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkxpc3RlbmVyIGlzIG5vdCBhYmxlIHRvIGxpc3RlbiB0byBpdHNlbGZcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihsaXN0ZW5hYmxlLmxpc3RlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5hYmxlICsgXCIgaXMgbWlzc2luZyBhIGxpc3RlbiBtZXRob2RcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuYWJsZS5oYXNMaXN0ZW5lciAmJiBsaXN0ZW5hYmxlLmhhc0xpc3RlbmVyKHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJMaXN0ZW5lciBjYW5ub3QgbGlzdGVuIHRvIHRoaXMgbGlzdGVuYWJsZSBiZWNhdXNlIG9mIGNpcmN1bGFyIGxvb3BcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGEgc3Vic2NyaXB0aW9uIHRvIHRoZSBnaXZlbiBsaXN0ZW5hYmxlIGZvciB0aGUgY29udGV4dCBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QWN0aW9ufFN0b3JlfSBsaXN0ZW5hYmxlIEFuIEFjdGlvbiBvciBTdG9yZSB0aGF0IHNob3VsZCBiZVxuICAgICAqICBsaXN0ZW5lZCB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyIGFzIGV2ZW50IGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZGVmYXVsdENhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBkZWZhdWx0IGhhbmRsZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHN1YnNjcmlwdGlvbiBvYmogd2hlcmUgYHN0b3BgIGlzIGFuIHVuc3ViIGZ1bmN0aW9uIGFuZCBgbGlzdGVuYWJsZWAgaXMgdGhlIG9iamVjdCBiZWluZyBsaXN0ZW5lZCB0b1xuICAgICAqL1xuICAgIGxpc3RlblRvOiBmdW5jdGlvbihsaXN0ZW5hYmxlLCBjYWxsYmFjaywgZGVmYXVsdENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXN1YiwgdW5zdWJzY3JpYmVyLCBzdWJzY3JpcHRpb25vYmosIHN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgICAgIF8udGhyb3dJZih0aGlzLnZhbGlkYXRlTGlzdGVuaW5nKGxpc3RlbmFibGUpKTtcbiAgICAgICAgdGhpcy5mZXRjaEluaXRpYWxTdGF0ZShsaXN0ZW5hYmxlLCBkZWZhdWx0Q2FsbGJhY2spO1xuICAgICAgICBkZXN1YiA9IGxpc3RlbmFibGUubGlzdGVuKHRoaXNbY2FsbGJhY2tdfHxjYWxsYmFjaywgdGhpcyk7XG4gICAgICAgIHVuc3Vic2NyaWJlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc3Vicy5pbmRleE9mKHN1YnNjcmlwdGlvbm9iaik7XG4gICAgICAgICAgICBfLnRocm93SWYoaW5kZXggPT09IC0xLCdUcmllZCB0byByZW1vdmUgbGlzdGVuIGFscmVhZHkgZ29uZSBmcm9tIHN1YnNjcmlwdGlvbnMgbGlzdCEnKTtcbiAgICAgICAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGRlc3ViKCk7XG4gICAgICAgIH07XG4gICAgICAgIHN1YnNjcmlwdGlvbm9iaiA9IHtcbiAgICAgICAgICAgIHN0b3A6IHVuc3Vic2NyaWJlcixcbiAgICAgICAgICAgIGxpc3RlbmFibGU6IGxpc3RlbmFibGVcbiAgICAgICAgfTtcbiAgICAgICAgc3Vicy5wdXNoKHN1YnNjcmlwdGlvbm9iaik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25vYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGxpc3RlbmluZyB0byBhIHNpbmdsZSBsaXN0ZW5hYmxlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FjdGlvbnxTdG9yZX0gbGlzdGVuYWJsZSBUaGUgYWN0aW9uIG9yIHN0b3JlIHdlIG5vIGxvbmdlciB3YW50IHRvIGxpc3RlbiB0b1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgc3Vic2NyaXB0aW9uIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIHN0b3BMaXN0ZW5pbmdUbzogZnVuY3Rpb24obGlzdGVuYWJsZSl7XG4gICAgICAgIHZhciBzdWIsIGkgPSAwLCBzdWJzID0gdGhpcy5zdWJzY3JpcHRpb25zIHx8IFtdO1xuICAgICAgICBmb3IoO2kgPCBzdWJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHN1YiA9IHN1YnNbaV07XG4gICAgICAgICAgICBpZiAoc3ViLmxpc3RlbmFibGUgPT09IGxpc3RlbmFibGUpe1xuICAgICAgICAgICAgICAgIHN1Yi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgXy50aHJvd0lmKHN1YnMuaW5kZXhPZihzdWIpIT09LTEsJ0ZhaWxlZCB0byByZW1vdmUgbGlzdGVuIGZyb20gc3Vic2NyaXB0aW9ucyBsaXN0IScpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgYWxsIHN1YnNjcmlwdGlvbnMgYW5kIGVtcHRpZXMgc3Vic2NyaXB0aW9ucyBhcnJheVxuICAgICAqL1xuICAgIHN0b3BMaXN0ZW5pbmdUb0FsbDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHJlbWFpbmluZywgc3VicyA9IHRoaXMuc3Vic2NyaXB0aW9ucyB8fCBbXTtcbiAgICAgICAgd2hpbGUoKHJlbWFpbmluZz1zdWJzLmxlbmd0aCkpe1xuICAgICAgICAgICAgc3Vic1swXS5zdG9wKCk7XG4gICAgICAgICAgICBfLnRocm93SWYoc3Vicy5sZW5ndGghPT1yZW1haW5pbmctMSwnRmFpbGVkIHRvIHJlbW92ZSBsaXN0ZW4gZnJvbSBzdWJzY3JpcHRpb25zIGxpc3QhJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCBpbiBgbGlzdGVuVG9gLiBGZXRjaGVzIGluaXRpYWwgZGF0YSBmcm9tIGEgcHVibGlzaGVyIGlmIGl0IGhhcyBhIGBnZXRJbml0aWFsU3RhdGVgIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge0FjdGlvbnxTdG9yZX0gbGlzdGVuYWJsZSBUaGUgcHVibGlzaGVyIHdlIHdhbnQgdG8gZ2V0IGluaXRpYWwgc3RhdGUgZnJvbVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBkZWZhdWx0Q2FsbGJhY2sgVGhlIG1ldGhvZCB0byByZWNlaXZlIHRoZSBkYXRhXG4gICAgICovXG4gICAgZmV0Y2hJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIChsaXN0ZW5hYmxlLCBkZWZhdWx0Q2FsbGJhY2spIHtcbiAgICAgICAgZGVmYXVsdENhbGxiYWNrID0gKGRlZmF1bHRDYWxsYmFjayAmJiB0aGlzW2RlZmF1bHRDYWxsYmFja10pIHx8IGRlZmF1bHRDYWxsYmFjaztcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihkZWZhdWx0Q2FsbGJhY2spICYmIF8uaXNGdW5jdGlvbihsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSkpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gbGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgICAgIGlmIChkYXRhICYmIF8uaXNGdW5jdGlvbihkYXRhLnRoZW4pKSB7XG4gICAgICAgICAgICAgICAgZGF0YS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FsbGJhY2suYXBwbHkobWUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRDYWxsYmFjay5jYWxsKHRoaXMsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBvbmNlIGFsbCBsaXN0ZW5hYmxlcyBoYXZlIHRyaWdnZXJlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAqIEl0IHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGVtaXNzaW9uIGZyb20gZWFjaCBsaXN0ZW5hYmxlLlxuICAgICAqIEBwYXJhbSB7Li4uUHVibGlzaGVyc30gcHVibGlzaGVycyBQdWJsaXNoZXJzIHRoYXQgc2hvdWxkIGJlIHRyYWNrZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIFRoZSBtZXRob2QgdG8gY2FsbCB3aGVuIGFsbCBwdWJsaXNoZXJzIGhhdmUgZW1pdHRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgc3Vic2NyaXB0aW9uIG9iaiB3aGVyZSBgc3RvcGAgaXMgYW4gdW5zdWIgZnVuY3Rpb24gYW5kIGBsaXN0ZW5hYmxlYCBpcyBhbiBhcnJheSBvZiBsaXN0ZW5hYmxlc1xuICAgICAqL1xuICAgIGpvaW5UcmFpbGluZzogbWFrZXIoXCJsYXN0XCIpLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIG9uY2UgYWxsIGxpc3RlbmFibGVzIGhhdmUgdHJpZ2dlcmVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICogSXQgd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGZpcnN0IGVtaXNzaW9uIGZyb20gZWFjaCBsaXN0ZW5hYmxlLlxuICAgICAqIEBwYXJhbSB7Li4uUHVibGlzaGVyc30gcHVibGlzaGVycyBQdWJsaXNoZXJzIHRoYXQgc2hvdWxkIGJlIHRyYWNrZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIFRoZSBtZXRob2QgdG8gY2FsbCB3aGVuIGFsbCBwdWJsaXNoZXJzIGhhdmUgZW1pdHRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgc3Vic2NyaXB0aW9uIG9iaiB3aGVyZSBgc3RvcGAgaXMgYW4gdW5zdWIgZnVuY3Rpb24gYW5kIGBsaXN0ZW5hYmxlYCBpcyBhbiBhcnJheSBvZiBsaXN0ZW5hYmxlc1xuICAgICAqL1xuICAgIGpvaW5MZWFkaW5nOiBtYWtlcihcImZpcnN0XCIpLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIG9uY2UgYWxsIGxpc3RlbmFibGVzIGhhdmUgdHJpZ2dlcmVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICogSXQgd2lsbCBiZSBpbnZva2VkIHdpdGggYWxsIGVtaXNzaW9uIGZyb20gZWFjaCBsaXN0ZW5hYmxlLlxuICAgICAqIEBwYXJhbSB7Li4uUHVibGlzaGVyc30gcHVibGlzaGVycyBQdWJsaXNoZXJzIHRoYXQgc2hvdWxkIGJlIHRyYWNrZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIFRoZSBtZXRob2QgdG8gY2FsbCB3aGVuIGFsbCBwdWJsaXNoZXJzIGhhdmUgZW1pdHRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgc3Vic2NyaXB0aW9uIG9iaiB3aGVyZSBgc3RvcGAgaXMgYW4gdW5zdWIgZnVuY3Rpb24gYW5kIGBsaXN0ZW5hYmxlYCBpcyBhbiBhcnJheSBvZiBsaXN0ZW5hYmxlc1xuICAgICAqL1xuICAgIGpvaW5Db25jYXQ6IG1ha2VyKFwiYWxsXCIpLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIG9uY2UgYWxsIGxpc3RlbmFibGVzIGhhdmUgdHJpZ2dlcmVkLlxuICAgICAqIElmIGEgY2FsbGJhY2sgdHJpZ2dlcnMgdHdpY2UgYmVmb3JlIHRoYXQgaGFwcGVucywgYW4gZXJyb3IgaXMgdGhyb3duLlxuICAgICAqIEBwYXJhbSB7Li4uUHVibGlzaGVyc30gcHVibGlzaGVycyBQdWJsaXNoZXJzIHRoYXQgc2hvdWxkIGJlIHRyYWNrZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIFRoZSBtZXRob2QgdG8gY2FsbCB3aGVuIGFsbCBwdWJsaXNoZXJzIGhhdmUgZW1pdHRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgc3Vic2NyaXB0aW9uIG9iaiB3aGVyZSBgc3RvcGAgaXMgYW4gdW5zdWIgZnVuY3Rpb24gYW5kIGBsaXN0ZW5hYmxlYCBpcyBhbiBhcnJheSBvZiBsaXN0ZW5hYmxlc1xuICAgICAqL1xuICAgIGpvaW5TdHJpY3Q6IG1ha2VyKFwic3RyaWN0XCIpXG59O1xuIiwidmFyIF8gPSByZXF1aXJlKCcuL3V0aWxzJyksXG4gICAgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1ldGhvZHMnKTtcblxuLyoqXG4gKiBBIG1vZHVsZSBtZWFudCB0byBiZSBjb25zdW1lZCBhcyBhIG1peGluIGJ5IGEgUmVhY3QgY29tcG9uZW50LiBTdXBwbGllcyB0aGUgbWV0aG9kcyBmcm9tXG4gKiBgTGlzdGVuZXJNZXRob2RzYCBtaXhpbiBhbmQgdGFrZXMgY2FyZSBvZiB0ZWFyZG93biBvZiBzdWJzY3JpcHRpb25zLlxuICogTm90ZSB0aGF0IGlmIHlvdSdyZSB1c2luZyB0aGUgYGNvbm5lY3RgIG1peGluIHlvdSBkb24ndCBuZWVkIHRoaXMgbWl4aW4sIGFzIGNvbm5lY3Qgd2lsbFxuICogaW1wb3J0IGV2ZXJ5dGhpbmcgdGhpcyBtaXhpbiBjb250YWlucyFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBfLmV4dGVuZCh7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgYWxsIGxpc3RlbmVyIHByZXZpb3VzbHkgcmVnaXN0ZXJlZC5cbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogTGlzdGVuZXJNZXRob2RzLnN0b3BMaXN0ZW5pbmdUb0FsbFxuXG59LCBMaXN0ZW5lck1ldGhvZHMpO1xuIiwidmFyIF8gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogQSBtb2R1bGUgb2YgbWV0aG9kcyBmb3Igb2JqZWN0IHRoYXQgeW91IHdhbnQgdG8gYmUgYWJsZSB0byBsaXN0ZW4gdG8uXG4gKiBUaGlzIG1vZHVsZSBpcyBjb25zdW1lZCBieSBgY3JlYXRlU3RvcmVgIGFuZCBgY3JlYXRlQWN0aW9uYFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIEhvb2sgdXNlZCBieSB0aGUgcHVibGlzaGVyIHRoYXQgaXMgaW52b2tlZCBiZWZvcmUgZW1pdHRpbmdcbiAgICAgKiBhbmQgYmVmb3JlIGBzaG91bGRFbWl0YC4gVGhlIGFyZ3VtZW50cyBhcmUgdGhlIG9uZXMgdGhhdCB0aGUgYWN0aW9uXG4gICAgICogaXMgaW52b2tlZCB3aXRoLiBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgc29tZXRoaW5nIG90aGVyIHRoYW5cbiAgICAgKiB1bmRlZmluZWQsIHRoYXQgd2lsbCBiZSBwYXNzZWQgb24gYXMgYXJndW1lbnRzIGZvciBzaG91bGRFbWl0IGFuZFxuICAgICAqIGVtaXNzaW9uLlxuICAgICAqL1xuICAgIHByZUVtaXQ6IGZ1bmN0aW9uKCkge30sXG5cbiAgICAvKipcbiAgICAgKiBIb29rIHVzZWQgYnkgdGhlIHB1Ymxpc2hlciBhZnRlciBgcHJlRW1pdGAgdG8gZGV0ZXJtaW5lIGlmIHRoZVxuICAgICAqIGV2ZW50IHNob3VsZCBiZSBlbWl0dGVkIHdpdGggZ2l2ZW4gYXJndW1lbnRzLiBUaGlzIG1heSBiZSBvdmVycmlkZGVuXG4gICAgICogaW4geW91ciBhcHBsaWNhdGlvbiwgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBhbHdheXMgcmV0dXJucyB0cnVlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgZXZlbnQgc2hvdWxkIGJlIGVtaXR0ZWRcbiAgICAgKi9cbiAgICBzaG91bGRFbWl0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYWN0aW9uIHRyaWdnZXJlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyIGFzIGV2ZW50IGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge01peGVkfSBbb3B0aW9uYWxdIGJpbmRDb250ZXh0IFRoZSBjb250ZXh0IHRvIGJpbmQgdGhlIGNhbGxiYWNrIHdpdGhcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IENhbGxiYWNrIHRoYXQgdW5zdWJzY3JpYmVzIHRoZSByZWdpc3RlcmVkIGV2ZW50IGhhbmRsZXJcbiAgICAgKi9cbiAgICBsaXN0ZW46IGZ1bmN0aW9uKGNhbGxiYWNrLCBiaW5kQ29udGV4dCkge1xuICAgICAgICBiaW5kQ29udGV4dCA9IGJpbmRDb250ZXh0IHx8IHRoaXM7XG4gICAgICAgIHZhciBldmVudEhhbmRsZXIgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICBpZiAoYWJvcnRlZCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoYmluZENvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9LCBtZSA9IHRoaXMsIGFib3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmFkZExpc3RlbmVyKHRoaXMuZXZlbnRMYWJlbCwgZXZlbnRIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBtZS5lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG1lLmV2ZW50TGFiZWwsIGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBoYW5kbGVycyB0byBwcm9taXNlIHRoYXQgdHJpZ2dlciB0aGUgY29tcGxldGVkIGFuZCBmYWlsZWRcbiAgICAgKiBjaGlsZCBwdWJsaXNoZXJzLCBpZiBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gVGhlIHByb21pc2UgdG8gYXR0YWNoIHRvXG4gICAgICovXG4gICAgcHJvbWlzZTogZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgICAgIHZhciBjYW5IYW5kbGVQcm9taXNlID1cbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uaW5kZXhPZignY29tcGxldGVkJykgPj0gMCAmJlxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5pbmRleE9mKCdmYWlsZWQnKSA+PSAwO1xuXG4gICAgICAgIGlmICghY2FuSGFuZGxlUHJvbWlzZSl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1B1Ymxpc2hlciBtdXN0IGhhdmUgXCJjb21wbGV0ZWRcIiBhbmQgXCJmYWlsZWRcIiBjaGlsZCBwdWJsaXNoZXJzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBtZS5jb21wbGV0ZWQocmVzcG9uc2UpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG1lLmZhaWxlZChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYWN0aW9uIHRyaWdnZXJlZCwgd2hpY2ggc2hvdWxkXG4gICAgICogcmV0dXJuIGEgcHJvbWlzZSB0aGF0IGluIHR1cm4gaXMgcGFzc2VkIHRvIGB0aGlzLnByb21pc2VgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gcmVnaXN0ZXIgYXMgZXZlbnQgaGFuZGxlclxuICAgICAqL1xuICAgIGxpc3RlbkFuZFByb21pc2U6IGZ1bmN0aW9uKGNhbGxiYWNrLCBiaW5kQ29udGV4dCkge1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICBiaW5kQ29udGV4dCA9IGJpbmRDb250ZXh0IHx8IHRoaXM7XG4gICAgICAgIHRoaXMud2lsbENhbGxQcm9taXNlID0gKHRoaXMud2lsbENhbGxQcm9taXNlIHx8IDApICsgMTtcblxuICAgICAgICB2YXIgcmVtb3ZlTGlzdGVuID0gdGhpcy5saXN0ZW4oZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcHJvbWlzZSBidXQgZ290ICcgKyBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHByb21pc2UgPSBjYWxsYmFjay5hcHBseShiaW5kQ29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gbWUucHJvbWlzZS5jYWxsKG1lLCBwcm9taXNlKTtcbiAgICAgICAgfSwgYmluZENvbnRleHQpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbWUud2lsbENhbGxQcm9taXNlLS07XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuLmNhbGwobWUpO1xuICAgICAgICB9O1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyBhbiBldmVudCB1c2luZyBgdGhpcy5lbWl0dGVyYCAoaWYgYHNob3VsZEVtaXRgIGFncmVlcylcbiAgICAgKi9cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBwcmUgPSB0aGlzLnByZUVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGFyZ3MgPSBwcmUgPT09IHVuZGVmaW5lZCA/IGFyZ3MgOiBfLmlzQXJndW1lbnRzKHByZSkgPyBwcmUgOiBbXS5jb25jYXQocHJlKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRW1pdC5hcHBseSh0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQodGhpcy5ldmVudExhYmVsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBwdWJsaXNoIHRoZSBldmVudCBvbiB0aGUgbmV4dCB0aWNrXG4gICAgICovXG4gICAgdHJpZ2dlckFzeW5jOiBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxtZSA9IHRoaXM7XG4gICAgICAgIF8ubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBtZS50cmlnZ2VyLmFwcGx5KG1lLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBQcm9taXNlIGZvciB0aGUgdHJpZ2dlcmVkIGFjdGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKiAgIFJlc29sdmVkIGJ5IGNvbXBsZXRlZCBjaGlsZCBhY3Rpb24uXG4gICAgICogICBSZWplY3RlZCBieSBmYWlsZWQgY2hpbGQgYWN0aW9uLlxuICAgICAqICAgSWYgbGlzdGVuQW5kUHJvbWlzZSdkLCB0aGVuIHByb21pc2UgYXNzb2NpYXRlZCB0byB0aGlzIHRyaWdnZXIuXG4gICAgICogICBPdGhlcndpc2UsIHRoZSBwcm9taXNlIGlzIGZvciBuZXh0IGNoaWxkIGFjdGlvbiBjb21wbGV0aW9uLlxuICAgICAqL1xuICAgIHRyaWdnZXJQcm9taXNlOiBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICB2YXIgY2FuSGFuZGxlUHJvbWlzZSA9XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmluZGV4T2YoJ2NvbXBsZXRlZCcpID49IDAgJiZcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uaW5kZXhPZignZmFpbGVkJykgPj0gMDtcblxuICAgICAgICB2YXIgcHJvbWlzZSA9IF8uY3JlYXRlUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIC8vIElmIGBsaXN0ZW5BbmRQcm9taXNlYCBpcyBsaXN0ZW5pbmdcbiAgICAgICAgICAgIC8vIHBhdGNoIGBwcm9taXNlYCB3LyBjb250ZXh0LWxvYWRlZCByZXNvbHZlL3JlamVjdFxuICAgICAgICAgICAgaWYgKG1lLndpbGxDYWxsUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIF8ubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRfcHJvbWlzZV9tZXRob2QgPSBtZS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICBtZS5wcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFjayB0byB5b3VyIHJlZ3VsYXJseSBzY2hlZHVsZSBwcm9ncmFtbWluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnByb21pc2UgPSBvbGRfcHJvbWlzZV9tZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWUucHJvbWlzZS5hcHBseShtZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbWUudHJpZ2dlci5hcHBseShtZSwgYXJncyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FuSGFuZGxlUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVTdWNjZXNzID0gbWUuY29tcGxldGVkLmxpc3RlbihmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlRmFpbGVkID0gbWUuZmFpbGVkLmxpc3RlbihmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChhcmdzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUudHJpZ2dlckFzeW5jLmFwcGx5KG1lLCBhcmdzKTtcblxuICAgICAgICAgICAgaWYgKCFjYW5IYW5kbGVQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG59O1xuIiwiLyoqXG4gKiBBIG1vZHVsZSBvZiBtZXRob2RzIHRoYXQgeW91IHdhbnQgdG8gaW5jbHVkZSBpbiBhbGwgc3RvcmVzLlxuICogVGhpcyBtb2R1bGUgaXMgY29uc3VtZWQgYnkgYGNyZWF0ZVN0b3JlYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzdG9yZSwgZGVmaW5pdGlvbikge1xuICBmb3IgKHZhciBuYW1lIGluIGRlZmluaXRpb24pIHtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGVmaW5pdGlvbiwgbmFtZSk7XG5cbiAgICAgICAgaWYgKCFwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWUgfHwgdHlwZW9mIHByb3BlcnR5RGVzY3JpcHRvci52YWx1ZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhZGVmaW5pdGlvbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdG9yZVtuYW1lXSA9IGRlZmluaXRpb25bbmFtZV0uYmluZChzdG9yZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gZGVmaW5pdGlvbltuYW1lXTtcblxuICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnZnVuY3Rpb24nIHx8ICFkZWZpbml0aW9uLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0b3JlW25hbWVdID0gcHJvcGVydHkuYmluZChzdG9yZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0b3JlO1xufTtcbiIsInZhciBSZWZsdXggPSByZXF1aXJlKCcuL2luZGV4JyksXG4gICAgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0ZW5hYmxlLGtleSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5vYmplY3QoW2tleV0sW2xpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKCldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfLmV4dGVuZCh0aGlzLFJlZmx1eC5MaXN0ZW5lck1ldGhvZHMpO1xuICAgICAgICAgICAgdmFyIG1lID0gdGhpcywgY2IgPSAoa2V5ID09PSB1bmRlZmluZWQgPyB0aGlzLnNldFN0YXRlIDogZnVuY3Rpb24odil7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZS5pc01vdW50ZWQgPT09IFwidW5kZWZpbmVkXCIgfHwgbWUuaXNNb3VudGVkKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2V0U3RhdGUoXy5vYmplY3QoW2tleV0sW3ZdKSk7ICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhsaXN0ZW5hYmxlLGNiKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50V2lsbFVubW91bnQ6IFJlZmx1eC5MaXN0ZW5lck1peGluLmNvbXBvbmVudFdpbGxVbm1vdW50XG4gICAgfTtcbn07XG4iLCJ2YXIgUmVmbHV4ID0gcmVxdWlyZSgnLi9pbmRleCcpLFxuICBfID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3RlbmFibGUsIGtleSwgZmlsdGVyRnVuYykge1xuICAgIGZpbHRlckZ1bmMgPSBfLmlzRnVuY3Rpb24oa2V5KSA/IGtleSA6IGZpbHRlckZ1bmM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyRnVuYy5jYWxsKHRoaXMsIGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgaW5pdGlhbCBwYXlsb2FkIGZyb20gc3RvcmUuXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZpbHRlckZ1bmMuY2FsbCh0aGlzLCBsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXy5vYmplY3QoW2tleV0sIFtyZXN1bHRdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXy5leHRlbmQodGhpcywgUmVmbHV4Lkxpc3RlbmVyTWV0aG9kcyk7XG4gICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2V0U3RhdGUoZmlsdGVyRnVuYy5jYWxsKG1lLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmaWx0ZXJGdW5jLmNhbGwobWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2V0U3RhdGUoXy5vYmplY3QoW2tleV0sIFtyZXN1bHRdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhsaXN0ZW5hYmxlLCBjYik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBSZWZsdXguTGlzdGVuZXJNaXhpbi5jb21wb25lbnRXaWxsVW5tb3VudFxuICAgIH07XG59O1xuXG4iLCJ2YXIgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKSxcbiAgICBSZWZsdXggPSByZXF1aXJlKCcuL2luZGV4JyksXG4gICAgS2VlcCA9IHJlcXVpcmUoJy4vS2VlcCcpLFxuICAgIGFsbG93ZWQgPSB7cHJlRW1pdDoxLHNob3VsZEVtaXQ6MX07XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhY3Rpb24gZnVuY3RvciBvYmplY3QuIEl0IGlzIG1peGVkIGluIHdpdGggZnVuY3Rpb25zXG4gKiBmcm9tIHRoZSBgUHVibGlzaGVyTWV0aG9kc2AgbWl4aW4uIGBwcmVFbWl0YCBhbmQgYHNob3VsZEVtaXRgIG1heVxuICogYmUgb3ZlcnJpZGRlbiBpbiB0aGUgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb24gVGhlIGFjdGlvbiBvYmplY3QgZGVmaW5pdGlvblxuICovXG52YXIgY3JlYXRlQWN0aW9uID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuXG4gICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24gfHwge307XG4gICAgaWYgKCFfLmlzT2JqZWN0KGRlZmluaXRpb24pKXtcbiAgICAgICAgZGVmaW5pdGlvbiA9IHthY3Rpb25OYW1lOiBkZWZpbml0aW9ufTtcbiAgICB9XG5cbiAgICBmb3IodmFyIGEgaW4gUmVmbHV4LkFjdGlvbk1ldGhvZHMpe1xuICAgICAgICBpZiAoIWFsbG93ZWRbYV0gJiYgUmVmbHV4LlB1Ymxpc2hlck1ldGhvZHNbYV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBvdmVycmlkZSBBUEkgbWV0aG9kIFwiICsgYSArXG4gICAgICAgICAgICAgICAgXCIgaW4gUmVmbHV4LkFjdGlvbk1ldGhvZHMuIFVzZSBhbm90aGVyIG1ldGhvZCBuYW1lIG9yIG92ZXJyaWRlIGl0IG9uIFJlZmx1eC5QdWJsaXNoZXJNZXRob2RzIGluc3RlYWQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IodmFyIGQgaW4gZGVmaW5pdGlvbil7XG4gICAgICAgIGlmICghYWxsb3dlZFtkXSAmJiBSZWZsdXguUHVibGlzaGVyTWV0aG9kc1tkXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG92ZXJyaWRlIEFQSSBtZXRob2QgXCIgKyBkICtcbiAgICAgICAgICAgICAgICBcIiBpbiBhY3Rpb24gY3JlYXRpb24uIFVzZSBhbm90aGVyIG1ldGhvZCBuYW1lIG9yIG92ZXJyaWRlIGl0IG9uIFJlZmx1eC5QdWJsaXNoZXJNZXRob2RzIGluc3RlYWQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWZpbml0aW9uLmNoaWxkcmVuID0gZGVmaW5pdGlvbi5jaGlsZHJlbiB8fCBbXTtcbiAgICBpZiAoZGVmaW5pdGlvbi5hc3luY1Jlc3VsdCl7XG4gICAgICAgIGRlZmluaXRpb24uY2hpbGRyZW4gPSBkZWZpbml0aW9uLmNoaWxkcmVuLmNvbmNhdChbXCJjb21wbGV0ZWRcIixcImZhaWxlZFwiXSk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwLCBjaGlsZEFjdGlvbnMgPSB7fTtcbiAgICBmb3IgKDsgaSA8IGRlZmluaXRpb24uY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5hbWUgPSBkZWZpbml0aW9uLmNoaWxkcmVuW2ldO1xuICAgICAgICBjaGlsZEFjdGlvbnNbbmFtZV0gPSBjcmVhdGVBY3Rpb24obmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQgPSBfLmV4dGVuZCh7XG4gICAgICAgIGV2ZW50TGFiZWw6IFwiYWN0aW9uXCIsXG4gICAgICAgIGVtaXR0ZXI6IG5ldyBfLkV2ZW50RW1pdHRlcigpLFxuICAgICAgICBfaXNBY3Rpb246IHRydWVcbiAgICB9LCBSZWZsdXguUHVibGlzaGVyTWV0aG9kcywgUmVmbHV4LkFjdGlvbk1ldGhvZHMsIGRlZmluaXRpb24pO1xuXG4gICAgdmFyIGZ1bmN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0b3JbZnVuY3Rvci5zeW5jP1widHJpZ2dlclwiOlwidHJpZ2dlclByb21pc2VcIl0uYXBwbHkoZnVuY3RvciwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgXy5leHRlbmQoZnVuY3RvcixjaGlsZEFjdGlvbnMsY29udGV4dCk7XG5cbiAgICBLZWVwLmNyZWF0ZWRBY3Rpb25zLnB1c2goZnVuY3Rvcik7XG5cbiAgICByZXR1cm4gZnVuY3RvcjtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBY3Rpb247XG4iLCJ2YXIgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKSxcbiAgICBSZWZsdXggPSByZXF1aXJlKCcuL2luZGV4JyksXG4gICAgS2VlcCA9IHJlcXVpcmUoJy4vS2VlcCcpLFxuICAgIG1peGVyID0gcmVxdWlyZSgnLi9taXhlcicpLFxuICAgIGFsbG93ZWQgPSB7cHJlRW1pdDoxLHNob3VsZEVtaXQ6MX0sXG4gICAgYmluZE1ldGhvZHMgPSByZXF1aXJlKCcuL2JpbmRNZXRob2RzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBldmVudCBlbWl0dGluZyBEYXRhIFN0b3JlLiBJdCBpcyBtaXhlZCBpbiB3aXRoIGZ1bmN0aW9uc1xuICogZnJvbSB0aGUgYExpc3RlbmVyTWV0aG9kc2AgYW5kIGBQdWJsaXNoZXJNZXRob2RzYCBtaXhpbnMuIGBwcmVFbWl0YFxuICogYW5kIGBzaG91bGRFbWl0YCBtYXkgYmUgb3ZlcnJpZGRlbiBpbiB0aGUgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb24gVGhlIGRhdGEgc3RvcmUgb2JqZWN0IGRlZmluaXRpb25cbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBkYXRhIHN0b3JlIGluc3RhbmNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuXG4gICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24gfHwge307XG5cbiAgICBmb3IodmFyIGEgaW4gUmVmbHV4LlN0b3JlTWV0aG9kcyl7XG4gICAgICAgIGlmICghYWxsb3dlZFthXSAmJiAoUmVmbHV4LlB1Ymxpc2hlck1ldGhvZHNbYV0gfHwgUmVmbHV4Lkxpc3RlbmVyTWV0aG9kc1thXSkpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG92ZXJyaWRlIEFQSSBtZXRob2QgXCIgKyBhICtcbiAgICAgICAgICAgICAgICBcIiBpbiBSZWZsdXguU3RvcmVNZXRob2RzLiBVc2UgYW5vdGhlciBtZXRob2QgbmFtZSBvciBvdmVycmlkZSBpdCBvbiBSZWZsdXguUHVibGlzaGVyTWV0aG9kcyAvIFJlZmx1eC5MaXN0ZW5lck1ldGhvZHMgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvcih2YXIgZCBpbiBkZWZpbml0aW9uKXtcbiAgICAgICAgaWYgKCFhbGxvd2VkW2RdICYmIChSZWZsdXguUHVibGlzaGVyTWV0aG9kc1tkXSB8fCBSZWZsdXguTGlzdGVuZXJNZXRob2RzW2RdKSl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3ZlcnJpZGUgQVBJIG1ldGhvZCBcIiArIGQgK1xuICAgICAgICAgICAgICAgIFwiIGluIHN0b3JlIGNyZWF0aW9uLiBVc2UgYW5vdGhlciBtZXRob2QgbmFtZSBvciBvdmVycmlkZSBpdCBvbiBSZWZsdXguUHVibGlzaGVyTWV0aG9kcyAvIFJlZmx1eC5MaXN0ZW5lck1ldGhvZHMgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlZmluaXRpb24gPSBtaXhlcihkZWZpbml0aW9uKTtcblxuICAgIGZ1bmN0aW9uIFN0b3JlKCkge1xuICAgICAgICB2YXIgaT0wLCBhcnI7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgXy5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5ldmVudExhYmVsID0gXCJjaGFuZ2VcIjtcbiAgICAgICAgYmluZE1ldGhvZHModGhpcywgZGVmaW5pdGlvbik7XG4gICAgICAgIGlmICh0aGlzLmluaXQgJiYgXy5pc0Z1bmN0aW9uKHRoaXMuaW5pdCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmFibGVzKXtcbiAgICAgICAgICAgIGFyciA9IFtdLmNvbmNhdCh0aGlzLmxpc3RlbmFibGVzKTtcbiAgICAgICAgICAgIGZvcig7aSA8IGFyci5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvTWFueShhcnJbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgXy5leHRlbmQoU3RvcmUucHJvdG90eXBlLCBSZWZsdXguTGlzdGVuZXJNZXRob2RzLCBSZWZsdXguUHVibGlzaGVyTWV0aG9kcywgUmVmbHV4LlN0b3JlTWV0aG9kcywgZGVmaW5pdGlvbik7XG5cbiAgICB2YXIgc3RvcmUgPSBuZXcgU3RvcmUoKTtcbiAgICBLZWVwLmNyZWF0ZWRTdG9yZXMucHVzaChzdG9yZSk7XG5cbiAgICByZXR1cm4gc3RvcmU7XG59O1xuIiwiZXhwb3J0cy5BY3Rpb25NZXRob2RzID0gcmVxdWlyZSgnLi9BY3Rpb25NZXRob2RzJyk7XG5cbmV4cG9ydHMuTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1ldGhvZHMnKTtcblxuZXhwb3J0cy5QdWJsaXNoZXJNZXRob2RzID0gcmVxdWlyZSgnLi9QdWJsaXNoZXJNZXRob2RzJyk7XG5cbmV4cG9ydHMuU3RvcmVNZXRob2RzID0gcmVxdWlyZSgnLi9TdG9yZU1ldGhvZHMnKTtcblxuZXhwb3J0cy5jcmVhdGVBY3Rpb24gPSByZXF1aXJlKCcuL2NyZWF0ZUFjdGlvbicpO1xuXG5leHBvcnRzLmNyZWF0ZVN0b3JlID0gcmVxdWlyZSgnLi9jcmVhdGVTdG9yZScpO1xuXG5leHBvcnRzLmNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QnKTtcblxuZXhwb3J0cy5jb25uZWN0RmlsdGVyID0gcmVxdWlyZSgnLi9jb25uZWN0RmlsdGVyJyk7XG5cbmV4cG9ydHMuTGlzdGVuZXJNaXhpbiA9IHJlcXVpcmUoJy4vTGlzdGVuZXJNaXhpbicpO1xuXG5leHBvcnRzLmxpc3RlblRvID0gcmVxdWlyZSgnLi9saXN0ZW5UbycpO1xuXG5leHBvcnRzLmxpc3RlblRvTWFueSA9IHJlcXVpcmUoJy4vbGlzdGVuVG9NYW55Jyk7XG5cblxudmFyIG1ha2VyID0gcmVxdWlyZSgnLi9qb2lucycpLnN0YXRpY0pvaW5DcmVhdG9yO1xuXG5leHBvcnRzLmpvaW5UcmFpbGluZyA9IGV4cG9ydHMuYWxsID0gbWFrZXIoXCJsYXN0XCIpOyAvLyBSZWZsdXguYWxsIGFsaWFzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cbmV4cG9ydHMuam9pbkxlYWRpbmcgPSBtYWtlcihcImZpcnN0XCIpO1xuXG5leHBvcnRzLmpvaW5TdHJpY3QgPSBtYWtlcihcInN0cmljdFwiKTtcblxuZXhwb3J0cy5qb2luQ29uY2F0ID0gbWFrZXIoXCJhbGxcIik7XG5cbnZhciBfID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5leHBvcnRzLkV2ZW50RW1pdHRlciA9IF8uRXZlbnRFbWl0dGVyO1xuXG5leHBvcnRzLlByb21pc2UgPSBfLlByb21pc2U7XG5cbi8qKlxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc2V0IG9mIGFjdGlvbnNcbiAqXG4gKiBAcGFyYW0gZGVmaW5pdGlvbnMgdGhlIGRlZmluaXRpb25zIGZvciB0aGUgYWN0aW9ucyB0byBiZSBjcmVhdGVkXG4gKiBAcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhY3Rpb25zIG9mIGNvcnJlc3BvbmRpbmcgYWN0aW9uIG5hbWVzXG4gKi9cbmV4cG9ydHMuY3JlYXRlQWN0aW9ucyA9IGZ1bmN0aW9uKGRlZmluaXRpb25zKSB7XG4gICAgdmFyIGFjdGlvbnMgPSB7fTtcbiAgICBmb3IgKHZhciBrIGluIGRlZmluaXRpb25zKXtcbiAgICAgICAgaWYgKGRlZmluaXRpb25zLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gZGVmaW5pdGlvbnNba10sXG4gICAgICAgICAgICAgICAgYWN0aW9uTmFtZSA9IF8uaXNPYmplY3QodmFsKSA/IGsgOiB2YWw7XG5cbiAgICAgICAgICAgIGFjdGlvbnNbYWN0aW9uTmFtZV0gPSBleHBvcnRzLmNyZWF0ZUFjdGlvbih2YWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb25zO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBldmVudG1pdHRlciB0aGF0IFJlZmx1eCB1c2VzXG4gKi9cbmV4cG9ydHMuc2V0RXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgdmFyIF8gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBfLkV2ZW50RW1pdHRlciA9IGN0eDtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBQcm9taXNlIGxpYnJhcnkgdGhhdCBSZWZsdXggdXNlc1xuICovXG5leHBvcnRzLnNldFByb21pc2UgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB2YXIgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICBleHBvcnRzLlByb21pc2UgPSBfLlByb21pc2UgPSBjdHg7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgUHJvbWlzZSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBuZXcgcHJvbWlzZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgaGFzIHRoZSBzaWduYXR1cmUgYGZ1bmN0aW9uKHJlc29sdmVyKSB7IHJldHVybiBbbmV3IFByb21pc2VdOyB9YFxuICovXG5leHBvcnRzLnNldFByb21pc2VGYWN0b3J5ID0gZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIHZhciBfID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIF8uY3JlYXRlUHJvbWlzZSA9IGZhY3Rvcnk7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgbWV0aG9kIHVzZWQgZm9yIGRlZmVycmluZyBhY3Rpb25zIGFuZCBzdG9yZXNcbiAqL1xuZXhwb3J0cy5uZXh0VGljayA9IGZ1bmN0aW9uKG5leHRUaWNrKSB7XG4gICAgdmFyIF8gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgXy5uZXh0VGljayA9IG5leHRUaWNrO1xufTtcblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgc2V0IG9mIGNyZWF0ZWQgYWN0aW9ucyBhbmQgc3RvcmVzIGZvciBpbnRyb3NwZWN0aW9uXG4gKi9cbmV4cG9ydHMuX19rZWVwID0gcmVxdWlyZSgnLi9LZWVwJyk7XG5cbi8qKlxuICogV2FybiBpZiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBub3QgYXZhaWxhYmxlXG4gKi9cbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgbm90IGF2YWlsYWJsZS4gJyArXG4gICAgJ0VTNSBzaGltIHJlcXVpcmVkLiAnICtcbiAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Nwb2lrZS9yZWZsdXhqcyNlczUnXG4gICk7XG59XG4iLCIvKipcbiAqIEludGVybmFsIG1vZHVsZSB1c2VkIHRvIGNyZWF0ZSBzdGF0aWMgYW5kIGluc3RhbmNlIGpvaW4gbWV0aG9kc1xuICovXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICBfID0gcmVxdWlyZShcIi4vdXRpbHNcIiksXG4gICAgY3JlYXRlU3RvcmUgPSByZXF1aXJlKFwiLi9jcmVhdGVTdG9yZVwiKSxcbiAgICBzdHJhdGVneU1ldGhvZE5hbWVzID0ge1xuICAgICAgICBzdHJpY3Q6IFwiam9pblN0cmljdFwiLFxuICAgICAgICBmaXJzdDogXCJqb2luTGVhZGluZ1wiLFxuICAgICAgICBsYXN0OiBcImpvaW5UcmFpbGluZ1wiLFxuICAgICAgICBhbGw6IFwiam9pbkNvbmNhdFwiXG4gICAgfTtcblxuLyoqXG4gKiBVc2VkIGluIGBpbmRleC5qc2AgdG8gY3JlYXRlIHRoZSBzdGF0aWMgam9pbiBtZXRob2RzXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyYXRlZ3kgV2hpY2ggc3RyYXRlZ3kgdG8gdXNlIHdoZW4gdHJhY2tpbmcgbGlzdGVuYWJsZSB0cmlnZ2VyIGFyZ3VtZW50c1xuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0YXRpYyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RvcmUgd2l0aCBhIGpvaW4gbGlzdGVuIG9uIHRoZSBnaXZlbiBsaXN0ZW5hYmxlcyB1c2luZyB0aGUgZ2l2ZW4gc3RyYXRlZ3lcbiAqL1xuZXhwb3J0cy5zdGF0aWNKb2luQ3JlYXRvciA9IGZ1bmN0aW9uKHN0cmF0ZWd5KXtcbiAgICByZXR1cm4gZnVuY3Rpb24oLyogbGlzdGVuYWJsZXMuLi4gKi8pIHtcbiAgICAgICAgdmFyIGxpc3RlbmFibGVzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gY3JlYXRlU3RvcmUoe1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0aGlzW3N0cmF0ZWd5TWV0aG9kTmFtZXNbc3RyYXRlZ3ldXS5hcHBseSh0aGlzLGxpc3RlbmFibGVzLmNvbmNhdChcInRyaWdnZXJBc3luY1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuXG4vKipcbiAqIFVzZWQgaW4gYExpc3RlbmVyTWV0aG9kcy5qc2AgdG8gY3JlYXRlIHRoZSBpbnN0YW5jZSBqb2luIG1ldGhvZHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJhdGVneSBXaGljaCBzdHJhdGVneSB0byB1c2Ugd2hlbiB0cmFja2luZyBsaXN0ZW5hYmxlIHRyaWdnZXIgYXJndW1lbnRzXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEFuIGluc3RhbmNlIG1ldGhvZCB3aGljaCBzZXRzIHVwIGEgam9pbiBsaXN0ZW4gb24gdGhlIGdpdmVuIGxpc3RlbmFibGVzIHVzaW5nIHRoZSBnaXZlbiBzdHJhdGVneVxuICovXG5leHBvcnRzLmluc3RhbmNlSm9pbkNyZWF0b3IgPSBmdW5jdGlvbihzdHJhdGVneSl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKC8qIGxpc3RlbmFibGVzLi4uLCBjYWxsYmFjayovKXtcbiAgICAgICAgXy50aHJvd0lmKGFyZ3VtZW50cy5sZW5ndGggPCAzLCdDYW5ub3QgY3JlYXRlIGEgam9pbiB3aXRoIGxlc3MgdGhhbiAyIGxpc3RlbmFibGVzIScpO1xuICAgICAgICB2YXIgbGlzdGVuYWJsZXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICBjYWxsYmFjayA9IGxpc3RlbmFibGVzLnBvcCgpLFxuICAgICAgICAgICAgbnVtYmVyT2ZMaXN0ZW5hYmxlcyA9IGxpc3RlbmFibGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGpvaW4gPSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZMaXN0ZW5hYmxlczogbnVtYmVyT2ZMaXN0ZW5hYmxlcyxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogdGhpc1tjYWxsYmFja118fGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIHN0cmF0ZWd5OiBzdHJhdGVneVxuICAgICAgICAgICAgfSwgaSwgY2FuY2VscyA9IFtdLCBzdWJvYmo7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZkxpc3RlbmFibGVzOyBpKyspIHtcbiAgICAgICAgICAgIF8udGhyb3dJZih0aGlzLnZhbGlkYXRlTGlzdGVuaW5nKGxpc3RlbmFibGVzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bWJlck9mTGlzdGVuYWJsZXM7IGkrKykge1xuICAgICAgICAgICAgY2FuY2Vscy5wdXNoKGxpc3RlbmFibGVzW2ldLmxpc3RlbihuZXdMaXN0ZW5lcihpLGpvaW4pLHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXNldChqb2luKTtcbiAgICAgICAgc3Vib2JqID0ge2xpc3RlbmFibGU6IGxpc3RlbmFibGVzfTtcbiAgICAgICAgc3Vib2JqLnN0b3AgPSBtYWtlU3RvcHBlcihzdWJvYmosY2FuY2Vscyx0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gKHRoaXMuc3Vic2NyaXB0aW9ucyB8fCBbXSkuY29uY2F0KHN1Ym9iaik7XG4gICAgICAgIHJldHVybiBzdWJvYmo7XG4gICAgfTtcbn07XG5cbi8vIC0tLS0gaW50ZXJuYWwgam9pbiBmdW5jdGlvbnMgLS0tLVxuXG5mdW5jdGlvbiBtYWtlU3RvcHBlcihzdWJvYmosY2FuY2Vscyxjb250ZXh0KXtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBzdWJzID0gY29udGV4dC5zdWJzY3JpcHRpb25zLFxuICAgICAgICAgICAgaW5kZXggPSAoc3VicyA/IHN1YnMuaW5kZXhPZihzdWJvYmopIDogLTEpO1xuICAgICAgICBfLnRocm93SWYoaW5kZXggPT09IC0xLCdUcmllZCB0byByZW1vdmUgam9pbiBhbHJlYWR5IGdvbmUgZnJvbSBzdWJzY3JpcHRpb25zIGxpc3QhJyk7XG4gICAgICAgIGZvcihpPTA7aSA8IGNhbmNlbHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY2FuY2Vsc1tpXSgpO1xuICAgICAgICB9XG4gICAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiByZXNldChqb2luKSB7XG4gICAgam9pbi5saXN0ZW5hYmxlc0VtaXR0ZWQgPSBuZXcgQXJyYXkoam9pbi5udW1iZXJPZkxpc3RlbmFibGVzKTtcbiAgICBqb2luLmFyZ3MgPSBuZXcgQXJyYXkoam9pbi5udW1iZXJPZkxpc3RlbmFibGVzKTtcbn1cblxuZnVuY3Rpb24gbmV3TGlzdGVuZXIoaSxqb2luKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FsbGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChqb2luLmxpc3RlbmFibGVzRW1pdHRlZFtpXSl7XG4gICAgICAgICAgICBzd2l0Y2goam9pbi5zdHJhdGVneSl7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmljdFwiOiB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpY3Qgam9pbiBmYWlsZWQgYmVjYXVzZSBsaXN0ZW5lciB0cmlnZ2VyZWQgdHdpY2UuXCIpO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsYXN0XCI6IGpvaW4uYXJnc1tpXSA9IGNhbGxhcmdzOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWxsXCI6IGpvaW4uYXJnc1tpXS5wdXNoKGNhbGxhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpvaW4ubGlzdGVuYWJsZXNFbWl0dGVkW2ldID0gdHJ1ZTtcbiAgICAgICAgICAgIGpvaW4uYXJnc1tpXSA9IChqb2luLnN0cmF0ZWd5PT09XCJhbGxcIj9bY2FsbGFyZ3NdOmNhbGxhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0SWZBbGxMaXN0ZW5hYmxlc0VtaXR0ZWQoam9pbik7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZW1pdElmQWxsTGlzdGVuYWJsZXNFbWl0dGVkKGpvaW4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpvaW4ubnVtYmVyT2ZMaXN0ZW5hYmxlczsgaSsrKSB7XG4gICAgICAgIGlmICgham9pbi5saXN0ZW5hYmxlc0VtaXR0ZWRbaV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBqb2luLmNhbGxiYWNrLmFwcGx5KGpvaW4ubGlzdGVuZXIsam9pbi5hcmdzKTtcbiAgICByZXNldChqb2luKTtcbn1cbiIsInZhciBSZWZsdXggPSByZXF1aXJlKCcuL2luZGV4Jyk7XG5cblxuLyoqXG4gKiBBIG1peGluIGZhY3RvcnkgZm9yIGEgUmVhY3QgY29tcG9uZW50LiBNZWFudCBhcyBhIG1vcmUgY29udmVuaWVudCB3YXkgb2YgdXNpbmcgdGhlIGBMaXN0ZW5lck1peGluYCxcbiAqIHdpdGhvdXQgaGF2aW5nIHRvIG1hbnVhbGx5IHNldCBsaXN0ZW5lcnMgaW4gdGhlIGBjb21wb25lbnREaWRNb3VudGAgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7QWN0aW9ufFN0b3JlfSBsaXN0ZW5hYmxlIEFuIEFjdGlvbiBvciBTdG9yZSB0aGF0IHNob3VsZCBiZVxuICogIGxpc3RlbmVkIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBldmVudCBoYW5kbGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZGVmYXVsdENhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBkZWZhdWx0IGhhbmRsZXJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCB0byBiZSB1c2VkIGFzIGEgbWl4aW4sIHdoaWNoIHNldHMgdXAgdGhlIGxpc3RlbmVyIGZvciB0aGUgZ2l2ZW4gbGlzdGVuYWJsZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0ZW5hYmxlLGNhbGxiYWNrLGluaXRpYWwpe1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdXAgdGhlIG1peGluIGJlZm9yZSB0aGUgaW5pdGlhbCByZW5kZXJpbmcgb2NjdXJzLiBJbXBvcnQgbWV0aG9kcyBmcm9tIGBMaXN0ZW5lck1ldGhvZHNgXG4gICAgICAgICAqIGFuZCB0aGVuIG1ha2UgdGhlIGNhbGwgdG8gYGxpc3RlblRvYCB3aXRoIHRoZSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZhY3RvcnkgZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvcih2YXIgbSBpbiBSZWZsdXguTGlzdGVuZXJNZXRob2RzKXtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1ttXSAhPT0gUmVmbHV4Lkxpc3RlbmVyTWV0aG9kc1ttXSl7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW21dKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiQ2FuJ3QgaGF2ZSBvdGhlciBwcm9wZXJ0eSAnXCIrbStcIicgd2hlbiB1c2luZyBSZWZsdXgubGlzdGVuVG8hXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1ttXSA9IFJlZmx1eC5MaXN0ZW5lck1ldGhvZHNbbV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhsaXN0ZW5hYmxlLGNhbGxiYWNrLGluaXRpYWwpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYW5zIHVwIGFsbCBsaXN0ZW5lciBwcmV2aW91c2x5IHJlZ2lzdGVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnRXaWxsVW5tb3VudDogUmVmbHV4Lkxpc3RlbmVyTWV0aG9kcy5zdG9wTGlzdGVuaW5nVG9BbGxcbiAgICB9O1xufTtcbiIsInZhciBSZWZsdXggPSByZXF1aXJlKCcuL2luZGV4Jyk7XG5cbi8qKlxuICogQSBtaXhpbiBmYWN0b3J5IGZvciBhIFJlYWN0IGNvbXBvbmVudC4gTWVhbnQgYXMgYSBtb3JlIGNvbnZlbmllbnQgd2F5IG9mIHVzaW5nIHRoZSBgbGlzdGVuZXJNaXhpbmAsXG4gKiB3aXRob3V0IGhhdmluZyB0byBtYW51YWxseSBzZXQgbGlzdGVuZXJzIGluIHRoZSBgY29tcG9uZW50RGlkTW91bnRgIG1ldGhvZC4gVGhpcyB2ZXJzaW9uIGlzIHVzZWRcbiAqIHRvIGF1dG9tYXRpY2FsbHkgc2V0IHVwIGEgYGxpc3RlblRvTWFueWAgY2FsbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbGlzdGVuYWJsZXMgQW4gb2JqZWN0IG9mIGxpc3RlbmFibGVzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgdG8gYmUgdXNlZCBhcyBhIG1peGluLCB3aGljaCBzZXRzIHVwIHRoZSBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBsaXN0ZW5hYmxlcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0ZW5hYmxlcyl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB1cCB0aGUgbWl4aW4gYmVmb3JlIHRoZSBpbml0aWFsIHJlbmRlcmluZyBvY2N1cnMuIEltcG9ydCBtZXRob2RzIGZyb20gYExpc3RlbmVyTWV0aG9kc2BcbiAgICAgICAgICogYW5kIHRoZW4gbWFrZSB0aGUgY2FsbCB0byBgbGlzdGVuVG9gIHdpdGggdGhlIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yKHZhciBtIGluIFJlZmx1eC5MaXN0ZW5lck1ldGhvZHMpe1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW21dICE9PSBSZWZsdXguTGlzdGVuZXJNZXRob2RzW21dKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbbV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJDYW4ndCBoYXZlIG90aGVyIHByb3BlcnR5ICdcIittK1wiJyB3aGVuIHVzaW5nIFJlZmx1eC5saXN0ZW5Ub01hbnkhXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1ttXSA9IFJlZmx1eC5MaXN0ZW5lck1ldGhvZHNbbV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5saXN0ZW5Ub01hbnkobGlzdGVuYWJsZXMpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYW5zIHVwIGFsbCBsaXN0ZW5lciBwcmV2aW91c2x5IHJlZ2lzdGVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnRXaWxsVW5tb3VudDogUmVmbHV4Lkxpc3RlbmVyTWV0aG9kcy5zdG9wTGlzdGVuaW5nVG9BbGxcbiAgICB9O1xufTtcbiIsInZhciBfID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1peChkZWYpIHtcbiAgICB2YXIgY29tcG9zZWQgPSB7XG4gICAgICAgIGluaXQ6IFtdLFxuICAgICAgICBwcmVFbWl0OiBbXSxcbiAgICAgICAgc2hvdWxkRW1pdDogW11cbiAgICB9O1xuXG4gICAgdmFyIHVwZGF0ZWQgPSAoZnVuY3Rpb24gbWl4RGVmKG1peGluKSB7XG4gICAgICAgIHZhciBtaXhlZCA9IHt9O1xuICAgICAgICBpZiAobWl4aW4ubWl4aW5zKSB7XG4gICAgICAgICAgICBtaXhpbi5taXhpbnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViTWl4aW4pIHtcbiAgICAgICAgICAgICAgICBfLmV4dGVuZChtaXhlZCwgbWl4RGVmKHN1Yk1peGluKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfLmV4dGVuZChtaXhlZCwgbWl4aW4pO1xuICAgICAgICBPYmplY3Qua2V5cyhjb21wb3NlZCkuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9zYWJsZSkge1xuICAgICAgICAgICAgaWYgKG1peGluLmhhc093blByb3BlcnR5KGNvbXBvc2FibGUpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9zZWRbY29tcG9zYWJsZV0ucHVzaChtaXhpbltjb21wb3NhYmxlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWl4ZWQ7XG4gICAgfShkZWYpKTtcblxuICAgIGlmIChjb21wb3NlZC5pbml0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXBkYXRlZC5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICBjb21wb3NlZC5pbml0LmZvckVhY2goZnVuY3Rpb24gKGluaXQpIHtcbiAgICAgICAgICAgICAgICBpbml0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChjb21wb3NlZC5wcmVFbWl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXBkYXRlZC5wcmVFbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2VkLnByZUVtaXQucmVkdWNlKGZ1bmN0aW9uIChhcmdzLCBwcmVFbWl0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gcHJlRW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3VmFsdWUgPT09IHVuZGVmaW5lZCA/IGFyZ3MgOiBbbmV3VmFsdWVdO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoY29tcG9zZWQuc2hvdWxkRW1pdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHVwZGF0ZWQuc2hvdWxkRW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgcmV0dXJuICFjb21wb3NlZC5zaG91bGRFbWl0LnNvbWUoZnVuY3Rpb24gKHNob3VsZEVtaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXNob3VsZEVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoY29tcG9zZWQpLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvc2FibGUpIHtcbiAgICAgICAgaWYgKGNvbXBvc2VkW2NvbXBvc2FibGVdLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdXBkYXRlZFtjb21wb3NhYmxlXSA9IGNvbXBvc2VkW2NvbXBvc2FibGVdWzBdO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbn07XG4iLCIvKlxuICogaXNPYmplY3QsIGV4dGVuZCwgaXNGdW5jdGlvbiwgaXNBcmd1bWVudHMgYXJlIHRha2VuIGZyb20gdW5kZXNjb3JlL2xvZGFzaCBpblxuICogb3JkZXIgdG8gcmVtb3ZlIHRoZSBkZXBlbmRlbmN5XG4gKi9cbnZhciBpc09iamVjdCA9IGV4cG9ydHMuaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG59O1xuXG5leHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICB2YXIgc291cmNlLCBwcm9wO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHByb3ApO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufTtcblxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcblxuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIzJyk7XG5cbmV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufTtcblxuZXhwb3J0cy5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyaW5nKXtcbiAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3N0cmluZy5zbGljZSgxKTtcbn07XG5cbmV4cG9ydHMuY2FsbGJhY2tOYW1lID0gZnVuY3Rpb24oc3RyaW5nKXtcbiAgICByZXR1cm4gXCJvblwiK2V4cG9ydHMuY2FwaXRhbGl6ZShzdHJpbmcpO1xufTtcblxuZXhwb3J0cy5vYmplY3QgPSBmdW5jdGlvbihrZXlzLHZhbHMpe1xuICAgIHZhciBvPXt9LCBpPTA7XG4gICAgZm9yKDtpIDwga2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIG9ba2V5c1tpXV0gPSB2YWxzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbztcbn07XG5cbmV4cG9ydHMuUHJvbWlzZSA9IHJlcXVpcmUoXCJuYXRpdmUtcHJvbWlzZS1vbmx5XCIpO1xuXG5leHBvcnRzLmNyZWF0ZVByb21pc2UgPSBmdW5jdGlvbihyZXNvbHZlcikge1xuICAgIHJldHVybiBuZXcgZXhwb3J0cy5Qcm9taXNlKHJlc29sdmVyKTtcbn07XG5cbmV4cG9ydHMuaXNBcmd1bWVudHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICgnY2FsbGVlJyBpbiB2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcic7XG59O1xuXG5leHBvcnRzLnRocm93SWYgPSBmdW5jdGlvbih2YWwsbXNnKXtcbiAgICBpZiAodmFsKXtcbiAgICAgICAgdGhyb3cgRXJyb3IobXNnfHx2YWwpO1xuICAgIH1cbn07XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG5cbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgbGlzdCA9IHRoaXMubWFwW25hbWVdXG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICBsaXN0ID0gW11cbiAgICAgIHRoaXMubWFwW25hbWVdID0gbGlzdFxuICAgIH1cbiAgICBsaXN0LnB1c2godmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlc1swXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gfHwgW11cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBbbm9ybWFsaXplVmFsdWUodmFsdWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5tYXApLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5tYXBbbmFtZV0uZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKVxuICAgICAgfSwgdGhpcylcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgICB9XG4gICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGZcbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cblxuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICByZXR1cm4gcmVqZWN0ZWQgPyByZWplY3RlZCA6IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdCh1cmwsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHRoaXMudXJsID0gdXJsXG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgb3B0aW9ucy5ib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KG9wdGlvbnMuYm9keSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gaGVhZGVycyh4aHIpIHtcbiAgICB2YXIgaGVhZCA9IG5ldyBIZWFkZXJzKClcbiAgICB2YXIgcGFpcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkudHJpbSgpLnNwbGl0KCdcXG4nKVxuICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB2YXIgc3BsaXQgPSBoZWFkZXIudHJpbSgpLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBzcGxpdC5zaGlmdCgpLnRyaW0oKVxuICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZC5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9KVxuICAgIHJldHVybiBoZWFkXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICAgIHRoaXMudXJsID0gbnVsbFxuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXNcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycyA/IG9wdGlvbnMuaGVhZGVycyA6IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnM7XG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZTtcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICAvLyBUT0RPOiBSZXF1ZXN0IGNvbnN0cnVjdG9yIHNob3VsZCBhY2NlcHQgaW5wdXQsIGluaXRcbiAgICB2YXIgcmVxdWVzdFxuICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSAmJiAhaW5pdCkge1xuICAgICAgcmVxdWVzdCA9IGlucHV0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgZnVuY3Rpb24gcmVzcG9uc2VVUkwoKSB7XG4gICAgICAgIGlmICgncmVzcG9uc2VVUkwnIGluIHhocikge1xuICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VVUkxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF2b2lkIHNlY3VyaXR5IHdhcm5pbmdzIG9uIGdldFJlc3BvbnNlSGVhZGVyIHdoZW4gbm90IGFsbG93ZWQgYnkgQ09SU1xuICAgICAgICBpZiAoL15YLVJlcXVlc3QtVVJMOi9tLnRlc3QoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkge1xuICAgICAgICAgIHJldHVybiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSAoeGhyLnN0YXR1cyA9PT0gMTIyMykgPyAyMDQgOiB4aHIuc3RhdHVzXG4gICAgICAgIGlmIChzdGF0dXMgPCAxMDAgfHwgc3RhdHVzID4gNTk5KSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKHhociksXG4gICAgICAgICAgdXJsOiByZXNwb25zZVVSTCgpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkoKTtcbiIsImxldCBSZWZsdXggPSByZXF1aXJlKCdyZWZsdXgnKTtcblxuaW1wb3J0IHsgc2VhcmNoWW91dHViZSB9IGZyb20gJy4uL21vZHVsZXMnO1xuXG5cbmxldCBBY3Rpb25zID0gUmVmbHV4LmNyZWF0ZUFjdGlvbnMoe1xuICAnc2VhcmNoWW91dHViZUFwaSc6IHsgYXN5bmNSZXN1bHQ6IHRydWUgfSxcbiAgJ2Nsb3NlT3ZlcmxheSc6IHt9LFxuICAnY2hvb3NlVmlkZW8nOiB7fSxcbiAgJ2luaXRZb3V0dWJlQXBpJzp7fSxcbiAgJ2dldFBsYXlsaXN0Jzoge31cbn0pO1xuXG5cbkFjdGlvbnMuc2VhcmNoWW91dHViZUFwaS5saXN0ZW5BbmRQcm9taXNlKHNlYXJjaFlvdXR1YmUpO1xuXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25zO1xuIiwibGV0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmxldCBSZWZsdXggPSByZXF1aXJlKCdyZWZsdXgnKTtcbmxldCBBY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9hY3Rpb25zJyk7XG5cbi8vTWF0ZXJpYWwgVUkgQ29tcG9uZW50c1xubGV0IG11aSA9IHJlcXVpcmUoJ21hdGVyaWFsLXVpJyk7XG5sZXQgVGhlbWVNYW5hZ2VyID0gbmV3IG11aS5TdHlsZXMuVGhlbWVNYW5hZ2VyKCk7XG5sZXQgUmFpc2VkQnV0dG9uID0gbXVpLlJhaXNlZEJ1dHRvbjtcbmxldCBBcHBCYXIgPSBtdWkuQXBwQmFyO1xuXG5cbi8vTW9kdWxlc1xuaW1wb3J0IHsgaW5pdFlvdXR1YmVBcGkgfSBmcm9tICcuLi9tb2R1bGVzJztcblxuLy9TdGFydCB0aGUgeW91dHViZSBBcGkuXG5pbml0WW91dHViZUFwaSgpO1xuXG4vL0N1c3RvbSBjb21wb25lbnRzXG5pbXBvcnQgeyBTZWFyY2gsIFlvdXR1YmUgfSBmcm9tICcuLyc7XG5cbi8vU3RvcmVzXG5sZXQgU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvc3RvcmUnKTtcblxubGV0IEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBtaXhpbnM6IFtcbiAgICBSZWZsdXguY29ubmVjdChTdG9yZSlcbiAgXSxcblxuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlYXJjaEJhck9wZW46IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGNoaWxkQ29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG11aVRoZW1lOiBUaGVtZU1hbmFnZXIuZ2V0Q3VycmVudFRoZW1lKClcbiAgICB9O1xuICB9LFxuXG4gIHRvZ2dsZVNlYXJjaEJhcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlYXJjaEJhck9wZW46ICF0aGlzLnN0YXRlLnNlYXJjaEJhck9wZW5cbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPEFwcEJhciBzdHlsZT17eydiYWNrZ3JvdW5kQ29sb3InOiAnI2U1MmQyNycsICd6SW5kZXgnOiA1MCwgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJyB9fSB0aXRsZT0nWW91dHViZSBQbGF5bGlzdHMnIG9uTGVmdEljb25CdXR0b25Ub3VjaFRhcD17dGhpcy50b2dnbGVTZWFyY2hCYXJ9IGljb25DbGFzc05hbWVSaWdodD1cIm11aWRvY3MtaWNvbi1uYXZpZ2F0aW9uLWV4cGFuZC1tb3JlXCIvPlxuICAgICAgICA8U2VhcmNoIG9wZW49e3RoaXMuc3RhdGUuc2VhcmNoQmFyT3Blbn0gcmVmcz0nU2VhcmNoQmFyJy8+XG4gICAgICAgIDxZb3V0dWJlLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImV4cG9ydCB7IGRlZmF1bHQgYXMgQXBwIH0gZnJvbSAnLi9BcHAuanN4JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2VhcmNoIH0gZnJvbSAnLi9zZWFyY2guanN4JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgWW91dHViZSB9IGZyb20gJy4veW91dHViZS5qc3gnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTZWFyY2hSZXN1bHRzIH0gZnJvbSAnLi9zZWFyY2hSZXN1bHRzLmpzeCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFBsYXllciB9IGZyb20gJy4vcGxheWVyLmpzeCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFBsYXlsaXN0IH0gZnJvbSAnLi9wbGF5bGlzdC5qc3gnO1xuXG4iLCJsZXQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xubGV0IFJlZmx1eCA9IHJlcXVpcmUoJ3JlZmx1eCcpO1xubGV0IEFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL2FjdGlvbnMnKTtcbi8vU3RvcmVzXG5sZXQgU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvc3RvcmUnKTtcblxuLy8gSW5pdGlhbGlzZSB0aGUgdmlkZW8gaGVyZSB1c2luZyBhIGNvbmRpdGlvbmFsIHJlbmRlci5cbi8vIFVzZSBzdGF0ZSB0byBzZXQgdGhlIHZpZGVvT2JqZWN0XG4vLyBhbmQgaW5pdCBhIHZpZGVvIHVzaW5nIEFjdGlvbnMvY29udHJvbGxlZCBieSBzdGF0ZVxuLy8gdG8gYWxsb3cgdGhlIHZpZGVvIHRvIGNoYW5nZS5cblxuLy9JZiB2aWRlbyBwcm9wcyBpcyBibGFuaywgZG8gbm90IHJlbmRlciBpZnJhbWVcbi8vSWYgdGhlcmUgYXJlIHByb3BzL3RoZSBwcm9wcyBjaGFuZ2UsIHJlbmRlciB0aGUgaWZyYW1lLlxuXG52YXIgdlBsYXllcjtcblxubGV0IFBsYXllciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBtaXhpbnM6IFtcbiAgICBSZWZsdXguY29ubmVjdChTdG9yZSlcbiAgXSxcblxuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gIFx0cmV0dXJue1xuICBcdFx0dmlkZW9Qcm9wczoge1xuICBcdFx0XHRpZDogbnVsbFxuICBcdFx0fVxuICBcdH1cbiAgfSxcblxuICBvblBsYXllclJlYWR5KGV2ZW50KSB7XG4gIFx0Y29uc29sZS5sb2coJ29uUGxheWVyUmVhZHknKTtcbiAgICAvLyBldmVudC50YXJnZXQucGxheVZpZGVvKCk7XG4gIH0sXG5cbiAgb25QbGF5ZXJTdGF0ZUNoYW5nZShldmVudCkge1xuICBcdGNvbnNvbGUubG9nKCdvbiBwbGF5ZXIgc3RhdGUgY2huYWdlZCcpO1xuICAgIC8vIGlmIChldmVudC5kYXRhID09IFlULlBsYXllclN0YXRlLlBMQVlJTkcgJiYgIWRvbmUpIHtcbiAgICAvLyAgIHNldFRpbWVvdXQoc3RvcFZpZGVvLCA2MDAwKTtcbiAgICAvLyAgIGRvbmUgPSB0cnVlO1xuICAgIC8vIH1cbiAgfSxcblxuICByZW5kZXIoKSB7XG4gIFx0dmFyIHZpZGVvUHJvcHMgPSB0aGlzLnN0YXRlLnZpZGVvUHJvcHM7XG4gIFx0Y29uc29sZS5sb2codmlkZW9Qcm9wcyk7XG4gIFx0aWYgKHZpZGVvUHJvcHMuaWQgPT09IHVuZGVmaW5lZCB8fCB2aWRlb1Byb3BzLmlkID09PSBudWxsICkge1xuICBcdFx0Z2xvYmFsLm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gKCkgPT4ge1xuXHRcdCAgXHRjb25zb2xlLmxvZygnb25Zb3VUdWJlSWZyYW1lQVBJUmVhZHknKTtcblx0XHQgICAgdlBsYXllciA9IG5ldyBZVC5QbGF5ZXIoJ3lvdXR1YmVWaWRlbycsIHtcblx0XHQgICAgICBoZWlnaHQ6ICczOTAnLFxuXHRcdCAgICAgIHdpZHRoOiAnNjQwJyxcblx0XHQgICAgICB2aWRlb0lkOiAnTTdsYzFVVmYtVkUnLFxuXHRcdCAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgJ29uUmVhZHknOiB0aGlzLm9uUGxheWVyUmVhZHksXG4gICAgICAgICAgICAnb25TdGF0ZUNoYW5nZSc6IHRoaXMub25QbGF5ZXJTdGF0ZUNoYW5nZVxuICAgICAgICAgIH1cblx0XHQgICAgfSk7XG4gIFx0XHR9XG4gIFx0fSBlbHNlIHtcblx0XHRcdC8vTG9hZCBpbiB0aGUgdmlkZW8gYnkgSUQgaGVyZS5cblx0XHRcdGNvbnNvbGUubG9nKHZQbGF5ZXIpO1xuXHRcdFx0dlBsYXllci5sb2FkVmlkZW9CeUlkKFwiYkhRcXZZeTVLWW9cIiwgNSwgXCJsYXJnZVwiKVxuICBcdH1cblxuICAgIHJldHVybiAoXG4gICAgXHQ8ZGl2PlxuICAgIFx0XHQ8ZGl2IGlkPVwieW91dHViZVZpZGVvXCI+PC9kaXY+XG4gICAgICBcdDxwIHZpZGVvUHJvcHM9e3RoaXMuc3RhdGUudmlkZW9Qcm9wc30+e3RoaXMucHJvcHMudmlkZW9Qcm9wc308L3A+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XG4iLCJsZXQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xubGV0IFJlZmx1eCA9IHJlcXVpcmUoJ3JlZmx1eCcpO1xubGV0IEFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL2FjdGlvbnMnKTtcbi8vU3RvcmVzXG5sZXQgU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvc3RvcmUnKTtcblxuXG5sZXQgUGxheWxpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgbWl4aW5zOiBbXG4gICAgUmVmbHV4LmNvbm5lY3QoU3RvcmUpXG4gIF0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzOiB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBpdGVtczogW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICBcdDxkaXY+XG4gICAgICBcdDxoND5QbGF5bGlzdCBoZXJlPC9oND5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXlsaXN0O1xuIiwibGV0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmxldCBSZWZsdXggPSByZXF1aXJlKCdyZWZsdXgnKTtcbmxldCBBY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9hY3Rpb25zJyk7XG5cbi8vTW9kdWxlc1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICcuLi9tb2R1bGVzJztcblxuLy9Db21wb25lbnRzXG5sZXQgbXVpID0gcmVxdWlyZSgnbWF0ZXJpYWwtdWknKTtcbmxldCBUaGVtZU1hbmFnZXIgPSBuZXcgbXVpLlN0eWxlcy5UaGVtZU1hbmFnZXIoKTtcbmxldCBUZXh0RmllbGQgPSBtdWkuVGV4dEZpZWxkO1xuaW1wb3J0IHsgU2VhcmNoUmVzdWx0cyB9IGZyb20gJy4vJ1xuXG5sZXQgU2VhcmNoID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBfaGFuZGxlSW5wdXRDaGFuZ2UoKSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5yZWZzLnNlYXJjaEJhci5nZXRWYWx1ZSgpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMucmVmcy5zZWFyY2hCYXIuZ2V0VmFsdWUoKSk7XG4gICAgdGhyb3R0bGUoQWN0aW9ucy5zZWFyY2hZb3V0dWJlQXBpKHF1ZXJ5KSwgNjAwKTtcbiAgfSxcblxuICBvdmVybGF5Q2xpY2soKSB7XG4gIFx0Y29uc29sZS5sb2coJ292ZXJsYXkgY2xpY2snKTtcbiAgXHRBY3Rpb25zLmNsb3NlT3ZlcmxheSgpO1xuICB9LFxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgIFx0PGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMub3BlbiA/ICdzZWFyY2hXcmFwcGVyIG9wZW4nIDogJ3NlYXJjaFdyYXBwZXInfT5cblx0ICAgICAgPGRpdiBjbGFzc05hbWU9J3NlYXJjaCcgPlxuXHQgICAgICAgIDxoMz5TZWFyY2guLi48L2gzPlxuXHQgICAgICAgIDxUZXh0RmllbGQgaGludFRleHQ9XCJHZW9mZiBSb3dsZXlcIiBvbkNoYW5nZT17dGhpcy5faGFuZGxlSW5wdXRDaGFuZ2V9IHJlZj1cInNlYXJjaEJhclwiIC8+XG5cdCAgICAgICAgPFNlYXJjaFJlc3VsdHMvPlxuXHQgICAgICA8L2Rpdj5cblx0ICAgICAgPGRpdj5cblx0ICAgICAgXHQ8ZGl2IGNsYXNzTmFtZT0nc2VhcmNoT3ZlcmxheScgb25DbGljaz17dGhpcy5vdmVybGF5Q2xpY2t9Lz5cblx0ICAgICAgPC9kaXY+XG5cdCAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2g7XG4iLCJsZXQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xubGV0IFJlZmx1eCA9IHJlcXVpcmUoJ3JlZmx1eCcpO1xubGV0IEFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL2FjdGlvbnMnKTtcblxuLy9Nb2R1bGVzXG5pbXBvcnQgeyBpbml0WW91dHViZVZpZGVvIH0gZnJvbSAnLi4vbW9kdWxlcyc7XG5cbi8vU3RvcmVzXG5sZXQgU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvc3RvcmUnKTtcblxuLy9NYXRlcmlhbCBVSSBDb21wb25lbnRzXG5sZXQgbXVpID0gcmVxdWlyZSgnbWF0ZXJpYWwtdWknKTtcbmxldCBUaGVtZU1hbmFnZXIgPSBuZXcgbXVpLlN0eWxlcy5UaGVtZU1hbmFnZXIoKTtcbmxldCBMaXN0ID0gbXVpLkxpc3Q7XG5sZXQgTGlzdEl0ZW0gPSBtdWkuTGlzdEl0ZW07XG5sZXQgQXZhdGFyID0gbXVpLkF2YXRhcjtcblxuXG5sZXQgU2VhcmNoUmVzdWx0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBtaXhpbnM6IFtcbiAgICBSZWZsdXguY29ubmVjdChTdG9yZSlcbiAgXSxcblxuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdHM6IHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGl0ZW1zOiBbXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gXHRjaG9vc2VWaWRlbyhpKSB7XG4gXHRcdGxldCB2aWRlb0RhdGEgPSB0aGlzLnN0YXRlLnJlc3VsdHMuZGF0YS5pdGVtc1tpXTtcbiBcdFx0bGV0IHZpZGVvSUQgPSB2aWRlb0RhdGEuaWQudmlkZW9JZDtcbiBcdFx0QWN0aW9ucy5jaG9vc2VWaWRlbyh2aWRlb0lEKTtcbiBcdFx0QWN0aW9ucy5jbG9zZU92ZXJsYXkoKTtcbiBcdH0sXG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCByZXN1bHRzID0gdGhpcy5zdGF0ZS5yZXN1bHRzLmRhdGEuaXRlbXM7XG4gICAgbGV0IHJlc3VsdHNMaXN0ID0gcmVzdWx0cy5tYXAoZnVuY3Rpb24gKGRhdGEsIGkpe1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExpc3RJdGVtXG4gICAgICAgIFx0Y2xhc3NOYW1lPVwicmVzdWx0c0l0ZW1cIlxuICAgICAgICBcdG9uQ2xpY2s9e3RoaXMuY2hvb3NlVmlkZW8uYmluZChkYXRhLCBpKX1cbiAgICAgICAgXHRzZWNvbmRhcnlUZXh0PXtcbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICB7ZGF0YS5zbmlwcGV0LmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIH1cbiAgICAgICAgICBzZWNvbmRhcnlUZXh0TGluZXM9ezJ9XG4gICAgICAgICAgbGVmdEF2YXRhcj17PEF2YXRhciBzcmM9e2RhdGEuc25pcHBldC50aHVtYm5haWxzLmRlZmF1bHQudXJsfSAvPn0+XG4gICAgICAgICAge2RhdGEuc25pcHBldC50aXRsZX1cbiAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgIClcbiAgICB9LCB0aGlzKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TGlzdCBjbGFzc05hbWU9J3Jlc3VsdHMnPlxuICAgICAgICB7cmVzdWx0c0xpc3R9XG4gICAgICA8L0xpc3Q+XG4gICAgKVxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUmVzdWx0cztcbiIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5sZXQgQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvYWN0aW9ucycpO1xuXG4vL0N1c3RvbSBjb21wb25lbnRzXG5pbXBvcnQgeyBQbGF5ZXIsIFBsYXlsaXN0IH0gZnJvbSAnLi8nO1xuXG4vL1N0b3Jlc1xubGV0IFN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL3N0b3JlJyk7XG5cbmxldCBZb3V0dWJlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG5cdG1peGluczogW1xuICAgIFJlZmx1eC5jb25uZWN0KFN0b3JlKVxuICBdLFxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgIFx0PGRpdj5cblx0ICAgICAgPGRpdiBjbGFzc05hbWU9J3BsYXllcldyYXBwZXInPlxuXHQgICAgICAgIDxQbGF5ZXIvPlxuXHQgICAgICA8L2Rpdj5cblx0ICAgICAgPGRpdiBjbGFzc05hbWU9J3BsYXlpc3RXcmFwcGVyJz5cblx0ICAgICAgXHQ8UGxheWxpc3QvPlxuXHQgICAgICA8L2Rpdj5cblx0ICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFlvdXR1YmU7XG4iLCJpbXBvcnQgdGhyb3R0bGUgZnJvbSAnLi90aHJvdHRsZSc7XG5pbXBvcnQgaXNFbXB0eSBmcm9tICcuL2lzRW1wdHknO1xuaW1wb3J0IHNlYXJjaFlvdXR1YmUgZnJvbSAnLi95b3V0dWJlU2VhcmNoQXBpJztcbmltcG9ydCBpbml0WW91dHViZUFwaSBmcm9tICcuL2luaXRZb3V0dWJlQXBpJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXHR0aHJvdHRsZSxcblx0aXNFbXB0eSxcblx0c2VhcmNoWW91dHViZSxcblx0aW5pdFlvdXR1YmVBcGlcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRZb3V0dWJlQXBpKHZpZGVvSWQpIHtcblx0Y29uc29sZS5sb2coJ2luaXQgWW91dHViZSBBcGknKTtcblx0Ly9EbyBhIGNoZWNrIGhlcmUsIGlmIEFQSSwgdGhlbiBjaGFuZ2UgdGhlIElEIGF0dHJpYnV0ZVxuXHQvL29mIHRoZSBpZnJhbWUgdG8gbG9hZCBpbiB0aGUgb3RoZXIgdmlkZW9cblx0bGV0IGQgPSBkb2N1bWVudDtcblx0aWYgKGQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcicpID09IHVuZGVmaW5lZCB8fCBkLmdldEVsZW1lbnRCeUlkKCdwbGF5ZXInKSA9PSBudWxsKSB7XG5cdFx0Ly9HZXQgdGhlIGFwaS5cblx0XHRsZXQgdGFnID0gZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0ICB0YWcuc3JjID0gXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpXCI7XG5cdCAgbGV0IGZpcnN0U2NyaXB0VGFnID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG5cdCAgZmlyc3RTY3JpcHRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFnLCBmaXJzdFNjcmlwdFRhZyk7XG5cblx0ICAvLyAvL1NldCB1cCB0aGUgcGxheWVyLlxuXHQgIC8vIGxldCBwbGF5ZXIgPSBkLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgIC8vIHBsYXllci5jbGFzc05hbWU9J3lvdXR1YmVQbGF5ZXInO1xuXHQgIC8vIHBsYXllci5pZCA9ICdwbGF5ZXInO1xuXHQgIC8vIGxldCAkd3JhcHBlciA9IGQucXVlcnlTZWxlY3RvcignLnBsYXllcicpO1xuXHQgIC8vICR3cmFwcGVyLmFwcGVuZENoaWxkKHBsYXllcik7XG5cdCAgLy8gbGV0IGRvbmUgPSBmYWxzZTtcblx0ICAvLyBnbG9iYWwub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkgPSAoKSA9PiB7XG5cdCAgLy8gXHRjb25zb2xlLmxvZygnb25Zb3VUdWJlSWZyYW1lQVBJUmVhZHknKTtcblx0ICAvLyAgIHBsYXllciA9IG5ldyBZVC5QbGF5ZXIoJ3BsYXllcicsIHtcblx0ICAvLyAgICAgaGVpZ2h0OiAnMzkwJyxcblx0ICAvLyAgICAgd2lkdGg6ICc2NDAnLFxuXHQgIC8vICAgICB2aWRlb0lkOiB2aWRlb0lkLFxuXHQgIC8vICAgICBldmVudHM6IHtcblx0ICAvLyAgICAgICAnb25SZWFkeSc6IG9uUGxheWVyUmVhZHksXG5cdCAgLy8gICAgICAgJ29uU3RhdGVDaGFuZ2UnOiBvblBsYXllclN0YXRlQ2hhbmdlXG5cdCAgLy8gICAgIH1cblx0ICAvLyAgIH0pO1xuXHQgIC8vIH1cblxuXHQgIC8vcGxheWVyIGV2ZW50c1xuXHQgIGxldCBvblBsYXllclJlYWR5ID0gKGV2ZW50KSA9PiB7XG5cdCAgXHRjb25zb2xlLmxvZygnb25QbGF5ZXJSZWFkeScpO1xuXHQgICAgZXZlbnQudGFyZ2V0LnBsYXlWaWRlbygpO1xuXHQgIH1cblxuXHQgIGxldCBvblBsYXllclN0YXRlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG5cdCAgICBpZiAoZXZlbnQuZGF0YSA9PSBZVC5QbGF5ZXJTdGF0ZS5QTEFZSU5HICYmICFkb25lKSB7XG5cdCAgICAgIHNldFRpbWVvdXQoc3RvcFZpZGVvLCA2MDAwKTtcblx0ICAgICAgZG9uZSA9IHRydWU7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgbGV0IHN0b3BWaWRlbyA9ICgpID0+IHtcblx0ICAgIHBsYXllci5zdG9wVmlkZW8oKTtcblx0ICB9XG5cdH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn0iLCJleHBvcnQgZGVmYXVsdCByZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhdHVzKHJlc3BvbnNlKSB7XG5cdGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuICAgIHJldHVybiByZXNwb25zZVxuICB9IGVsc2Uge1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KVxuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2VcbiAgICB0aHJvdyBlcnJvclxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyb3R0bGUoZm4sIHRocmVzaGhvbGQsIHNjb3BlKSB7XG4gIHRocmVzaGhvbGQgfHwgKHRocmVzaGhvbGQgPSAyNTApO1xuICB2YXIgbGFzdCxcbiAgICAgIGRlZmVyVGltZXI7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnRleHQgPSBzY29wZSB8fCB0aGlzO1xuICBcbiAgICB2YXIgbm93ID0gK25ldyBEYXRlLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aHJlc2hob2xkKSB7XG4gICAgICAvLyBob2xkIG9uIHRvIGl0XG4gICAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgICBkZWZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBub3c7XG4gICAgICBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgc3RhdHVzIGZyb20gJy4vc3RhdHVzJztcbmltcG9ydCBqc29uIGZyb20gJy4vanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlYXJjaFlvdXR1YmUocXVlcnkpIHtcbiAgcmV0dXJuIGZldGNoKGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS95b3V0dWJlL3YzL3NlYXJjaD9wYXJ0PXNuaXBwZXQmbWF4UmVzdWx0cz0xMCZvcmRlcj12aWV3Q291bnQmdHlwZT12aWRlbyZxPSR7cXVlcnl9JmtleT1BSXphU3lBNEY5M3lIUkZIaExBQUIwVjFHcTVGd01MUjdneXAxdkFgKVxuICAudGhlbihzdGF0dXMpXG4gIC50aGVuKGpzb24pXG4gIC50aGVuKChkYXRhKSA9PiAoeyBkYXRhIH0pKTtcbn1cbiIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5sZXQgQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvYWN0aW9ucycpO1xuXG5sZXQgU3RvcmUgPSBSZWZsdXguY3JlYXRlU3RvcmUoe1xuLy9TZXQgdXAgbXVsdGlwbGUgc3RvcmVzIGFzIHRyaWdnZXJzIG9uIHRoaXMgc3RvcmUgYWZmZWN0XG4vL2V2ZXJ5dGhpbmcgbGlzdGVuaW5nIHRvIHRoZW0uXG4gIGxpc3RlbmFibGVzOiBbQWN0aW9uc10sXG5cbiAgaW5pdCgpIHtcbiAgICBjb25zb2xlLmxvZygnc3RvcmUgaW5pdCcpO1xuICB9LFxuXG4gIG9uU2VhcmNoWW91dHViZUFwaUNvbXBsZXRlZChkYXRhKSB7XG4gIFx0Y29uc29sZS5sb2coJ29uc2VhcmNoWW91dHViZUFwaUNvbXBsZXRlZCcpO1xuICBcdHRoaXMudHJpZ2dlcih7XG4gIFx0XHRyZXN1bHRzOiBkYXRhXG4gIFx0fSk7XG4gIH0sXG5cbiAgb25DaG9vc2VWaWRlbyhpZCkge1xuICBcdHRoaXMudHJpZ2dlcih7XG4gIFx0XHR2aWRlb1Byb3BzOiB7XG4gIFx0XHRcdGlkOiBpZFxuICBcdFx0fVxuICBcdH0pO1xuICB9LFxuXG4gIG9uQ2xvc2VPdmVybGF5KCl7XG4gIFx0dGhpcy50cmlnZ2VyKHtcbiAgICAgIHNlYXJjaEJhck9wZW46IGZhbHNlXG4gICAgfSk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmU7XG4iXX0=
